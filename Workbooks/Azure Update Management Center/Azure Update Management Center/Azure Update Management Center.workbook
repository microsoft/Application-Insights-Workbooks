{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "57df95b6-bf4e-43d7-bac0-22f2903ede45",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [],
              "includeAll": false,
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": []
          },
          {
            "id": "05578175-fbe8-4dd2-9c6a-dec2f503d6cf",
            "version": "KqlParameterItem/1.0",
            "name": "Location",
            "type": 8,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": true
            },
            "defaultValue": "value::all"
          },
          {
            "id": "3f095357-8b61-4bd5-bb16-bb03da10f44c",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceType",
            "type": 7,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "microsoft.hybridcompute/machines",
              "microsoft.compute/virtualmachines"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": " [\r\n     { \"value\": \"microsoft.compute/virtualmachines\", \"label\": \"Azure Virtual Machine\", \"selected\":true}, \r\n     \r\n     { \"value\": \"microsoft.hybridcompute/machines\", \"label\": \"Arc enabled server\", \"selected\":true }]"
          },
          {
            "id": "2eeb36dc-a686-4ace-b90f-cfcf141e097b",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 2592000000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 4"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Machines overall status & configurations",
        "expandable": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources \r\n| where location in ({Location})\r\n| extend osType = coalesce(tostring(properties.osName), tostring(properties.osType), tostring(properties.storageProfile.osDisk.osType))\r\n| summarize\r\nazureLinux = countif(type =~ \"microsoft.compute/virtualmachines\" and  osType =~ \"Linux\"),\r\narcLinux = countif(type =~ \"microsoft.hybridcompute/machines\" and osType =~ \"Linux\"),\r\nazureWindows = countif(type =~ \"microsoft.compute/virtualmachines\" and  osType =~ \"Windows\"),\r\narcWindows = countif(type =~ \"microsoft.hybridcompute/machines\" and osType =~ \"Windows\")\r\n| project machinePack = pack(\"Azure virtual machines-Linux\", azureLinux, \"Arc enabled servers-Linux\", arcLinux, \"Azure virtual machines-Windows\", azureWindows, \"Arc enabled servers-Windows\", arcWindows)\r\n| mv-expand machinePack\r\n| extend machine = tostring(bag_keys(machinePack)[0])\r\n| extend count_ = tolong(machinePack[machine])\r\n| project machine, count_ ",
              "size": 2,
              "title": "Total machines across subscriptions",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart",
              "tileSettings": {
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "mapSettings": {
                "locInfo": "LatLong",
                "sizeSettings": "azureLinux",
                "sizeAggregation": "Sum",
                "legendMetric": "azureLinux",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "type": "heatmap",
                  "colorAggregation": "Sum",
                  "nodeColorField": "azureLinux",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "customWidth": "50",
            "name": "query - 0",
            "styleSettings": {
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type in~ ({ResourceType})\r\n| where location in~ ({Location})\r\n| extend statuso = iff(isnull(properties.extended.instanceView.powerState.displayStatus), (properties.status), (properties.extended.instanceView.powerState.displayStatus))\r\n| where isnotnull(statuso)\r\n| summarize count() by tostring(statuso)",
              "size": 0,
              "title": "Status of machines",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "statuso",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": false,
                "sortCriteriaField": "statuso",
                "sortOrderField": 2
              }
            },
            "customWidth": "50",
            "name": "query - 7",
            "styleSettings": {
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type in ({ResourceType})\r\n| where location in ({Location})\r\n| extend assessMode = iff(isnull(properties.osProfile.windowsConfiguration.patchSettings.assessmentMode), properties.osProfile.linuxConfiguration.patchSettings.assessmentMode,  properties.osProfile.windowsConfiguration.patchSettings.assessmentMode)\r\n| extend periodicAssessment = iff(isnotnull(assessMode) and assessMode =~ \"AutomaticByPlatform\", \"Yes\", \"No\")\r\n| summarize count() by periodicAssessment",
              "size": 2,
              "title": "Periodic assessment enabled for Azure virtual machines and Arc enabled servers",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart",
              "gridSettings": {
                "sortBy": [
                  {
                    "itemKey": "count_",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "periodicAssessment",
                    "label": "Periodic Assessment"
                  },
                  {
                    "columnId": "count_",
                    "label": "Machines count"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "count_",
                  "sortOrder": 1
                }
              ],
              "chartSettings": {
                "showLegend": true
              }
            },
            "customWidth": "50",
            "name": "query - 6",
            "styleSettings": {
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where location in ({Location})\r\n| where type == \"microsoft.compute/virtualmachines\"\r\n| extend patchMode = iff(properties.storageProfile.osDisk.osType =~ \"windows\", properties.osProfile.windowsConfiguration.patchSettings.patchMode, properties.osProfile.linuxConfiguration.patchSettings.patchMode)\r\n| summarize count() by tostring(patchMode)",
              "size": 2,
              "title": "Patch orchestration configuration of Azure  virtual machines",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart",
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "",
                    "label": "Unknown",
                    "color": "gray"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 1",
            "styleSettings": {
              "maxWidth": "50%"
            }
          }
        ]
      },
      "name": "confGroup",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Updates Data Overview",
        "expandable": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "\r\n(resources //join of virtual machines, you can play with params as you see fit.\r\n| where type in~ ({ResourceType})\r\n| where location in ({Location})\r\n| extend os = iff(type =~ \"microsoft.compute/virtualmachines\", tolower(tostring(properties.storageProfile.osDisk.osType)), tolower(coalesce(tostring(properties.osName), tostring(properties.osType))))\r\n| extend id=tolower(id)\r\n| extend status=iff(type =~ \"microsoft.compute/virtualmachines\", properties.extended.instanceView.powerState.displayStatus, properties.status)\r\n| project id, name, os, status, resourceProperties=properties)\r\n| join kind=leftouter //finally, making a left outer join to fetch updates details from patchassessment\r\n((patchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults\", \"microsoft.hybridcompute/machines/patchassessmentresults\")\r\n| where location in ({Location})\r\n| where properties.status == \"Succeeded\"\r\n| parse id with resourceId \"/patchAssessmentResults\" *\r\n| extend resourceId=tolower(resourceId)\r\n| project resourceId, assessProperties=properties))\r\non $left.id == $right.resourceId //join on resources id & patchassessment id that is parsed.\r\n| summarize\r\ntotal = countif(1 == 1),\r\nnodata = countif(isnull(assessProperties) == true),\r\npendingReboot = countif(isnotnull(assessProperties) and assessProperties.rebootPending == \"true\"),\r\n//pendingUpdates - when any classification has > 0 updates\r\npendingUpdatesWindows = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Windows\" and (assessProperties.availablePatchCountByClassification.critical>0 or assessProperties.availablePatchCountByClassification.security>0 or assessProperties.availablePatchCountByClassification.updateRollup>0 or assessProperties.availablePatchCountByClassification.featurePack>0 or assessProperties.availablePatchCountByClassification.servicePack>0 or assessProperties.availablePatchCountByClassification.definition>0 or assessProperties.availablePatchCountByClassification.tools>0 or assessProperties.availablePatchCountByClassification.updates>0)),\r\npendingUpdatesLinux = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Linux\" and (assessProperties.availablePatchCountByClassification.security>0 or assessProperties.availablePatchCountByClassification.other>0)),\r\n//noPendingUpdates - when all classifications has 0 updates\r\nnoPendingUpdatesWindows = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Windows\" and (assessProperties.availablePatchCountByClassification.critical==0 and assessProperties.availablePatchCountByClassification.security==0 and assessProperties.availablePatchCountByClassification.updateRollup==0 and assessProperties.availablePatchCountByClassification.featurePack==0 and assessProperties.availablePatchCountByClassification.servicePack==0 and assessProperties.availablePatchCountByClassification.definition==0 and assessProperties.availablePatchCountByClassification.tools==0 and assessProperties.availablePatchCountByClassification.updates==0)),\r\nnoPendingUpdatesLinux = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Linux\" and (assessProperties.availablePatchCountByClassification.security==0 and assessProperties.availablePatchCountByClassification.other==0))\r\n| project machinePack = pack(\"No updates available - Linux\", noPendingUpdatesLinux,  \"No updates available - Windows\", noPendingUpdatesWindows,  \"Updates available - Linux\", pendingUpdatesLinux,  \"Updates available - Windows\", pendingUpdatesWindows, \"Reboot required\", pendingReboot,  \"No updates data\", nodata, \"Total machines\", total)\r\n| mv-expand machinePack\r\n| extend machine = tostring(bag_keys(machinePack)[0])\r\n| extend count_ = tolong(machinePack[machine])\r\n| project machine, count_ \r\n",
              "size": 4,
              "title": "Updates status of machines",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "machine",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": false,
                "sortCriteriaField": "count_",
                "sortOrderField": 2,
                "size": "auto"
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "machine",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "count_",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "mapSettings": {
                "locInfo": "LatLong",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "type": "heatmap",
                  "colorAggregation": "Sum",
                  "nodeColorField": "count_",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "name": "query - 5"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type in~ ({ResourceType})\r\n| where location in ({Location})\r\n| extend joinId = tolower(id)\r\n| project joinId\r\n| join kind=leftouter\r\n(\r\npatchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults\", \"microsoft.hybridcompute/machines/patchassessmentresults\")\r\n| extend assessment = properties.availablePatchCountByClassification\r\n| where isnotnull(assessment)\r\n| parse id with resourceId \"/patchAssessmentResults\" *\r\n| extend joinId=tolower(resourceId)\r\n) on $left.joinId == $right.joinId\r\n| summarize\r\ntotal = 0,\r\nsecurityWindowsUpdates = sumif(toint(assessment.security), (isnotnull(properties) and properties.osType =~ \"Windows\" and (assessment.security>0))),\r\ncriticalWindowsUpdates = sumif(toint(assessment.critical), (isnotnull(properties) and properties.osType =~ \"Windows\" and (assessment.critical>0))),\r\nsecurityLinuxUpdates = sumif(toint(assessment.security), (isnotnull(properties) and properties.osType =~ \"Linux\" and (assessment.security>0))),\r\notherLinuxUpdates = sumif(toint(assessment.other), (isnotnull(properties) and properties.osType =~ \"Linux\" and (assessment.other>0))),\r\notherWindowsUpdates = sumif(toint(assessment.updateRollup) + toint(assessment.featurePack) + toint(assessment.servicePack) + toint(assessment.definition) +\r\ntoint(assessment.tools) + toint(assessment.updates), isnotnull(properties) and properties.osType =~ \"Windows\" and\r\n(assessment.updateRollup>0 or assessment.featurePack>0 or assessment.servicePack>0 or assessment.definition>0 or assessment.tools>0 or assessment.updates>0))",
              "size": 0,
              "title": "Pending Windows and Linux updates by classification ",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "unstackedbar",
              "tileSettings": {
                "showBorder": false
              },
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "criticalWindowsUpdates",
                    "label": "Critical updates - Windows",
                    "color": "orange"
                  },
                  {
                    "seriesName": "securityLinuxUpdates",
                    "label": "Security updates - Linux",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "otherLinuxUpdates",
                    "label": "Other updates - Linux",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "otherWindowsUpdates",
                    "label": "Other updates - Windows",
                    "color": "gray"
                  },
                  {
                    "seriesName": "securityWindowsUpdates",
                    "label": "Security updates - Windows",
                    "color": "redBright"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 4",
            "styleSettings": {
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type in~ ({ResourceType})\r\n| where location in ({Location})\r\n| extend joinId = tolower(id)\r\n| project joinId\r\n| join kind=leftouter\r\n(\r\npatchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults\", \"microsoft.hybridcompute/machines/patchassessmentresults\")\r\n| extend assessment = properties.availablePatchCountByClassification\r\n| where isnotnull(assessment)\r\n| parse id with resourceId \"/patchAssessmentResults\" *\r\n| extend joinId=tolower(resourceId)\r\n) on $left.joinId == $right.joinId\r\n| summarize\r\ntotal = 0,\r\nsecurityWindowsMachines = countif(isnotnull(properties) and properties.osType =~ \"Windows\" and (assessment.security>0)),\r\ncriticalWindowsMachines = countif(isnotnull(properties) and properties.osType =~ \"Windows\" and (assessment.critical>0)),\r\notherWindowsMachines = countif(isnotnull(properties) and properties.osType =~ \"Windows\" and (assessment.updateRollup>0 or assessment.featurePack>0 or assessment.servicePack>0 or assessment.definition>0 or assessment.tools>0 or assessment.updates>0)),\r\nsecurityLinuxMachines = countif(isnotnull(properties) and properties.osType =~ \"Linux\" and (assessment.security>0)),\r\notherLinuxMachines = countif(isnotnull(properties) and properties.osType =~ \"Linux\" and (assessment.other>0))\r\n",
              "size": 0,
              "title": "Machines with Pending Updates by classification",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "unstackedbar",
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "criticalWindowsMachines",
                    "label": "Critical - Windows",
                    "color": "orange"
                  },
                  {
                    "seriesName": "otherWindowsMachines",
                    "label": "Other - Windows",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "securityLinuxMachines",
                    "label": "Security - Linux",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "otherLinuxMachines",
                    "label": "Other - Linux",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "securityWindowsMachines",
                    "label": "Security - Windows",
                    "color": "redBright"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 3",
            "styleSettings": {
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type in~ ({ResourceType})\r\n| where location in~ ({Location})\r\n| extend joinId = tolower(id)\r\n| project joinId\r\n| join kind=inner \r\n(\r\npatchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults/softwarepatches\", \"microsoft.hybridcompute/machines/patchassessmentresults/softwarepatches\")\r\n| extend id = tolower(id)\r\n| parse id with resourceId \"/patchassessmentresults\" *\r\n| extend joinId=tolower(resourceId)\r\n| where isnotnull(properties.kbId)\r\n| extend MissingUpdate = tostring(properties.patchName)\r\n| extend Classification = tostring(properties.classifications[0])\r\n| project joinId, MissingUpdate, Classification\r\n) \r\non $left.joinId == $right.joinId\r\n| summarize Machines = count() by MissingUpdate, Classification\r\n| order by Machines desc\r\n| take 10\r\n",
              "size": 0,
              "title": "Top 10 Pending Windows Updates (by machine count)",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "table",
              "gridSettings": {
                "sortBy": [
                  {
                    "itemKey": "Classification",
                    "sortOrder": 2
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "MissingUpdate",
                    "label": "Missing update"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "Classification",
                  "sortOrder": 2
                }
              ],
              "tileSettings": {
                "showBorder": false,
                "titleContent": {
                  "columnMatch": "properties_patchName",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "properties_patchName",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "count_",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "nodeIdField": "properties_patchName",
                "sourceIdField": "properties_patchName",
                "targetIdField": "count_",
                "graphOrientation": 3,
                "showOrientationToggles": false,
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": null,
                "hivesMargin": 5
              },
              "mapSettings": {
                "locInfo": "LatLong",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "type": "heatmap",
                  "colorAggregation": "Sum",
                  "nodeColorField": "count_",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "customWidth": "50",
            "name": "query - 9",
            "styleSettings": {
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type in~ ({ResourceType})\r\n| where location in~ ({Location})\r\n| extend joinId = tolower(id)\r\n| project joinId\r\n| join kind=inner \r\n(\r\npatchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults/softwarepatches\", \"microsoft.hybridcompute/machines/patchassessmentresults/softwarepatches\")\r\n| extend id = tolower(id)\r\n| parse id with resourceId \"/patchassessmentresults\" *\r\n| extend joinId=tolower(resourceId)\r\n| where isnull(properties.kbId)\r\n| extend MissingUpdate = tostring(properties.patchName)\r\n| extend Classification = tostring(properties.classifications[0])\r\n| project joinId, MissingUpdate, Classification\r\n) \r\non $left.joinId == $right.joinId\r\n| summarize Machines = count() by MissingUpdate, Classification\r\n| order by Machines desc\r\n| take 10",
              "size": 0,
              "title": "Top 10 Pending Linux Updates (by machine count)",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "table",
              "gridSettings": {
                "sortBy": [
                  {
                    "itemKey": "Machines",
                    "sortOrder": 2
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "MissingUpdate",
                    "label": "Missing update"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "Machines",
                  "sortOrder": 2
                }
              ]
            },
            "customWidth": "50",
            "name": "query - 10",
            "styleSettings": {
              "maxWidth": "50%"
            }
          }
        ]
      },
      "name": "updatesGroup",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Schedules/Maintenance configurations",
        "expandable": true,
        "items": [
          {
            "type": 1,
            "content": {
              "json": "This section is dynamic, by selecting a row that row's Maintenance configuration id will be exported to populate Machines attached to the configuration within AUM space.\r\n\r\n"
            },
            "name": "text - 12"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where ['type'] =~ \"microsoft.maintenance/maintenanceconfigurations\"\r\n| where location in ({Location})\r\n| where properties.maintenanceScope == \"InGuestPatch\"\r\n| project id, name, location, tostring(properties.maintenanceWindow.duration),  tostring(properties.maintenanceWindow.timeZone), tostring(properties.maintenanceWindow.startDateTime), tostring(properties.maintenanceWindow.recurEvery)",
              "size": 0,
              "title": "Distinct schedules/maintenance configurations within AUM",
              "exportFieldName": "id",
              "exportParameterName": "maintenanceConfigurationID",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "name",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "turquoise"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "id",
                    "label": "Maintenance configuration"
                  },
                  {
                    "columnId": "name",
                    "label": "Name"
                  },
                  {
                    "columnId": "location",
                    "label": "Location"
                  },
                  {
                    "columnId": "properties_maintenanceWindow_duration",
                    "label": "Duration"
                  },
                  {
                    "columnId": "properties_maintenanceWindow_timeZone",
                    "label": "Timezone"
                  },
                  {
                    "columnId": "properties_maintenanceWindow_startDateTime",
                    "label": "Start date time"
                  },
                  {
                    "columnId": "properties_maintenanceWindow_recurEvery",
                    "label": "Recurrence"
                  }
                ]
              },
              "sortBy": []
            },
            "name": "query - 8"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "maintenanceresources\r\n| where ['type'] =~ \"microsoft.maintenance/configurationassignments\"\r\n| where location in ({Location})\r\n| where properties.maintenanceConfigurationId =~ '{maintenanceConfigurationID}'\r\n| distinct tostring(tolower(properties.resourceId))",
              "size": 0,
              "title": "Machines attached to the configuration selected above. (Please select a distinct schedule from the above table.)",
              "noDataMessage": "No machines attached to this schedule.",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::selected"
              ],
              "gridSettings": {
                "labelSettings": [
                  {
                    "columnId": "Column1",
                    "label": "Machine resource id"
                  }
                ]
              }
            },
            "name": "query - 11"
          }
        ]
      },
      "name": "maintenanceGroup",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "History of Installation runs",
        "expandable": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "patchinstallationresources\r\n| where location in ({Location})\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchinstallationresults\", \"microsoft.hybridcompute/machines/patchinstallationresults\")\r\n| where properties.lastModifiedDateTime {TimeRange}\r\n| summarize count() by tostring(properties.status)",
              "size": 3,
              "title": "Update installation status by machine runs",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "type",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": false,
                "sortCriteriaField": "count_",
                "sortOrderField": 2,
                "size": "auto"
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "type",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "count_",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "InProgress",
                    "label": "In progress",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Failed",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Succeeded",
                    "color": "green"
                  },
                  {
                    "seriesName": "CompletedWithWarnings",
                    "label": "Completed with warnings"
                  }
                ]
              },
              "mapSettings": {
                "locInfo": "LatLong",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "type": "heatmap",
                  "colorAggregation": "Sum",
                  "nodeColorField": "count_",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "name": "installationRunStatus"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "maintenanceresources\r\n| where location in~ ({Location})\r\n| where type =~ \"microsoft.maintenance/maintenanceconfigurations/applyupdates\"\r\n| where properties.startDateTime > ago(30d)\r\n| where properties.maintenanceConfiguration.properties.maintenanceScope == \"InGuestPatch\"\r\n| project name, properties, id\r\n| extend joinId = tolower(properties.maintenanceConfigurationId)\r\n| join kind=leftouter (\r\n    resources\r\n    | where type =~ \"microsoft.maintenance/maintenanceconfigurations\"\r\n    | where location in~ ({Location})\r\n    | extend maintenanceConfigId = tolower(id)\r\n    | project maintenanceConfigId, tags\r\n) on $left.joinId == $right.maintenanceConfigId\r\n| extend status = tostring(properties.status)\r\n| extend maintenanceConfigurationName = tostring(properties.maintenanceConfiguration.name)\r\n| extend operationStartTime = todatetime(properties.startDateTime)\r\n| extend operationEndTime = iff(properties.status =~ \"InProgress\", datetime(null), todatetime(properties.endDateTime))\r\n| extend maintenanceConfigurationId = properties.maintenanceConfigurationId\r\n| extend scheduleRunId = properties.correlationId\r\n| extend succeededMachinesCount = properties.resourceUpdateSummary.succeeded\r\n| extend totalMachines = properties.resourceUpdateSummary.total\r\n| extend deepLink = strcat(\"https://portal.azure.com/#view/Microsoft_Azure_Automation/UpdateCenterMaintenanceRunHistoryBlade/maintenanceConfigurationId/\",\r\nstrcat_array(split(maintenanceConfigurationId,'/'), \"%2F\"), \"/maintenanceRunId/\", strcat_array(split(scheduleRunId,'/'), \"%2F\"),  \"/maintenanceRunName/\", name)\r\n| project-rename maintenanceRunId = name\r\n| project id, operationStartTime, status, tags, deepLink\r\n| order by operationStartTime desc",
              "size": 0,
              "title": "History by maintenance runs",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "id",
                    "formatter": 1,
                    "formatOptions": {
                      "customColumnWidthSetting": "59.1429ch"
                    }
                  },
                  {
                    "columnMatch": "operationStartTime",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "deepLink",
                    "formatter": 1,
                    "formatOptions": {
                      "linkColumn": "deepLink",
                      "linkTarget": "Url"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "id",
                    "label": "Maintenance run"
                  },
                  {
                    "columnId": "operationStartTime",
                    "label": "Operation start time"
                  },
                  {
                    "columnId": "status",
                    "label": "Status"
                  },
                  {
                    "columnId": "tags",
                    "label": "Tag"
                  },
                  {
                    "columnId": "deepLink",
                    "label": "View maintenance run"
                  }
                ]
              }
            },
            "name": "historyByMaintenance"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "patchinstallationresources\r\n| where type =~ \"microsoft.compute/virtualmachines/patchinstallationresults\" or type =~ \"microsoft.hybridcompute/machines/patchinstallationresults\"\r\n| parse type with typeID \"/patchinstallationresults\"\r\n| where typeID in~ ({ResourceType})\r\n| where properties.lastModifiedDateTime {TimeRange}\r\n| where location in~ ({Location})\r\n| parse id with * 'achines/' resourceName '/patchInstallationResults/' *\r\n| project resourceName, properties.status,properties.startDateTime, properties.lastModifiedDateTime, properties.startedBy,properties\r\n| union\r\n(patchassessmentresources\r\n| where type =~ \"microsoft.compute/virtualmachines/patchassessmentresults\" or type =~  \"microsoft.hybridcompute/machines/patchassessmentresults\"\r\n| parse type with typeID \"/patchinstallationresults\"\r\n| where typeID in~ ({ResourceType})\r\n| where properties.lastModifiedDateTime {TimeRange}\r\n| where location in~ ({Location})\r\n| parse id with * 'achines/' resourceName '/patchAssessmentResults/' *\r\n| project resourceName, properties.status,properties.startDateTime, properties.lastModifiedDateTime, properties.startedBy ,properties)\r\n",
              "size": 0,
              "title": "History by machines",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "properties_status",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "properties_startDateTime",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "properties_lastModifiedDateTime",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "properties_startedBy",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "tags",
                    "formatter": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "resourceName",
                    "label": "Name"
                  },
                  {
                    "columnId": "properties_status",
                    "label": "Status"
                  },
                  {
                    "columnId": "properties_startDateTime",
                    "label": "Start time"
                  },
                  {
                    "columnId": "properties_lastModifiedDateTime",
                    "label": "End time"
                  },
                  {
                    "columnId": "properties_startedBy",
                    "label": "Started by"
                  },
                  {
                    "columnId": "properties",
                    "label": "View run details"
                  }
                ]
              }
            },
            "name": "HistoryByRuns"
          }
        ]
      },
      "name": "historyGroup",
      "styleSettings": {
        "showBorder": true
      }
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}