{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "a762a2ae-beec-4bf5-9f4a-28bea2d2f737",
            "version": "KqlParameterItem/1.0",
            "name": "watcherResourceId",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          },
          {
            "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxClusterUri",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          },
          {
            "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxDatabase",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          }
        ],
        "style": "pills",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "neverShow",
        "comparison": "isNotEqualTo"
      },
      "name": "link_adx_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Data store",
        "expandable": true,
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "83420d36-0646-40aa-9637-d06a3d2a6145",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResource",
                  "type": 1,
                  "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{watcherResourceId}?api-version=2023-03-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":null}",
                  "isHiddenWhenLocked": true,
                  "queryType": 12
                },
                {
                  "id": "a6cd9521-127a-43bd-9227-6bcd67756456",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherName",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.name\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxClusterUri",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.properties.datastore.adxClusterUri\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8,
                  "id": "f0889b5f-3fa4-40a0-838d-443b4c0472b6"
                },
                {
                  "id": "0797c608-2ecf-4711-ba9b-6d110f10acd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxDatabase",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$.properties.datastore.adxDatabaseResourceId\",\"columnid\":\"value\",\"columnType\":\"string\",\"substringRegexMatch\":\".*/(.*)\",\"substringReplace\":\"$1\"}]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "id": "1b7d18f3-88a9-40ed-9162-92710b29ba69",
                  "version": "KqlParameterItem/1.0",
                  "name": "dataStore",
                  "label": "Choose a data store",
                  "type": 10,
                  "description": "By default, the workbook loads data from the data store for the current database watcher. You may use an alternate data store by entering its Kusto query URI and database name.",
                  "isRequired": true,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"[{\\\"value\\\":\\\"watcher\\\",\\\"label\\\":\\\"{watcherName}\\\"},{\\\"value\\\":\\\"alternate\\\",\\\"label\\\":\\\"Alternate\\\"}]\",\"transformers\":null}",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 8,
                  "value": "watcher"
                }
              ],
              "style": "above",
              "queryType": 12
            },
            "customWidth": "30",
            "name": "watcher_adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Kusto query URI: `{watcherAdxClusterUri}` </p>\r\nKusto database: `{watcherAdxDatabase}`"
            },
            "customWidth": "70",
            "conditionalVisibilities": [
              {
                "parameterName": "watcherName",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxDatabase",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "dataStore",
                "comparison": "isEqualTo",
                "value": "watcher"
              }
            ],
            "name": "watcher_data_store"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "bbce4b83-dae6-46e0-bf67-c99ee0ea21f0",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxClusterUri",
                  "label": "Kusto query URI",
                  "type": 1,
                  "description": "Enter a Kusto query URI for the alternate data store. Most commonly, Kusto query URI format is: https://{kusto-cluster-name}.{region}.kusto.windows.net/",
                  "isRequired": true,
                  "value": ""
                },
                {
                  "id": "99cdb447-94d3-40c7-b902-c98628fb736a",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxDatabase",
                  "label": "Kusto database",
                  "type": 1,
                  "description": "Enter a Kusto database name for the alternate data store",
                  "isRequired": true,
                  "value": ""
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "70",
            "conditionalVisibility": {
              "parameterName": "dataStore",
              "comparison": "isEqualTo",
              "value": "alternate"
            },
            "name": "override_adx_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterUri",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxClusterUri",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    }
                  ]
                },
                {
                  "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxDatabase",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxDatabase",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    }
                  ]
                },
                {
                  "id": "c5aca9de-de62-466e-bea8-9a149e935c4f",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterPingResult",
                  "label": "Kusto query URI ping result",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show databases\\r\\n| where DatabaseName == @\\\"{adxDatabase}\\\"\\r\\n| project 1\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "alwaysHidden",
              "comparison": "isNotEqualTo"
            },
            "name": "adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Cannot connect to Kusto query URI `{adxClusterUri}`, database `{adxDatabase}`. The Kusto cluster may be stopped or unreachable, specified cluster URI may be invalid, or permissions may be insufficient.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "adxClusterPingResult",
                "comparison": "isNotEqualTo",
                "value": "1"
              },
              {
                "parameterName": "adxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "adxDatabase",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "missing_data_bad_permissions_text"
          }
        ],
        "exportParameters": true
      },
      "name": "data_store_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "38d18c5b-3cca-4bae-85b7-c74821db1d12",
            "version": "KqlParameterItem/1.0",
            "name": "count_sqlmi_tables",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName startswith \\\"sqlmi_\\\"\\r\\n| summarize cnt = tostring(count())\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "86d12280-d36f-403e-a4f3-3d8676735890",
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_instance_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_instance_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "164fc8bc-15fa-44b2-8bc9-62d640bafe32",
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_resource_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_resource_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "6bb1d339-6528-43fe-83d4-30c0fc035083",
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_performance_counters_common",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_performance_counters_common\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "b62888c4-ef36-4588-8410-08403ec8dd40",
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_database_storage_utilization",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_database_storage_utilization\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "value": null
          },
          {
            "id": "0fd8f0d6-3074-46a8-ba1f-6aa5b9329ad1",
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_database_properties",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_database_properties\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_database_replicas",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_database_replicas\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "045ed2da-4b5a-45e1-bd74-224df68d0a6b",
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "1b995924-1bcd-4dd3-814e-0ec7823439c3",
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_connectivity",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_connectivity\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "6572b327-7490-41ea-b18c-b482d61ed7a4",
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_query_runtime_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_query_runtime_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "3fabebca-5a27-466b-b977-8f29fb6d4933",
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_query_wait_stats",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_query_wait_stats\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "377394db-6a2c-41c1-b2a1-df53141a1da3",
            "value": null
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "sqlmi_storage_io",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName == \\\"sqlmi_storage_io\\\"\\r\\n| project true\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9,
            "id": "88d4914d-95c4-4525-a1b8-b38cc92a7118",
            "value": null
          }
        ],
        "style": "above",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "name": "table_presence_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "290bc25c-7ae2-414b-8e4b-2a06325fe590",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 3600000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "ca4863e4-64e2-42fc-bf8a-7a158256911b",
            "version": "KqlParameterItem/1.0",
            "name": "managedInstanceNameFilterValue",
            "label": "Instance",
            "type": 1,
            "description": "Enter a value to filter by full or partial machine name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Machine name filter value may not contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": ""
          },
          {
            "id": "9353f345-7d22-419c-b9cf-a39647fff8fd",
            "version": "KqlParameterItem/1.0",
            "name": "matchPattern",
            "label": "Match pattern",
            "type": 2,
            "description": "Select a string match operator to filter by instance name",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    {\"value\":\"startswith\",\"label\":\"starts with\"},\r\n    {\"value\":\"contains\",\"label\":\"contains\"},\r\n    {\"value\":\"endswith\",\"label\":\"ends with\"},\r\n    {\"value\":\"!startswith\",\"label\":\"does not start with\"},\r\n    {\"value\":\"!contains\",\"label\":\"does not contain\"},\r\n    {\"value\":\"!endswith\",\"label\":\"does not end with\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "contains"
          },
          {
            "id": "7fc24d10-032f-4d35-950c-ca95e354c95a",
            "version": "KqlParameterItem/1.0",
            "name": "managedInstanceNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "managedInstanceNameFilterValue",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no managed_instance_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "| where managed_instance_name startswith @\"{managedInstanceNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "| where managed_instance_name contains @\"{managedInstanceNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "| where managed_instance_name endswith @\"{managedInstanceNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "| where managed_instance_name !startswith @\"{managedInstanceNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "| where managed_instance_name !contains @\"{managedInstanceNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "| where managed_instance_name !endswith @\"{managedInstanceNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no managed_instance_name filter"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "f245be88-fc0c-4d15-8f8a-9df59dc79433",
            "version": "KqlParameterItem/1.0",
            "name": "haReplica",
            "label": "Show HA secondary",
            "type": 10,
            "description": "Set to Yes to show data from the readable high availability replicas, if any",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"false\",\"label\":\"No\"},{\"value\":\"true\",\"label\":\"Yes\"}]",
            "value": "false"
          },
          {
            "id": "af2747c0-e919-4558-ac14-bbb8130320a1",
            "version": "KqlParameterItem/1.0",
            "name": "showDescriptions",
            "label": "Show descriptions",
            "type": 10,
            "description": "Shows descriptions next to charts",
            "isRequired": true,
            "isGlobal": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"true\",\"label\":\"Yes\"},{\"value\":\"false\",\"label\":\"No\"}]",
            "value": "false"
          },
          {
            "id": "0183848b-e820-4d26-8264-5eaf9e65e6b9",
            "version": "KqlParameterItem/1.0",
            "name": "grainFactor",
            "label": "Grain factor",
            "type": 2,
            "description": "Higher time grain provides more details on charts when granular data exists.",
            "isRequired": true,
            "value": "4",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3},{\"value\":4,\"label\":4},{\"value\":5,\"label\":5},{\"value\":6,\"label\":6}]"
          },
          {
            "id": "5308da78-e372-4f1a-a428-c0bedd9c2f3a",
            "version": "KqlParameterItem/1.0",
            "name": "tabName",
            "type": 1,
            "value": "Heatmaps",
            "isHiddenWhenLocked": true
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "count_sqlmi_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Overview",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let time_range = datatable(key:int, time_range_start:datetime, time_range_end:datetime) [\\r\\n1, datetime(\\\"{timeRange:startISO}\\\"), datetime(\\\"{timeRange:endISO}\\\")\\r\\n];\\r\\nlet target_count = toscalar(\\r\\nsqlmi_instance_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| project sample_time_utc, managed_instance_name\\r\\n| summarize total_targets = dcount(managed_instance_name)\\r\\n);\\r\\ntime_range\\r\\n| project time_range_start, time_range_end, time_range_duration = datetime_diff('second', time_range_end, time_range_start), target_count, last_refresh_time = now(), ingestion_stats_link = \\\"Community-Workbooks/Database watcher/Ingestion stats\\\", adx_link = strcat(trim_end(\\\"/\\\", \\\"{adxClusterUri}\\\"), \\\"/\\\", \\\"{adxDatabase}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "time_range_start",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Start of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_end",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "End of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_duration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "target_count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Total monitored instances in selected time range"
                    }
                  },
                  {
                    "columnMatch": "last_refresh_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Workbook refresh date and time"
                    }
                  },
                  {
                    "columnMatch": "ingestion_stats_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": "Ingestion statistics",
                      "linkIsContextBlade": true,
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "column",
                        "templateId": "ingestion_stats_link",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "Data ingestion statistics",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "adxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "adxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "targetType",
                            "source": "static",
                            "value": "sqlmi"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "View ingestion statistics including ingestion latency for each table"
                    }
                  },
                  {
                    "columnMatch": "adx_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Url",
                      "linkLabel": "Query ADX database",
                      "linkIsContextBlade": false
                    },
                    "tooltipFormat": {
                      "tooltip": "Explore monitoring data using ad-hoc KQL queries"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "time_range_start",
                    "label": "Time range start"
                  },
                  {
                    "columnId": "time_range_end",
                    "label": "Time range end"
                  },
                  {
                    "columnId": "time_range_duration",
                    "label": "Duration"
                  },
                  {
                    "columnId": "target_count",
                    "label": "Instances"
                  },
                  {
                    "columnId": "last_refresh_time",
                    "label": "Last refresh"
                  },
                  {
                    "columnId": "ingestion_stats_link",
                    "label": "Data ingestion"
                  },
                  {
                    "columnId": "adx_link",
                    "label": "Data store"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "name": "header_time_range"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "header_group"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "tabStyle": "bigger",
        "links": [
          {
            "id": "10e98cdf-277d-4010-ac79-cf8c5c92694d",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Heatmaps",
            "subTarget": "Heatmaps",
            "style": "link"
          },
          {
            "id": "9acdfd5b-d8b9-4708-b6b4-8605f0e1da6e",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Instances",
            "subTarget": "Instances",
            "style": "link"
          },
          {
            "id": "1501b2b0-1db6-450b-a296-9e511b957a3b",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Top queries",
            "subTarget": "Top queries",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqlmi_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "top_tabs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "ea8899df-fb45-425b-905e-7aa7865b9d24",
            "version": "KqlParameterItem/1.0",
            "name": "HeatmapGroupBy",
            "label": "Group by",
            "type": 10,
            "description": "Display hexagons in groups. Select \"Service tier\" to see all instances of the same service tier together.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    {\"value\":\"none\",\"label\":\"None\"},\r\n    {\"value\":\"service_tier\",\"label\":\"Service tier\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "service_tier"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqlmi_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "heatmap_grouping_parameters"
    },
    {
      "type": 1,
      "content": {
        "json": "* On each heatmap, a hexagon represents a managed instance\r\n* Heatmaps show top resource consuming instances. Use name filters or the `Instances` grid to find other instances.\r\n* Click on the instance name in a hexagon to open a detailed dashboard for that instance\r\n* Hexagons colors are described below. Instances with insufficient data are colored gray.\r\n\r\n|Heatmap|Description|\r\n|:-|:-|\r\n|`CPU`, `Log write`, `Workers`|Each hexagon is colored depending on average utilization in the selected time range, by band: green (0%-49%), yellow (50%-69%), orange (70%-89%), and red (90%-100%)|\r\n|`Requests`|Each hexagon is colored depending on the average rate of batch requests in the selected time range, with colder colors such as blue representing lower rates, and warmer colors such as orange representing higher rates|\r\n|`Waits`|Each hexagon is colored depending on the cumulative time of waits in the selected wait categories and time range, using the green-to-red color palette. Green represents minimal waits, red represents higher waits compared to other instances on the same heatmap. Each wait category [maps](https://go.microsoft.com/fwlink/?linkid=2238095) to one or more individual wait types. Click on an instance name to see a chart of top wait types for that instance over time.|\r\n|`Storage IO`|Each hexagon is colored to reflect the magnitude of selected IO metric (average latency, total IO operations, total bytes) in the selected time range for either read or write IO, with colder colors such as blue representing lower rates, and warmer colors such as orange representing higher rates|\r\n|`Connectivity`|Each hexagon is colored green if every connectivity probe for that instance in selected time range was successful. Otherwise, it is colored red, and the number of failed connectivity probes is shown at the bottom.|"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "heatmaps_help"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "1166beb9-0014-4358-9e65-e9098006cede",
            "cellValue": "heatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "CPU",
            "subTarget": "CPU",
            "style": "link"
          },
          {
            "id": "c91e947b-346d-425a-9c2b-3a3af49b28e1",
            "cellValue": "heatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Log write",
            "subTarget": "Log write",
            "style": "link"
          },
          {
            "id": "2529ec36-5a05-40e0-8850-e4600831ce8f",
            "cellValue": "heatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Workers",
            "subTarget": "Workers",
            "style": "link"
          },
          {
            "id": "7ac69d9e-fa5e-449d-ab27-1c600c2bab4d",
            "cellValue": "heatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Requests",
            "subTarget": "Requests",
            "style": "link"
          },
          {
            "id": "ca5f76ae-3b69-4fda-ae80-e9d975311d8f",
            "cellValue": "heatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Waits",
            "subTarget": "Waits",
            "style": "link"
          },
          {
            "id": "722da182-2411-4842-8595-d28408002ab9",
            "cellValue": "heatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Storage IO",
            "subTarget": "Storage IO",
            "style": "link"
          },
          {
            "id": "78fdec9c-e550-4575-adae-948c83d0a7ba",
            "cellValue": "heatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Connectivity",
            "subTarget": "Connectivity",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqlmi_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "heatmap_tabs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let cpu_utilization = materialize (\\r\\nsqlmi_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| partition hint.strategy = shuffle by managed_instance_name\\r\\n(\\r\\nsummarize cpu_percentage = avg(avg_instance_cpu_percent), count_samples = dcount(sample_time_utc) by managed_instance_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per managed instance in selected time range\\r\\nlet total_sample_count = (\\r\\ncpu_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by managed_instance_name\\r\\n);\\r\\n// typical count of samples per managed instance in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet cpu_timeline = (\\r\\ncpu_utilization\\r\\n| lookup total_sample_count on managed_instance_name\\r\\n| make-series cpu_percentage_timeline = avg(cpu_percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by managed_instance_name\\r\\n);\\r\\nlet instance_properties = (\\r\\nsqlmi_instance_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier)) by managed_instance_name\\r\\n);\\r\\nlet agg_cpu_utilization = (\\r\\ncpu_utilization\\r\\n| lookup total_sample_count on managed_instance_name\\r\\n| summarize cpu_percentage = sum(cpu_percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by managed_instance_name\\r\\n| join kind=leftouter cpu_timeline on managed_instance_name\\r\\n| join kind=leftouter instance_properties on managed_instance_name\\r\\n| project managed_instance_name, service_tier, cpu_percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(cpu_percentage)), cpu_percentage_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all instances\\r\\n                      cpu_percentage >= 90, \\\"red\\\",\\r\\n                      cpu_percentage >= 70, \\\"orange\\\",\\r\\n                      cpu_percentage >= 50, \\\"yellow\\\",\\r\\n                      cpu_percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{HeatmapGroupBy}\\\" == \\\"service_tier\\\", service_tier,\\r\\n                        managed_instance_name\\r\\n                        )\\r\\n);\\r\\n// Get the max value across instances in each grouper. This is used to limit to top N instances without tearing groups.\\r\\nlet agg_cpu_utilization_grouper = (\\r\\nagg_cpu_utilization\\r\\n| summarize cpu_percentage = max(cpu_percentage) by grouper\\r\\n| sort by cpu_percentage desc\\r\\n| project grouper, cpu_percentage, grouper_number = row_number()\\r\\n);\\r\\nagg_cpu_utilization\\r\\n| lookup agg_cpu_utilization_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project managed_instance_name, service_tier, cpu_percentage, grouper_cpu_percentage = cpu_percentage1, color, cpu_percentage_timeline, grouper = iif(\\\"{HeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by cpu_percentage desc, tolower(grouper) asc, tolower(managed_instance_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "managed_instance_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/instance",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Managed instance",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "managedInstanceName",
                    "source": "column",
                    "value": "managed_instance_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "cpu_percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal"
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "cpu_percentage_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "managed_instance_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "heatmapTabName",
          "comparison": "isEqualTo",
          "value": "CPU"
        }
      ],
      "name": "cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let log_write_utilization = materialize (\\r\\nsqlmi_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| partition hint.strategy = shuffle by managed_instance_name\\r\\n(\\r\\nsummarize log_write_percentage = avg(avg_instance_log_write_percent), count_samples = dcount(sample_time_utc) by managed_instance_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per managed instance in selected time range\\r\\nlet total_sample_count = (\\r\\nlog_write_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by managed_instance_name\\r\\n);\\r\\n// typical count of samples per managed instance in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet log_write_timeline = (\\r\\nlog_write_utilization\\r\\n| lookup total_sample_count on managed_instance_name\\r\\n| make-series log_write_percentage_timeline = avg(log_write_percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by managed_instance_name\\r\\n);\\r\\nlet instance_properties = (\\r\\nsqlmi_instance_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier)) by managed_instance_name\\r\\n);\\r\\nlet agg_log_write_utilization = (\\r\\nlog_write_utilization\\r\\n| lookup total_sample_count on managed_instance_name\\r\\n| summarize log_write_percentage = sum(log_write_percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by managed_instance_name\\r\\n| join kind=leftouter log_write_timeline on managed_instance_name\\r\\n| join kind=leftouter instance_properties on managed_instance_name\\r\\n| project managed_instance_name, service_tier, log_write_percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(log_write_percentage)), log_write_percentage_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all instances\\r\\n                      log_write_percentage >= 90, \\\"red\\\",\\r\\n                      log_write_percentage >= 70, \\\"orange\\\",\\r\\n                      log_write_percentage >= 50, \\\"yellow\\\",\\r\\n                      log_write_percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{HeatmapGroupBy}\\\" == \\\"service_tier\\\", service_tier,\\r\\n                        managed_instance_name\\r\\n                        )\\r\\n);\\r\\n// Get the max value across instances in each grouper. This is used to limit to top N instances without tearing groups.\\r\\nlet agg_log_write_utilization_grouper = (\\r\\nagg_log_write_utilization\\r\\n| summarize log_write_percentage = max(log_write_percentage) by grouper\\r\\n| sort by log_write_percentage desc\\r\\n| project grouper, log_write_percentage, grouper_number = row_number()\\r\\n);\\r\\nagg_log_write_utilization\\r\\n| lookup agg_log_write_utilization_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project managed_instance_name, service_tier, log_write_percentage, grouper_log_write_percentage = log_write_percentage1, color, log_write_percentage_timeline, grouper = iif(\\\"{HeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by log_write_percentage desc, tolower(grouper) asc, tolower(managed_instance_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "managed_instance_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/instance",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Managed instance",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "managedInstanceName",
                    "source": "column",
                    "value": "managed_instance_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "log_write_percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal"
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average log write percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "log_write_percentage_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average log write utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "managed_instance_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "heatmapTabName",
          "comparison": "isEqualTo",
          "value": "Log write"
        }
      ],
      "name": "log_write_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let worker_utilization = materialize (\\r\\nsqlmi_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| partition hint.strategy = shuffle by managed_instance_name\\r\\n(\\r\\nsummarize worker_percentage = avg(instance_worker_percent), count_samples = dcount(sample_time_utc) by managed_instance_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per managed instance in selected time range\\r\\nlet total_sample_count = (\\r\\nworker_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by managed_instance_name\\r\\n);\\r\\n// typical count of samples per managed instance in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet worker_timeline = (\\r\\nworker_utilization\\r\\n| lookup total_sample_count on managed_instance_name\\r\\n| make-series worker_percentage_timeline = avg(worker_percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by managed_instance_name\\r\\n);\\r\\nlet instance_properties = (\\r\\nsqlmi_instance_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier)) by managed_instance_name\\r\\n);\\r\\nlet agg_worker_utilization = (\\r\\nworker_utilization\\r\\n| lookup total_sample_count on managed_instance_name\\r\\n| summarize worker_percentage = sum(worker_percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by managed_instance_name\\r\\n| join kind=leftouter worker_timeline on managed_instance_name\\r\\n| join kind=leftouter instance_properties on managed_instance_name\\r\\n| project managed_instance_name, service_tier, worker_percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(worker_percentage)), worker_percentage_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all instances\\r\\n                      worker_percentage >= 90, \\\"red\\\",\\r\\n                      worker_percentage >= 70, \\\"orange\\\",\\r\\n                      worker_percentage >= 50, \\\"yellow\\\",\\r\\n                      worker_percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{HeatmapGroupBy}\\\" == \\\"service_tier\\\", service_tier,\\r\\n                        managed_instance_name\\r\\n                        )\\r\\n);\\r\\n// Get the max value across instances in each grouper. This is used to limit to top N instances without tearing groups.\\r\\nlet agg_worker_utilization_grouper = (\\r\\nagg_worker_utilization\\r\\n| summarize worker_percentage = max(worker_percentage) by grouper\\r\\n| sort by worker_percentage desc\\r\\n| project grouper, worker_percentage, grouper_number = row_number()\\r\\n);\\r\\nagg_worker_utilization\\r\\n| lookup agg_worker_utilization_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project managed_instance_name, service_tier, worker_percentage, grouper_worker_percentage = worker_percentage1, color, worker_percentage_timeline, grouper = iif(\\\"{HeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by worker_percentage desc, tolower(grouper) asc, tolower(managed_instance_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "managed_instance_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/instance",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Managed instance",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "managedInstanceName",
                    "source": "column",
                    "value": "managed_instance_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "worker_percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal"
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average worker percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "worker_percentage_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average worker utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "managed_instance_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "heatmapTabName",
          "comparison": "isEqualTo",
          "value": "Workers"
        }
      ],
      "name": "worker_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let requests = materialize (\\r\\nsqlmi_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"Batch Requests/sec\\\")\\r\\n| project-away instance_name, database_id, database_name\\r\\n| partition hint.strategy = shuffle by managed_instance_name\\r\\n(\\r\\nsort by sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| project-away cntr_type, cntr_value\\r\\n| summarize total_requests = sum(toreal(delta_cntr_value)),\\r\\n            total_ms = sum(toreal(delta_sample_time_utc)),\\r\\n            count_samples = dcount(sample_time_utc)\\r\\n            by managed_instance_name, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per managed instance in selected time range\\r\\nlet total_sample_count = (\\r\\nrequests\\r\\n| summarize total_count_samples = sum(count_samples) by managed_instance_name\\r\\n);\\r\\n// typical count of samples per managed instance in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet requests_timeline = \\r\\n(\\r\\nrequests\\r\\n| make-series requests_timeline = sum(total_requests) / sum(total_ms) * 1000 default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by managed_instance_name\\r\\n| project requests_timeline = series_fill_linear(requests_timeline), managed_instance_name\\r\\n);\\r\\nlet instance_properties = (\\r\\nsqlmi_instance_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier)) by managed_instance_name\\r\\n);\\r\\nlet agg_requests = (\\r\\nrequests\\r\\n| lookup total_sample_count on managed_instance_name\\r\\n| summarize requests_rate = sum(total_requests) / sum(total_ms) * 1000,\\r\\n            count_samples = sum(count_samples)\\r\\n            by managed_instance_name\\r\\n| join kind=leftouter requests_timeline on managed_instance_name\\r\\n| join kind=leftouter instance_properties on managed_instance_name\\r\\n| project managed_instance_name, service_tier, requests_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), requests_rate), requests_timeline,\\r\\n          grouper = case(\\r\\n                        \\\"{HeatmapGroupBy}\\\" == \\\"service_tier\\\", service_tier,\\r\\n                        managed_instance_name\\r\\n                        )\\r\\n);\\r\\n// Get the max value across instances in each grouper. This is used to limit to top N instances without tearing groups.\\r\\nlet agg_requests_grouper = (\\r\\nagg_requests\\r\\n| summarize requests_rate = max(requests_rate) by grouper\\r\\n| sort by requests_rate desc\\r\\n| project grouper, requests_rate, grouper_number = row_number()\\r\\n);\\r\\nagg_requests\\r\\n| lookup agg_requests_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project managed_instance_name, service_tier, requests_rate, grouper_requests_rate = requests_rate1, requests_timeline, grouper = iif(\\\"{HeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by requests_rate desc, tolower(grouper) asc, tolower(managed_instance_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "managed_instance_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/instance",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Managed instance",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "managedInstanceName",
                    "source": "column",
                    "value": "managed_instance_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              }
            }
          },
          "centerContent": {
            "columnMatch": "requests_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 1
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average batch requests rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "requests_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "blue"
            },
            "tooltipFormat": {
              "tooltip": "Average batch requests rate over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "managed_instance_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "requests_rate",
            "type": 4,
            "heatmapPalette": "coldHot",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "heatmapTabName",
          "comparison": "isEqualTo",
          "value": "Requests"
        }
      ],
      "name": "requests_heatmap"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "9839439c-056b-4b65-be62-c9e59ed8dd00",
                  "version": "KqlParameterItem/1.0",
                  "name": "waitCategory",
                  "label": "Wait category",
                  "type": 2,
                  "description": "Select one or more wait categories to show on heatmap. The percentage values in parentheses describe wait distribution across the estate. On a specific instance, the distribution of waits may be significantly different.",
                  "multiSelect": true,
                  "quote": "\"",
                  "delimiter": ",",
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let waits = materialize (\\r\\nsqlmi_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| partition hint.strategy = shuffle by wait_category\\r\\n(\\r\\nsummarize wait_time_ms = sum(wait_time_ms) by wait_category\\r\\n)\\r\\n);\\r\\nlet total_wait_time_ms = toscalar(\\r\\nwaits\\r\\n| summarize sum(wait_time_ms)\\r\\n);\\r\\nwaits\\r\\n| project wait_category, wait_category_display_name = strcat(wait_category, \\\" (\\\", round(100 * toreal(wait_time_ms) / toreal(total_wait_time_ms), 2), \\\"%)\\\")\\r\\n| sort by wait_category asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "[]",
                    "showDefault": false
                  },
                  "queryType": 9,
                  "value": [
                    "value::all"
                  ]
                },
                {
                  "id": "c512ddf9-831e-430f-b658-fcf6656308c9",
                  "version": "KqlParameterItem/1.0",
                  "name": "waitCategoryFilter",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "waitCategory",
                        "operator": "is Empty",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "// no wait_category filter"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "waitCategory",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "| where wait_category in ({waitCategory})"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "// no wait_category filter"
                      }
                    }
                  ]
                }
              ],
              "style": "formHorizontal",
              "queryType": 9
            },
            "customWidth": "50",
            "name": "wait_category_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let waits = materialize (\\r\\nsqlmi_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n{waitCategoryFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| partition hint.strategy = shuffle by managed_instance_name\\r\\n(\\r\\nsummarize wait_time_ms = sum(wait_time_ms),\\r\\n          interval_start = min(sample_time_utc),\\r\\n          interval_end = max(sample_time_utc)\\r\\n          by managed_instance_name, wait_category, sample_time_utc\\r\\n| sort by wait_category asc, sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms) and wait_category == prev(wait_category), wait_time_ms - prev(wait_time_ms), long(null))\\r\\n| where sample_time_utc >= prev(sample_time_utc)\\r\\n| summarize total_wait_time_ms = sum(toreal(delta_wait_time_ms)),\\r\\n            interval_start = min(interval_start),\\r\\n            interval_end = max(interval_end)\\r\\n            by managed_instance_name,\\r\\n               binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// total count of samples per instance in selected time range\\r\\nlet total_sample_count = (\\r\\nsqlmi_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize total_count_samples = dcount(sample_time_utc)\\r\\n            by managed_instance_name\\r\\n);\\r\\n// typical count of samples per instance in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\ntotal_sample_count\\r\\n| join kind=leftouter waits on managed_instance_name\\r\\n| make-series waits_timeline = sum(total_wait_time_ms) / datetime_diff(\\\"Second\\\", max(interval_end), min(interval_start)) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by managed_instance_name\\r\\n| project waits_timeline = series_fill_linear(waits_timeline), managed_instance_name\\r\\n);\\r\\nlet instance_properties = (\\r\\nsqlmi_instance_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| summarize arg_max(sample_time_utc, service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier)) by managed_instance_name\\r\\n);\\r\\nlet agg_waits = (\\r\\ntotal_sample_count\\r\\n| join kind=leftouter waits on managed_instance_name // total_sample_count has a row for each instance; waits may not have a row for an instance if it had no waits matching the wait_category filter. Use outer join to avoid dropping instances from chart as the filter values are changed.\\r\\n| summarize wait_ms_per_second = sum(total_wait_time_ms) / datetime_diff(\\\"Second\\\", max(interval_end), min(interval_start)),\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by managed_instance_name\\r\\n| join kind=leftouter metric_timeline on managed_instance_name\\r\\n| join kind=leftouter instance_properties on managed_instance_name\\r\\n| project managed_instance_name,\\r\\n          service_tier,\\r\\n          wait_ms_per_second = case(\\r\\n                                   isnull(count_samples) or count_samples == 0, real(0),\\r\\n                                   toreal(count_samples)/expected_sample_count < 0.5, real(null),\\r\\n                                   wait_ms_per_second\\r\\n                                   ),\\r\\n          waits_timeline,\\r\\n          grouper = case(\\r\\n                        \\\"{HeatmapGroupBy}\\\" == \\\"service_tier\\\", service_tier,\\r\\n                        managed_instance_name\\r\\n                        )\\r\\n);\\r\\n// Get the max value across istances in each grouper. This is used to limit to top N instances without tearing groups.\\r\\nlet agg_waits_grouper = (\\r\\nagg_waits\\r\\n| summarize wait_ms_per_second = max(wait_ms_per_second) by grouper\\r\\n| sort by wait_ms_per_second desc\\r\\n| project grouper, wait_ms_per_second, grouper_number = row_number()\\r\\n);\\r\\nagg_waits\\r\\n| lookup agg_waits_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project managed_instance_name, service_tier, wait_ms_per_second, grouper_wait_ms_per_second = wait_ms_per_second1, waits_timeline, grouper = iif(\\\"{HeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by wait_ms_per_second desc, tolower(grouper) asc, tolower(managed_instance_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "managed_instance_name",
                  "formatter": 1,
                  "formatOptions": {
                    "linkTarget": "WorkbookTemplate",
                    "workbookContext": {
                      "componentIdSource": "workbook",
                      "resourceIdsSource": "workbook",
                      "templateIdSource": "static",
                      "templateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/instance",
                      "typeSource": "workbook",
                      "gallerySource": "default",
                      "locationSource": "workbook",
                      "workbookName": "Managed instance",
                      "passSpecificParams": true,
                      "templateParameters": [
                        {
                          "name": "managedInstanceName",
                          "source": "column",
                          "value": "managed_instance_name"
                        },
                        {
                          "name": "timeRange",
                          "source": "parameter",
                          "value": "timeRange"
                        },
                        {
                          "name": "watcherResourceId",
                          "source": "parameter",
                          "value": "watcherResourceId"
                        },
                        {
                          "name": "linkAdxClusterUri",
                          "source": "parameter",
                          "value": "adxClusterUri"
                        },
                        {
                          "name": "linkAdxDatabase",
                          "source": "parameter",
                          "value": "adxDatabase"
                        },
                        {
                          "name": "tabName",
                          "source": "static",
                          "value": "Overview"
                        },
                        {
                          "name": "showDescriptions",
                          "source": "parameter",
                          "value": "showDescriptions"
                        }
                      ]
                    }
                  }
                },
                "centerContent": {
                  "columnMatch": "wait_ms_per_second",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "numberFormat": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 1
                    },
                    "emptyValCustomText": "N/A"
                  },
                  "tooltipFormat": {
                    "tooltip": "Cumulative wait time (in milliseconds per second) in selected wait categories, averaged over selected time range. Shows \"N/A\" if the number of samples is insufficient."
                  }
                },
                "bottomContent": {
                  "columnMatch": "waits_timeline",
                  "formatter": 21,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "tooltipFormat": {
                    "tooltip": "Cumulative wait time in selected wait categories over selected time range"
                  }
                },
                "hivesContent": {
                  "columnMatch": "grouper",
                  "formatter": 1
                },
                "nodeIdField": "managed_instance_name",
                "graphOrientation": 3,
                "showOrientationToggles": false,
                "nodeSize": null,
                "staticNodeSize": 150,
                "colorSettings": {
                  "nodeColorField": "wait_ms_per_second",
                  "type": 4,
                  "heatmapPalette": "greenRed",
                  "heatmapMin": null,
                  "heatmapMax": null,
                  "emptyValueColor": "gray"
                },
                "groupByField": "grouper",
                "hivesMargin": 5
              }
            },
            "name": "waits_heatmap"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_wait_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "heatmapTabName",
          "comparison": "isEqualTo",
          "value": "Waits"
        }
      ],
      "name": "waits_heatmap_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "template",
        "loadFromTemplateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/estate/storage io",
        "items": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "heatmapTabName",
          "comparison": "isEqualTo",
          "value": "Storage IO"
        }
      ],
      "name": "io_group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server name to target instance name\\r\\nlet connection_server_target = materialize (\\r\\nsqlmi_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, managed_instance_name) by connection_server_name\\r\\n| project-away probe_time_utc\\r\\n);\\r\\n// typical count of probes per managed instance in selected time range\\r\\nlet expected_probe_count = toscalar(\\r\\nsqlmi_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_samples = dcount(probe_time_utc) by managed_instance_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nlet instance_properties = (\\r\\nsqlmi_instance_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier)) by managed_instance_name\\r\\n);\\r\\nlet agg_connectivity = (\\r\\nsqlmi_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_target on connection_server_name // A failed probe has empty managed_instance_name. Look it up for the most recent successful probe with the same connection server name.\\r\\n| extend managed_instance_name = iif(isempty(managed_instance_name), managed_instance_name1, managed_instance_name)\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_failed_probes = countif(probe_return_value != 1),\\r\\n            count_successful_probes = countif(probe_return_value == 1),\\r\\n            count_probes = count()\\r\\n            by managed_instance_name\\r\\n| join kind=leftouter instance_properties on managed_instance_name\\r\\n| project managed_instance_name, service_tier, health_ratio = iif(toreal(count_probes)/expected_probe_count < 0.5, real(null), toreal(count_successful_probes) / toreal(count_probes)), count_failed_probes = iif(count_failed_probes > 0, count_failed_probes, int(null)),\\r\\n          color = case(\\r\\n                      toreal(count_probes)/expected_probe_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all instances\\r\\n                      count_failed_probes > 0, \\\"red\\\",\\r\\n                      count_successful_probes > 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      ),\\r\\n          grouper = case(\\r\\n                        \\\"{HeatmapGroupBy}\\\" == \\\"service_tier\\\", service_tier,\\r\\n                        managed_instance_name\\r\\n                        )\\r\\n);\\r\\n// Get the max value across instances in each grouper. This is used to limit to top N instances without tearing groups.\\r\\nlet agg_connectivity_grouper = (\\r\\nagg_connectivity\\r\\n| summarize health_ratio = min(health_ratio) by grouper\\r\\n| sort by health_ratio asc\\r\\n| project grouper, health_ratio, grouper_number = row_number()\\r\\n);\\r\\nagg_connectivity\\r\\n| lookup agg_connectivity_grouper on grouper\\r\\n| where grouper_number <= 50 // limit to top hitters\\r\\n| project managed_instance_name, service_tier, health_ratio, grouper_health_ratio = health_ratio1, count_failed_probes, color, grouper = iif(\\\"{HeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper)\\r\\n| sort by health_ratio asc, tolower(grouper) asc, tolower(managed_instance_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "managed_instance_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/instance",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Managed instance",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "managedInstanceName",
                    "source": "column",
                    "value": "managed_instance_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Connectivity"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ]
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "health_ratio",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "percent",
                "minimumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "The ratio of successful connectivity probes to total connectivity probes, as a percentage. Shows \"N/A\" if the number of probes is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "count_failed_probes",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "tooltipFormat": {
              "tooltip": "The number of failed connectivity probes in selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 1
          },
          "nodeIdField": "managed_instance_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_connectivity",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Heatmaps"
        },
        {
          "parameterName": "heatmapTabName",
          "comparison": "isEqualTo",
          "value": "Connectivity"
        }
      ],
      "name": "connectivity_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let databases = (\\r\\nsqlmi_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, notable_db_scoped_configs, compatibility_level, is_auto_create_stats_on, is_auto_shrink_on, is_auto_update_stats_on, force_last_good_plan_actual_state, query_store_actual_state_desc, state_desc, log_reuse_wait_desc, last_good_checkdb_time, database_name, updateability, count_suspect_pages) by managed_instance_name, database_id\\r\\n| extend db_scoped_configs = todynamic(notable_db_scoped_configs)\\r\\n| mv-expand db_scoped_configs\\r\\n| mv-expand db_scoped_config_name = db_scoped_configs.name to typeof(string), db_scoped_config_value = db_scoped_configs.value to typeof(string), db_scoped_config_value_for_secondary = db_scoped_configs.value_for_secondary to typeof(string)\\r\\n| where db_scoped_config_name == \\\"MAXDOP\\\" or db_scoped_config_name == \\\"\\\"\\r\\n| join kind=leftouter (\\r\\n                      sqlmi_instance_properties\\r\\n                      | where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n                      {managedInstanceNameFilter}\\r\\n                      | where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n                      | summarize arg_max(sample_time_utc, logical_cpu_count) by managed_instance_name\\r\\n                      ) on managed_instance_name\\r\\n| summarize count_databases = count(),\\r\\n            count_databases_with_warnings = countif(\\r\\n                                                   db_scoped_config_name == \\\"MAXDOP\\\" and logical_cpu_count > 8 and (toint(db_scoped_config_value) > 8 or toint(db_scoped_config_value_for_secondary) > 8)\\r\\n                                                   or\\r\\n                                                   compatibility_level <= 110\\r\\n                                                   or\\r\\n                                                   is_auto_create_stats_on == false\\r\\n                                                   or\\r\\n                                                   is_auto_shrink_on == true\\r\\n                                                   or\\r\\n                                                   is_auto_update_stats_on == false\\r\\n                                                   or\\r\\n                                                   force_last_good_plan_actual_state != \\\"ON\\\" and updateability == \\\"READ_WRITE\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\")\\r\\n                                                   or\\r\\n                                                   query_store_actual_state_desc != \\\"READ_WRITE\\\" and updateability == \\\"READ_WRITE\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\")\\r\\n                                                   or\\r\\n                                                   state_desc != \\\"ONLINE\\\"\\r\\n                                                   or\\r\\n                                                   log_reuse_wait_desc !in~ (\\\"NOTHING\\\",\\\"OLDEST_PAGE\\\",\\\"LOG_SCAN\\\",\\\"DATABASE_SNAPSHOT_CREATION\\\",\\\"CHECKPOINT\\\")\\r\\n                                                   or\\r\\n                                                   last_good_checkdb_time == datetime(\\\"1900-01-01T00:00:00Z\\\") and database_name !~ \\\"tempdb\\\"\\r\\n                                                   or\\r\\n                                                   count_suspect_pages > 0\\r\\n                                                   )\\r\\n            by managed_instance_name\\r\\n)\\r\\n;\\r\\nsqlmi_instance_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{managedInstanceNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize arg_max(sample_time_utc, database_engine_start_time_utc, instance_maxdop, logical_cpu_count, storage_space_used_mb, reserved_storage_mb, service_tier, hardware_generation, logical_cpu_count, database_engine_memory_mb) by managed_instance_name\\r\\n| extend service_tier = case(service_tier =~ \\\"GeneralPurpose\\\", \\\"General Purpose\\\", service_tier =~ \\\"BusinessCritical\\\", \\\"Business Critical\\\", service_tier),\\r\\n         instance_storage_utilization_ratio = iif(reserved_storage_mb > 0, toreal(storage_space_used_mb)/toreal(reserved_storage_mb), real(null)),\\r\\n         count_warnings = iif((instance_maxdop > 8 or instance_maxdop == 0) and logical_cpu_count > 8, 1, 0) // the only warning applicable to MI at this time\\r\\n| join kind=leftouter databases on managed_instance_name\\r\\n| project count_warnings, managed_instance_name, uptime = datetime_diff(\\\"minute\\\", now(), database_engine_start_time_utc), count_databases, service_tier, hardware_generation, logical_cpu_count, database_engine_memory_mb, instance_storage_utilization_ratio, count_databases_with_warnings, formatted_uptime = format_timespan(1s * datetime_diff(\\\"second\\\", now(), database_engine_start_time_utc), \\\"d.hh:mm:ss\\\")\\r\\n| sort by tolower(managed_instance_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "count_warnings",
              "formatter": 18,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "0",
                    "representation": "Sev4",
                    "text": "[\"managed_instance_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "1",
                    "representation": "Sev3",
                    "text": "[\"managed_instance_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "3",
                    "representation": "Sev2",
                    "text": "[\"managed_instance_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "6",
                    "representation": "Sev1",
                    "text": "[\"managed_instance_name\"]"
                  },
                  {
                    "operator": ">=",
                    "thresholdValue": "7",
                    "representation": "Sev0",
                    "text": "[\"managed_instance_name\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "more",
                    "text": "[\"managed_instance_name\"]"
                  }
                ],
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/instance",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "Managed instance",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "managedInstanceName",
                      "source": "column",
                      "value": "managed_instance_name"
                    },
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "watcherResourceId",
                      "source": "parameter",
                      "value": "watcherResourceId"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Overview"
                    },
                    {
                      "name": "showDescriptions",
                      "source": "parameter",
                      "value": "showDescriptions"
                    }
                  ]
                },
                "customColumnWidthSetting": "25ch"
              },
              "tooltipFormat": {
                "tooltip": "There are [\"count_warnings\"] configuration or state warnings for [\"managed_instance_name\"]. Click on the instance name to see details."
              }
            },
            {
              "columnMatch": "managed_instance_name",
              "formatter": 5
            },
            {
              "columnMatch": "uptime",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "<=",
                    "thresholdValue": "1440",
                    "representation": "green",
                    "text": "[\"formatted_uptime\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": null,
                    "text": "[\"formatted_uptime\"]"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Instance uptime, as days.hours:minutes:seconds. Highlighted in green for recently started instances."
              }
            },
            {
              "columnMatch": "count_databases",
              "formatter": 5
            },
            {
              "columnMatch": "database_engine_memory_mb",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "15ch"
              },
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "instance_storage_utilization_ratio",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "greenRed",
                "customColumnWidthSetting": "23ch"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "percent"
                }
              }
            },
            {
              "columnMatch": "count_databases_with_warnings",
              "formatter": 18,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "0",
                    "representation": "Sev4",
                    "text": "[\"count_databases\"] databases"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "1",
                    "representation": "Sev3",
                    "text": "[\"count_databases\"] databases"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "3",
                    "representation": "Sev2",
                    "text": "[\"count_databases\"] databases"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "6",
                    "representation": "Sev1",
                    "text": "[\"count_databases\"] databases"
                  },
                  {
                    "operator": ">=",
                    "thresholdValue": "7",
                    "representation": "Sev0",
                    "text": "[\"count_databases\"] databases"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "more",
                    "text": "[\"count_databases\"] databases"
                  }
                ],
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/instance",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "Managed instance",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "managedInstanceName",
                      "source": "column",
                      "value": "managed_instance_name"
                    },
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Databases"
                    },
                    {
                      "name": "watcherResourceId",
                      "source": "parameter",
                      "value": "watcherResourceId"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "showDescriptions",
                      "source": "parameter",
                      "value": "showDescriptions"
                    }
                  ]
                }
              },
              "tooltipFormat": {
                "tooltip": "[\"count_databases_with_warnings\"] out of [\"count_databases\"] databases on [\"managed_instance_name\"] have configuration or state warnings. Click to see details."
              }
            },
            {
              "columnMatch": "formatted_uptime",
              "formatter": 5
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "count_warnings",
              "label": "Instance"
            },
            {
              "columnId": "uptime",
              "label": "Uptime"
            },
            {
              "columnId": "service_tier",
              "label": "Service tier"
            },
            {
              "columnId": "hardware_generation",
              "label": "Hardware"
            },
            {
              "columnId": "logical_cpu_count",
              "label": "Logical CPUs"
            },
            {
              "columnId": "database_engine_memory_mb",
              "label": "Memory"
            },
            {
              "columnId": "instance_storage_utilization_ratio",
              "label": "Storage utilization"
            },
            {
              "columnId": "count_databases_with_warnings",
              "label": "Databases"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlmi_instance_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Instances"
        },
        {
          "parameterName": "sqlmi_database_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqlmi_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "matchPattern",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "managed_instances"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "template",
        "loadFromTemplateId": "Community-Workbooks/Database watcher/Azure SQL Managed Instance/estate/top queries",
        "items": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Top queries"
        },
        {
          "parameterName": "sqlmi_query_runtime_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "matchPattern",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "haReplica",
          "comparison": "isEqualTo",
          "value": "false"
        }
      ],
      "name": "top_queries_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}