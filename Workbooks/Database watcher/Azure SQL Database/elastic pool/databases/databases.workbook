{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "* On each heatmap, a hexagon represents a database in this elastic pool\r\n* Heatmaps show top resource consuming databases. Use the name filter to find other databases.\r\n* Click on the database name in a hexagon to open a detailed dashboard for that database\r\n* Hexagons colors are described below. Databases with insufficient data are colored gray.\r\n\r\n|Heatmap|Description|\r\n|:-|:-|\r\n|`CPU`, `Data IO`, `Log write`|Each hexagon is colored depending on average database resource utilization in the selected time range, by band: green (0%-49%), yellow (50%-89%), and red (90%-100%).|\r\n|`Requests`,`Transactions`,`Write transactions`,`Query optimizations`|Each hexagon is colored depending on the average rate of corresponding metric for the database in the selected time range, with lighter colors representing lower rates, and darker colors representing higher rates.|\r\n|`Lock waits`|Each hexagon is colored depending on cumulative wait time of lock (`LCK_M_*`) waits for the database in the selected time range, with lighter colors representing lower waits, and darker colors representing higher waits, compared to other databases in the same elastic pool.|\r\n"
      },
      "conditionalVisibility": {
        "parameterName": "showDescriptions",
        "comparison": "isEqualTo",
        "value": "true"
      },
      "name": "database_heatmap_help"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "8286f98f-4349-4f43-995d-b0f44177b353",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "CPU",
            "subTarget": "CPU",
            "style": "link"
          },
          {
            "id": "10f7a790-10ab-4be5-9ce5-a5993e531712",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Data IO",
            "subTarget": "Data IO",
            "style": "link"
          },
          {
            "id": "32f5213a-7d90-4a46-b208-c4036149b7dd",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Log write",
            "subTarget": "Log write",
            "style": "link"
          },
          {
            "id": "8a1f10ff-c909-4cfa-a882-6e9b54efaa32",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Requests",
            "subTarget": "Requests",
            "style": "link"
          },
          {
            "id": "39c5aa51-c73c-452c-8444-8aa841ea634e",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Lock waits",
            "subTarget": "Lock waits",
            "style": "link"
          },
          {
            "id": "e40b63ad-9997-4354-b28e-a860edf3c4a4",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Query optimizations",
            "subTarget": "Query optimizations",
            "style": "link"
          },
          {
            "id": "7c63347c-4164-4090-8957-2c3c0d8f55f5",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Transactions",
            "subTarget": "Transactions",
            "style": "link"
          },
          {
            "id": "7922736e-f3cf-468f-a34d-f209d4f177af",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Write transactions",
            "subTarget": "Write transactions",
            "style": "link"
          },
          {
            "id": "5b16ac9f-e8e1-48d9-9bc8-b21fa5b61b9e",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Log bytes",
            "subTarget": "Log bytes",
            "style": "link"
          },
          {
            "id": "1e09cdc7-64f3-48cc-a63e-a78a7a0e18e2",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Redo queue",
            "subTarget": "Redo queue",
            "style": "link"
          },
          {
            "id": "baf79a67-93f7-4516-86e7-33e272060cf3",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Redo rate",
            "subTarget": "Redo rate",
            "style": "link"
          }
        ]
      },
      "name": "database_heatmap_tabs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let cpu_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"CPU usage %\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\ncpu_counter\\r\\n| make-series metric_timeline = max(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ncpu_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\ncpu_counter\\r\\n| summarize percentage = avgif(cntr_value, isfinite(cntr_value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), percentage), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 100 by percentage desc\\r\\n| sort by percentage desc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "CPU"
        }
      ],
      "name": "database_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let request_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total request count\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nrequest_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nrequest_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nrequest_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc) and database_name == prev(database_name), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize requests_rate = avgif(value, isfinite(value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, requests_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), requests_rate), metric_timeline\\r\\n| top 100 by requests_rate desc\\r\\n| sort by requests_rate desc, tolower(database_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            }
          },
          "centerContent": {
            "columnMatch": "requests_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "requests_rate",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Requests"
        }
      ],
      "name": "database_requests_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let query_optimizations_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Query optimizations/sec\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nquery_optimizations_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nquery_optimizations_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nquery_optimizations_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc) and database_name == prev(database_name), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize query_optimizations_rate = avgif(value, isfinite(value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, query_optimizations_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), query_optimizations_rate), metric_timeline\\r\\n| top 100 by query_optimizations_rate desc\\r\\n| sort by query_optimizations_rate desc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            }
          },
          "centerContent": {
            "columnMatch": "query_optimizations_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average query optimization rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average query optimization rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "query_optimizations_rate",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Query optimizations"
        }
      ],
      "name": "database_query_optimizations_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let lock_wait_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total lock wait time (ms)\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nlock_wait_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nlock_wait_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nlock_wait_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc) and database_name == prev(database_name), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize lock_wait_time = avgif(value, isfinite(value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name,\\r\\n          lock_wait_time = case(\\r\\n                               isnull(count_samples) or count_samples == 0, real(0),\\r\\n                               toreal(count_samples)/expected_sample_count < 0.5, real(null),\\r\\n                               lock_wait_time\\r\\n                               ),\\r\\n          metric_timeline\\r\\n| top 100 by lock_wait_time desc\\r\\n| sort by lock_wait_time desc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            }
          },
          "centerContent": {
            "columnMatch": "lock_wait_time",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Cumulative lock wait time (in milliseconds per second) averaged over selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Cumulative lock waits over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "lock_wait_time",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Lock waits"
        }
      ],
      "name": "lock_waits_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let transaction_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Transactions/sec\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\ntransaction_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntransaction_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\ntransaction_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc) and database_name == prev(database_name), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize transaction_rate = avgif(value, isfinite(value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, transaction_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), transaction_rate), metric_timeline\\r\\n| top 100 by transaction_rate desc\\r\\n| sort by transaction_rate desc, tolower(database_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            }
          },
          "centerContent": {
            "columnMatch": "transaction_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average transaction rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average transaction rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "transaction_rate",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Transactions"
        }
      ],
      "name": "database_transactions_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let write_transaction_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Write Transactions/sec\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nwrite_transaction_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nwrite_transaction_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nwrite_transaction_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc) and database_name == prev(database_name), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize write_transaction_rate = avgif(value, isfinite(value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, write_transaction_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), write_transaction_rate), metric_timeline\\r\\n| top 100 by write_transaction_rate desc\\r\\n| sort by write_transaction_rate desc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            }
          },
          "centerContent": {
            "columnMatch": "write_transaction_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average write transaction rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average write transaction rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "write_transaction_rate",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Write transactions"
        }
      ],
      "name": "database_write_transactions_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let log_bytes_flushed_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Log Bytes Flushed/sec\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nlog_bytes_flushed_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nlog_bytes_flushed_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nlog_bytes_flushed_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc) and database_name == prev(database_name), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize log_bytes_flushed_rate = avgif(value, isfinite(value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, log_bytes_flushed_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), log_bytes_flushed_rate), metric_timeline\\r\\n| top 100 by log_bytes_flushed_rate desc\\r\\n| sort by log_bytes_flushed_rate desc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            }
          },
          "centerContent": {
            "columnMatch": "log_bytes_flushed_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 11,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average log bytes flushed rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average log bytes flushed rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "log_bytes_flushed_rate",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Log bytes"
        }
      ],
      "name": "database_log_bytes_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let redo_queue_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where replica_type != \\\"Primary\\\" and object_name == \\\"Database Replica\\\" and counter_name in (\\\"Recovery Queue\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nredo_queue_counter\\r\\n| make-series metric_timeline = max(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nredo_queue_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nredo_queue_counter\\r\\n| summarize redo_queue = avgif(cntr_value, isfinite(cntr_value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, redo_queue = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), redo_queue), metric_timeline\\r\\n| top 100 by redo_queue desc\\r\\n| sort by redo_queue desc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            }
          },
          "centerContent": {
            "columnMatch": "redo_queue",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 3,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average redo queue for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average redo queue rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "redo_queue",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Redo queue"
        }
      ],
      "name": "database_redo_queue_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let redo_rate_counter = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where replica_type != \\\"Primary\\\" and object_name == \\\"Database Replica\\\" and counter_name in (\\\"Redone Bytes/sec\\\")\\r\\n| where isnotempty(database_name)\\r\\n| project-away logical_server_name, elastic_pool_name, replica_type, object_name, counter_name, instance_name, cntr_type, anchor_database_id, anchor_database_name, anchor_logical_database_id, anchor_physical_database_id\\r\\n);\\r\\nlet metric_timeline = \\r\\nredo_rate_counter\\r\\n| sort by database_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| make-series metric_timeline = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nredo_rate_counter\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nredo_rate_counter\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc) and database_name == prev(database_name), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| summarize redo_rate = avgif(value, isfinite(value)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, redo_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), redo_rate), metric_timeline\\r\\n| top 100 by redo_rate desc\\r\\n| sort by redo_rate desc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            }
          },
          "centerContent": {
            "columnMatch": "redo_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 11,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average redo rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average redo rate over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "redo_rate",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Redo rate"
        }
      ],
      "name": "database_redo_rate_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let elastic_pool_properties = (\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize properties_sample_time_utc = max(sample_time_utc) by database_max_data_iops, key = int(1)\\r\\n);\\r\\nlet metric = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total data read IOs\\\",\\\"Total data write IOs\\\")\\r\\n| where isnotempty(database_name)\\r\\n| summarize cntr_value = sum(cntr_value) by sample_time_utc, database_name // combine reads and writes to get total IOs for each sample and database\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend iops = delta_cntr_value / delta_sample_time_utc * 1000, key = int(1)\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| join kind=inner elastic_pool_properties on key // all property rows with distinct database_max_log_rate_mbps\\r\\n| extend sample_time_diff_ms = abs(datetime_diff(\\\"millisecond\\\", sample_time_utc, properties_sample_time_utc)) // calculate the difference in sample times between sqldb_elastic_pool_performance_counters_common and sqldb_elastic_pool_properties\\r\\n| summarize arg_min(sample_time_diff_ms, sample_time_utc, iops, database_max_data_iops) by database_name // restrict to the property row where this difference in minimal\\r\\n| project sample_time_utc, percentage = min_of(100 * (toreal(iops) / toreal(database_max_data_iops)), 100), database_name\\r\\n);\\r\\nlet metric_timeline = \\r\\nmetric\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nmetric\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nmetric\\r\\n| summarize percentage = avgif(percentage, isfinite(percentage)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), percentage), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 100 by percentage desc\\r\\n| sort by percentage desc, tolower(database_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average Data IO percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average Data IO utilization over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Data IO"
        }
      ],
      "name": "database_data_io_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let elastic_pool_properties = (\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize properties_sample_time_utc = max(sample_time_utc) by database_max_log_rate_mbps, key = int(1)\\r\\n);\\r\\nlet metric = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n{databaseNameFilter}\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total log write bytes\\\")\\r\\n| where isnotempty(database_name)\\r\\n| sort by database_name asc, sample_time_utc asc // no need to sort by pool name; database names are unique for a logical server\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and database_name == prev(database_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend delta_log_write_throughput_bps = toreal(delta_cntr_value) / toreal(delta_sample_time_utc / 1000), key = int(1)\\r\\n| project-away cntr_value, delta_cntr_value, delta_sample_time_utc\\r\\n| join kind=inner elastic_pool_properties on key // all property rows with distinct database_max_log_rate_mbps\\r\\n| extend sample_time_diff_ms = abs(datetime_diff(\\\"millisecond\\\", sample_time_utc, properties_sample_time_utc)) // calculate the difference in sample times between sqldb_elastic_pool_performance_counters_common and sqldb_elastic_pool_properties\\r\\n| summarize arg_min(sample_time_diff_ms, sample_time_utc, delta_log_write_throughput_bps, database_max_log_rate_mbps) by database_name // restrict to the property row where this difference in minimal\\r\\n| project sample_time_utc, percentage = min_of(100 * (delta_log_write_throughput_bps / toreal(database_max_log_rate_mbps * 1024 * 1024)), 100), database_name\\r\\n);\\r\\nlet metric_timeline = \\r\\nmetric\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by database_name\\r\\n;\\r\\n// typical count of samples per database in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\nmetric\\r\\n| summarize count_samples = count() by database_name\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nmetric\\r\\n| summarize percentage = avgif(percentage, isfinite(percentage)), count_samples = count() by database_name\\r\\n| join kind=leftouter metric_timeline on database_name\\r\\n| project database_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), percentage), metric_timeline,\\r\\n          color = case(\\r\\n                      toreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\n                      percentage >= 90, \\\"red\\\",\\r\\n                      percentage >= 50, \\\"yellow\\\",\\r\\n                      percentage >= 0, \\\"green\\\",\\r\\n                      \\\"\\\"\\r\\n                      )\\r\\n| top 100 by percentage desc\\r\\n| sort by percentage desc, tolower(database_name) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "parameter",
                "componentId": "watcherResourceId",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "static",
                "gallery": "microsoft.database-watcher",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "parameter",
                    "value": "serverName"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "parameter",
                    "value": "haReplica"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average Data IO percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average Data IO utilization over selected time range"
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Log write"
        }
      ],
      "name": "database_log_write_heatmap"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}