{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "287d84d2-28ab-471d-822f-00fe825d3edc",
            "version": "KqlParameterItem/1.0",
            "name": "propertySampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "property_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| make-series metric = count() default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No database property samples are available",
        "timeBrushParameterName": "timeRange",
        "exportParameterName": "propertyHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "purple"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "propertySampleType",
        "comparison": "isEqualTo",
        "value": "Historical"
      },
      "name": "property_timeline"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "662fc17f-ac90-47b3-b9e1-5630c924e154",
            "version": "KqlParameterItem/1.0",
            "name": "propertyLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "61ec378d-5ee1-46ba-88d4-f895a3ac1a4b",
            "version": "KqlParameterItem/1.0",
            "name": "propertyHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between (todatetime(\\\"{propertyHistoricalSample:$.x}\\\") .. (todatetime(\\\"{propertyHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = min(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "d55daf33-5e18-474a-9f0c-04b540096ec8",
            "version": "KqlParameterItem/1.0",
            "name": "propertySampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "propertySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "propertyLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "propertySampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "propertyHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "propertyLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "property_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_samples = count()\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No elastic pool property samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibility": {
        "parameterName": "propertySampleType",
        "comparison": "isEqualTo",
        "value": "Historical"
      },
      "name": "property_sample_count"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_elastic_pool_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project sample_time = sample_time_utc, sample_time_utc, sample_age = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_age",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between last workbook refresh and displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "sample_age",
              "label": "Age of sample"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "propertySampleTime",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "selected_property_sample"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"elastic_pool_name\\\",\\r\\n1, \\\"service_tier\\\",\\r\\n1, \\\"service_level_objective_long\\\"\\r\\n];\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, elastic_pool_name, service_tier, service_level_objective_long\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"elastic_pool_name\\\", elastic_pool_name,\\r\\n                            property_name == \\\"service_tier\\\", service_tier,\\r\\n                            property_name == \\\"service_level_objective_long\\\", service_level_objective_long,\\r\\n                            \\\"\\\"\\r\\n                            )\\r\\n| project-away elastic_pool_name, service_tier, service_level_objective_long\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "properties_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"database_engine_start_time_utc\\\",\\r\\n1, \\\"database_engine_build_time\\\"\\r\\n];\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, database_engine_start_time_utc, database_engine_build_time\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"database_engine_start_time_utc\\\", database_engine_start_time_utc,\\r\\n                            property_name == \\\"database_engine_build_time\\\", database_engine_build_time,\\r\\n                            datetime(null)\\r\\n                            )\\r\\n| project-away database_engine_start_time_utc, database_engine_build_time\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Values are shown in the local time of the database engine instance"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "properties_datetime"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"logical_cpu_count\\\",\\r\\n1, \\\"database_engine_memory_mb\\\",\\r\\n1, \\\"database_engine_max_workers\\\",\\r\\n1, \\\"sos_target_memory_mb\\\",\\r\\n1, \\\"database_dtus\\\",\\r\\n1, \\\"database_buffer_pool_memory_mb\\\",\\r\\n1, \\\"database_max_memory_grant_percent\\\",\\r\\n1, \\\"database_max_workers\\\",\\r\\n1, \\\"database_max_data_iops\\\",\\r\\n1, \\\"database_max_log_rate_mbps\\\",\\r\\n1, \\\"elastic_pool_max_workers\\\",\\r\\n1, \\\"elastic_pool_max_data_iops\\\",\\r\\n1, \\\"elastic_pool_max_log_rate_mbps\\\"\\r\\n];\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc == todatetime(\\\"{propertySampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where elastic_pool_name == @\\\"{elasticPoolName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, logical_cpu_count, database_engine_memory_mb, database_engine_max_workers, sos_target_memory_mb, database_dtus, database_buffer_pool_memory_mb, database_max_memory_grant_percent, database_max_workers, database_max_data_iops, database_max_log_rate_mbps, elastic_pool_max_workers, elastic_pool_max_data_iops, elastic_pool_max_log_rate_mbps\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"logical_cpu_count\\\", toreal(logical_cpu_count),\\r\\n                            property_name == \\\"database_engine_memory_mb\\\", toreal(database_engine_memory_mb),\\r\\n                            property_name == \\\"database_engine_max_workers\\\", toreal(database_engine_max_workers),\\r\\n                            property_name == \\\"sos_target_memory_mb\\\", toreal(sos_target_memory_mb),\\r\\n                            property_name == \\\"database_dtus\\\", toreal(database_dtus),\\r\\n                            property_name == \\\"database_buffer_pool_memory_mb\\\", toreal(database_buffer_pool_memory_mb),\\r\\n                            property_name == \\\"database_max_memory_grant_percent\\\", toreal(database_max_memory_grant_percent),\\r\\n                            property_name == \\\"database_max_workers\\\", toreal(database_max_workers),\\r\\n                            property_name == \\\"database_max_data_iops\\\", toreal(database_max_data_iops),\\r\\n                            property_name == \\\"database_max_log_rate_mbps\\\", toreal(database_max_log_rate_mbps),\\r\\n                            property_name == \\\"elastic_pool_max_workers\\\", toreal(elastic_pool_max_workers),\\r\\n                            property_name == \\\"elastic_pool_max_data_iops\\\", toreal(elastic_pool_max_data_iops),\\r\\n                            property_name == \\\"elastic_pool_max_log_rate_mbps\\\", toreal(elastic_pool_max_log_rate_mbps),\\r\\n                            real(null)\\r\\n                            )\\r\\n| project-away logical_cpu_count, database_engine_memory_mb, database_engine_max_workers, sos_target_memory_mb, database_dtus, database_buffer_pool_memory_mb, database_max_memory_grant_percent, database_max_workers, database_max_data_iops, database_max_log_rate_mbps, elastic_pool_max_workers, elastic_pool_max_data_iops, elastic_pool_max_log_rate_mbps\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value may not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "database_properties_number"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "propertySampleTime",
        "comparison": "isNotEqualTo"
      },
      "name": "properties_and_configuration_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}