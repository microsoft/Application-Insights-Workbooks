{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "a762a2ae-beec-4bf5-9f4a-28bea2d2f737",
            "version": "KqlParameterItem/1.0",
            "name": "watcherResourceId",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          },
          {
            "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxClusterUri",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          },
          {
            "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
            "version": "KqlParameterItem/1.0",
            "name": "linkAdxDatabase",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "value": ""
          }
        ],
        "style": "pills",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "neverShow",
        "comparison": "isNotEqualTo"
      },
      "name": "link_adx_parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Data store",
        "expandable": true,
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "83420d36-0646-40aa-9637-d06a3d2a6145",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherResource",
                  "type": 1,
                  "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{watcherResourceId}\",\"urlParams\":[{\"key\":\"api-version\",\"value\":\"2023-09-01-preview\"}],\"batchDisabled\":false,\"transformers\":null}",
                  "isHiddenWhenLocked": true,
                  "queryType": 12
                },
                {
                  "id": "a6cd9521-127a-43bd-9227-6bcd67756456",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherName",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.name\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxClusterUri",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.properties.datastore.kustoClusterUri\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8,
                  "id": "f0889b5f-3fa4-40a0-838d-443b4c0472b6"
                },
                {
                  "id": "0797c608-2ecf-4711-ba9b-6d110f10acd3",
                  "version": "KqlParameterItem/1.0",
                  "name": "watcherAdxDatabase",
                  "type": 1,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"{watcherResource}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.properties.datastore.kustoDatabaseName\",\"columns\":[]}}]}",
                  "isHiddenWhenLocked": true,
                  "queryType": 8
                },
                {
                  "id": "1b7d18f3-88a9-40ed-9162-92710b29ba69",
                  "version": "KqlParameterItem/1.0",
                  "name": "dataStore",
                  "label": "Choose a data store",
                  "type": 10,
                  "description": "By default, the workbook loads data from the data store of the current database watcher. You can use an alternate data store by entering its Kusto query URI and database name.",
                  "isRequired": true,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"[{\\\"value\\\":\\\"watcher\\\",\\\"label\\\":\\\"{watcherName}\\\"},{\\\"value\\\":\\\"alternate\\\",\\\"label\\\":\\\"Alternate\\\"}]\",\"transformers\":null}",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 8,
                  "value": "watcher"
                }
              ],
              "style": "above",
              "queryType": 12
            },
            "customWidth": "30",
            "name": "watcher_adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Kusto query URI: `{watcherAdxClusterUri}` </p>\r\nKusto database: `{watcherAdxDatabase}`"
            },
            "customWidth": "70",
            "conditionalVisibilities": [
              {
                "parameterName": "watcherName",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "watcherAdxDatabase",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "dataStore",
                "comparison": "isEqualTo",
                "value": "watcher"
              }
            ],
            "name": "watcher_data_store"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "bbce4b83-dae6-46e0-bf67-c99ee0ea21f0",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxClusterUri",
                  "label": "Kusto query URI",
                  "type": 1,
                  "description": "Enter a Kusto query URI for the alternate data store. Most commonly, Kusto query URI format is: https://{kusto-cluster-name}.{region}.kusto.windows.net/",
                  "isRequired": true,
                  "value": ""
                },
                {
                  "id": "99cdb447-94d3-40c7-b902-c98628fb736a",
                  "version": "KqlParameterItem/1.0",
                  "name": "overrideAdxDatabase",
                  "label": "Kusto database",
                  "type": 1,
                  "description": "Enter a Kusto database name for the alternate data store",
                  "isRequired": true,
                  "value": ""
                }
              ],
              "style": "formHorizontal",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "70",
            "conditionalVisibility": {
              "parameterName": "dataStore",
              "comparison": "isEqualTo",
              "value": "alternate"
            },
            "name": "override_adx_parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "19f22da1-c8c7-42cc-9849-cf6aeddb7ba0",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterUri",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxClusterUri",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxClusterUri"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxClusterUri"
                      }
                    }
                  ]
                },
                {
                  "id": "b4b8f00b-7e05-4ae2-ad2b-2ba99f74b49a",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxDatabase",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "alternate",
                        "resultValType": "param",
                        "resultVal": "overrideAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "linkAdxDatabase",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "dataStore",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "watcher",
                        "resultValType": "param",
                        "resultVal": "watcherAdxDatabase"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "param",
                        "resultVal": "linkAdxDatabase"
                      }
                    }
                  ]
                },
                {
                  "id": "c5aca9de-de62-466e-bea8-9a149e935c4f",
                  "version": "KqlParameterItem/1.0",
                  "name": "adxClusterPingResult",
                  "label": "Kusto query URI ping result",
                  "type": 1,
                  "isRequired": true,
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show databases\\r\\n| where DatabaseName == @\\\"{adxDatabase}\\\" // ADX\\r\\n        or\\r\\n        (PrettyName == @\\\"{adxDatabase}\\\" and isnotempty(toguid(DatabaseName))) // Fabric Kusto\\r\\n| project 1\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"\"}",
                  "isHiddenWhenLocked": true,
                  "queryType": 9
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "alwaysHidden",
              "comparison": "isNotEqualTo"
            },
            "name": "adx_parameters"
          },
          {
            "type": 1,
            "content": {
              "json": "Cannot connect to Kusto query URI `{adxClusterUri}`, database `{adxDatabase}`. The Kusto cluster might be stopped or unreachable, specified cluster URI might be invalid, or permissions might be insufficient.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "adxClusterPingResult",
                "comparison": "isNotEqualTo",
                "value": "1"
              },
              {
                "parameterName": "adxClusterUri",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "adxDatabase",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "missing_data_bad_permissions_text"
          }
        ],
        "exportParameters": true
      },
      "name": "data_store_group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "a154b519-b1e2-4403-bbe3-67b10258d090",
            "version": "KqlParameterItem/1.0",
            "name": "tablePresence",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName startswith_cs \\\"sqldb_database_\\\"\\r\\n        or\\r\\n        TableName startswith_cs \\\"sqldb_elastic_pool_\\\"\\r\\n| project TableName\\r\\n| summarize sqldb_database_properties = take_anyif(1, TableName == \\\"sqldb_database_properties\\\"),\\r\\n            sqldb_database_resource_utilization = take_anyif(1, TableName == \\\"sqldb_database_resource_utilization\\\"),\\r\\n            sqldb_database_performance_counters_common = take_anyif(1, TableName == \\\"sqldb_database_performance_counters_common\\\"),\\r\\n            sqldb_database_storage_utilization = take_anyif(1, TableName == \\\"sqldb_database_storage_utilization\\\"),\\r\\n            sqldb_database_wait_stats = take_anyif(1, TableName == \\\"sqldb_database_wait_stats\\\"),\\r\\n            sqldb_database_query_runtime_stats = take_anyif(1, TableName == \\\"sqldb_database_query_runtime_stats\\\"),\\r\\n            sqldb_database_query_wait_stats = take_anyif(1, TableName == \\\"sqldb_database_query_wait_stats\\\"),\\r\\n            sqldb_database_connectivity = take_anyif(1, TableName == \\\"sqldb_database_connectivity\\\"),\\r\\n            sqldb_database_storage_io = take_anyif(1, TableName == \\\"sqldb_database_storage_io\\\"),\\r\\n            sqldb_database_missing_indexes = take_anyif(1, TableName == \\\"sqldb_database_missing_indexes\\\"),\\r\\n            sqldb_elastic_pool_resource_utilization = take_anyif(1, TableName == \\\"sqldb_elastic_pool_resource_utilization\\\"),\\r\\n            sqldb_elastic_pool_performance_counters_common = take_anyif(1, TableName == \\\"sqldb_elastic_pool_performance_counters_common\\\"),\\r\\n            sqldb_elastic_pool_wait_stats = take_anyif(1, TableName == \\\"sqldb_elastic_pool_wait_stats\\\"),\\r\\n            sqldb_elastic_pool_storage_utilization = take_anyif(1, TableName == \\\"sqldb_elastic_pool_storage_utilization\\\"),\\r\\n            sqldb_elastic_pool_properties = take_anyif(1, TableName == \\\"sqldb_elastic_pool_properties\\\"),\\r\\n            sqldb_elastic_pool_storage_io = take_anyif(1, TableName == \\\"sqldb_elastic_pool_storage_io\\\"),\\r\\n            sqldb_elastic_pool_connectivity = take_anyif(1, TableName == \\\"sqldb_elastic_pool_connectivity\\\")\\r\\n| project table_presence = dynamic_to_json(pack_all());\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "multiLineText": true,
              "editorLanguage": "text",
              "multiLineHeight": 2
            },
            "queryType": 9
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258900",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_properties",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_properties}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258901",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_resource_utilization",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_resource_utilization}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258902",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_performance_counters_common",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_performance_counters_common}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258903",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_storage_utilization",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_storage_utilization}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258904",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_wait_stats",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_wait_stats}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258905",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_resource_utilization",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_elastic_pool_resource_utilization}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258906",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_performance_counters_common",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_elastic_pool_performance_counters_common}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258907",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_wait_stats",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_elastic_pool_wait_stats}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258908",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_storage_utilization",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_elastic_pool_storage_utilization}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258909",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_properties",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_elastic_pool_properties}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258910",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_query_runtime_stats",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_query_runtime_stats}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258911",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_query_wait_stats",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_query_wait_stats}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b78258912",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_connectivity",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_connectivity}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b782589013",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_storage_io",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_elastic_pool_storage_io}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b782589014",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_storage_io",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_storage_io}"
                }
              }
            ]
          },
          {
            "id": "3883c57f-1f6f-4328-aece-f46b782589015",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_elastic_pool_connectivity",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_elastic_pool_connectivity}"
                }
              }
            ]
          },
          {
            "id": "852e9be1-0fca-4547-a5de-aa055fe4d670",
            "version": "KqlParameterItem/1.0",
            "name": "sqldb_database_missing_indexes",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{tablePresence:$.sqldb_database_missing_indexes}"
                }
              }
            ]
          },
          {
            "id": "38d18c5b-3cca-4bae-85b7-c74821db1d12",
            "version": "KqlParameterItem/1.0",
            "name": "count_sqldb_tables",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\".show tables\\r\\n| where TableName startswith \\\"sqldb_database_\\\"\\r\\n        or\\r\\n        TableName startswith \\\"sqldb_elastic_pool_\\\"\\r\\n| summarize cnt = tostring(count())\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "queryType": 9
          }
        ],
        "style": "above",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "name": "table_presence_parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "290bc25c-7ae2-414b-8e4b-2a06325fe590",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 3600000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "26ec743a-48d3-4e5b-b5e4-7ce839f08001",
            "version": "KqlParameterItem/1.0",
            "name": "serverNameFilterValue",
            "label": "Logical server",
            "type": 1,
            "description": "Enter a value to filter by full or partial logical server name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Logical server name filter value cannot contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": ""
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "elasticPoolNameFilterValue",
            "type": 1,
            "description": "Enter a value to filter by full or partial elastic pool name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Elastic pool name filter value cannot contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "100b2ad3-6848-4155-91bc-1b8734be065f",
            "label": "Elastic pool",
            "value": ""
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilterValue",
            "type": 1,
            "description": "Enter a value to filter by full or partial database name",
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Database name filter value cannot contain double quotes"
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "78f02e62-147d-49df-b4cb-58a7bcdd524c",
            "label": "Database",
            "value": ""
          },
          {
            "id": "9353f345-7d22-419c-b9cf-a39647fff8fd",
            "version": "KqlParameterItem/1.0",
            "name": "matchPattern",
            "label": "Match pattern",
            "type": 2,
            "description": "Select a string match operator to filter by logical server, elastic pool, or database name",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    {\"value\":\"startswith\",\"label\":\"starts with\"},\r\n    {\"value\":\"contains\",\"label\":\"contains\"},\r\n    {\"value\":\"endswith\",\"label\":\"ends with\"},\r\n    {\"value\":\"!startswith\",\"label\":\"does not start with\"},\r\n    {\"value\":\"!contains\",\"label\":\"does not contain\"},\r\n    {\"value\":\"!endswith\",\"label\":\"does not end with\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "contains"
          },
          {
            "id": "7fc24d10-032f-4d35-950c-ca95e354c95a",
            "version": "KqlParameterItem/1.0",
            "name": "serverNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "serverNameFilterValue",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no logical_server_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name startswith @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name contains @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name endswith @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name !startswith @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name !contains @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "| where logical_server_name !endswith @\"{serverNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no logical_server_name filter"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "25b19c74-907f-4947-9228-9ff7c62d22e1",
            "version": "KqlParameterItem/1.0",
            "name": "elasticPoolNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "elasticPoolNameFilterValue",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no elastic_pool_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name startswith @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name contains @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name endswith @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name !startswith @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name !contains @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "| where elastic_pool_name !endswith @\"{elasticPoolNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no elastic_pool_name filter"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "95a28bc5-5308-489c-9609-c0e9f694c47b",
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "databaseNameFilterValue",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no database_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "startswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name startswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "contains",
                  "resultValType": "static",
                  "resultVal": "| where database_name contains @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "endswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name endswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!startswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name !startswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!contains",
                  "resultValType": "static",
                  "resultVal": "| where database_name !contains @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "matchPattern",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "!endswith",
                  "resultValType": "static",
                  "resultVal": "| where database_name !endswith @\"{databaseNameFilterValue}\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no database_name filter"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "af2747c0-e919-4558-ac14-bbb8130320a1",
            "version": "KqlParameterItem/1.0",
            "name": "showDescriptions",
            "label": "Show descriptions",
            "type": 10,
            "description": "Shows descriptions next to charts",
            "isRequired": true,
            "isGlobal": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"true\",\"label\":\"Yes\"},{\"value\":\"false\",\"label\":\"No\"}]",
            "value": "false"
          },
          {
            "id": "0183848b-e820-4d26-8264-5eaf9e65e6b9",
            "version": "KqlParameterItem/1.0",
            "name": "grainFactor",
            "label": "Grain factor",
            "type": 2,
            "description": "Higher time grain provides more details on charts when granular data exists.",
            "isRequired": true,
            "value": "4",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3},{\"value\":4,\"label\":4},{\"value\":5,\"label\":5},{\"value\":6,\"label\":6}]"
          },
          {
            "id": "5308da78-e372-4f1a-a428-c0bedd9c2f3a",
            "version": "KqlParameterItem/1.0",
            "name": "tabName",
            "type": 1,
            "value": "Database heatmaps",
            "isHiddenWhenLocked": true
          },
          {
            "id": "51f0fad6-6b64-4b6b-a389-2ece23283ea1",
            "version": "KqlParameterItem/1.0",
            "name": "singleDatabaseCountQuery",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "sqldb_database_properties",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "static",
                  "resultVal": "sqldb_database_properties | where sample_time_utc > ago(72h) or sample_time_utc between ({timeRange:start} .. {timeRange:end}) | project sample_time_utc, unique_name = strcat(logical_server_name, database_name) | summarize total_targets = dcount(unique_name)"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "print 0"
                }
              }
            ]
          },
          {
            "id": "e7023a66-01b2-448d-98e6-57a088433fa8",
            "version": "KqlParameterItem/1.0",
            "name": "elasticPoolCountQuery",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "sqldb_elastic_pool_properties",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "static",
                  "resultVal": "sqldb_elastic_pool_properties | where sample_time_utc > ago(72h) or sample_time_utc between ({timeRange:start} .. {timeRange:end})| project sample_time_utc, unique_name = strcat(logical_server_name, elastic_pool_name) | summarize total_targets = dcount(unique_name)"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "print 0"
                }
              }
            ]
          },
          {
            "id": "6de18984-5c21-4ec9-a397-c56d6df53032",
            "version": "KqlParameterItem/1.0",
            "name": "topHitters",
            "type": 1,
            "isHiddenWhenLocked": true,
            "value": "50"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Overview",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let time_range = datatable(key:int, time_range_start:datetime, time_range_end:datetime) [\\r\\n1, datetime(\\\"{timeRange:startISO}\\\"), datetime(\\\"{timeRange:endISO}\\\")\\r\\n];\\r\\nlet single_database_target_count = toscalar(\\r\\n{singleDatabaseCountQuery}\\r\\n);\\r\\nlet elastic_pool_target_count = toscalar(\\r\\n{elasticPoolCountQuery}\\r\\n);\\r\\ntime_range\\r\\n| project time_range_start, time_range_end, time_range_duration = datetime_diff('second', time_range_end, time_range_start), single_database_target_count, elastic_pool_target_count, last_refresh_time = now(), ingestion_stats_link = \\\"Community-Workbooks/Database watcher/Ingestion stats\\\", adx_link = strcat(trim_end(\\\"/\\\", \\\"{adxClusterUri}\\\"), \\\"/\\\", \\\"{adxDatabase}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "time_range_start",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Start of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_end",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "End of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_duration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "single_database_target_count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Total monitored databases in selected time range"
                    }
                  },
                  {
                    "columnMatch": "elastic_pool_target_count",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Total monitored elastic pools in selected time range"
                    }
                  },
                  {
                    "columnMatch": "last_refresh_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Dashboard refresh date and time"
                    }
                  },
                  {
                    "columnMatch": "ingestion_stats_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": "Ingestion statistics",
                      "linkIsContextBlade": true,
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "column",
                        "templateId": "ingestion_stats_link",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "Data ingestion statistics",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "adxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "adxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "targetType",
                            "source": "static",
                            "value": "sqldb"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "View ingestion statistics including ingestion latency for each table"
                    }
                  },
                  {
                    "columnMatch": "adx_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Url",
                      "linkLabel": "Query data store"
                    },
                    "tooltipFormat": {
                      "tooltip": "Explore monitoring data using ad-hoc KQL queries"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "time_range_start",
                    "label": "Time range start"
                  },
                  {
                    "columnId": "time_range_end",
                    "label": "Time range end"
                  },
                  {
                    "columnId": "time_range_duration",
                    "label": "Time range duration"
                  },
                  {
                    "columnId": "single_database_target_count",
                    "label": "Databases"
                  },
                  {
                    "columnId": "elastic_pool_target_count",
                    "label": "Elastic pools"
                  },
                  {
                    "columnId": "last_refresh_time",
                    "label": "Last refresh"
                  },
                  {
                    "columnId": "ingestion_stats_link",
                    "label": "Data ingestion"
                  },
                  {
                    "columnId": "adx_link",
                    "label": "Data store"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibility": {
              "parameterName": "sqldb_database_resource_utilization",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "header_time_range_single_database"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let time_range = datatable(key:int, time_range_start:datetime, time_range_end:datetime) [\\r\\n1, datetime(\\\"{timeRange:startISO}\\\"), datetime(\\\"{timeRange:endISO}\\\")\\r\\n];\\r\\nlet elastic_pool_target_count = toscalar(\\r\\n{elasticPoolCountQuery}\\r\\n);\\r\\ntime_range\\r\\n| project time_range_start, time_range_end, time_range_duration = datetime_diff('second', time_range_end, time_range_start), elastic_pool_target_count, last_refresh_time = now(), ingestion_stats_link = \\\"Community-Workbooks/Database watcher/ingestion stats\\\", adx_link = strcat(trim_end(\\\"/\\\", \\\"{adxClusterUri}\\\"), \\\"/\\\", \\\"{adxDatabase}\\\")\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "noDataMessage": "There is no data for specified parameters.",
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "time_range_start",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Start of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_end",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "End of time range, as of last refresh"
                    }
                  },
                  {
                    "columnMatch": "time_range_duration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "last_refresh_time",
                    "formatter": 6,
                    "formatOptions": {
                      "customColumnWidthSetting": "23ch"
                    },
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Dashboard refresh date and time"
                    }
                  },
                  {
                    "columnMatch": "ingestion_stats_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": "Ingestion statistics",
                      "linkIsContextBlade": true,
                      "workbookContext": {
                        "componentIdSource": "workbook",
                        "resourceIdsSource": "workbook",
                        "templateIdSource": "column",
                        "templateId": "ingestion_stats_link",
                        "typeSource": "workbook",
                        "gallerySource": "default",
                        "locationSource": "workbook",
                        "workbookName": "Data ingestion statistics",
                        "passSpecificParams": true,
                        "templateParameters": [
                          {
                            "name": "adxClusterUri",
                            "source": "parameter",
                            "value": "adxClusterUri"
                          },
                          {
                            "name": "adxDatabase",
                            "source": "parameter",
                            "value": "adxDatabase"
                          },
                          {
                            "name": "timeRange",
                            "source": "parameter",
                            "value": "timeRange"
                          },
                          {
                            "name": "targetType",
                            "source": "static",
                            "value": "sqldb"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "View ingestion statistics including ingestion latency for each table"
                    }
                  },
                  {
                    "columnMatch": "adx_link",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Url",
                      "linkLabel": "Query data store"
                    },
                    "tooltipFormat": {
                      "tooltip": "Explore monitoring data using ad-hoc KQL queries"
                    }
                  },
                  {
                    "columnMatch": "last_latency_seconds",
                    "formatter": 2,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "The time from collection to ingestion, at 90th percentile for selected time range"
                    }
                  },
                  {
                    "columnMatch": "latency_trend",
                    "formatter": 21,
                    "formatOptions": {
                      "min": 0,
                      "max": 20,
                      "palette": "turquoise"
                    },
                    "tooltipFormat": {
                      "tooltip": "Data latency trend in selected time range"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "time_range_start",
                    "label": "Time range start"
                  },
                  {
                    "columnId": "time_range_end",
                    "label": "Time range end"
                  },
                  {
                    "columnId": "time_range_duration",
                    "label": "Time range duration"
                  },
                  {
                    "columnId": "elastic_pool_target_count",
                    "label": "Elastic pools"
                  },
                  {
                    "columnId": "last_refresh_time",
                    "label": "Last refresh"
                  },
                  {
                    "columnId": "ingestion_stats_link",
                    "label": "Data ingestion"
                  },
                  {
                    "columnId": "adx_link",
                    "label": "Data store"
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "title",
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "The time from collection to ingestion for the last data sample in selected time range, and latency trend in that range."
                  }
                },
                "leftContent": {
                  "columnMatch": "title",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "last_latency_timespan",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "latency_trend",
                  "formatter": 10,
                  "formatOptions": {
                    "palette": "turquoise",
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": false,
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "sqldb_elastic_pool_resource_utilization",
                "comparison": "isEqualTo",
                "value": "1"
              },
              {
                "parameterName": "sqldb_database_resource_utilization",
                "comparison": "isNotEqualTo",
                "value": "1"
              }
            ],
            "name": "header_time_range_elastic_pool"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "header_group"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "tabStyle": "bigger",
        "links": [
          {
            "id": "10e98cdf-277d-4010-ac79-cf8c5c92694d",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Database heatmaps",
            "subTarget": "Database heatmaps",
            "style": "link"
          },
          {
            "id": "56dcdc60-6565-4d32-817f-184cef1d9d05",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Elastic pool heatmaps",
            "subTarget": "Elastic pool heatmaps",
            "style": "link"
          },
          {
            "id": "9acdfd5b-d8b9-4708-b6b4-8605f0e1da6e",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Databases",
            "subTarget": "Databases",
            "style": "link"
          },
          {
            "id": "194f216f-7f34-4ffc-9160-41ce0d27e228",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Elastic pools",
            "subTarget": "Elastic pools",
            "style": "link"
          },
          {
            "id": "4711f218-a43c-4d49-8c28-904e69e01909",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Top queries",
            "subTarget": "Top queries",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "top_tabs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "ea8899df-fb45-425b-905e-7aa7865b9d24",
            "version": "KqlParameterItem/1.0",
            "name": "databaseHeatmapGroupBy",
            "label": "Group by",
            "type": 10,
            "description": "Display hexagons in groups",
            "isRequired": true,
            "value": "server",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"server\",\"label\":\"Logical server\"},{\"value\":\"server_and_pool\",\"label\":\"Elastic pool\"}]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "database_heatmap_parameters"
    },
    {
      "type": 1,
      "content": {
        "json": "* On each heatmap, a hexagon represents a database replica.\r\n* A color dot next to database name represents the replica type:\r\n\t* 🔵 -> Primary\r\n\t* 🔘 -> HA secondary\r\n\t* 🟣 -> Geo-replication forwarder\r\n\t* 🟢 -> Named secondary\r\n* Up to {topHitters} top resource consuming database replicas are shown. Use name filters or the `Databases` grid to find other databases.\r\n* Databases can be grouped by logical server, or by elastic pool name.\r\n* Click on the database name in a hexagon to open a detailed dashboard for that database.\r\n* Hexagons colors are described below. Databases with insufficient data are colored gray.\r\n\r\n|Heatmap|Description|\r\n|:-|:-|\r\n|`CPU`, `Instance CPU`, `Data IO`, `Log write`, `Workers`|Each hexagon is colored depending on average utilization in the selected time range, by band: green (0%-49%), yellow (50%-89%), and red (90%-100%).|\r\n|`Requests`|Each hexagon is colored depending on the average rate of requests for the database in the selected time range, with lighter colors representing lower rates, and darker colors representing higher rates.|\r\n|`Waits`|Each hexagon is colored depending on the cumulative time of waits in the selected wait category and time range, with lighter colors representing lower waits, and darker colors representing higher waits. Each wait category [maps](https://go.microsoft.com/fwlink/?linkid=2238095) to one or more individual wait types. Click on a database name to see a chart of top wait types for that database over time.|\r\n|`Storage IO`|Each hexagon is colored to reflect the magnitude of selected IO metric (average latency, IOPS, and throughput) in the selected time range for either read or write IO, with lighter colors representing lower rates, and darker colors representing higher rates.|\r\n|`Connectivity`|Each hexagon is colored green if every connectivity probe for that database in selected time range was successful. Otherwise, it is colored orange, and the number of failed connectivity probes is shown at the bottom.|"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_heatmaps_help"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "1166beb9-0014-4358-9e65-e9098006cede",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "CPU",
            "subTarget": "CPU",
            "style": "link"
          },
          {
            "id": "f9fb9254-3c8a-4b39-af58-d3ce9f8e6bad",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Instance CPU",
            "subTarget": "Instance CPU",
            "style": "link"
          },
          {
            "id": "260aaea6-b74e-49e0-8d24-f3ec40a24941",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Data IO",
            "subTarget": "Data IO",
            "style": "link"
          },
          {
            "id": "28ab9616-c950-45de-8b96-11b2fb3c38d6",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Log write",
            "subTarget": "Log write",
            "style": "link"
          },
          {
            "id": "4e32991d-e3bf-46b9-984b-66834d53d905",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Workers",
            "subTarget": "Workers",
            "style": "link"
          },
          {
            "id": "7ac69d9e-fa5e-449d-ab27-1c600c2bab4d",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Requests",
            "subTarget": "Requests",
            "style": "link"
          },
          {
            "id": "a78d4945-2c3a-44d4-bf32-e34e12826a97",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Waits",
            "subTarget": "Waits",
            "style": "link"
          },
          {
            "id": "b8042663-d1a0-4dc8-89be-9f9d3f90035b",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Storage IO",
            "subTarget": "Storage IO",
            "style": "link"
          },
          {
            "id": "79867c04-0cb5-40e1-b09e-008b45ab22a8",
            "cellValue": "databaseHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Connectivity",
            "subTarget": "Connectivity",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "database_heatmap_tabs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| project sample_time_utc, logical_server_name, database_name, replica_type, avg_cpu_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(avg_cpu_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name, replica_type\\r\\n| join kind=inner database_properties on logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name, replica_type\\r\\n| join kind=inner database_properties on logical_server_name, database_name, replica_type\\r\\n| project logical_server_name, database_name, replica_type, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\ngrouper = case(\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\nstrcat(logical_server_name, \\\" | \\\", database_name)\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\nreplica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\nreplica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, database_name, decorated_database_name = strcat(replica_type_indicator, database_name), replica_type, elastic_pool_name, percentage, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper), top_tooltip = strcat(database_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "CPU"
        }
      ],
      "name": "database_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| project sample_time_utc, logical_server_name, database_name, replica_type, avg_instance_cpu_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(avg_instance_cpu_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name, replica_type\\r\\n| join kind=inner database_properties on logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name, replica_type\\r\\n| project logical_server_name, database_name, replica_type, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\ngrouper = case(\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\nstrcat(logical_server_name, \\\" | \\\", database_name)\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\nreplica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\nreplica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, database_name, decorated_database_name = strcat(replica_type_indicator, database_name), replica_type, elastic_pool_name, percentage, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper), top_tooltip = strcat(database_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Instance CPU"
        }
      ],
      "name": "database_instance_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| project sample_time_utc, logical_server_name, database_name, replica_type, avg_data_io_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(avg_data_io_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name, replica_type\\r\\n| join kind=inner database_properties on logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name, replica_type\\r\\n| project logical_server_name, database_name, replica_type, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\ngrouper = case(\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\nstrcat(logical_server_name, \\\" | \\\", database_name)\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\nreplica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\nreplica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, database_name, decorated_database_name = strcat(replica_type_indicator, database_name), replica_type, elastic_pool_name, percentage, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper), top_tooltip = strcat(database_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Data IO"
        }
      ],
      "name": "database_data_io_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| project sample_time_utc, logical_server_name, database_name, replica_type, avg_log_write_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(avg_log_write_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name, replica_type\\r\\n| join kind=inner database_properties on logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name, replica_type\\r\\n| project logical_server_name, database_name, replica_type, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\ngrouper = case(\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\nstrcat(logical_server_name, \\\" | \\\", database_name)\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\nreplica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\nreplica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, database_name, decorated_database_name = strcat(replica_type_indicator, database_name), replica_type, elastic_pool_name, percentage, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper), top_tooltip = strcat(database_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Log write"
        }
      ],
      "name": "database_log_write_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_database_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| project sample_time_utc, logical_server_name, database_name, replica_type, max_worker_percent\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize percentage = avg(max_worker_percent), count_samples = dcount(sample_time_utc) by logical_server_name, database_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, database_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name, replica_type\\r\\n| join kind=inner database_properties on logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name, replica_type\\r\\n| project logical_server_name, database_name, replica_type, elastic_pool_name, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all databases\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\ngrouper = case(\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\nstrcat(logical_server_name, \\\" | \\\", database_name)\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\nreplica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\nreplica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, database_name, decorated_database_name = strcat(replica_type_indicator, database_name), replica_type, elastic_pool_name, percentage, color, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper), top_tooltip = strcat(database_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Workers"
        }
      ],
      "name": "database_workers_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let requests = materialize (\\r\\n// Requests are in sqldb_database_performance_counters_common for single databases and \\r\\n// in sqldb_elastic_pool_performance_counters_common for pooled databases. Use both as the source.\\r\\nunion isfuzzy=true // sqldb_elastic_pool_performance_counters_common may not exist\\r\\n(\\r\\nsqldb_database_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total request count\\\")\\r\\n| project-away database_id, logical_database_id, physical_database_id, instance_name\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsort by logical_server_name asc, replica_type asc, replica_id asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and logical_server_name == prev(logical_server_name) and replica_type == prev(replica_type) and replica_id == prev(replica_id), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| project-away cntr_type, cntr_value\\r\\n| summarize total_requests = sum(toreal(delta_cntr_value)),\\r\\n            total_ms = sum(toreal(delta_sample_time_utc)),\\r\\n            count_samples = dcount(sample_time_utc)\\r\\n            by logical_server_name, database_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n),\\r\\n(\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name in (\\\"Total request count\\\")\\r\\n| project-away database_id, anchor_logical_database_id, anchor_physical_database_id, instance_name\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsort by logical_server_name asc, replica_type asc, anchor_database_replica_id asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and logical_server_name == prev(logical_server_name) and replica_type == prev(replica_type) and anchor_database_replica_id == prev(anchor_database_replica_id), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| project-away cntr_type, cntr_value\\r\\n| summarize total_requests = sum(toreal(delta_cntr_value)),\\r\\n            total_ms = sum(toreal(delta_sample_time_utc)),\\r\\n            count_samples = dcount(sample_time_utc)\\r\\n            by logical_server_name, database_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nrequests\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet requests_timeline = \\r\\n(\\r\\nrequests\\r\\n| make-series metric_timeline = sum(total_requests) / sum(total_ms) * 1000 default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nrequests\\r\\n| lookup total_sample_count on logical_server_name, database_name, replica_type\\r\\n| summarize requests_rate = sum(total_requests) / sum(total_ms) * 1000,\\r\\n            count_samples = sum(count_samples)\\r\\n            by logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter requests_timeline on logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter database_properties on logical_server_name, database_name, replica_type\\r\\n| project logical_server_name, database_name, replica_type, elastic_pool_name, requests_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), requests_rate), metric_timeline,\\r\\ngrouper = case(\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\nstrcat(logical_server_name, \\\" | \\\", database_name)\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\nreplica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\nreplica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, database_name, decorated_database_name = strcat(replica_type_indicator, database_name), replica_type, elastic_pool_name, requests_rate, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper), top_tooltip = strcat(database_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by requests_rate desc\\r\\n| sort by requests_rate desc, tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "requests_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "requests_rate",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Requests"
        }
      ],
      "name": "database_requests_heatmap"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "9839439c-056b-4b65-be62-c9e59ed8dd00",
                  "version": "KqlParameterItem/1.0",
                  "name": "waitCategory",
                  "label": "Wait category",
                  "type": 2,
                  "description": "Select one or more wait categories to show on heatmap. The percentage values in parentheses describe wait distribution across the estate. On a specific instance, the distribution of waits can be significantly different.",
                  "multiSelect": true,
                  "quote": "\"",
                  "delimiter": ",",
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let waits = materialize (\\r\\nsqldb_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| partition hint.strategy = shuffle by wait_category\\r\\n(\\r\\nsummarize wait_time_ms = sum(wait_time_ms) by wait_category\\r\\n)\\r\\n);\\r\\nlet total_wait_time_ms = toscalar(\\r\\nwaits\\r\\n| summarize sum(wait_time_ms)\\r\\n);\\r\\nwaits\\r\\n| project wait_category, wait_category_display_name = strcat(wait_category, \\\" (\\\", round(100 * toreal(wait_time_ms) / toreal(total_wait_time_ms), 2), \\\"%)\\\")\\r\\n| sort by wait_category asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "[]",
                    "showDefault": false
                  },
                  "queryType": 9,
                  "value": [
                    "value::all"
                  ]
                },
                {
                  "id": "c512ddf9-831e-430f-b658-fcf6656308c9",
                  "version": "KqlParameterItem/1.0",
                  "name": "waitCategoryFilter",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "waitCategory",
                        "operator": "is Empty",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "// no wait_category filter"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "waitCategory",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "| where wait_category in ({waitCategory})"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "// no wait_category filter"
                      }
                    }
                  ]
                }
              ],
              "style": "formHorizontal",
              "queryType": 9
            },
            "customWidth": "50",
            "name": "wait_category_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let waits = materialize (\\r\\nsqldb_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n{waitCategoryFilter}\\r\\n| partition hint.strategy = shuffle by database_name\\r\\n(\\r\\nsummarize wait_time_ms = sum(wait_time_ms),\\r\\n          interval_start = min(sample_time_utc),\\r\\n          interval_end = max(sample_time_utc)\\r\\n          by logical_server_name, database_name, replica_type, replica_id, wait_category, sample_time_utc\\r\\n| sort by logical_server_name asc, replica_type asc, replica_id asc, wait_category asc, sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms) and logical_server_name == prev(logical_server_name) and replica_type == prev(replica_type) and replica_id == prev(replica_id) and wait_category == prev(wait_category), wait_time_ms - prev(wait_time_ms), long(null))\\r\\n| where sample_time_utc >= prev(sample_time_utc)\\r\\n| summarize total_wait_time_ms = sum(toreal(delta_wait_time_ms)),\\r\\n            interval_start = min(interval_start),\\r\\n            interval_end = max(interval_end)\\r\\n            by logical_server_name, database_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\n// Total count of samples per database in selected time range. Use base table because \\\"waits\\\" is restricted to a wait category, which may not be present in every sample\\r\\nlet total_sample_count = (\\r\\nsqldb_database_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize total_count_samples = dcount(sample_time_utc)\\r\\n            by logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\ntotal_sample_count\\r\\n| join kind=leftouter waits on logical_server_name, database_name, replica_type\\r\\n| make-series metric_timeline = sum(total_wait_time_ms) / datetime_diff(\\\"Second\\\", max(interval_end), min(interval_start)) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, database_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, database_name, replica_type\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name, replica_type\\r\\n);\\r\\ntotal_sample_count\\r\\n| join kind=leftouter waits on logical_server_name, database_name, replica_type // total_sample_count has a row for each {logical_server_name, database_name, replica_type}; waits may not have a row for that tuple if it had no waits matching the wait_category filter. Use outer join to avoid dropping databases from chart as the filter values are changed.\\r\\n| summarize wait_ms_per_second = sum(total_wait_time_ms) / datetime_diff(\\\"Second\\\", max(interval_end), min(interval_start)),\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter database_properties on logical_server_name, database_name, replica_type\\r\\n| project\\r\\nlogical_server_name,\\r\\ndatabase_name,\\r\\nreplica_type,\\r\\nelastic_pool_name,\\r\\nwait_ms_per_second = case(\\r\\nisnull(count_samples) or count_samples == 0, real(0),\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, real(null),\\r\\nwait_ms_per_second\\r\\n),\\r\\nmetric_timeline,\\r\\ngrouper = case(\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\nstrcat(logical_server_name, \\\" | \\\", database_name)\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\nreplica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\nreplica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, database_name, decorated_database_name = strcat(replica_type_indicator, database_name), replica_type, elastic_pool_name, wait_ms_per_second, metric_timeline, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper), top_tooltip = strcat(database_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by wait_ms_per_second desc\\r\\n| sort by wait_ms_per_second desc, tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "decorated_database_name",
                  "formatter": 1,
                  "formatOptions": {
                    "linkTarget": "WorkbookTemplate",
                    "workbookContext": {
                      "componentIdSource": "workbook",
                      "resourceIdsSource": "workbook",
                      "templateIdSource": "static",
                      "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                      "typeSource": "workbook",
                      "gallerySource": "default",
                      "locationSource": "workbook",
                      "workbookName": "Azure SQL database",
                      "passSpecificParams": true,
                      "templateParameters": [
                        {
                          "name": "databaseName",
                          "source": "column",
                          "value": "database_name"
                        },
                        {
                          "name": "serverName",
                          "source": "column",
                          "value": "logical_server_name"
                        },
                        {
                          "name": "timeRange",
                          "source": "parameter",
                          "value": "timeRange"
                        },
                        {
                          "name": "watcherResourceId",
                          "source": "parameter",
                          "value": "watcherResourceId"
                        },
                        {
                          "name": "linkAdxClusterUri",
                          "source": "parameter",
                          "value": "adxClusterUri"
                        },
                        {
                          "name": "linkAdxDatabase",
                          "source": "parameter",
                          "value": "adxDatabase"
                        },
                        {
                          "name": "tabName",
                          "source": "static",
                          "value": "Overview"
                        },
                        {
                          "name": "haReplica",
                          "source": "column",
                          "value": "ha_secondary"
                        },
                        {
                          "name": "showDescriptions",
                          "source": "parameter",
                          "value": "showDescriptions"
                        }
                      ],
                      "viewerMode": true
                    }
                  },
                  "tooltipFormat": {
                    "tooltip": "[\"top_tooltip\"]"
                  }
                },
                "centerContent": {
                  "columnMatch": "wait_ms_per_second",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "numberFormat": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    },
                    "emptyValCustomText": "N/A"
                  },
                  "tooltipFormat": {
                    "tooltip": "Cumulative wait time (in milliseconds per second) in selected wait categories, averaged over selected time range. Shows \\\"N/A\\\" if the number of samples is insufficient."
                  }
                },
                "bottomContent": {
                  "columnMatch": "metric_timeline",
                  "formatter": 21,
                  "formatOptions": {
                    "palette": "purple"
                  },
                  "tooltipFormat": {
                    "tooltip": "Cumulative wait time in selected wait categories over selected time range"
                  }
                },
                "hivesContent": {
                  "columnMatch": "grouper",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "ResourceFlat",
                        "text": "{0}{1}"
                      }
                    ]
                  }
                },
                "nodeIdField": "database_name",
                "graphOrientation": 3,
                "showOrientationToggles": false,
                "nodeSize": null,
                "staticNodeSize": 150,
                "colorSettings": {
                  "nodeColorField": "wait_ms_per_second",
                  "type": 4,
                  "heatmapPalette": "greenBlue",
                  "heatmapMin": null,
                  "heatmapMax": null,
                  "emptyValueColor": "gray"
                },
                "groupByField": "grouper",
                "hivesMargin": 5
              }
            },
            "name": "database_waits_heatmap"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_wait_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Waits"
        }
      ],
      "name": "database_waits_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "template",
        "loadFromTemplateId": "Community-Workbooks/Database watcher/Azure SQL Database/estate/database storage io",
        "items": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Storage IO"
        }
      ],
      "name": "database_io_group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server name, database name, and replica type\\r\\nlet connection_server_database_target = materialize (\\r\\nsqldb_database_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, database_name, replica_type) by connection_server_name, connection_database_name, connection_application_intent\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nlet expected_probe_count = toscalar(\\r\\nsqldb_database_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize count_samples = dcount(probe_time_utc) by logical_server_name, database_name, replica_type\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nlet database_properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_name) by logical_server_name, database_name, replica_type\\r\\n);\\r\\nsqldb_database_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_database_target on connection_server_name, connection_database_name, connection_application_intent // A failed probe has empty logical_server_name and database_name. Look it up for the most recent successful probe with the same connection names.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         database_name = iif(isempty(database_name), database_name1, database_name),\\r\\n         replica_type = iif(isempty(replica_type), replica_type1, replica_type)\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize count_failed_probes = countif(probe_return_value != 1),\\r\\n            count_successful_probes = countif(probe_return_value == 1),\\r\\n            count_probes = count()\\r\\n            by logical_server_name, database_name, replica_type\\r\\n| join kind=leftouter database_properties on logical_server_name, database_name, replica_type\\r\\n{elasticPoolNameFilter}\\r\\n| project logical_server_name, database_name, replica_type, elastic_pool_name, health_ratio = iif(toreal(count_probes)/expected_probe_count < 0.5, real(null), toreal(count_successful_probes) / toreal(count_probes)), count_failed_probes = iif(count_failed_probes > 0, count_failed_probes, int(null)),\\r\\ncolor = case(\\r\\ntoreal(count_probes)/expected_probe_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all servers\\r\\ncount_failed_probes > 0, \\\"orange\\\",\\r\\ncount_successful_probes > 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\ngrouper = case(\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server\\\", logical_server_name,\\r\\n\\\"{databaseHeatmapGroupBy}\\\" == \\\"server_and_pool\\\", strcat(logical_server_name, \\\" | \\\", iif(isempty(elastic_pool_name), \\\"(None)\\\", elastic_pool_name)),\\r\\nstrcat(logical_server_name, \\\" | \\\", database_name)\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\nreplica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\nreplica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, database_name, decorated_database_name = strcat(replica_type_indicator, database_name), replica_type, elastic_pool_name, health_ratio, count_failed_probes, color, grouper = iif(\\\"{databaseHeatmapGroupBy}\\\" == \\\"none\\\", \\\"\\\", grouper), top_tooltip = strcat(database_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by health_ratio asc\\r\\n| sort by health_ratio asc, tolower(grouper) asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_database_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL database",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "databaseName",
                    "source": "column",
                    "value": "database_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "health_ratio",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "percent",
                "minimumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "The ratio of successful connectivity probes to total connectivity probes, as a percentage. Shows \"N/A\" if the number of probes is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "count_failed_probes",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "tooltipFormat": {
              "tooltip": "The number of failed connectivity probes in selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "grouper",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "database_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "grouper",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_connectivity",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Database heatmaps"
        },
        {
          "parameterName": "databaseHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Connectivity"
        }
      ],
      "name": "database_connectivity_heatmap"
    },
    {
      "type": 1,
      "content": {
        "json": "* On each heatmap, a hexagon represents an elastic pool replica.\r\n* A color dot next to elastic pool name represents the replica type:\r\n\t* 🔵 -> Primary\r\n\t* 🔘 -> HA secondary\r\n* Up to {topHitters} top resource consuming pool replicas are shown. Use name filters or the `Elastic pools` grid to find other pools.\r\n* Click on the pool name in a hexagon to open a detailed dashboard for that elastic pool\r\n* Elastic pools are grouped by logical server\r\n* Hexagons colors are described below. Eelastic pools with insufficient data are colored gray.\r\n\r\n|Heatmap|Description|\r\n|:-|:-|\r\n|`CPU`, `Instance CPU`, `Data IO`, `Log write`, `Workers`|Each hexagon is colored depending on average elastic pool resource utilization in the selected time range, by band: green (0%-49%), yellow (50%-69%), orange (70%-89%), and red (90%-100%).|\r\n|`Requests`|Each hexagon is colored depending on the average rate of requests for the elastic pool in the selected time range, with lighter colors representing lower rates, and darker colors representing higher rates.|\r\n|`Waits`|Each hexagon is colored depending on the cumulative time of waits in the selected wait category and time range, with lighter colors representing lower waits, and darker colors representing higher waits. Each wait category [maps](https://go.microsoft.com/fwlink/?linkid=2238095) to one or more individual wait types. Click on an elastic pool name to see a chart of top wait types for that elastic pool over time.|\r\n|`Storage IO`|Each hexagon is colored to reflect the magnitude of selected IO metric (average latency, total IO operations, total bytes) in the selected time range for either read or write IO, with lighter colors representing lower rates, and darker colors representing higher rates.|\r\n|`Connectivity`|Each hexagon is colored green if every connectivity probe for the anchor database of an elastic pool in selected time range was successful. Otherwise, it is colored orange, and the number of failed connectivity probes is shown at the bottom.|\r\n"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "pool_heatmaps_help"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "659aa164-0f0f-4797-b5a9-309ca95d7e0e",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "CPU",
            "subTarget": "CPU",
            "style": "link"
          },
          {
            "id": "2bc70e01-095e-41fc-909c-365b9abe1035",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Instance CPU",
            "subTarget": "Instance CPU",
            "style": "link"
          },
          {
            "id": "2199ac10-7693-4b08-b036-82fde9f74b3e",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Data IO",
            "subTarget": "Data IO",
            "style": "link"
          },
          {
            "id": "156ca07f-885f-475e-9d22-b47064455138",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Log write",
            "subTarget": "Log write",
            "style": "link"
          },
          {
            "id": "9bef15a9-b7b5-4200-9a14-b75f996864c8",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Workers",
            "subTarget": "Workers",
            "style": "link"
          },
          {
            "id": "cf20dcc0-950d-4704-b07a-e7cabfa06326",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Requests",
            "subTarget": "Requests",
            "style": "link"
          },
          {
            "id": "b5d0e186-15d6-4d67-90c6-dff9a522f9ed",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Waits",
            "subTarget": "Waits",
            "style": "link"
          },
          {
            "id": "8fdc83c7-6f7d-4197-bbbd-be7a31aa2293",
            "cellValue": "poolHeatmapTabName",
            "linkTarget": "parameter",
            "linkLabel": "Storage IO",
            "subTarget": "Storage IO",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "adxClusterPingResult",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "timeRange",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "count_sqldb_tables",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "pool_heatmap_tabs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, replica_type, avg_cpu_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(avg_cpu_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name, replica_type\\r\\n| project logical_server_name, elastic_pool_name, replica_type, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, elastic_pool_name, decorated_elastic_pool_name = strcat(replica_type_indicator, elastic_pool_name), replica_type, percentage, color, metric_timeline, top_tooltip = strcat(elastic_pool_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "CPU"
        }
      ],
      "name": "pool_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, replica_type, avg_instance_cpu_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(avg_instance_cpu_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name, replica_type\\r\\n| project logical_server_name, elastic_pool_name, replica_type, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, elastic_pool_name, decorated_elastic_pool_name = strcat(replica_type_indicator, elastic_pool_name), replica_type, percentage, color, metric_timeline, top_tooltip = strcat(elastic_pool_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 4
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average instance CPU percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average instance CPU utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Instance CPU"
        }
      ],
      "name": "pool_instance_cpu_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, replica_type, avg_data_io_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(avg_data_io_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name, replica_type\\r\\n| project logical_server_name, elastic_pool_name, replica_type, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, elastic_pool_name, decorated_elastic_pool_name = strcat(replica_type_indicator, elastic_pool_name), replica_type, percentage, color, metric_timeline, top_tooltip = strcat(elastic_pool_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average data IO percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average data IO utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Data IO"
        }
      ],
      "name": "pool_data_io_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, replica_type, avg_log_write_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(avg_log_write_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name, replica_type\\r\\n| project logical_server_name, elastic_pool_name, replica_type, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, elastic_pool_name, decorated_elastic_pool_name = strcat(replica_type_indicator, elastic_pool_name), replica_type, percentage, color, metric_timeline, top_tooltip = strcat(elastic_pool_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average log write percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average log write utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Log write"
        }
      ],
      "name": "pool_log_write_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let resource_utilization = materialize (\\r\\nsqldb_elastic_pool_resource_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| project sample_time_utc, logical_server_name, elastic_pool_name, replica_type, max_worker_percent\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize percentage = avg(max_worker_percent), count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nresource_utilization\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nresource_utilization\\r\\n| make-series metric_timeline = max(percentage) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nresource_utilization\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name, replica_type\\r\\n| summarize percentage = sum(percentage * toreal(count_samples) / toreal(total_count_samples)), // weighted average\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name, replica_type\\r\\n| project logical_server_name, elastic_pool_name, replica_type, percentage = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(percentage)), metric_timeline,\\r\\ncolor = case(\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all pools\\r\\npercentage >= 90, \\\"red\\\",\\r\\npercentage >= 50, \\\"yellow\\\",\\r\\npercentage >= 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, elastic_pool_name, decorated_elastic_pool_name = strcat(replica_type_indicator, elastic_pool_name), replica_type, percentage, color, metric_timeline, top_tooltip = strcat(elastic_pool_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by percentage desc\\r\\n| sort by percentage desc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "percentage",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average worker percentage for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average worker utilization over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "red",
                "representation": "red"
              },
              {
                "operator": "==",
                "thresholdValue": "yellow",
                "representation": "yellow"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_resource_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Workers"
        }
      ],
      "name": "pool_workers_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let requests = materialize (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where object_name == \\\"SQL Statistics\\\" and counter_name in (\\\"Batch Requests/sec\\\")\\r\\n| project-away database_id, instance_name, anchor_database_name, anchor_database_id, anchor_logical_database_id, anchor_physical_database_id\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsort by logical_server_name asc, anchor_database_replica_id asc, replica_type asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and logical_server_name == prev(logical_server_name) and anchor_database_replica_id == prev(anchor_database_replica_id) and replica_type == prev(replica_type), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| project-away cntr_type, cntr_value\\r\\n| summarize total_requests = sum(toreal(delta_cntr_value)),\\r\\n            total_ms = sum(toreal(delta_sample_time_utc)),\\r\\n            count_samples = dcount(sample_time_utc)\\r\\n            by logical_server_name, elastic_pool_name, replica_type, binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nrequests\\r\\n| summarize total_count_samples = sum(count_samples) by logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = (\\r\\nrequests\\r\\n| make-series metric_timeline = sum(total_requests) / sum(total_ms) * 1000 default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nrequests\\r\\n| lookup total_sample_count on logical_server_name, elastic_pool_name, replica_type\\r\\n| summarize request_rate = sum(total_requests) / sum(total_ms) * 1000,\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name, replica_type\\r\\n| project logical_server_name, elastic_pool_name, replica_type, request_rate = iif(toreal(count_samples)/expected_sample_count < 0.5, real(null), toreal(request_rate)), metric_timeline,\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, elastic_pool_name, decorated_elastic_pool_name = strcat(replica_type_indicator, elastic_pool_name), replica_type, request_rate, metric_timeline, top_tooltip = strcat(elastic_pool_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by request_rate desc\\r\\n| sort by request_rate desc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "request_rate",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 31,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate for selected time range. Shows \"N/A\" if the number of samples is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "metric_timeline",
            "formatter": 21,
            "formatOptions": {
              "min": 0,
              "max": 100,
              "palette": "purple"
            },
            "tooltipFormat": {
              "tooltip": "Average request rate over selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "request_rate",
            "type": 4,
            "heatmapPalette": "greenBlue",
            "heatmapMin": null,
            "heatmapMax": null,
            "emptyValueColor": "gray"
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Requests"
        }
      ],
      "name": "pool_requests_heatmap"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "9839439c-056b-4b65-be62-c9e59ed8dd00",
                  "version": "KqlParameterItem/1.0",
                  "name": "waitCategory",
                  "label": "Wait category",
                  "type": 2,
                  "description": "Select one or more wait categories to show on heatmap. The percentage values in parentheses describe wait distribution across the estate. On a specific instance, the distribution of waits can be significantly different.",
                  "multiSelect": true,
                  "quote": "\"",
                  "delimiter": ",",
                  "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let waits = materialize (\\r\\nsqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| partition hint.strategy = shuffle by wait_category\\r\\n(\\r\\nsummarize wait_time_ms = sum(wait_time_ms) by wait_category\\r\\n)\\r\\n);\\r\\nlet total_wait_time_ms = toscalar(\\r\\nwaits\\r\\n| summarize sum(wait_time_ms)\\r\\n);\\r\\nwaits\\r\\n| project wait_category, wait_category_display_name = strcat(wait_category, \\\" (\\\", round(100 * toreal(wait_time_ms) / toreal(total_wait_time_ms), 2), \\\"%)\\\")\\r\\n| sort by wait_category asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "[]",
                    "showDefault": false
                  },
                  "queryType": 9,
                  "value": [
                    "value::all"
                  ]
                },
                {
                  "id": "c512ddf9-831e-430f-b658-fcf6656308c9",
                  "version": "KqlParameterItem/1.0",
                  "name": "waitCategoryFilter",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "waitCategory",
                        "operator": "is Empty",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "// no wait_category filter"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "waitCategory",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "| where wait_category in ({waitCategory})"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "// no wait_category filter"
                      }
                    }
                  ]
                }
              ],
              "style": "formHorizontal",
              "queryType": 9
            },
            "customWidth": "50",
            "name": "wait_category_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let waits = materialize (\\r\\nsqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{waitCategoryFilter}\\r\\n| partition hint.strategy = shuffle by elastic_pool_name\\r\\n(\\r\\nsummarize wait_time_ms = sum(wait_time_ms),\\r\\n          interval_start = min(sample_time_utc),\\r\\n          interval_end = max(sample_time_utc)\\r\\n          by logical_server_name, elastic_pool_name, anchor_database_replica_id, replica_type, wait_category, sample_time_utc\\r\\n| sort by logical_server_name asc, anchor_database_replica_id asc, replica_type asc, wait_category asc, sample_time_utc asc\\r\\n| extend delta_wait_time_ms = iif(wait_time_ms >= prev(wait_time_ms) and logical_server_name == prev(logical_server_name) and anchor_database_replica_id == prev(anchor_database_replica_id) and replica_type == prev(replica_type) and wait_category == prev(wait_category), wait_time_ms - prev(wait_time_ms), long(null))\\r\\n| where sample_time_utc >= prev(sample_time_utc)\\r\\n| summarize total_wait_time_ms = sum(toreal(delta_wait_time_ms)),\\r\\n            interval_start = min(interval_start),\\r\\n            interval_end = max(interval_end)\\r\\n            by logical_server_name,\\r\\n               elastic_pool_name,\\r\\n               replica_type,\\r\\n               binned_sample_time_utc = bin(sample_time_utc, {timeRange:grain})\\r\\n)\\r\\n);\\r\\nlet total_sample_count = (\\r\\nsqldb_elastic_pool_wait_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| summarize total_count_samples = dcount(sample_time_utc) by logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\n// typical count of samples per pool in selected time range\\r\\nlet expected_sample_count = toscalar(\\r\\ntotal_sample_count\\r\\n| summarize percentile(total_count_samples, 90)\\r\\n);\\r\\nlet metric_timeline = \\r\\ntotal_sample_count\\r\\n| join kind=leftouter waits on logical_server_name, elastic_pool_name, replica_type\\r\\n| make-series metric_timeline = sum(total_wait_time_ms) / datetime_diff(\\\"Second\\\", max(interval_end), min(interval_start)) default = long(null) on binned_sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by logical_server_name, elastic_pool_name, replica_type\\r\\n| project metric_timeline = series_fill_linear(metric_timeline, int(null), false), logical_server_name, elastic_pool_name, replica_type\\r\\n;\\r\\ntotal_sample_count\\r\\n| join kind=leftouter waits on logical_server_name, elastic_pool_name, replica_type // total_sample_count has a row for each {logical_server_name, elastic_pool_name, replica_type}; waits may not have a row for that tuple if it had no waits matching the wait_category filter. Use outer join to avoid dropping pools from chart as the filter values are changed.\\r\\n| summarize wait_ms_per_second = sum(total_wait_time_ms) / datetime_diff(\\\"Second\\\", max(interval_end), min(interval_start)),\\r\\n            count_samples = sum(total_count_samples)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter metric_timeline on logical_server_name, elastic_pool_name, replica_type\\r\\n| project logical_server_name,\\r\\nelastic_pool_name,\\r\\nreplica_type,\\r\\nwait_ms_per_second = case(\\r\\nisnull(count_samples) or count_samples == 0, real(0),\\r\\ntoreal(count_samples)/expected_sample_count < 0.5, real(null),\\r\\nwait_ms_per_second\\r\\n),\\r\\nmetric_timeline,\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, elastic_pool_name, decorated_elastic_pool_name = strcat(replica_type_indicator, elastic_pool_name), replica_type, wait_ms_per_second, metric_timeline, top_tooltip = strcat(elastic_pool_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by wait_ms_per_second desc\\r\\n| sort by wait_ms_per_second desc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "decorated_elastic_pool_name",
                  "formatter": 1,
                  "formatOptions": {
                    "linkTarget": "WorkbookTemplate",
                    "workbookContext": {
                      "componentIdSource": "workbook",
                      "resourceIdsSource": "workbook",
                      "templateIdSource": "static",
                      "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                      "typeSource": "workbook",
                      "gallerySource": "default",
                      "locationSource": "workbook",
                      "workbookName": "Azure SQL elastic pool",
                      "passSpecificParams": true,
                      "templateParameters": [
                        {
                          "name": "elasticPoolName",
                          "source": "column",
                          "value": "elastic_pool_name"
                        },
                        {
                          "name": "serverName",
                          "source": "column",
                          "value": "logical_server_name"
                        },
                        {
                          "name": "timeRange",
                          "source": "parameter",
                          "value": "timeRange"
                        },
                        {
                          "name": "watcherResourceId",
                          "source": "parameter",
                          "value": "watcherResourceId"
                        },
                        {
                          "name": "linkAdxClusterUri",
                          "source": "parameter",
                          "value": "adxClusterUri"
                        },
                        {
                          "name": "linkAdxDatabase",
                          "source": "parameter",
                          "value": "adxDatabase"
                        },
                        {
                          "name": "tabName",
                          "source": "static",
                          "value": "Overview"
                        },
                        {
                          "name": "haReplica",
                          "source": "column",
                          "value": "ha_secondary"
                        },
                        {
                          "name": "showDescriptions",
                          "source": "parameter",
                          "value": "showDescriptions"
                        }
                      ],
                      "viewerMode": true
                    }
                  },
                  "tooltipFormat": {
                    "tooltip": "[\"top_tooltip\"]"
                  }
                },
                "centerContent": {
                  "columnMatch": "wait_ms_per_second",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "numberFormat": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    },
                    "emptyValCustomText": "N/A"
                  },
                  "tooltipFormat": {
                    "tooltip": "Cumulative wait time (in milliseconds per second) in selected wait categories, averaged over selected time range. Shows \\\"N/A\\\" if the number of samples is insufficient."
                  }
                },
                "bottomContent": {
                  "columnMatch": "metric_timeline",
                  "formatter": 21,
                  "formatOptions": {
                    "palette": "purple"
                  },
                  "tooltipFormat": {
                    "tooltip": "Cumulative wait time in selected wait categories over selected time range"
                  }
                },
                "hivesContent": {
                  "columnMatch": "logical_server_name",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "ResourceFlat",
                        "text": "{0}{1}"
                      }
                    ]
                  }
                },
                "nodeIdField": "elastic_pool_name",
                "graphOrientation": 3,
                "showOrientationToggles": false,
                "nodeSize": null,
                "staticNodeSize": 150,
                "colorSettings": {
                  "nodeColorField": "wait_ms_per_second",
                  "type": 4,
                  "heatmapPalette": "greenBlue",
                  "heatmapMin": null,
                  "heatmapMax": null,
                  "emptyValueColor": "gray"
                },
                "groupByField": "logical_server_name",
                "hivesMargin": 5
              }
            },
            "name": "pool_waits_heatmap"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_wait_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Waits"
        }
      ],
      "name": "pool_waits_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "template",
        "loadFromTemplateId": "Community-Workbooks/Database watcher/Azure SQL Database/estate/elastic pool storage io",
        "items": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_storage_io",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Storage IO"
        }
      ],
      "name": "pool_io_group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// Map connection server/database name to target logical server and elastic pool names\\r\\nlet connection_server_pool_target = materialize (\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between (({timeRange:start} - 1h) .. ({timeRange:end} + 1h))\\r\\n| where probe_return_value == 1\\r\\n| summarize arg_max(probe_time_utc, logical_server_name, elastic_pool_name, replica_type) by connection_server_name, connection_database_name, connection_application_intent\\r\\n| project-away probe_time_utc\\r\\n);\\r\\nlet expected_probe_count = toscalar(\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| summarize count_samples = dcount(probe_time_utc) by logical_server_name, elastic_pool_name, replica_type\\r\\n| summarize percentile(count_samples, 90)\\r\\n);\\r\\nsqldb_elastic_pool_connectivity\\r\\n| where probe_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| lookup connection_server_pool_target on connection_server_name, connection_database_name, connection_application_intent // A failed probe has empty logical_server_name and elastic_pool_name. Look them up from the most recent successful probe for the same elastic pool.\\r\\n| extend logical_server_name = iif(isempty(logical_server_name), logical_server_name1, logical_server_name),\\r\\n         elastic_pool_name = iif(isempty(elastic_pool_name), elastic_pool_name1, elastic_pool_name),\\r\\n         replica_type = iif(isempty(replica_type), replica_type1, replica_type)\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| summarize count_failed_probes = countif(probe_return_value != 1),\\r\\n            count_successful_probes = countif(probe_return_value == 1),\\r\\n            count_probes = count()\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| project logical_server_name, elastic_pool_name, replica_type, health_ratio = iif(toreal(count_probes)/expected_probe_count < 0.5, real(null), toreal(count_successful_probes) / toreal(count_probes)), count_failed_probes = iif(count_failed_probes > 0, count_failed_probes, int(null)),\\r\\ncolor = case(\\r\\ntoreal(count_probes)/expected_probe_count < 0.5, \\\"gray\\\", // show color as grey (unknown) if the number of samples is much less than the representative number across all servers\\r\\ncount_failed_probes > 0, \\\"orange\\\",\\r\\ncount_successful_probes > 0, \\\"green\\\",\\r\\n\\\"\\\"\\r\\n),\\r\\nreplica_type_indicator = case(\\r\\nreplica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\nreplica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n\\\"\\\"\\r\\n)\\r\\n| project logical_server_name, elastic_pool_name, decorated_elastic_pool_name = strcat(replica_type_indicator, elastic_pool_name), replica_type, health_ratio, count_failed_probes, top_tooltip = strcat(elastic_pool_name, \\\" | \\\", replica_type_indicator, replica_type), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| top {topHitters} by health_ratio asc\\r\\n| sort by health_ratio asc, tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type == \\\"HA secondary\\\", 1, 0) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "columnMatch": "decorated_elastic_pool_name",
            "formatter": 1,
            "formatOptions": {
              "linkTarget": "WorkbookTemplate",
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                "typeSource": "workbook",
                "gallerySource": "default",
                "locationSource": "workbook",
                "workbookName": "Azure SQL elastic pool",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "elasticPoolName",
                    "source": "column",
                    "value": "elastic_pool_name"
                  },
                  {
                    "name": "serverName",
                    "source": "column",
                    "value": "logical_server_name"
                  },
                  {
                    "name": "timeRange",
                    "source": "parameter",
                    "value": "timeRange"
                  },
                  {
                    "name": "watcherResourceId",
                    "source": "parameter",
                    "value": "watcherResourceId"
                  },
                  {
                    "name": "linkAdxClusterUri",
                    "source": "parameter",
                    "value": "adxClusterUri"
                  },
                  {
                    "name": "linkAdxDatabase",
                    "source": "parameter",
                    "value": "adxDatabase"
                  },
                  {
                    "name": "tabName",
                    "source": "static",
                    "value": "Overview"
                  },
                  {
                    "name": "haReplica",
                    "source": "column",
                    "value": "ha_secondary"
                  },
                  {
                    "name": "showDescriptions",
                    "source": "parameter",
                    "value": "showDescriptions"
                  }
                ],
                "viewerMode": true
              },
              "bladeOpenContext": {
                "bladeParameters": []
              }
            },
            "tooltipFormat": {
              "tooltip": "[\"top_tooltip\"]"
            }
          },
          "centerContent": {
            "columnMatch": "health_ratio",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "percent",
                "minimumFractionDigits": 2
              },
              "emptyValCustomText": "N/A"
            },
            "tooltipFormat": {
              "tooltip": "The ratio of successful connectivity probes to total connectivity probes, as a percentage. Shows \"N/A\" if the number of probes is insufficient."
            }
          },
          "bottomContent": {
            "columnMatch": "count_failed_probes",
            "formatter": 12,
            "formatOptions": {
              "palette": "none"
            },
            "tooltipFormat": {
              "tooltip": "The number of failed connectivity probes in selected time range"
            }
          },
          "hivesContent": {
            "columnMatch": "logical_server_name",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "ResourceFlat",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "nodeIdField": "elastic_pool_name",
          "graphOrientation": 3,
          "showOrientationToggles": false,
          "nodeSize": null,
          "staticNodeSize": 150,
          "colorSettings": {
            "nodeColorField": "color",
            "type": 3,
            "thresholdsGrid": [
              {
                "operator": "==",
                "thresholdValue": "gray",
                "representation": "gray"
              },
              {
                "operator": "==",
                "thresholdValue": "orange",
                "representation": "orange"
              },
              {
                "operator": "==",
                "thresholdValue": "green",
                "representation": "green"
              },
              {
                "operator": "Default",
                "thresholdValue": null
              }
            ]
          },
          "groupByField": "logical_server_name",
          "hivesMargin": 5
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_connectivity",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pool heatmaps"
        },
        {
          "parameterName": "poolHeatmapTabName",
          "comparison": "isEqualTo",
          "value": "Connectivity"
        }
      ],
      "name": "pool_connectivity_heatmap"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let last_storage_sample = (\\r\\nsqldb_database_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, data_size_used_mb, data_max_size_mb, log_size_used_mb, log_max_size_mb, tempdb_data_size_used_mb, tempdb_data_max_size_mb, tempdb_log_size_used_mb, tempdb_log_max_size_mb, used_local_storage_size_mb, max_local_storage_size_mb) by logical_server_name, database_name, replica_type\\r\\n| extend is_low_space = iif(\\r\\n                            iif(isnotnull(data_size_used_mb) and isnotnull(data_max_size_mb), toreal(toreal(data_size_used_mb) / data_max_size_mb), real(0)) >= 0.9\\r\\n                            or\\r\\n                            iif(isnotnull(log_size_used_mb) and isnotnull(log_max_size_mb), toreal(toreal(log_size_used_mb) / log_max_size_mb), real(0)) >= 0.7\\r\\n                            or\\r\\n                            iif(isnotnull(tempdb_data_size_used_mb) and isnotnull(tempdb_data_max_size_mb), toreal(toreal(tempdb_data_size_used_mb) / tempdb_data_max_size_mb), real(0)) >= 0.8\\r\\n                            or\\r\\n                            iif(isnotnull(tempdb_log_size_used_mb) and isnotnull(tempdb_log_max_size_mb), toreal(toreal(tempdb_log_size_used_mb) / tempdb_log_max_size_mb), real(0)) >= 0.7\\r\\n                            or\\r\\n                            iif(isnotnull(used_local_storage_size_mb) and isnotnull(max_local_storage_size_mb), toreal(toreal(used_local_storage_size_mb) / max_local_storage_size_mb), real(0)) >= 0.9\\r\\n                            , true, false)\\r\\n);\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize arg_max(sample_time_utc, notable_db_scoped_configs, compatibility_level, is_auto_create_stats_on, is_auto_shrink_on, is_auto_update_stats_on, force_last_good_plan_actual_state, query_store_actual_state_desc, state_desc, log_reuse_wait_desc, database_name, updateability, logical_cpu_count, elastic_pool_name, database_engine_start_time_utc, is_accelerated_database_recovery_on, is_encrypted, service_level_objective, replica_type) by logical_server_name, database_name, replica_type\\r\\n| extend db_scoped_configs = todynamic(notable_db_scoped_configs)\\r\\n| mv-expand db_scoped_configs\\r\\n| mv-expand db_scoped_config_name = db_scoped_configs.name to typeof(string), db_scoped_config_value = db_scoped_configs.value to typeof(string), db_scoped_config_value_for_secondary = db_scoped_configs.value_for_secondary to typeof(string)\\r\\n| where db_scoped_config_name == \\\"MAXDOP\\\" or db_scoped_config_name == \\\"\\\"\\r\\n| join kind=leftouter last_storage_sample on logical_server_name, database_name, replica_type\\r\\n| extend\\r\\ncount_warnings = iif(db_scoped_config_name == \\\"MAXDOP\\\" and logical_cpu_count > 8 and (toint(db_scoped_config_value) > 8 or toint(db_scoped_config_value) == 0 or toint(db_scoped_config_value_for_secondary) > 8 or toint(db_scoped_config_value_for_secondary) == 0), 1, 0)\\r\\n+\\r\\niif(compatibility_level <= 120, 1, 0)\\r\\n+\\r\\niif(is_auto_create_stats_on == false, 1, 0)\\r\\n+\\r\\niif(is_auto_shrink_on == true, 1, 0)\\r\\n+\\r\\niif(is_auto_update_stats_on == false, 1, 0)\\r\\n+\\r\\niif(force_last_good_plan_actual_state != \\\"ON\\\" and updateability == \\\"READ_WRITE\\\", 1, 0)\\r\\n+\\r\\niif(query_store_actual_state_desc != \\\"READ_WRITE\\\" and updateability == \\\"READ_WRITE\\\", 1, 0)\\r\\n+\\r\\niif(state_desc != \\\"ONLINE\\\", 1, 0)\\r\\n+\\r\\niif(log_reuse_wait_desc !in~ (\\\"NOTHING\\\",\\\"OLDEST_PAGE\\\",\\\"LOG_SCAN\\\",\\\"DATABASE_SNAPSHOT_CREATION\\\",\\\"CHECKPOINT\\\"), 1, 0)\\r\\n+\\r\\niif(is_accelerated_database_recovery_on == false, 1, 0)\\r\\n+\\r\\niif(is_encrypted == false, 1, 0),\\r\\nreplica_type_indicator =\\r\\ncase(\\r\\n    replica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\n    replica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n    replica_type == \\\"Geo-replication forwarder\\\", \\\"🟣\\\",\\r\\n    replica_type == \\\"Named secondary\\\", \\\"🟢\\\",\\r\\n    \\\"\\\"\\r\\n    )\\r\\n| project logical_server_name, count_warnings, database_name, uptime = datetime_diff(\\\"minute\\\", sample_time_utc, database_engine_start_time_utc), service_level_objective = iif(service_level_objective =~ \\\"ElasticPool\\\", \\\"Elastic pool\\\", service_level_objective), replica_type = strcat(replica_type_indicator, replica_type), elastic_pool_name,  is_low_space, formatted_uptime = format_timespan(1s * datetime_diff(\\\"second\\\", sample_time_utc, database_engine_start_time_utc), \\\"d.hh:mm:ss\\\"), sample_age = datetime_diff(\\\"second\\\", now(), sample_time_utc), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, tolower(database_name) asc, iif(replica_type endswith \\\"HA secondary\\\", 1, 0) asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "count_warnings",
              "formatter": 18,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "0",
                    "representation": "Sev4",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "1",
                    "representation": "Sev3",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "3",
                    "representation": "Sev2",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "6",
                    "representation": "Sev1",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": ">=",
                    "thresholdValue": "7",
                    "representation": "Sev0",
                    "text": "[\"database_name\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "more",
                    "text": "[\"database_name\"]"
                  }
                ],
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/database",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "Azure SQL database",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "serverName",
                      "source": "column",
                      "value": "logical_server_name"
                    },
                    {
                      "name": "databaseName",
                      "source": "column",
                      "value": "database_name"
                    },
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "watcherResourceId",
                      "source": "parameter",
                      "value": "watcherResourceId"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Overview"
                    },
                    {
                      "name": "haReplica",
                      "source": "column",
                      "value": "ha_secondary"
                    },
                    {
                      "name": "showDescriptions",
                      "source": "parameter",
                      "value": "showDescriptions"
                    }
                  ],
                  "viewerMode": true
                },
                "customColumnWidthSetting": "30ch"
              },
              "tooltipFormat": {
                "tooltip": "There are [\"count_warnings\"] configuration or state warnings for [\"database_name\"]. Click on the database name to see details."
              }
            },
            {
              "columnMatch": "database_name",
              "formatter": 5
            },
            {
              "columnMatch": "uptime",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "<=",
                    "thresholdValue": "1440",
                    "representation": "green",
                    "text": "[\"formatted_uptime\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "[\"formatted_uptime\"]"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Database uptime as of the last sample, as days.hours:minutes:seconds. Highlighted in green for recently created or restarted databases."
              }
            },
            {
              "columnMatch": "elastic_pool_name",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "linkLabel": "",
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "Azure SQL elastic pool",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "serverName",
                      "source": "column",
                      "value": "logical_server_name"
                    },
                    {
                      "name": "elasticPoolName",
                      "source": "column",
                      "value": "elastic_pool_name"
                    },
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "watcherResourceId",
                      "source": "parameter",
                      "value": "watcherResourceId"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Overview"
                    },
                    {
                      "name": "haReplica",
                      "source": "column",
                      "value": "ha_secondary"
                    },
                    {
                      "name": "showDescriptions",
                      "source": "parameter",
                      "value": "showDescriptions"
                    }
                  ],
                  "viewerMode": true
                }
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "(None)"
              }
            },
            {
              "columnMatch": "is_low_space",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "3",
                    "text": "Yes"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "success",
                    "text": "No"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Reports whether the database is close to running out of data, log, tempdb, or local storage space. Click on the database name to see details."
              }
            },
            {
              "columnMatch": "formatted_uptime",
              "formatter": 5
            },
            {
              "columnMatch": "sample_age",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">",
                    "thresholdValue": "360",
                    "representation": "Clock",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              },
              "tooltipFormat": {
                "tooltip": "Time difference between the last dashboard refresh and the last sample in the database properties dataset"
              }
            },
            {
              "columnMatch": "ha_secondary",
              "formatter": 5
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "logical_server_name",
              "label": "Server"
            },
            {
              "columnId": "count_warnings",
              "label": "Database"
            },
            {
              "columnId": "uptime",
              "label": "Uptime"
            },
            {
              "columnId": "service_level_objective",
              "label": "Compute size"
            },
            {
              "columnId": "replica_type",
              "label": "Replica type"
            },
            {
              "columnId": "elastic_pool_name",
              "label": "Elastic pool"
            },
            {
              "columnId": "is_low_space",
              "label": "Low storage"
            },
            {
              "columnId": "sample_age",
              "label": "Age of sample"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_database_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Databases"
        },
        {
          "parameterName": "sqldb_database_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "databases"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let last_performance_counters_sample = (\\r\\nsqldb_elastic_pool_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| where object_name == \\\"Workload Group Stats\\\" and counter_name == \\\"CPU usage %\\\"\\r\\n| summarize arg_max(sample_time_utc, object_name, counter_name, cntr_value) by logical_server_name, elastic_pool_name, database_id, replica_type\\r\\n| summarize count_databases = dcount(database_id) by logical_server_name, elastic_pool_name, replica_type\\r\\n);\\r\\nlet last_storage_sample = (\\r\\nsqldb_elastic_pool_storage_utilization\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| summarize arg_max(sample_time_utc, elastic_pool_data_size_used_mb, elastic_pool_data_max_size_mb, tempdb_data_size_used_mb, tempdb_data_max_size_mb, tempdb_log_size_used_mb, tempdb_log_max_size_mb, used_local_storage_size_mb, max_local_storage_size_mb)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| extend is_low_space = iif(\\r\\n                            iif(isnotnull(elastic_pool_data_size_used_mb) and isnotnull(elastic_pool_data_max_size_mb), toreal(toreal(elastic_pool_data_size_used_mb) / elastic_pool_data_max_size_mb), toreal(0)) >= 0.9\\r\\n                            or\\r\\n                            iif(isnotnull(tempdb_data_size_used_mb) and isnotnull(tempdb_data_max_size_mb), toreal(toreal(tempdb_data_size_used_mb) / tempdb_data_max_size_mb), toreal(0)) >= 0.8\\r\\n                            or\\r\\n                            iif(isnotnull(tempdb_log_size_used_mb) and isnotnull(tempdb_log_max_size_mb), toreal(toreal(tempdb_log_size_used_mb) / tempdb_log_max_size_mb), toreal(0)) >= 0.7\\r\\n                            or\\r\\n                            iif(isnotnull(used_local_storage_size_mb) and isnotnull(max_local_storage_size_mb), toreal(toreal(used_local_storage_size_mb) / max_local_storage_size_mb), toreal(0)) >= 0.9\\r\\n                            , true, false)\\r\\n);\\r\\nsqldb_elastic_pool_properties\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n{serverNameFilter}\\r\\n{elasticPoolNameFilter}\\r\\n| summarize arg_max(sample_time_utc, logical_cpu_count, database_engine_start_time_utc, replica_type)\\r\\n            by logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter last_storage_sample on logical_server_name, elastic_pool_name, replica_type\\r\\n| join kind=leftouter last_performance_counters_sample on logical_server_name, elastic_pool_name, replica_type\\r\\n| extend replica_type_indicator =\\r\\ncase(\\r\\n    replica_type == \\\"Primary\\\", \\\"🔵\\\",\\r\\n    replica_type == \\\"HA secondary\\\", \\\"🔘\\\",\\r\\n    \\\"\\\"\\r\\n    )\\r\\n| project logical_server_name, elastic_pool_name, uptime = datetime_diff(\\\"minute\\\", sample_time_utc, database_engine_start_time_utc), replica_type = strcat(replica_type_indicator, replica_type), count_databases, is_low_space, formatted_uptime = format_timespan(1s * datetime_diff(\\\"second\\\", sample_time_utc, database_engine_start_time_utc), \\\"d.hh:mm:ss\\\"), sample_age = datetime_diff(\\\"second\\\", now(), sample_time_utc), ha_secondary = tolower(tostring(replica_type == \\\"HA secondary\\\"))\\r\\n| sort by tolower(logical_server_name) asc, tolower(elastic_pool_name) asc, iif(replica_type endswith \\\"HA secondary\\\", 1, 0) asc;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "elastic_pool_name",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Database watcher/Azure SQL Database/elastic pool",
                  "typeSource": "workbook",
                  "gallerySource": "default",
                  "locationSource": "workbook",
                  "workbookName": "Azure SQL elastic pool",
                  "passSpecificParams": true,
                  "templateParameters": [
                    {
                      "name": "serverName",
                      "source": "column",
                      "value": "logical_server_name"
                    },
                    {
                      "name": "elasticPoolName",
                      "source": "column",
                      "value": "elastic_pool_name"
                    },
                    {
                      "name": "timeRange",
                      "source": "parameter",
                      "value": "timeRange"
                    },
                    {
                      "name": "watcherResourceId",
                      "source": "parameter",
                      "value": "watcherResourceId"
                    },
                    {
                      "name": "linkAdxClusterUri",
                      "source": "parameter",
                      "value": "adxClusterUri"
                    },
                    {
                      "name": "linkAdxDatabase",
                      "source": "parameter",
                      "value": "adxDatabase"
                    },
                    {
                      "name": "tabName",
                      "source": "static",
                      "value": "Overview"
                    },
                    {
                      "name": "haReplica",
                      "source": "column",
                      "value": "ha_secondary"
                    },
                    {
                      "name": "showDescriptions",
                      "source": "parameter",
                      "value": "showDescriptions"
                    }
                  ],
                  "viewerMode": true
                }
              }
            },
            {
              "columnMatch": "uptime",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "<=",
                    "thresholdValue": "1440",
                    "representation": "green",
                    "text": "[\"formatted_uptime\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "[\"formatted_uptime\"]"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Elastic pool uptime as of the last sample, as days.hours:minutes:seconds. Highlighted in green for recently created or restarted elastic pools."
              }
            },
            {
              "columnMatch": "count_databases",
              "formatter": 0,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "is_low_space",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "3",
                    "text": "Yes"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "success",
                    "text": "No"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "Reports whether the elastic pool is close to running out of data, tempdb, or local storage space. Click on the elastic pool name to see details."
              }
            },
            {
              "columnMatch": "formatted_uptime",
              "formatter": 5
            },
            {
              "columnMatch": "sample_age",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">",
                    "thresholdValue": "360",
                    "representation": "Clock",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              },
              "tooltipFormat": {
                "tooltip": "Time difference between the last dashboard refresh and the last data sample in the elastic pool properties dataset"
              }
            },
            {
              "columnMatch": "ha_secondary",
              "formatter": 5
            }
          ],
          "filter": true,
          "labelSettings": [
            {
              "columnId": "logical_server_name",
              "label": "Server"
            },
            {
              "columnId": "elastic_pool_name",
              "label": "Elastic pool"
            },
            {
              "columnId": "uptime",
              "label": "Uptime"
            },
            {
              "columnId": "replica_type",
              "label": "Replica type"
            },
            {
              "columnId": "count_databases",
              "label": "Databases"
            },
            {
              "columnId": "is_low_space",
              "label": "Low storage"
            },
            {
              "columnId": "sample_age",
              "label": "Age of sample"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqldb_elastic_pool_properties",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Elastic pools"
        },
        {
          "parameterName": "sqldb_elastic_pool_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "sqldb_elastic_pool_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "elastic_pools"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "template",
        "loadFromTemplateId": "Community-Workbooks/Database watcher/Azure SQL Database/estate/top queries",
        "items": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabName",
          "comparison": "isEqualTo",
          "value": "Top queries"
        },
        {
          "parameterName": "sqldb_database_query_runtime_stats",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "matchPattern",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "top_queries_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}