{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "4335a005-6127-40cb-b8af-d028b7c0be31",
            "version": "KqlParameterItem/1.0",
            "name": "tableSampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "table_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_table_metadata\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| make-series metric = dcount(sample_time_utc) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No table metadata samples are available",
        "timeBrushParameterName": "timeRange",
        "exportFieldName": "",
        "exportParameterName": "tableHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "turquoise"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tableSampleType",
        "comparison": "isEqualTo",
        "value": "Historical"
      },
      "name": "table_timeline"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "75801860-acf2-4fdd-b12f-9ab8d2813617",
            "version": "KqlParameterItem/1.0",
            "name": "tableLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_table_metadata\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "aaa7c0f1-ae5e-41eb-ac7d-dac5d4b32546",
            "version": "KqlParameterItem/1.0",
            "name": "tableHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_table_metadata\\r\\n| where sample_time_utc between (todatetime(\\\"{tableHistoricalSample:$.x}\\\") .. (todatetime(\\\"{tableHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize sample_time_utc = min(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "value": null
          },
          {
            "id": "a1f00d83-547b-4b3f-b85f-1cb244eec622",
            "version": "KqlParameterItem/1.0",
            "name": "tableSampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "tableSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "tableLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "tableSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "tableHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "tableLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "table_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_table_metadata\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No table metadata samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibility": {
        "parameterName": "tableSampleType",
        "comparison": "isEqualTo",
        "value": "Historical"
      },
      "name": "tables_sample_count"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_table_metadata\\r\\n| where sample_time_utc == todatetime(\\\"{tableSampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| summarize count_objects = count() by sample_time_utc\\r\\n| project sample_time = sample_time_utc, sample_time_utc, sample_age = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_objects\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimeNoMsPattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimeNoMsPattern"
              }
            },
            {
              "columnMatch": "sample_age",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between the last dashboard refresh and the displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "sample_age",
              "label": "Age of sample"
            },
            {
              "columnId": "count_objects",
              "label": "Tables"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tableSampleTime",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "selected_table_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let current_snapshot = materialize(\\r\\nsqldb_database_table_metadata\\r\\n| where sample_time_utc == todatetime(\\\"{tableSampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where ({haReplica} and replica_type == \\\"HA secondary\\\") or (not ({haReplica}) and replica_type != \\\"HA secondary\\\")\\r\\n| project-away logical_server_name, database_name, logical_database_id, physical_database_id, replica_type\\r\\n| extend count_partitions = count_no_compression_partitions + count_row_compression_partitions + count_page_compression_partitions + count_columnstore_compression_partitions + count_columnstore_archive_compression_partitions,\\r\\n         total_used_size_mb = toreal(in_row_used_size_mb + lob_used_size_mb + row_overflow_used_size_mb),\\r\\n         total_reserved_size_mb = toreal(in_row_reserved_size_mb + lob_reserved_size_mb + row_overflow_reserved_size_mb)\\r\\n| extend used_allocations_label = strcat(round(100 * in_row_used_size_mb/total_used_size_mb, 2), \\\"% | \\\", round(100 * row_overflow_used_size_mb/total_used_size_mb, 2), \\\"% | \\\", round(100 * lob_used_size_mb/total_used_size_mb, 2), \\\"%\\\"),\\r\\n         compression_label = trim(\\\" [|] \\\", strcat(\\r\\n                                                 iif(count_no_compression_partitions > 0, \\\"None | \\\", \\\"\\\"),\\r\\n                                                 iif(count_row_compression_partitions > 0, \\\"Row | \\\", \\\"\\\"),\\r\\n                                                 iif(count_page_compression_partitions > 0, \\\"Page | \\\", \\\"\\\"),\\r\\n                                                 iif(count_columnstore_compression_partitions > 0, \\\"Columnstore | \\\", \\\"\\\"),\\r\\n                                                 iif(count_columnstore_archive_compression_partitions > 0, \\\"Columnstore archive | \\\", \\\"\\\")\\r\\n                                                 ))\\r\\n| extend used_allocations_label = iif(used_allocations_label == \\\"% | % | %\\\", \\\"-\\\", used_allocations_label)\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"temporal_type_desc\\\",\\\"durability_desc\\\",\\\"ledger_type_desc\\\"\\r\\n]);\\r\\nlet column_labels_number = dynamic(\\r\\n[\\r\\n\\\"count_no_compression_partitions\\\",\\\"count_row_compression_partitions\\\",\\\"count_page_compression_partitions\\\",\\\"count_columnstore_compression_partitions\\\",\\\"count_columnstore_archive_compression_partitions\\\",\\\"text_in_row_limit\\\"\\r\\n]);\\r\\nlet column_labels_number_id = dynamic(\\r\\n[\\r\\n\\\"schema_id\\\",\\\"database_id\\\",\\\"object_id\\\"\\r\\n]);\\r\\nlet column_labels_number_mb = dynamic(\\r\\n[\\r\\n\\\"in_row_used_size_mb\\\",\\\"in_row_reserved_size_mb\\\",\\\"lob_used_size_mb\\\",\\\"lob_reserved_size_mb\\\",\\\"row_overflow_used_size_mb\\\",\\\"row_overflow_reserved_size_mb\\\"\\r\\n]);\\r\\nlet column_labels_bool = dynamic(\\r\\n[\\r\\n\\\"large_value_types_out_of_row\\\",\\\"is_memory_optimized\\\",\\\"is_tracked_by_cdc\\\",\\\"is_replicated\\\",\\\"is_external\\\",\\\"is_node\\\",\\\"is_edge\\\",\\\"is_dropped_ledger_table\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet table_details_string = (\\r\\ncurrent_snapshot\\r\\n| project object_id, temporal_type_desc, durability_desc, ledger_type_desc\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for numbers grid\\r\\nlet table_details_number = (\\r\\ncurrent_snapshot\\r\\n| project object_id, count_no_compression_partitions, count_row_compression_partitions, count_page_compression_partitions, count_columnstore_compression_partitions, count_columnstore_archive_compression_partitions, text_in_row_limit\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number to typeof(string) on (project column_label, column_value = tolong(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for id numbers grid\\r\\nlet table_details_number_id = (\\r\\ncurrent_snapshot\\r\\n| project object_id, schema_id, database_id\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_id to typeof(string) on (project column_label, column_value = toint(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_id = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for mb numbers grid\\r\\nlet table_details_number_mb = (\\r\\ncurrent_snapshot\\r\\n| project object_id, in_row_used_size_mb, in_row_reserved_size_mb, lob_used_size_mb, lob_reserved_size_mb, row_overflow_used_size_mb, row_overflow_reserved_size_mb\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_mb to typeof(string) on (project column_label, column_value = toreal(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_mb = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for boolean grid\\r\\nlet table_details_bool = (\\r\\ncurrent_snapshot\\r\\n| project object_id, large_value_types_out_of_row, is_memory_optimized, is_tracked_by_cdc, is_replicated, is_external, is_node, is_edge, is_dropped_ledger_table\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_bool to typeof(string) on (project column_label, column_value = toboolean(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_bool = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\ncurrent_snapshot\\r\\n| join table_details_string on object_id\\r\\n| join table_details_number on object_id\\r\\n| join table_details_number_id on object_id\\r\\n| join table_details_number_mb on object_id\\r\\n| join table_details_bool on object_id\\r\\n| project schema_name, object_name, count_rows, total_used_size_mb, total_reserved_size_mb, count_partitions, object_type, is_heap, is_clustered = not(is_heap), object_type_tooltip = case(is_heap, \\\"Heap\\\", \\\"Clustered\\\"), compression_partitions = count_partitions, allocation_used_size_mb = total_used_size_mb, lock_escalation_desc, used_allocations_label, compression_label, in_row_used_size_mb, lob_used_size_mb, row_overflow_used_size_mb, count_no_compression_partitions, count_row_compression_partitions, count_page_compression_partitions, count_columnstore_compression_partitions, count_columnstore_archive_compression_partitions, details_string, details_number, details_number_id, details_number_mb, details_bool\\r\\n| sort by tolower(schema_name) asc, tolower(object_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number",
            "parameterName": "details_number",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_id",
            "parameterName": "details_number_id",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_mb",
            "parameterName": "details_number_mb",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_bool",
            "parameterName": "details_bool",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          }
        ],
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "object_type",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"object_type\"]",
                  "columnSettings": [
                    {
                      "columnName": "is_heap",
                      "color": "yellow"
                    },
                    {
                      "columnName": "is_clustered",
                      "color": "blueDark"
                    }
                  ]
                },
                "customColumnWidthSetting": "15ch"
              },
              "tooltipFormat": {
                "tooltip": "[\"object_type_tooltip\"]"
              }
            },
            {
              "columnMatch": "is_heap",
              "formatter": 5
            },
            {
              "columnMatch": "is_clustered",
              "formatter": 5
            },
            {
              "columnMatch": "object_type_tooltip",
              "formatter": 5
            },
            {
              "columnMatch": "count_rows",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_used_size_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "total_reserved_size_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "count_partitions",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "compression_partitions",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"compression_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "count_no_compression_partitions",
                      "color": "green"
                    },
                    {
                      "columnName": "count_row_compression_partitions",
                      "color": "greenDark"
                    },
                    {
                      "columnName": "count_page_compression_partitions",
                      "color": "magenta"
                    },
                    {
                      "columnName": "count_columnstore_compression_partitions",
                      "color": "pink"
                    },
                    {
                      "columnName": "count_columnstore_archive_compression_partitions",
                      "color": "purple"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "None (green), Row (dark green), Page (magenta), Columnstore (pink), Columnstore archive (purple)"
              }
            },
            {
              "columnMatch": "allocation_used_size_mb",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"used_allocations_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "in_row_used_size_mb",
                      "color": "blue"
                    },
                    {
                      "columnName": "row_overflow_used_size_mb",
                      "color": "orange"
                    },
                    {
                      "columnName": "lob_used_size_mb",
                      "color": "red"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "In-row (blue), Overflow (orange), LOB (red)"
              }
            },
            {
              "columnMatch": "lock_escalation_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "AUTO",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "DISABLE",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "N/A"
              }
            },
            {
              "columnMatch": "used_allocations_label",
              "formatter": 5
            },
            {
              "columnMatch": "compression_label",
              "formatter": 5
            },
            {
              "columnMatch": "in_row_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "lob_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "row_overflow_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "count_no_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_row_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_page_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_columnstore_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_columnstore_archive_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_id",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_mb",
              "formatter": 5
            },
            {
              "columnMatch": "details_bool",
              "formatter": 5
            }
          ],
          "sortBy": [
            {
              "itemKey": "schema_name",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "schema_name",
              "label": "Schema name"
            },
            {
              "columnId": "object_name",
              "label": "Object name"
            },
            {
              "columnId": "count_rows",
              "label": "Rows"
            },
            {
              "columnId": "total_used_size_mb",
              "label": "Used size (MB)"
            },
            {
              "columnId": "total_reserved_size_mb",
              "label": "Reserved size (MB)"
            },
            {
              "columnId": "count_partitions",
              "label": "Partitions"
            },
            {
              "columnId": "object_type",
              "label": "Object type"
            },
            {
              "columnId": "compression_partitions",
              "label": "Compression"
            },
            {
              "columnId": "allocation_used_size_mb",
              "label": "Allocation types"
            },
            {
              "columnId": "lock_escalation_desc",
              "label": "Lock escalation"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "schema_name",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tableSampleTime",
        "comparison": "isNotEqualTo"
      },
      "name": "table_metadata"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Selected table details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_mb}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_number_mb"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8
            },
            "customWidth": "50",
            "name": "table_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_id}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8
            },
            "customWidth": "50",
            "name": "table_details_number_id"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_bool}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Inactive",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_bool"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "tableSampleTime",
        "comparison": "isNotEqualTo"
      },
      "name": "table_details"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}