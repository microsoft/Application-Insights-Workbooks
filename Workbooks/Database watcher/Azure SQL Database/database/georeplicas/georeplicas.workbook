{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Log send rate\\\",\\r\\n1, \\\"Redo rate\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_database_geo_replicas\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| project sample_time_utc, partner_logical_server_name, partner_database_name, log_send_rate_kbps, redo_rate_kbps, key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, partner_logical_server_name, partner_database_name, log_send_rate_kbps, redo_rate_kbps\\r\\n| extend metric = case(\\r\\n                    metric_name == \\\"Log send rate\\\", log_send_rate_kbps,\\r\\n                    metric_name == \\\"Redo rate\\\", redo_rate_kbps,\\r\\n                    long(null))\\r\\n| project sample_time_utc, series = strcat(metric_name, \\\" | \\\", partner_logical_server_name, \\\" | \\\", partner_database_name), metric\\r\\n| make-series metric = max(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series\\r\\n| project series, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 1,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "Replication rates",
        "noDataMessage": "There is no data for specified parameters.",
        "timeBrushParameterName": "timeRange",
        "queryType": 9,
        "visualization": "linechart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 12,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "replicaType",
          "comparison": "isEqualTo",
          "value": "Primary"
        },
        {
          "parameterName": "isHyperscaleDatabase",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "georeplication_rate"
    },
    {
      "type": 1,
      "content": {
        "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log send rate`|The rate at which the primary replica sends transaction log data to a geo-secondary replica.|\r\n|`Redo rate`|The rate of redo, or log apply, process on a geo-secondary replica. When redo rate is approximately equal or higher than `Log send rate`, data latency on the geo-secondary replica is minimal; in case of failover to this geo-replica, failover time and data loss (for forced failovers) are minimal as well.|\r\n\r\nData is collected from [sys.dm_geo_replication_link_status](https://go.microsoft.com/fwlink/?linkid=2198743) and [sys.dm_database_replica_states](https://go.microsoft.com/fwlink/?linkid=2198734)."
      },
      "conditionalVisibilities": [
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "replicaType",
          "comparison": "isEqualTo",
          "value": "Primary"
        },
        {
          "parameterName": "isHyperscaleDatabase",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "georeplication_help_replication_rate"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Log send queue\\\",\\r\\n1, \\\"Redo queue\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqldb_database_geo_replicas\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| project sample_time_utc, partner_logical_server_name, partner_database_name, log_send_queue_size_kb, redo_queue_size_kb, key = int(1)\\r\\n) on key\\r\\n| project metric_name, sample_time_utc, partner_logical_server_name, partner_database_name, log_send_queue_size_kb, redo_queue_size_kb\\r\\n| extend metric = case(\\r\\n                    metric_name == \\\"Log send queue\\\", log_send_queue_size_kb,\\r\\n                    metric_name == \\\"Redo queue\\\", redo_queue_size_kb,\\r\\n                    long(null))\\r\\n| project sample_time_utc, series = strcat(metric_name, \\\" | \\\", partner_logical_server_name, \\\" | \\\", partner_database_name), metric\\r\\n| make-series metric = max(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series\\r\\n| project series, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 1,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "Replication queues",
        "noDataMessage": "There is no data for specified parameters.",
        "timeBrushParameterName": "timeRange",
        "queryType": 9,
        "visualization": "linechart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 3,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "replicaType",
          "comparison": "isEqualTo",
          "value": "Primary"
        },
        {
          "parameterName": "isHyperscaleDatabase",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "georeplication_queues"
    },
    {
      "type": 1,
      "content": {
        "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log send queue`|The amount of transaction log data waiting to be sent from the primary replica to a geo-replica.|\r\n|`Redo queue`|The amount of transaction log data waiting to be redone, or applied to data files on a geo-replica. When redo queue is low, data latency on a geo-replica is minimal; in case of failover to this geo-replica, failover time and data loss (for forced failovers) are minimal as well.|\r\n\r\nData is collected from [sys.dm_geo_replication_link_status](https://go.microsoft.com/fwlink/?linkid=2198743) and [sys.dm_database_replica_states](https://go.microsoft.com/fwlink/?linkid=2198734)."
      },
      "conditionalVisibilities": [
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "replicaType",
          "comparison": "isEqualTo",
          "value": "Primary"
        },
        {
          "parameterName": "isHyperscaleDatabase",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "georeplication_help_replication_queues"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_geo_replicas\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| project sample_time_utc, series = strcat(partner_logical_server_name, \\\" | \\\", partner_database_name), replication_lag_seconds\\r\\n| make-series metric = max(replication_lag_seconds) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series\\r\\n| project series, metric = series_fill_linear(metric, int(null), false), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 1,
        "aggregation": 2,
        "showAnalytics": true,
        "title": "Replication lag",
        "noDataMessage": "There is no data for specified parameters.",
        "timeBrushParameterName": "timeRange",
        "queryType": 9,
        "visualization": "linechart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 24,
              "options": {
                "style": "decimal",
                "useGrouping": false,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "replicaType",
        "comparison": "isEqualTo",
        "value": "Primary"
      },
      "name": "georeplication_lag"
    },
    {
      "type": 1,
      "content": {
        "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Replication lag`|Delay between committing a transaction on the primary replica and hardening the transaction in the transaction log of a geo-replica. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198863).|\r\n\r\nData is collected from [sys.dm_geo_replication_link_status](https://go.microsoft.com/fwlink/?linkid=2198743)."
      },
      "conditionalVisibilities": [
        {
          "parameterName": "showDescriptions",
          "comparison": "isEqualTo",
          "value": "true"
        },
        {
          "parameterName": "replicaType",
          "comparison": "isEqualTo",
          "value": "Primary"
        }
      ],
      "name": "georeplication_help_replication_lag"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "f9fb6ee6-fe38-4fa3-864c-62360b7c2edd",
            "version": "KqlParameterItem/1.0",
            "name": "georeplicationSampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "georeplication_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_geo_replicas\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| make-series metric = dcount(sample_time_utc) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\\r\\n\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 1,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No geo-replication samples are available",
        "timeBrushParameterName": "timeRange",
        "exportFieldName": "",
        "exportParameterName": "georeplicationHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "lightBlue"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "georeplicationSampleType",
        "comparison": "isEqualTo",
        "value": "Historical"
      },
      "name": "georeplication_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_geo_replicas\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize count_samples = dcount(sample_time_utc)\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No geo-replication samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibility": {
        "parameterName": "georeplicationSampleType",
        "comparison": "isEqualTo",
        "value": "Historical"
      },
      "name": "georeplication_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "0d50daff-a0fa-4061-804b-03e75643cb13",
            "version": "KqlParameterItem/1.0",
            "name": "georeplicationLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_geo_replicas\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize sample_time_utc = max(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "fd1525e9-19cb-4c4a-901d-9a1eead41519",
            "version": "KqlParameterItem/1.0",
            "name": "georeplicationHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_geo_replicas\\r\\n| where sample_time_utc between (todatetime(\\\"{georeplicationHistoricalSample:$.x}\\\") .. (todatetime(\\\"{georeplicationHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize sample_time_utc = min(sample_time_utc)\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "57d4c5b6-018a-4c83-a7f5-599bb212efb2",
            "version": "KqlParameterItem/1.0",
            "name": "georeplicationSampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "georeplicationSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "georeplicationLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "georeplicationSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "georeplicationHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "georeplicationLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "georeplication_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqldb_database_geo_replicas\\r\\n| where sample_time_utc == todatetime(\\\"{georeplicationLatestSampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize count_georeplicas = count() by sample_time_utc\\r\\n| project sample_time = sample_time_utc, sample_time_utc, sample_age = format_timespan(now() - sample_time_utc, \\\"d.hh:mm:ss\\\"), count_georeplicas\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No sample is selected",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_age",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between the last dashboard refresh and the displayed sample"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "sample_time",
              "label": "Collection time"
            },
            {
              "columnId": "sample_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "sample_age",
              "label": "Age of sample"
            },
            {
              "columnId": "count_georeplicas",
              "label": "Geo-replicas"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "georeplicationSampleTime",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "selected_georeplication_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"geo_replication_link_id\\\",\\\"secondary_allow_connections\\\",\\\"suspend_reason_desc\\\", \\\"partner_service_level_objective_long\\\"\\r\\n]);\\r\\nlet column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"last_replication_time\\\",\\\"last_commit_time\\\",\\\"last_sent_time\\\",\\\"last_hardened_time\\\",\\\"last_redone_time\\\"\\r\\n]);\\r\\nlet properties = (\\r\\nsqldb_database_properties\\r\\n| where sample_time_utc between ((todatetime(\\\"{georeplicationSampleTime}\\\") - 3h) .. todatetime(\\\"{georeplicationSampleTime}\\\"))\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| summarize arg_max(sample_time_utc, service_level_objective, service_level_objective_long, logical_cpu_count) by logical_server_name, database_name\\r\\n| project logical_server_name, database_name, service_level_objective, service_level_objective_long, logical_cpu_count\\r\\n);\\r\\nlet current_snapshot = materialize(\\r\\nsqldb_database_geo_replicas\\r\\n| where sample_time_utc == todatetime(\\\"{georeplicationSampleTime}\\\")\\r\\n| where logical_server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_name == @\\\"{databaseName}\\\"\\r\\n| where {haReplica} == false // geo-replication data is only relevant on primary or forwarder; do not show on HA secondaries\\r\\n| lookup properties on $left.partner_logical_server_name == $right.logical_server_name, $left.partner_database_name == $right.database_name\\r\\n| lookup properties on $left.logical_server_name == $right.logical_server_name, $left.database_name == $right.database_name\\r\\n| project-rename local_logical_cpu_count = logical_cpu_count1, partner_logical_cpu_count = logical_cpu_count, partner_service_level_objective = service_level_objective, partner_service_level_objective_long = service_level_objective_long\\r\\n| project-away sample_time_utc, logical_server_name, database_name, database_id, logical_database_id, physical_database_id, log_send_queue_size_kb, log_send_rate_kbps, redo_queue_size_kb, redo_rate_kbps, replication_lag_seconds, service_level_objective1, service_level_objective_long1\\r\\n);\\r\\n// result set for strings grid\\r\\nlet georeplica_details_string = (\\r\\ncurrent_snapshot\\r\\n| project geo_replication_link_id, secondary_allow_connections = secondary_allow_connections_desc, suspend_reason_desc, partner_service_level_objective_long\\r\\n| project geo_replication_link_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project geo_replication_link_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Name\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by geo_replication_link_id // for each geo_replication_link_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for datetime grid\\r\\nlet georeplica_details_datetime = (\\r\\ncurrent_snapshot\\r\\n| project geo_replication_link_id, last_replication_time = last_replication_time_utc,  last_commit_time = last_commit_time_utc, last_sent_time = last_sent_time_utc, last_hardened_time = last_hardened_time_utc, last_redone_time = last_redone_time_utc\\r\\n| project geo_replication_link_id, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project geo_replication_link_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_datetime = dynamic_to_json(make_list(c)) by geo_replication_link_id\\r\\n);\\r\\ncurrent_snapshot\\r\\n| join kind=inner georeplica_details_string on geo_replication_link_id\\r\\n| join kind=inner georeplica_details_datetime on geo_replication_link_id\\r\\n| project partner_logical_server_name,\\r\\n          partner_database_name,\\r\\n          partner_service_level_objective,\\r\\n          slo_mismatch_vcore_difference = abs(local_logical_cpu_count - partner_logical_cpu_count), // applies to DTU as well\\r\\n          replica_role_desc,\\r\\n          replication_state_desc = case(replication_state_desc == \\\"CATCH_UP\\\", \\\"Catch_up\\\", replication_state_desc == \\\"SEEDING\\\", \\\"Seeding\\\", replication_state_desc == \\\"PENDING\\\", \\\"Pending\\\", replication_state_desc == \\\"SUSPENDED\\\", \\\"Suspended\\\", replication_state_desc),\\r\\n          synchronization_state_desc = case(synchronization_state_desc == \\\"NOT SYNCHRONIZING\\\", \\\"Not synchronizing\\\", synchronization_state_desc == \\\"SYNCHRONIZING\\\", \\\"Synchronizing\\\", synchronization_state_desc == \\\"SYNCHRONIZED\\\", \\\"Synchronized\\\", synchronization_state_desc == \\\"REVERTING\\\", \\\"Reverting\\\", synchronization_state_desc == \\\"INITIALIZING\\\", \\\"Initializing\\\", synchronization_state_desc),\\r\\n          synchronization_health_desc = case(synchronization_health_desc == \\\"NOT_HEALTHY\\\", \\\"Not healthy\\\", synchronization_health_desc == \\\"PARTIALLY_HEALTHY\\\", \\\"Partially healthy\\\", synchronization_health_desc == \\\"HEALTHY\\\", \\\"Healthy\\\", synchronization_health_desc),\\r\\n          is_suspended,\\r\\n          local_logical_cpu_count,\\r\\n          partner_logical_cpu_count,\\r\\n          details_string,\\r\\n          details_datetime\\r\\n| sort by tolower(partner_logical_server_name) asc, tolower(partner_database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "title": "Geo-replicas",
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_datetime",
            "parameterName": "details_datetime",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          }
        ],
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "partner_service_level_objective",
              "formatter": 5
            },
            {
              "columnMatch": "slo_mismatch_vcore_difference",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">",
                    "thresholdValue": "6",
                    "representation": "Sev0",
                    "text": "[\"partner_service_level_objective\"]"
                  },
                  {
                    "operator": ">",
                    "thresholdValue": "4",
                    "representation": "Sev1",
                    "text": "[\"partner_service_level_objective\"]"
                  },
                  {
                    "operator": ">",
                    "thresholdValue": "2",
                    "representation": "Sev2",
                    "text": "[\"partner_service_level_objective\"]"
                  },
                  {
                    "operator": ">",
                    "thresholdValue": "0",
                    "representation": "Sev3",
                    "text": "[\"partner_service_level_objective\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "[\"partner_service_level_objective\"]"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "It is recommended that compute size of a geo-replication secondary replica matches the compute size of its primary replica. This instance has [\"local_logical_cpu_count\"] logical CPUs; its partner instance has [\"partner_logical_cpu_count\"] logical CPUs."
              }
            },
            {
              "columnMatch": "replication_state_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Catch_up",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Seeding",
                    "representation": "warning",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Pending",
                    "representation": "pending",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Suspended",
                    "representation": "3",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Unknown",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "synchronization_state_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Not synchronizing",
                    "representation": "error",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Synchronizing",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Synchronized",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Reverting",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Initializing",
                    "representation": "uninitialized",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "synchronization_health_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Healthy",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Partially healthy",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Not healthy",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "is_suspended",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "3",
                    "text": "Yes"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "success",
                    "text": "No"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "local_logical_cpu_count",
              "formatter": 5
            },
            {
              "columnMatch": "partner_logical_cpu_count",
              "formatter": 5
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_datetime",
              "formatter": 5
            }
          ],
          "sortBy": [
            {
              "itemKey": "replica_role_desc",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "partner_logical_server_name",
              "label": "Partner server"
            },
            {
              "columnId": "partner_database_name",
              "label": "Partner database"
            },
            {
              "columnId": "slo_mismatch_vcore_difference",
              "label": "Partner compute size"
            },
            {
              "columnId": "replica_role_desc",
              "label": "Replica role"
            },
            {
              "columnId": "replication_state_desc",
              "label": "Replication state"
            },
            {
              "columnId": "synchronization_state_desc",
              "label": "Synchronization state"
            },
            {
              "columnId": "synchronization_health_desc",
              "label": "Synchronization health"
            },
            {
              "columnId": "is_suspended",
              "label": "Suspended"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "replica_role_desc",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "georeplicationSampleTime",
        "comparison": "isNotEqualTo"
      },
      "name": "georeplicas"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Geo-replica properties",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8
            },
            "customWidth": "50",
            "name": "georeplica_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_datetime}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": null,
                      "formatName": "shortDateTimePattern"
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "georeplica_details_datetime"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "georeplicationSampleTime",
        "comparison": "isNotEqualTo"
      },
      "name": "georeplica_properties"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}