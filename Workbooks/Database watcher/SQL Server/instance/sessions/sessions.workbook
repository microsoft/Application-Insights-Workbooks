{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "69528db3-b2a1-4283-bfb3-f5713552fbfb",
            "version": "KqlParameterItem/1.0",
            "name": "loginName",
            "label": "Login name",
            "type": 2,
            "description": "Filter session statistics by one or more login names. The number of user logical sessions shown next to a login name is the average for the selected time interval.",
            "multiSelect": true,
            "quote": "\"",
            "delimiter": ",",
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_session_stats\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| summarize total_user_logical_sessions = sum(count_user_logical_sessions),\\r\\n            count_samples = dcount(sample_time_utc)\\r\\n            by login_name\\r\\n| extend avg_user_logical_sessions = toreal(total_user_logical_sessions) / toreal(count_samples)\\r\\n| project login_name, display_name = strcat(login_name, \\\" (\\\", round(avg_user_logical_sessions, 2), \\\" sessions)\\\")\\r\\n| sort by tolower(login_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "[]",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "4d698c05-d252-436d-8963-51680873f3de",
            "version": "KqlParameterItem/1.0",
            "name": "hostName",
            "label": "Host name",
            "type": 2,
            "description": "Filter session statistics by one or more host names. The number of user logical sessions shown next to a host name is the average for the selected time interval.",
            "multiSelect": true,
            "quote": "\"",
            "delimiter": ",",
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_session_stats\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| summarize total_user_logical_sessions = sum(count_user_logical_sessions),\\r\\n            count_samples = dcount(sample_time_utc)\\r\\n            by host_name\\r\\n| extend avg_user_logical_sessions = toreal(total_user_logical_sessions) / toreal(count_samples)\\r\\n| project host_name, display_name = strcat(host_name, \\\" (\\\", round(avg_user_logical_sessions, 2), \\\" sessions)\\\")\\r\\n| sort by tolower(host_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "[]",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "326f7858-4b6e-4e0f-98dc-777477f7d851",
            "version": "KqlParameterItem/1.0",
            "name": "programName",
            "label": "Program name",
            "type": 2,
            "description": "Filter session statistics by one or more program (application) names. The number of user logical sessions shown next to a program name is the average for the selected time interval.",
            "multiSelect": true,
            "quote": "\"",
            "delimiter": ",",
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_session_stats\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| summarize total_user_logical_sessions = sum(count_user_logical_sessions),\\r\\n            count_samples = dcount(sample_time_utc)\\r\\n            by program_name\\r\\n| extend avg_user_logical_sessions = toreal(total_user_logical_sessions) / toreal(count_samples)\\r\\n| project program_name, display_name = strcat(program_name, \\\" (\\\", round(avg_user_logical_sessions, 2), \\\" sessions)\\\")\\r\\n| sort by tolower(program_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "[]",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "databaseName",
            "label": "Database name",
            "type": 2,
            "description": "Filter session statistics by one or more database names. The number of user logical sessions shown next to a database name is the average for the selected time interval.",
            "multiSelect": true,
            "quote": "\"",
            "delimiter": ",",
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_session_stats\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| summarize total_user_logical_sessions = sum(count_user_logical_sessions),\\r\\n            count_samples = dcount(sample_time_utc)\\r\\n            by database_name\\r\\n| extend avg_user_logical_sessions = toreal(total_user_logical_sessions) / toreal(count_samples)\\r\\n| top 200 by tolower(database_name) asc\\r\\n| project database_name, display_name = strcat(database_name, \\\" (\\\", round(avg_user_logical_sessions, 2), \\\" sessions)\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "[]",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9,
            "id": "54064f71-067e-4330-b0a4-0ba9b8a593c4"
          },
          {
            "id": "c512ddf9-831e-430f-b658-fcf6656308c9",
            "version": "KqlParameterItem/1.0",
            "name": "loginNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "loginName",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no login_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "loginName",
                  "operator": "isNotNull",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where login_name in ({loginName})"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no login_name filter"
                }
              }
            ]
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "hostNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "hostName",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no host_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "hostName",
                  "operator": "isNotNull",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where host_name in ({hostName})"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no host_name filter"
                }
              }
            ],
            "id": "728b4fbb-c8d3-421d-a2a9-5eb56727d57c"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "programNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "programName",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no program_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "programName",
                  "operator": "isNotNull",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where program_name in ({programName})"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no program_name filter"
                }
              }
            ],
            "id": "c6f22b61-dfe1-44dc-ae19-aca77032f3d7"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "databaseNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "databaseName",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// no database_name filter"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "databaseName",
                  "operator": "isNotNull",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where database_name in ({databaseName})"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "// no database_name filter"
                }
              }
            ],
            "id": "a2aa907c-9a92-4922-809d-90d555b89335"
          }
        ],
        "style": "above",
        "queryType": 9
      },
      "name": "session_stats_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"User sessions\\\",\\r\\n1, \\\"User logical sessions\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_session_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n{loginNameFilter}\\r\\n{hostNameFilter}\\r\\n{programNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize count_user_sessions = sum(count_user_sessions),\\r\\n            count_user_logical_sessions = sum(count_user_logical_sessions)\\r\\n            by sample_time_utc\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"User sessions\\\", tolong(count_user_sessions),\\r\\n                      metric_name == \\\"User logical sessions\\\", tolong(count_user_logical_sessions),\\r\\n                      long(null)\\r\\n                      )\\r\\n| make-series metric = max(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by metric_name\\r\\n| project metric_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 1,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "User sessions",
        "noDataMessage": "There is no data for specified parameters.",
        "timeBrushParameterName": "timeRange",
        "queryType": 9,
        "visualization": "linechart",
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "User logical sessions",
              "color": "pink"
            },
            {
              "seriesName": "User sessions",
              "color": "amethyst"
            }
          ],
          "ySettings": {
            "min": 0
          }
        }
      },
      "customWidth": "50",
      "name": "session_stats_user_sessions"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"CPU time\\\",\\r\\n1, \\\"Elapsed time\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_session_stats\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n{loginNameFilter}\\r\\n{hostNameFilter}\\r\\n{programNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize total_cpu_time_ms = sum(total_cpu_time_ms),\\r\\n            total_elapsed_time_ms = sum(total_elapsed_time_ms)\\r\\n            by sample_time_utc\\r\\n| sort by sample_time_utc asc\\r\\n| extend delta_cpu_time_ms = iif(total_cpu_time_ms >= prev(total_cpu_time_ms), total_cpu_time_ms - prev(total_cpu_time_ms), long(null)),\\r\\n         delta_elapsed_time_ms = iif(total_elapsed_time_ms >= prev(total_elapsed_time_ms), total_elapsed_time_ms - prev(total_elapsed_time_ms), long(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend cpu_time_ms_per_s = toreal(delta_cpu_time_ms) / toreal(delta_sample_time_utc) * 1000,\\r\\n         elapsed_time_ms_per_s = toreal(delta_elapsed_time_ms) / toreal(delta_sample_time_utc) * 1000\\r\\n| project-away delta_cpu_time_ms, delta_elapsed_time_ms, delta_sample_time_utc\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"CPU time\\\", cpu_time_ms_per_s,\\r\\n                      metric_name == \\\"Elapsed time\\\", elapsed_time_ms_per_s,\\r\\n                      real(null)\\r\\n                      )\\r\\n| make-series metric = max(metric) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by metric_name\\r\\n| project metric_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 1,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "Session CPU and elapsed time",
        "noDataMessage": "There is no data for specified parameters.",
        "timeBrushParameterName": "timeRange",
        "queryType": 9,
        "visualization": "linechart",
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "Elapsed time",
              "color": "yellowDark"
            },
            {
              "seriesName": "CPU time",
              "color": "red"
            }
          ],
          "ySettings": {
            "numberFormatSettings": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              }
            },
            "min": 0
          }
        }
      },
      "customWidth": "50",
      "name": "session_stats_time"
    },
    {
      "type": 1,
      "content": {
        "json": "|Metric|Description|\r\n|:-|:-|\r\n|`User sessions`|The number of user sessions charted over the selected time interval.|\r\n|`User logical sessions`|The number of user logical sessions charted over the selected time interval. If MARS is used, the same user session can execute multiple requests, each using its own logical session. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198630).|\r\n\r\nData is collected from [sys.dm_exec_sessions](https://go.microsoft.com/fwlink/?linkid=2213978) and [sys.dm_exec_connections](https://go.microsoft.com/fwlink/?linkid=2214209)."
      },
      "conditionalVisibility": {
        "parameterName": "showDescriptions",
        "comparison": "isEqualTo",
        "value": "true"
      },
      "customWidth": "50",
      "name": "user_sessions_help"
    },
    {
      "type": 1,
      "content": {
        "json": "|Metric|Description|\r\n|:-|:-|\r\n|`CPU time`|The total CPU time consumed by all requests that executed on a user session, per second.|\r\n|`Elapsed time`|The total elapsed time for all requests that executed on a user session, per second. Because requests on different sessions can execute concurrently, the total elapsed time can be greater than one second.|\r\n\r\nData is collected from [sys.dm_exec_sessions](https://go.microsoft.com/fwlink/?linkid=2213978) and [sys.dm_exec_connections](https://go.microsoft.com/fwlink/?linkid=2214209)."
      },
      "conditionalVisibility": {
        "parameterName": "showDescriptions",
        "comparison": "isEqualTo",
        "value": "true"
      },
      "customWidth": "50",
      "name": "cpu_elapsed_time_help"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "c5b0d409-37b8-4ac6-bd29-7ba4772de61a",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateBy",
            "label": "Add summary",
            "type": 10,
            "description": "Choose the type of summary rows to include in session statistics",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    {\"value\":\"'Total'\",\"label\":\"Total\"},\r\n    {\"value\":\"login_name\",\"label\":\"Login\"},\r\n    {\"value\":\"host_name\",\"label\":\"Host\"},\r\n    {\"value\":\"program_name\",\"label\":\"Program\"},\r\n    {\"value\":\"database_name\",\"label\":\"Database\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "'Total'"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "session_stats_grid_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let session_summary = materialize (\\r\\nsqlserver_session_stats\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n{loginNameFilter}\\r\\n{hostNameFilter}\\r\\n{programNameFilter}\\r\\n{databaseNameFilter}\\r\\n| summarize count_samples = dcount(sample_time_utc),\\r\\n            client_interface_name = strcat_array(array_sort_asc(make_set(client_interface_name)), \\\" | \\\"),\\r\\n            net_transport = strcat_array(array_sort_asc(make_set(net_transport)), \\\" | \\\"),\\r\\n            client_version = strcat_array(array_sort_asc(make_set(client_version)), \\\" | \\\"),\\r\\n            protocol_type = strcat_array(array_sort_asc(make_set(protocol_type)), \\\" | \\\"),\\r\\n            protocol_version = strcat_array(array_sort_asc(make_set(protocol_version)), \\\" | \\\"),\\r\\n            auth_scheme = strcat_array(array_sort_asc(make_set(auth_scheme)), \\\" | \\\"),\\r\\n            encrypt_option = strcat_array(array_sort_asc(make_set(encrypt_option)), \\\" | \\\"),\\r\\n            workload_group_name = strcat_array(array_sort_asc(make_set(workload_group_name)), \\\" | \\\"),\\r\\n            session_status = strcat_array(array_sort_asc(make_set(session_status)), \\\" | \\\"),\\r\\n            transaction_isolation_level = strcat_array(array_sort_asc(make_set(transaction_isolation_level)), \\\" | \\\"),\\r\\n            lock_timeout = strcat_array(array_sort_asc(make_set(lock_timeout)), \\\" | \\\"),\\r\\n            deadlock_priority = strcat_array(array_sort_asc(make_set(deadlock_priority)), \\\" | \\\"),\\r\\n            total_user_sessions = sum(count_user_sessions),\\r\\n            total_user_logical_sessions = sum(count_user_logical_sessions),\\r\\n            total_cpu_time_ms = sum(total_cpu_time_ms),\\r\\n            total_elapsed_time_ms = sum(total_elapsed_time_ms),\\r\\n            total_logical_reads = sum(total_logical_reads),\\r\\n            total_writes = sum(total_writes),\\r\\n            total_network_reads = sum(total_network_reads),\\r\\n            total_network_writes = sum(total_network_writes),\\r\\n            min_open_transaction_count = min(min_open_transaction_count),\\r\\n            max_open_transaction_count = max(max_open_transaction_count),\\r\\n            first_connect_time = min(first_connect_time),\\r\\n            last_connect_time = max(last_connect_time),\\r\\n            first_login_time = min(first_login_time),\\r\\n            last_login_time = max(last_login_time),\\r\\n            last_request_start_time\\t= min(last_request_start_time),\\r\\n            last_request_end_time = max(last_request_end_time)\\r\\n            by login_name, host_name, program_name, database_name\\r\\n| extend avg_user_sessions = toreal(total_user_sessions) / toreal(count_samples),\\r\\n         avg_user_logical_sessions = toreal(total_user_logical_sessions) / toreal(count_samples)\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"client_interface_name\\\",\\\"net_transport\\\",\\\"client_version\\\",\\\"protocol_type\\\",\\\"protocol_version\\\",\\\"auth_scheme\\\",\\\"encrypt_option\\\",\\\"workload_group_name\\\",\\\"session_status\\\",\\\"transaction_isolation_level\\\",\\\"lock_timeout\\\",\\\"deadlock_priority\\\"\\r\\n]);\\r\\nlet column_labels_number_count = dynamic(\\r\\n[\\r\\n\\\"min_open_transaction_count\\\",\\\"max_open_transaction_count\\\"\\r\\n]);\\r\\nlet column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"first_connect_time\\\",\\\"last_connect_time\\\",\\\"first_login_time\\\",\\\"last_login_time\\\",\\\"last_request_start_time\\\",\\\"last_request_end_time\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet session_stats_details_string = (\\r\\nsession_summary\\r\\n| project login_name, host_name, program_name, database_name, client_interface_name, net_transport, client_version, protocol_type, protocol_version, auth_scheme, encrypt_option, workload_group_name, session_status, transaction_isolation_level, lock_timeout, deadlock_priority\\r\\n| project login_name, host_name, program_name, database_name, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project login_name, host_name, program_name, database_name, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by login_name, host_name, program_name, database_name\\r\\n);\\r\\n// result set for count numbers grid\\r\\nlet session_stats_details_number_count = (\\r\\nsession_summary\\r\\n| project login_name, host_name, program_name, database_name, min_open_transaction_count, max_open_transaction_count\\r\\n| project login_name, host_name, program_name, database_name, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_number_count to typeof(string) on (project column_label, column_value = tolong(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project login_name, host_name, program_name, database_name, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_number_count = dynamic_to_json(make_list(c)) by login_name, host_name, program_name, database_name\\r\\n);\\r\\n// result set for datetime grid\\r\\nlet session_stats_details_datetime = (\\r\\nsession_summary\\r\\n| project login_name, host_name, program_name, database_name, first_connect_time, last_connect_time, first_login_time, last_login_time, last_request_start_time, last_request_end_time\\r\\n| project login_name, host_name, program_name, database_name, columns = pack_all()\\r\\n| mv-apply column_label = column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label]))\\r\\n| project-away columns\\r\\n| sort by column_label asc\\r\\n| project login_name, host_name, program_name, database_name, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value)\\r\\n| summarize details_datetime = dynamic_to_json(make_list(c)) by login_name, host_name, program_name, database_name\\r\\n);\\r\\nsession_summary\\r\\n| join session_stats_details_string on login_name, host_name, program_name, database_name\\r\\n| join session_stats_details_number_count on login_name, host_name, program_name, database_name\\r\\n| join session_stats_details_datetime on login_name, host_name, program_name, database_name\\r\\n| project grouper = {aggregateBy}, avg_user_sessions, avg_user_logical_sessions, total_cpu_time_ms, total_elapsed_time_ms, total_logical_reads, total_writes, total_network_reads, total_network_writes, login_name, host_name, program_name, database_name, details_string, details_number_count, details_datetime\\r\\n| sort by tolower(login_name) asc, tolower(host_name) asc, tolower(program_name) asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "Session statistics",
        "noDataMessage": "There is no data for specified parameters.",
        "timeBrushParameterName": "timeRange",
        "exportedParameters": [
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": ""
          },
          {
            "fieldName": "details_number_count",
            "parameterName": "details_number_count",
            "parameterType": 1,
            "defaultValue": ""
          },
          {
            "fieldName": "details_datetime",
            "parameterName": "details_datetime",
            "parameterType": 1,
            "defaultValue": ""
          }
        ],
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "grouper",
              "formatter": 5
            },
            {
              "columnMatch": "login_name",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "30ch"
              }
            },
            {
              "columnMatch": "host_name",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "20ch"
              }
            },
            {
              "columnMatch": "program_name",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "30ch"
              }
            },
            {
              "columnMatch": "database_name",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "20ch"
              }
            },
            {
              "columnMatch": "avg_user_sessions",
              "formatter": 4,
              "formatOptions": {
                "palette": "amethyst",
                "aggregation": "Sum",
                "customColumnWidthSetting": "19ch"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "The average number of user sessions during this time interval"
              }
            },
            {
              "columnMatch": "avg_user_logical_sessions",
              "formatter": 4,
              "formatOptions": {
                "palette": "pink",
                "aggregation": "Sum",
                "customColumnWidthSetting": "19ch"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "The average number of user logical sessions during this time interval. If MARS is used, the same user session can execute multiple requests, each using its own logical session."
              }
            },
            {
              "columnMatch": "total_cpu_time_ms",
              "formatter": 4,
              "formatOptions": {
                "palette": "red",
                "aggregation": "Sum",
                "customColumnWidthSetting": "17ch"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "The total CPU time used by requests"
              }
            },
            {
              "columnMatch": "total_elapsed_time_ms",
              "formatter": 4,
              "formatOptions": {
                "palette": "yellowDark",
                "aggregation": "Sum",
                "customColumnWidthSetting": "17ch"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "The total elapsed time for all requests"
              }
            },
            {
              "columnMatch": "total_logical_reads",
              "formatter": 4,
              "formatOptions": {
                "palette": "lightBlue",
                "aggregation": "Sum",
                "customColumnWidthSetting": "17ch"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "The total logical reads for all requests"
              }
            },
            {
              "columnMatch": "total_writes",
              "formatter": 4,
              "formatOptions": {
                "palette": "redDark",
                "aggregation": "Sum",
                "customColumnWidthSetting": "15ch"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "The total writes for all requests"
              }
            },
            {
              "columnMatch": "total_network_reads",
              "formatter": 4,
              "formatOptions": {
                "palette": "turquoise",
                "aggregation": "Sum",
                "customColumnWidthSetting": "19ch"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "The total network IO operations for the database engine reading from the network"
              }
            },
            {
              "columnMatch": "total_network_writes",
              "formatter": 4,
              "formatOptions": {
                "palette": "orange",
                "aggregation": "Sum",
                "customColumnWidthSetting": "19ch"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "The total network IO operations for the database engine writing to the network"
              }
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_count",
              "formatter": 5
            },
            {
              "columnMatch": "details_datetime",
              "formatter": 5
            }
          ],
          "rowLimit": 500,
          "filter": true,
          "hierarchySettings": {
            "treeType": 1,
            "groupBy": [
              "grouper"
            ],
            "expandTopLevel": false
          },
          "labelSettings": [
            {
              "columnId": "grouper",
              "label": "Summary"
            },
            {
              "columnId": "avg_user_sessions",
              "label": "Sessions"
            },
            {
              "columnId": "avg_user_logical_sessions",
              "label": "Logical sessions"
            },
            {
              "columnId": "total_cpu_time_ms",
              "label": "CPU"
            },
            {
              "columnId": "total_elapsed_time_ms",
              "label": "Elapsed"
            },
            {
              "columnId": "total_logical_reads",
              "label": "Logical reads"
            },
            {
              "columnId": "total_writes",
              "label": "Writes"
            },
            {
              "columnId": "total_network_reads",
              "label": "Network reads"
            },
            {
              "columnId": "total_network_writes",
              "label": "Network writes"
            },
            {
              "columnId": "login_name",
              "label": "Login"
            },
            {
              "columnId": "host_name",
              "label": "Host"
            },
            {
              "columnId": "program_name",
              "label": "Program"
            },
            {
              "columnId": "database_name",
              "label": "Database"
            }
          ]
        },
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "User logical sessions",
              "color": "pink"
            },
            {
              "seriesName": "User sessions",
              "color": "magenta"
            }
          ]
        }
      },
      "name": "session_stats_summary"
    },
    {
      "type": 1,
      "content": {
        "json": "The session summary provides cumulative session and connection metrics for each distinct combination of login, host, program (application), and database in the selected time interval. Select a detail row to see additional session and connection properties.\r\n\r\nData is collected from [sys.dm_exec_sessions](https://go.microsoft.com/fwlink/?linkid=2213978) and [sys.dm_exec_connections](https://go.microsoft.com/fwlink/?linkid=2214209)."
      },
      "conditionalVisibility": {
        "parameterName": "showDescriptions",
        "comparison": "isEqualTo",
        "value": "true"
      },
      "name": "session_stats_grid_help"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Session details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 1,
                    "tooltipFormat": {
                      "tooltip": "A pipe-delimited string of all observed values for the selected login, host, and program in the selected time interval."
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_datetime}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Displayed in local time of the database engine instance"
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_datetime"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_count}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "showExportToExcel": true,
              "queryType": 8,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "33",
            "name": "session_details_number_count"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "details_string",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "details_datetime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "details_number_count",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "session_detail_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}