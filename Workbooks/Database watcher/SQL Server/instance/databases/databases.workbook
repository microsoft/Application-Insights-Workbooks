{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "21040266-4bf6-4306-890a-510cd177448c",
            "version": "KqlParameterItem/1.0",
            "name": "databaseSampleType",
            "label": "Data to show",
            "type": 10,
            "description": "\"Last available\" shows the most recent sample within specified time range, if any. \"Historical\" lets you select any sample within specified time range. Refresh the workbook to see most recent samples.",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{\"value\":\"Latest\",\"label\":\"Last available\"},{\"value\":\"Historical\",\"label\":\"Historical\"}]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "Latest"
          }
        ],
        "style": "formHorizontal",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "database_sample_type_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == 1 // assumption: master is always present in each sample\\r\\n| make-series metric = count() default = long(null) on collection_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}*2\\r\\n\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "aggregation": 3,
        "title": "Select a sample",
        "noDataMessage": "No database property samples are available",
        "timeBrushParameterName": "timeRange",
        "exportFieldName": "",
        "exportParameterName": "databaseHistoricalSample",
        "exportDefaultValue": "0",
        "queryType": 9,
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "metric",
              "color": "lightBlue"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "databaseSampleType",
        "comparison": "isEqualTo",
        "value": "Historical"
      },
      "name": "database_timeline"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == 1 // assumption: master is always present in each sample\\r\\n| summarize count_samples = count()\\r\\n| project strcat(\\\"There are `\\\", count_samples, \\\"` samples in the selected time range. Each vertical bar stands for a group of samples. Bar height is the number of samples in a group. Select a bar to view one sample from that group. Zoom in to see smaller sample groups, down to individual samples.\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "noDataMessage": "No database property samples are available",
        "queryType": 9,
        "visualization": "card",
        "textSettings": {
          "style": "markdown"
        }
      },
      "conditionalVisibility": {
        "parameterName": "databaseSampleType",
        "comparison": "isEqualTo",
        "value": "Historical"
      },
      "name": "database_property_sample_count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d2a8112d-eb05-415b-b055-1705701733ea",
            "version": "KqlParameterItem/1.0",
            "name": "databaseLatestSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize collection_time_utc = max(collection_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "143ccb33-307f-4fb4-b573-ea27df4456c1",
            "version": "KqlParameterItem/1.0",
            "name": "databaseHistoricalSampleTime",
            "type": 1,
            "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc between (todatetime(\\\"{databaseHistoricalSample:$.x}\\\") .. (todatetime(\\\"{databaseHistoricalSample:$.x}\\\") + {timeRange:grain}))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize collection_time_utc = min(collection_time_utc)\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 9
          },
          {
            "id": "00056ca9-614c-4686-bbef-b1d44ffaf2d0",
            "version": "KqlParameterItem/1.0",
            "name": "databaseSampleTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "databaseSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Latest",
                  "resultValType": "param",
                  "resultVal": "databaseLatestSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "databaseSampleType",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Historical",
                  "resultValType": "param",
                  "resultVal": "databaseHistoricalSampleTime"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "param",
                  "resultVal": "databaseLatestSampleTime"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "formHorizontal",
        "queryType": 9
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHidden",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "database_sample_time_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize collection_time_utc = min(collection_time_utc)\\r\\n| project collection_time = collection_time_utc, collection_time_utc, sample_age = format_timespan(now() - collection_time_utc, \\\"d.hh:mm:ss\\\")\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 4,
        "noDataMessage": "No database property samples are available",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "collection_time",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "collection_time_utc",
              "formatter": 6,
              "formatOptions": {
                "customColumnWidthSetting": "28ch"
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_age",
              "formatter": 2,
              "tooltipFormat": {
                "tooltip": "Time difference between the last dashboard refresh and the displayed sample"
              }
            },
            {
              "columnMatch": "sample_time",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimePattern"
              }
            },
            {
              "columnMatch": "sample_time_utc",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "collection_time",
              "label": "Collection time"
            },
            {
              "columnId": "collection_time_utc",
              "label": "Collection time (UTC)"
            },
            {
              "columnId": "sample_age",
              "label": "Age of sample"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "databaseSampleTime",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "50",
      "name": "selected_database_properties_sample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let database_storage = (\\r\\nsqlserver_database_storage_utilization\\r\\n| where collection_time_utc between ((todatetime(\\\"{databaseSampleTime}\\\") - 3h) .. todatetime(\\\"{databaseSampleTime}\\\"))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| partition hint.strategy = shuffle by database_id\\r\\n(\\r\\nsummarize arg_max(collection_time_utc, database_id, data_size_used_mb, data_size_allocated_mb, log_size_used_mb, log_size_allocated_mb) by database_id\\r\\n)\\r\\n);\\r\\nlet logical_cpu_count = toscalar(\\r\\nsqlserver_properties\\r\\n| where sample_time_utc between ((todatetime(\\\"{databaseSampleTime}\\\") - 3h) .. todatetime(\\\"{databaseSampleTime}\\\"))\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize arg_max(sample_time_utc, logical_cpu_count)\\r\\n| project logical_cpu_count\\r\\n);\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project database_id, database_name, is_primary_replica, notable_db_scoped_configs, compatibility_level, is_auto_create_stats_on, is_auto_shrink_on, is_auto_update_stats_on, user_access_desc, force_last_good_plan_actual_state, query_store_actual_state_desc, state_desc, page_verify_option_desc, log_reuse_wait_desc, last_good_checkdb_time, updateability, count_suspect_pages\\r\\n| join kind=leftouter hint.strategy = shuffle database_storage on database_id // not joining on sample_time_utc because it is different for two different datasets. database_storage already contains at most one row per database.\\r\\n| extend is_system_database = iif(database_name in~ ('master','tempdb','model','msdb'), true, false),\\r\\n         replica_type = case(is_primary_replica == true, \\\"Primary\\\", is_primary_replica == false, \\\"Secondary\\\", \\\"Not in AG\\\"),\\r\\n         db_scoped_configs = todynamic(notable_db_scoped_configs)\\r\\n| mv-expand db_scoped_configs\\r\\n| mv-expand db_scoped_config_name = db_scoped_configs.name to typeof(string), db_scoped_config_value = db_scoped_configs.value to typeof(string), db_scoped_config_value_for_secondary = db_scoped_configs.value_for_secondary to typeof(string)\\r\\n| where db_scoped_config_name == \\\"MAXDOP\\\" or db_scoped_config_name == \\\"\\\"\\r\\n| extend count_warnings = iif(db_scoped_config_name == \\\"MAXDOP\\\" and logical_cpu_count > 8 and (toint(db_scoped_config_value) > 8 or toint(db_scoped_config_value_for_secondary) > 8), 1, 0)\\r\\n                          +\\r\\n                          iif(compatibility_level <= 110, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_create_stats_on == false, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_shrink_on == true, 1, 0)\\r\\n                          +\\r\\n                          iif(is_auto_update_stats_on == false, 1, 0)\\r\\n                          +\\r\\n                          iif(user_access_desc != \\\"MULTI_USER\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(force_last_good_plan_actual_state != \\\"ON\\\" and updateability == \\\"READ_WRITE\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\"), 1, 0)\\r\\n                          +\\r\\n                          iif(query_store_actual_state_desc != \\\"READ_WRITE\\\" and updateability == \\\"READ_WRITE\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\"), 1, 0)\\r\\n                          +\\r\\n                          iif(state_desc != \\\"ONLINE\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(page_verify_option_desc != \\\"CHECKSUM\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(log_reuse_wait_desc !in~ (\\\"NOTHING\\\",\\\"OLDEST_PAGE\\\",\\\"LOG_SCAN\\\",\\\"DATABASE_SNAPSHOT_CREATION\\\",\\\"CHECKPOINT\\\"), 1, 0)\\r\\n                          +\\r\\n                          iif(last_good_checkdb_time == datetime(\\\"1900-01-01T00:00:00Z\\\") and database_name !~ \\\"tempdb\\\", 1, 0)\\r\\n                          +\\r\\n                          iif(count_suspect_pages > 0, 1, 0)\\r\\n| project database_id, count_warnings, is_system_database, database_name, is_primary_replica, replica_type, data_size_used_mb, data_size_allocated_mb, data_size_unused_mb = data_size_allocated_mb - data_size_used_mb, data_used_ratio = iif(isempty(data_size_used_mb) or isempty(data_size_allocated_mb), \\\"N/A\\\", strcat(round(100 * data_size_used_mb/data_size_allocated_mb, 1), \\\"%\\\")), log_size_used_mb, log_size_allocated_mb, log_size_unused_mb = log_size_allocated_mb - log_size_used_mb, log_used_ratio = iif(isempty(log_size_used_mb) or isempty(log_size_allocated_mb), \\\"N/A\\\", strcat(round(100 * log_size_used_mb/log_size_allocated_mb, 1), \\\"%\\\")), notable_db_scoped_configs\\r\\n| sort by is_system_database asc, tolower(database_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "exportParameterName": "selectedDatabase",
        "queryType": 9,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "database_id",
              "formatter": 5
            },
            {
              "columnMatch": "count_warnings",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "0",
                    "representation": "Sev4",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "1",
                    "representation": "Sev3",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "3",
                    "representation": "Sev2",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": "<=",
                    "thresholdValue": "6",
                    "representation": "Sev1",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": ">=",
                    "thresholdValue": "7",
                    "representation": "Sev0",
                    "text": "[\"database_id\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "more",
                    "text": "[\"database_id\"]"
                  }
                ]
              },
              "tooltipFormat": {
                "tooltip": "There are [\"count_warnings\"] configuration or state warnings for database [\"database_name\"]. Click on the row to see details on the \"Properties and configuration\" tab."
              }
            },
            {
              "columnMatch": "is_system_database",
              "formatter": 5
            },
            {
              "columnMatch": "is_primary_replica",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "true",
                    "representation": "green",
                    "text": "[\"replica_type\"]"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "false",
                    "representation": "turquoise",
                    "text": "[\"replica_type\"]"
                  },
                  {
                    "operator": "is Empty",
                    "representation": "gray",
                    "text": "[\"replica_type\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "Not in AG"
              },
              "tooltipFormat": {
                "tooltip": "Availability group (AG) replica type"
              }
            },
            {
              "columnMatch": "replica_type",
              "formatter": 5
            },
            {
              "columnMatch": "data_size_used_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                },
                "emptyValCustomText": "N/A"
              },
              "tooltipFormat": {
                "tooltip": "Space used within data files. Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "data_size_allocated_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                },
                "emptyValCustomText": "N/A"
              },
              "tooltipFormat": {
                "tooltip": "Size of data files on disk. Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "data_size_unused_mb",
              "formatter": 5
            },
            {
              "columnMatch": "data_used_ratio",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"data_used_ratio\"]",
                  "columnSettings": [
                    {
                      "columnName": "data_size_used_mb",
                      "color": "lightBlue"
                    },
                    {
                      "columnName": "data_size_unused_mb",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "Percentage of space used within data files. Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "log_size_used_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                },
                "emptyValCustomText": "N/A"
              },
              "tooltipFormat": {
                "tooltip": "Space used within log file(s). Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "log_size_allocated_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                },
                "emptyValCustomText": "N/A"
              },
              "tooltipFormat": {
                "tooltip": "Size of log file(s) on disk. Not available for inaccessible databases."
              }
            },
            {
              "columnMatch": "log_size_unused_mb",
              "formatter": 5
            },
            {
              "columnMatch": "log_used_ratio",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"log_used_ratio\"]",
                  "columnSettings": [
                    {
                      "columnName": "log_size_used_mb",
                      "color": "green"
                    },
                    {
                      "columnName": "log_size_unused_mb",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "Percentage of space used within log file(s)"
              }
            },
            {
              "columnMatch": "notable_db_scoped_configs",
              "formatter": 5
            }
          ],
          "rowLimit": 500,
          "labelSettings": [
            {
              "columnId": "count_warnings",
              "label": "Database ID"
            },
            {
              "columnId": "database_name",
              "label": "Database name"
            },
            {
              "columnId": "is_primary_replica",
              "label": "Replica type"
            },
            {
              "columnId": "data_size_used_mb",
              "label": "Data used"
            },
            {
              "columnId": "data_size_allocated_mb",
              "label": "Data allocated"
            },
            {
              "columnId": "data_used_ratio",
              "label": "Data file usage %"
            },
            {
              "columnId": "log_size_used_mb",
              "label": "Log used"
            },
            {
              "columnId": "log_size_allocated_mb",
              "label": "Log allocated"
            },
            {
              "columnId": "log_used_ratio",
              "label": "Log file usage %"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "databaseSampleTime",
        "comparison": "isNotEqualTo"
      },
      "name": "databases"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "993f691a-4913-4e97-a638-05699d39cf90",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "Properties and configuration",
            "subTarget": "Properties",
            "style": "link"
          },
          {
            "id": "094ce311-ae3f-48f8-aacc-84664ed57c46",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "Storage",
            "subTarget": "Storage",
            "style": "link"
          },
          {
            "id": "9cc0b32e-1870-4c8c-a7f0-83c03c50f0bf",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "Transactions",
            "subTarget": "Transactions",
            "style": "link"
          },
          {
            "id": "6e4ab558-4590-46e2-8e23-027d041bb9f3",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "{tablesTabName}",
            "subTarget": "Tables",
            "style": "link"
          },
          {
            "id": "6ad535ce-029d-4b5d-8532-a6af62d1ac8c",
            "cellValue": "databaseTabName",
            "linkTarget": "parameter",
            "linkLabel": "{indexesTabName}",
            "subTarget": "Indexes",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedDatabase",
        "comparison": "isNotEqualTo"
      },
      "name": "database_tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let server_properties = (\\r\\nsqlserver_properties\\r\\n| where sample_time_utc <= todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| top 1 by sample_time_utc desc\\r\\n| project key = int(1), logical_cpu_count\\r\\n);\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| extend key = int(1)\\r\\n| join kind = leftouter server_properties on key\\r\\n| project logical_cpu_count, db_scoped_configs = todynamic(notable_db_scoped_configs)\\r\\n| mv-expand db_scoped_configs\\r\\n| mv-expand name=db_scoped_configs.name to typeof(string), value = db_scoped_configs.value to typeof(string), value_for_secondary = db_scoped_configs.value_for_secondary to typeof(string)\\r\\n| extend note_icon = case(\\r\\n                         name == \\\"MAXDOP\\\" and logical_cpu_count > 8 and (toint(value) > 8 or toint(value_for_secondary) > 8), \\\"warning\\\", \\r\\n                         \\\"\\\"\\r\\n                         ), // MAXDOP=0 at database level means use server-level maxdop. That is handled in server properties. Here we are only concerned with overridden database-level MAXDOP (!=0)\\r\\n         note_text = case(\\r\\n                         name == \\\"MAXDOP\\\",\\\"Configure 'MAXDOP' as recommended\\\",\\r\\n                         \\\"\\\"\\r\\n                         ),\\r\\n         note_url = case(\\r\\n                        name == \\\"MAXDOP\\\",\\\"https://go.microsoft.com/fwlink/?linkid=2201911\\\",\\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away db_scoped_configs, logical_cpu_count\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "name",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Database-scoped configurations are shown if set to a non-default value, or if they are commonly used"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value might not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "name",
                    "label": "Database configuration name"
                  },
                  {
                    "columnId": "value",
                    "label": "Value"
                  },
                  {
                    "columnId": "value_for_secondary",
                    "label": "Value for secondary"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "db_scoped_configurations"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"snapshot_isolation_state\\\",\\r\\n1, \\\"compatibility_level\\\",\\r\\n1, \\\"count_suspect_pages\\\"\\r\\n];\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, snapshot_isolation_state, compatibility_level, count_suspect_pages\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"snapshot_isolation_state\\\", snapshot_isolation_state,\\r\\n                            property_name == \\\"compatibility_level\\\", compatibility_level,\\r\\n                            property_name == \\\"count_suspect_pages\\\", count_suspect_pages,\\r\\n                            int(null)\\r\\n                            )\\r\\n| project-away snapshot_isolation_state, compatibility_level, count_suspect_pages\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 110, \\\"warning\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 0, \\\"info\\\", \\r\\n                        property_name == \\\"count_suspect_pages\\\" and property_value > 0, \\\"warning\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 110, \\\"Latest compatibility level includes latest improvements\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 0, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"count_suspect_pages\\\" and property_value > 0, \\\"Investigate potential data corruption\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"compatibility_level\\\" and property_value <= 110, \\\"https://go.microsoft.com/fwlink/?linkid=2198650\\\", \\r\\n                        property_name == \\\"snapshot_isolation_state\\\" and property_value != 0, \\\"https://go.microsoft.com/fwlink/?linkid=2198854\\\", \\r\\n                        property_name == \\\"count_suspect_pages\\\" and property_value > 0, \\\"https://go.microsoft.com/fwlink/?linkid=2238273\\\",\\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value might not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "database_properties_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"is_read_only\\\",\\r\\n1, \\\"is_auto_shrink_on\\\",\\r\\n1, \\\"is_in_standby\\\",\\r\\n1, \\\"is_auto_create_stats_on\\\",\\r\\n1, \\\"is_auto_update_stats_on\\\",\\r\\n1, \\\"is_auto_update_stats_async_on\\\",\\r\\n1, \\\"is_read_committed_snapshot_on\\\",\\r\\n1, \\\"is_parameterization_forced\\\",\\r\\n1, \\\"is_published\\\",\\r\\n1, \\\"is_subscribed\\\",\\r\\n1, \\\"is_merge_published\\\",\\r\\n1, \\\"is_distributor\\\",\\r\\n1, \\\"is_broker_enabled\\\",\\r\\n1, \\\"is_encrypted\\\",\\r\\n1, \\\"is_accelerated_database_recovery_on\\\",\\r\\n1, \\\"is_cdc_enabled\\\",\\r\\n1, \\\"is_change_feed_enabled\\\", \\r\\n1, \\\"is_ledger_on\\\"\\r\\n];\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, is_read_only, is_auto_shrink_on, is_in_standby, is_auto_create_stats_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_read_committed_snapshot_on, is_parameterization_forced, is_published, is_subscribed, is_merge_published, is_distributor, is_broker_enabled, is_encrypted, is_accelerated_database_recovery_on, is_cdc_enabled, is_change_feed_enabled, is_ledger_on \\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"is_read_only\\\", is_read_only,\\r\\n                            property_name == \\\"is_auto_shrink_on\\\", is_auto_shrink_on,\\r\\n                            property_name == \\\"is_in_standby\\\", is_in_standby,\\r\\n                            property_name == \\\"is_auto_create_stats_on\\\", is_auto_create_stats_on,\\r\\n                            property_name == \\\"is_auto_update_stats_on\\\", is_auto_update_stats_on,\\r\\n                            property_name == \\\"is_auto_update_stats_async_on\\\", is_auto_update_stats_async_on,\\r\\n                            property_name == \\\"is_read_committed_snapshot_on\\\", is_read_committed_snapshot_on,\\r\\n                            property_name == \\\"is_parameterization_forced\\\", is_parameterization_forced,\\r\\n                            property_name == \\\"is_published\\\", is_published,\\r\\n                            property_name == \\\"is_subscribed\\\", is_subscribed,\\r\\n                            property_name == \\\"is_merge_published\\\", is_merge_published,\\r\\n                            property_name == \\\"is_distributor\\\", is_distributor,\\r\\n                            property_name == \\\"is_broker_enabled\\\", is_broker_enabled,\\r\\n                            property_name == \\\"is_encrypted\\\", is_encrypted,\\r\\n                            property_name == \\\"is_accelerated_database_recovery_on\\\", is_accelerated_database_recovery_on,\\r\\n                            property_name == \\\"is_cdc_enabled\\\", is_cdc_enabled,\\r\\n                            property_name == \\\"is_change_feed_enabled\\\", is_change_feed_enabled,\\r\\n                            property_name == \\\"is_ledger_on\\\", is_ledger_on,\\r\\n                            bool(null)\\r\\n                            )\\r\\n| project-away is_read_only, is_auto_shrink_on, is_in_standby, is_auto_create_stats_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_read_committed_snapshot_on, is_parameterization_forced, is_published, is_subscribed, is_merge_published, is_distributor, is_broker_enabled, is_encrypted, is_accelerated_database_recovery_on, is_cdc_enabled, is_change_feed_enabled, is_ledger_on \\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"warning\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"warning\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_published\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_merge_published\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"info\\\", \\r\\n                        property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"Recommended value is 'Disabled'\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"Recommended value is 'Enabled'\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_published\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_merge_published\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"is_accelerated_database_recovery_on\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198635\\\", \\r\\n                        property_name == \\\"is_auto_create_stats_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198642\\\", \\r\\n                        property_name == \\\"is_auto_shrink_on\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198740\\\", \\r\\n                        property_name == \\\"is_auto_update_stats_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198645\\\", \\r\\n                        property_name == \\\"is_cdc_enabled\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198649\\\", \\r\\n                        property_name == \\\"is_encrypted\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2238925\\\", \\r\\n                        property_name == \\\"is_parameterization_forced\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198745\\\", \\r\\n                        property_name == \\\"is_read_committed_snapshot_on\\\" and property_value == false, \\\"https://go.microsoft.com/fwlink/?linkid=2198854\\\", \\r\\n                        property_name == \\\"is_read_only\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198731\\\", \\r\\n                        property_name == \\\"is_subscribed\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201719\\\", \\r\\n                        property_name == \\\"is_published\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201719\\\", \\r\\n                        property_name == \\\"is_merge_published\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2201721\\\", \\r\\n                        property_name == \\\"is_change_feed_enabled\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198748\\\", \\r\\n                        property_name == \\\"is_ledger_on\\\" and property_value == true, \\\"https://go.microsoft.com/fwlink/?linkid=2198864\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Inactive",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value might not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "property_name",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "property_name",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "50",
            "name": "database_properties_boolean"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"owner_principal_name\\\",\\r\\n1, \\\"collation_name\\\",\\r\\n1, \\\"user_access_desc\\\",\\r\\n1, \\\"updateability\\\",\\r\\n1, \\\"state_desc\\\",\\r\\n1, \\\"recovery_model_desc\\\",\\r\\n1, \\\"page_verify_option_desc\\\",\\r\\n1, \\\"log_reuse_wait_desc\\\",\\r\\n1, \\\"containment_desc\\\",\\r\\n1, \\\"delayed_durability_desc\\\",\\r\\n1, \\\"query_store_actual_state_desc\\\",\\r\\n1, \\\"query_store_query_capture_mode_desc\\\",\\r\\n1, \\\"force_last_good_plan_actual_state\\\"\\r\\n];\\r\\nlet server_properties = (\\r\\nsqlserver_properties\\r\\n| where sample_time_utc <= todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| top 1 by sample_time_utc desc\\r\\n| project key = int(1), major_product_version = toint(split(product_version, \\\".\\\")[0])\\r\\n);\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| join kind=leftouter server_properties on key\\r\\n| project property_name, owner_principal_name, collation_name, user_access_desc, updateability, state_desc, recovery_model_desc, page_verify_option_desc, log_reuse_wait_desc, containment_desc, delayed_durability_desc, query_store_actual_state_desc, query_store_query_capture_mode_desc, force_last_good_plan_actual_state, major_product_version, database_name\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"owner_principal_name\\\", owner_principal_name,\\r\\n                            property_name == \\\"collation_name\\\", collation_name,\\r\\n                            property_name == \\\"user_access_desc\\\", user_access_desc,\\r\\n                            property_name == \\\"updateability\\\", updateability,\\r\\n                            property_name == \\\"state_desc\\\", state_desc,\\r\\n                            property_name == \\\"recovery_model_desc\\\", recovery_model_desc,\\r\\n                            property_name == \\\"page_verify_option_desc\\\", page_verify_option_desc,\\r\\n                            property_name == \\\"log_reuse_wait_desc\\\", log_reuse_wait_desc,\\r\\n                            property_name == \\\"containment_desc\\\", containment_desc,\\r\\n                            property_name == \\\"delayed_durability_desc\\\", delayed_durability_desc,\\r\\n                            property_name == \\\"query_store_actual_state_desc\\\", query_store_actual_state_desc,\\r\\n                            property_name == \\\"query_store_query_capture_mode_desc\\\", query_store_query_capture_mode_desc,\\r\\n                            property_name == \\\"force_last_good_plan_actual_state\\\", force_last_good_plan_actual_state,\\r\\n                            \\\"\\\"\\r\\n                            )\\r\\n| project-away owner_principal_name, collation_name, user_access_desc, state_desc, recovery_model_desc, page_verify_option_desc, log_reuse_wait_desc, containment_desc, delayed_durability_desc, query_store_actual_state_desc, query_store_query_capture_mode_desc, force_last_good_plan_actual_state\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"user_access_desc\\\" and property_value != \\\"MULTI_USER\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"info\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"ON\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"READ_WRITE\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"page_verify_option_desc\\\" and property_value != \\\"CHECKSUM\\\", \\\"warning\\\", \\r\\n                        property_name == \\\"log_reuse_wait_desc\\\" and property_value !in~ (\\\"NOTHING\\\",\\\"OLDEST_PAGE\\\",\\\"LOG_SCAN\\\",\\\"DATABASE_SNAPSHOT_CREATION\\\",\\\"CHECKPOINT\\\"), \\\"warning\\\", \\r\\n                        property_name == \\\"containment_desc\\\" and property_value != (\\\"NONE\\\"), \\\"info\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"info\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and ((property_value != \\\"AUTO\\\" and major_product_version >= 15) or (property_value != \\\"ALL\\\" and major_product_version < 15)), \\\"info\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"user_access_desc\\\" and property_value != \\\"MULTI_USER\\\", \\\"Unexpected value, investigate\\\", \\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"Non-default value\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"ON\\\", \\\"Recommended value is 'ON'\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"READ_WRITE\\\", \\\"Recommended value is 'READ_WRITE'\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"Unexpected value, investigate\\\", \\r\\n                        property_name == \\\"page_verify_option_desc\\\" and property_value != \\\"CHECKSUM\\\", \\\"Recommended value is 'CHECKSUM'\\\",\\r\\n                        property_name == \\\"log_reuse_wait_desc\\\" and property_value !in~ (\\\"NOTHING\\\"), \\\"If log size keeps growing, investigate\\\", \\r\\n                        property_name == \\\"containment_desc\\\" and property_value != (\\\"NONE\\\"), \\\"Non-default value\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"Replica or read-only database\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and ((property_value != \\\"AUTO\\\" and major_product_version >= 15) or (property_value != \\\"ALL\\\" and major_product_version < 15)), \\\"Non-default value\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"user_access_desc\\\" and property_value != \\\"MULTI_USER\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2201722\\\", \\r\\n                        property_name == \\\"delayed_durability_desc\\\" and property_value != \\\"DISABLED\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198732\\\", \\r\\n                        property_name == \\\"force_last_good_plan_actual_state\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"ON\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198737\\\", \\r\\n                        property_name == \\\"query_store_actual_state_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and property_value != \\\"READ_WRITE\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2198632\\\", \\r\\n                        property_name == \\\"state_desc\\\" and property_value != \\\"ONLINE\\\", \\\"\\\", \\r\\n                        property_name == \\\"page_verify_option_desc\\\" and property_value != \\\"CHECKSUM\\\", \\\"https://go.microsoft.com/fwlink/?linkid=2201819\\\", \\r\\n                        property_name == \\\"log_reuse_wait_desc\\\" and property_value !in~ (\\\"NOTHING\\\"), \\\"https://go.microsoft.com/fwlink/?linkid=2201723\\\", \\r\\n                        property_name == \\\"containment_desc\\\" and property_value != (\\\"NONE\\\"), \\\"https://go.microsoft.com/fwlink/?linkid=2201820\\\", \\r\\n                        property_name == \\\"updateability\\\" and property_value == \\\"READ_ONLY\\\", \\\"\\\", \\r\\n                        property_name == \\\"query_store_query_capture_mode_desc\\\" and database_name !in (\\\"master\\\",\\\"tempdb\\\",\\\"model\\\",\\\"msdb\\\") and updateability == \\\"READ_WRITE\\\" and ((property_value != \\\"AUTO\\\" and major_product_version >= 15) or (property_value != \\\"ALL\\\" and major_product_version < 15)), \\\"https://go.microsoft.com/fwlink/?linkid=2198632\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away major_product_version, database_name, updateability\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value might not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "database_properties_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let property = datatable(key:int, property_name:string) [\\r\\n1, \\\"database_create_time\\\",\\r\\n1, \\\"last_good_checkdb_time\\\"\\r\\n];\\r\\nsqlserver_database_properties\\r\\n| where collection_time_utc == todatetime(\\\"{databaseSampleTime}\\\")\\r\\n| where machine_name == @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n| join kind=inner property on key\\r\\n| project property_name, create_date, last_good_checkdb_time, database_name\\r\\n| extend property_value = case(\\r\\n                            property_name == \\\"database_create_time\\\", create_date,\\r\\n                            property_name == \\\"last_good_checkdb_time\\\", last_good_checkdb_time,\\r\\n                            datetime(null)\\r\\n                            )\\r\\n| extend note_icon = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\") and database_name =~ \\\"tempdb\\\", \\\"info\\\", \\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"warning\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_text = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"DBCC CHECKDB was never executed on this database\\\", \\r\\n                        \\\"\\\"\\r\\n                        ),\\r\\n        note_url = case(\\r\\n                        property_name == \\\"last_good_checkdb_time\\\" and property_value == datetime(\\\"1900-01-01T00:00:00Z\\\"), \\\"https://go.microsoft.com/fwlink/?linkid=2198749\\\", \\r\\n                        \\\"\\\"\\r\\n                        )\\r\\n| project-away create_date, last_good_checkdb_time, database_name\\r\\n| sort by property_name asc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 3,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "property_value",
                    "formatter": 6,
                    "dateFormat": {
                      "showUtcTime": true,
                      "formatName": "shortDateTimePattern"
                    },
                    "tooltipFormat": {
                      "tooltip": "Displayed in local time of the database engine instance"
                    }
                  },
                  {
                    "columnMatch": "note_icon",
                    "formatter": 18,
                    "formatOptions": {
                      "linkColumn": "note_url",
                      "linkTarget": "Url",
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "warning",
                          "representation": "2",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "info",
                          "representation": "1",
                          "text": "[\"note_text\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": ""
                        }
                      ],
                      "customColumnWidthSetting": "50ch"
                    },
                    "tooltipFormat": {
                      "tooltip": "A warning icon appears if the value might not be optimal. An info icon appears if the property is set to a non-default value, or is notable otherwise. Click the link to learn more."
                    }
                  },
                  {
                    "columnMatch": "note_text",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "note_url",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "property_name",
                    "label": "Property"
                  },
                  {
                    "columnId": "property_value",
                    "label": "Value"
                  },
                  {
                    "columnId": "note_icon",
                    "label": "Note"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "database_properties_datetime"
          },
          {
            "type": 1,
            "content": {
              "json": "Data is collected from [sys.databases](https://go.microsoft.com/fwlink/?linkid=2198730), [sys.database_scoped_configurations](https://go.microsoft.com/fwlink/?linkid=2198643), [sys.dm_os_sys_info](https://go.microsoft.com/fwlink/?linkid=2198867), and several other DMVs."
            },
            "name": "properties_and_config_help"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Properties"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "database_properties_and_configuration_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Metrics on these charts describe storage space consumption in data and transaction log files for selected database. Space consumed within data files by specialized data stores, such as Persistent Version Store, Query Store, etc. is provided as well. Data is collected from [sys.database_files](https://go.microsoft.com/fwlink/?linkid=2198860), [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647), and several other DMVs."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "storage_utilization_details_help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used data\\\",\\r\\n1, \\\"Allocated data\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_database_storage_utilization\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, collection_time_utc, data_size_used_mb, data_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used data\\\", data_size_used_mb,\\r\\n                      metric_name == \\\"Allocated data\\\", data_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = max(metric) default = long(null) on collection_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by metric_name\\r\\n| project metric_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), collection_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated data",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used data",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "data_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Used log\\\",\\r\\n1, \\\"Allocated log\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_database_storage_utilization\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, collection_time_utc, log_size_used_mb, log_size_allocated_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Used log\\\", log_size_used_mb,\\r\\n                      metric_name == \\\"Allocated log\\\", log_size_allocated_mb,\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = max(metric) default = long(null) on collection_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by metric_name\\r\\n| project metric_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), collection_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Transaction log storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Allocated log",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Used log",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "log_storage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"datatable(key:int, metric_name:string) [\\r\\n1, \\\"Persistent version store\\\",\\r\\n1, \\\"Online index version store\\\",\\r\\n1, \\\"Used query store\\\"\\r\\n]\\r\\n| join kind=inner\\r\\n(\\r\\nsqlserver_database_storage_utilization\\r\\n| where collection_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| extend key = int(1)\\r\\n) on key\\r\\n| project metric_name, collection_time_utc, persistent_version_store_size_mb, online_index_version_store_size_mb, query_store_size_mb\\r\\n| extend metric = case(\\r\\n                      metric_name == \\\"Persistent version store\\\", persistent_version_store_size_mb,\\r\\n                      metric_name == \\\"Online index version store\\\", online_index_version_store_size_mb,\\r\\n                      metric_name == \\\"Used query store\\\", todecimal(query_store_size_mb),\\r\\n                      decimal(null)\\r\\n                      )\\r\\n| make-series metric = max(metric) default = long(null) on collection_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by metric_name\\r\\n| project metric_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), collection_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Special purpose data storage",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "metric_name",
                  "formatter": 1
                },
                "rightContent": {
                  "columnMatch": "metric"
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Persistent version store",
                    "color": "orange"
                  },
                  {
                    "seriesName": "Used query store",
                    "color": "green"
                  },
                  {
                    "seriesName": "Online index version store",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Hyperscale RBPEX",
                    "color": "blue"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 4,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "1"
              },
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "2"
              },
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "3"
              },
              {
                "parameterName": "database_id",
                "comparison": "isNotEqualTo",
                "value": "4"
              }
            ],
            "name": "special_purpose_stores"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlserver_database_storage_utilization",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Storage"
        }
      ],
      "name": "storage_consumption_details_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where object_name == \\\"Databases\\\" and counter_name in (\\\"Transactions/sec\\\",\\\"Write Transactions/sec\\\",\\\"Log Flushes/sec\\\")\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, series_name = counter_name, value\\r\\n| make-series metric = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_name\\r\\n| project series_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Transaction and log flush rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Transactions/sec",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Log Flushes/sec",
                    "color": "green"
                  },
                  {
                    "seriesName": "Write Transactions/sec",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 31,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 1
                    }
                  }
                }
              }
            },
            "name": "transactions"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Transactions/sec`|Transaction rate for all transactions, including read and write transactions, and user and system transactions. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198854).|\r\n|`Write Transactions/sec`|The rate of transactions that wrote to the transaction log of the database. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198644).|\r\n|`Log flushes/sec`|The rate of writes to transaction log as the number of writes per second.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transactions"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where object_name == \\\"Databases\\\" and counter_name == \\\"Log Bytes Flushed/sec\\\"\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| make-series metric = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Log flush rate",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log Bytes Flushed/sec",
                    "label": "Log flush rate",
                    "color": "green"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "transaction_log"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where (object_name == \\\"Database Replica\\\" and counter_name == \\\"Transaction Delay\\\")\\r\\n        or\\r\\n        (object_name == \\\"Databases\\\" and counter_name == \\\"Write Transactions/sec\\\")\\r\\n// Transaction Delay reports cumulative delay in ms/second for all transactions. Derive average per-transaction delay by dividing by the number of write transactions for this database\\r\\n| project sample_time_utc, object_name, counter_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| summarize transaction_delay = sumif(value, counter_name == \\\"Transaction Delay\\\"),\\r\\n            write_transactions = sumif(value, counter_name == \\\"Write Transactions/sec\\\")\\r\\n            by sample_time_utc\\r\\n| project sample_time_utc, transaction_delay_per_transaction = iif(write_transactions != 0 and isnotempty(transaction_delay) and isnotempty(write_transactions), transaction_delay / write_transactions, real(null))\\r\\n| make-series transaction_delay_per_transaction = max(transaction_delay_per_transaction) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor}\\r\\n| project transaction_delay_per_transaction = series_fill_linear(transaction_delay_per_transaction, int(null), false), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 2,
              "showAnalytics": true,
              "title": "Transaction delay",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "transaction_delay_per_transaction"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "transaction_delay_per_transaction",
                    "label": "Transaction delay",
                    "color": "red"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "transaction_delay"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log flush rate`|The rate of writes to the transaction log, as the amount of data per second.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transaction_log"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Transaction delay`|The average delay encountered by each transaction to guarantee that committed data is hardened in the transaction log of synchronous commit replicas. The value is provided on primary replica only and when the database has availability group replicas with synchronous commit.|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_help_transaction_delay"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where object_name == \\\"Database Replica\\\" and counter_name in (\\\"Log Bytes Received/sec\\\",\\\"Redone Bytes/sec\\\")\\r\\n| project sample_time_utc, object_name, counter_name, instance_name, cntr_value\\r\\n| sort by object_name asc, counter_name asc, instance_name asc, sample_time_utc asc\\r\\n| extend delta_cntr_value = iif(cntr_value >= prev(cntr_value) and object_name == prev(object_name) and counter_name == prev(counter_name), cntr_value - prev(cntr_value), real(null)),\\r\\n         delta_sample_time_utc = iif(sample_time_utc >= prev(sample_time_utc), datetime_diff(\\\"Millisecond\\\", sample_time_utc, prev(sample_time_utc)), long(null))\\r\\n| where isnotempty(delta_sample_time_utc)\\r\\n| extend value = delta_cntr_value / delta_sample_time_utc * 1000\\r\\n| project sample_time_utc, counter_name, value\\r\\n| make-series metric = max(value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Secondary replica rates",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "showRefreshButton": true,
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Log Bytes Received/sec",
                    "label": "Log receive rate",
                    "color": "greenDark"
                  },
                  {
                    "seriesName": "Redone Bytes/sec",
                    "label": "Redo rate",
                    "color": "orange"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "secondary_replica_rates"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_performance_counters_common\\r\\n| where sample_time_utc between ({timeRange:start} .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where object_name == \\\"Database Replica\\\" and counter_name in (\\\"Recovery Queue\\\")\\r\\n| project sample_time_utc, counter_name, cntr_value\\r\\n| make-series metric = max(cntr_value) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by counter_name\\r\\n| project counter_name, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\\r\\n\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Secondary replica redo queue",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "metric"
                ],
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Recovery Queue",
                    "label": "Redo queue",
                    "color": "purple"
                  }
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 3,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "secondary_replica_redo_queue"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Log receive rate`, `Redo rate`|The rates of receiving and applying transaction log on a secondary replica. When redo rate is comparable to log receive rate, data latency on a secondary replica is minimal; in case of failover to this secondary replica, failover time is minimal as well. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198629).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_secondary_redo_rate"
          },
          {
            "type": 1,
            "content": {
              "json": "|Metric|Description|\r\n|:-|:-|\r\n|`Redo queue`|The amount of transaction log data waiting to be redone, or applied to data files. When redo queue is low, data latency on a secondary replica is minimal; in case of failover to this secondary replica, failover time is minimal as well. [Learn more](https://go.microsoft.com/fwlink/?linkid=2198629).|\r\n\r\nData is collected from [sys.dm_os_performance_counters](https://go.microsoft.com/fwlink/?linkid=2198647)."
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "transactions_and_replicas_secondary_redo_queue"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlserver_performance_counters_common",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Transactions"
        }
      ],
      "name": "transactions_group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let current_snapshot = materialize(\\r\\nsqlserver_table_metadata\\r\\n| where collection_time_utc between ((todatetime(\\\"{databaseSampleTime}\\\") - 3h) .. todatetime(\\\"{databaseSampleTime}\\\"))\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| project-away server_name, machine_name\\r\\n| summarize arg_max(collection_time_utc, *) by object_id\\r\\n| extend count_partitions = count_no_compression_partitions + count_row_compression_partitions + count_page_compression_partitions + count_columnstore_compression_partitions + count_columnstore_archive_compression_partitions,\\r\\n         total_used_size_mb = toreal(in_row_used_size_mb + lob_used_size_mb + row_overflow_used_size_mb),\\r\\n         total_reserved_size_mb = toreal(in_row_reserved_size_mb + lob_reserved_size_mb + row_overflow_reserved_size_mb)\\r\\n| extend used_allocations_label = strcat(round(100 * in_row_used_size_mb/total_used_size_mb, 2), \\\"% | \\\", round(100 * row_overflow_used_size_mb/total_used_size_mb, 2), \\\"% | \\\", round(100 * lob_used_size_mb/total_used_size_mb, 2), \\\"%\\\"),\\r\\n         compression_label = trim(\\\" [|] \\\", strcat(\\r\\n                                                 iif(count_no_compression_partitions > 0, \\\"None | \\\", \\\"\\\"),\\r\\n                                                 iif(count_row_compression_partitions > 0, \\\"Row | \\\", \\\"\\\"),\\r\\n                                                 iif(count_page_compression_partitions > 0, \\\"Page | \\\", \\\"\\\"),\\r\\n                                                 iif(count_columnstore_compression_partitions > 0, \\\"Columnstore | \\\", \\\"\\\"),\\r\\n                                                 iif(count_columnstore_archive_compression_partitions > 0, \\\"Columnstore archive | \\\", \\\"\\\")\\r\\n                                                 ))\\r\\n| extend used_allocations_label = iif(used_allocations_label == \\\"% | % | %\\\", \\\"-\\\", used_allocations_label)\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"temporal_type_desc\\\",\\\"durability_desc\\\",\\\"ledger_type_desc\\\"\\r\\n]);\\r\\nlet column_labels_number = dynamic(\\r\\n[\\r\\n\\\"count_no_compression_partitions\\\",\\\"count_row_compression_partitions\\\",\\\"count_page_compression_partitions\\\",\\\"count_columnstore_compression_partitions\\\",\\\"count_columnstore_archive_compression_partitions\\\",\\\"text_in_row_limit\\\"\\r\\n]);\\r\\nlet column_labels_number_id = dynamic(\\r\\n[\\r\\n\\\"schema_id\\\",\\\"database_id\\\",\\\"object_id\\\"\\r\\n]);\\r\\nlet column_labels_number_mb = dynamic(\\r\\n[\\r\\n\\\"in_row_used_size_mb\\\",\\\"in_row_reserved_size_mb\\\",\\\"lob_used_size_mb\\\",\\\"lob_reserved_size_mb\\\",\\\"row_overflow_used_size_mb\\\",\\\"row_overflow_reserved_size_mb\\\"\\r\\n]);\\r\\nlet column_labels_bool = dynamic(\\r\\n[\\r\\n\\\"large_value_types_out_of_row\\\",\\\"is_memory_optimized\\\",\\\"is_merge_published\\\",\\\"is_tracked_by_cdc\\\",\\\"is_replicated\\\",\\\"is_filetable\\\",\\\"is_external\\\",\\\"is_node\\\",\\\"is_edge\\\",\\\"is_dropped_ledger_table\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet table_details_string = (\\r\\ncurrent_snapshot\\r\\n| project object_id, temporal_type_desc, durability_desc, ledger_type_desc\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for numbers grid\\r\\nlet table_details_number = (\\r\\ncurrent_snapshot\\r\\n| project object_id, count_no_compression_partitions, count_row_compression_partitions, count_page_compression_partitions, count_columnstore_compression_partitions, count_columnstore_archive_compression_partitions, text_in_row_limit\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number to typeof(string) on (project column_label, column_value = tolong(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for id numbers grid\\r\\nlet table_details_number_id = (\\r\\ncurrent_snapshot\\r\\n| project object_id, schema_id, database_id\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_id to typeof(string) on (project column_label, column_value = toint(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_id = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for mb numbers grid\\r\\nlet table_details_number_mb = (\\r\\ncurrent_snapshot\\r\\n| project object_id, in_row_used_size_mb, in_row_reserved_size_mb, lob_used_size_mb, lob_reserved_size_mb, row_overflow_used_size_mb, row_overflow_reserved_size_mb\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_mb to typeof(string) on (project column_label, column_value = toreal(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_mb = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for boolean grid\\r\\nlet table_details_bool = (\\r\\ncurrent_snapshot\\r\\n| project object_id, large_value_types_out_of_row, is_memory_optimized, is_merge_published, is_tracked_by_cdc, is_replicated, is_filetable, is_external, is_node, is_edge, is_dropped_ledger_table\\r\\n| project object_id, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_bool to typeof(string) on (project column_label, column_value = toboolean(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_bool = dynamic_to_json(make_list(c)) by object_id // for each object_id, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\ncurrent_snapshot\\r\\n| join table_details_string on object_id\\r\\n| join table_details_number on object_id\\r\\n| join table_details_number_id on object_id\\r\\n| join table_details_number_mb on object_id\\r\\n| join table_details_bool on object_id\\r\\n| project schema_name, object_name, count_rows, total_used_size_mb, total_reserved_size_mb, count_partitions, object_type, is_heap, is_clustered = not(is_heap), object_type_tooltip = case(is_heap, \\\"Heap\\\", \\\"Clustered\\\"), compression_partitions = count_partitions, allocation_used_size_mb = total_used_size_mb, lock_escalation_desc, used_allocations_label, compression_label, in_row_used_size_mb, lob_used_size_mb, row_overflow_used_size_mb, count_no_compression_partitions, count_row_compression_partitions, count_page_compression_partitions, count_columnstore_compression_partitions, count_columnstore_archive_compression_partitions, details_string, details_number, details_number_id, details_number_mb, details_bool\\r\\n| sort by tolower(schema_name) asc, tolower(object_name) asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "exportedParameters": [
          {
            "fieldName": "details_string",
            "parameterName": "details_string",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number",
            "parameterName": "details_number",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_id",
            "parameterName": "details_number_id",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_number_mb",
            "parameterName": "details_number_mb",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          },
          {
            "fieldName": "details_bool",
            "parameterName": "details_bool",
            "parameterType": 1,
            "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
          }
        ],
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "count_rows",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_used_size_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "total_reserved_size_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "count_partitions",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "object_type",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"object_type\"]",
                  "columnSettings": [
                    {
                      "columnName": "is_heap",
                      "color": "yellow"
                    },
                    {
                      "columnName": "is_clustered",
                      "color": "blueDark"
                    }
                  ]
                }
              },
              "tooltipFormat": {
                "tooltip": "[\"object_type_tooltip\"]"
              }
            },
            {
              "columnMatch": "is_heap",
              "formatter": 5
            },
            {
              "columnMatch": "is_clustered",
              "formatter": 5
            },
            {
              "columnMatch": "object_type_tooltip",
              "formatter": 5
            },
            {
              "columnMatch": "compression_partitions",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"compression_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "count_no_compression_partitions",
                      "color": "green"
                    },
                    {
                      "columnName": "count_row_compression_partitions",
                      "color": "greenDark"
                    },
                    {
                      "columnName": "count_page_compression_partitions",
                      "color": "magenta"
                    },
                    {
                      "columnName": "count_columnstore_compression_partitions",
                      "color": "pink"
                    },
                    {
                      "columnName": "count_columnstore_archive_compression_partitions",
                      "color": "purple"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "None (green), Row (dark green), Page (magenta), Columnstore (pink), Columnstore archive (purple)"
              }
            },
            {
              "columnMatch": "allocation_used_size_mb",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"used_allocations_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "in_row_used_size_mb",
                      "color": "blue"
                    },
                    {
                      "columnName": "row_overflow_used_size_mb",
                      "color": "orange"
                    },
                    {
                      "columnName": "lob_used_size_mb",
                      "color": "red"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "In-row (blue), Overflow (orange), LOB (red)"
              }
            },
            {
              "columnMatch": "lock_escalation_desc",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "AUTO",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "DISABLE",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "N/A"
              }
            },
            {
              "columnMatch": "used_allocations_label",
              "formatter": 5
            },
            {
              "columnMatch": "compression_label",
              "formatter": 5
            },
            {
              "columnMatch": "in_row_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "lob_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "row_overflow_used_size_mb",
              "formatter": 5
            },
            {
              "columnMatch": "count_no_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_row_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_page_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_columnstore_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "count_columnstore_archive_compression_partitions",
              "formatter": 5
            },
            {
              "columnMatch": "details_string",
              "formatter": 5
            },
            {
              "columnMatch": "details_number",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_id",
              "formatter": 5
            },
            {
              "columnMatch": "details_number_mb",
              "formatter": 5
            },
            {
              "columnMatch": "details_bool",
              "formatter": 5
            }
          ],
          "sortBy": [
            {
              "itemKey": "schema_name",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "schema_name",
              "label": "Schema name"
            },
            {
              "columnId": "object_name",
              "label": "Object name"
            },
            {
              "columnId": "count_rows",
              "label": "Rows"
            },
            {
              "columnId": "total_used_size_mb",
              "label": "Used size (MB)"
            },
            {
              "columnId": "total_reserved_size_mb",
              "label": "Reserved size (MB)"
            },
            {
              "columnId": "count_partitions",
              "label": "Partitions"
            },
            {
              "columnId": "object_type",
              "label": "Object type"
            },
            {
              "columnId": "compression_partitions",
              "label": "Compression"
            },
            {
              "columnId": "allocation_used_size_mb",
              "label": "Allocation types"
            },
            {
              "columnId": "lock_escalation_desc",
              "label": "Lock escalation"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "schema_name",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlserver_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "table_metadata"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Selected table details",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_mb}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 4,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_number_mb"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": true
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_number"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8
            },
            "customWidth": "50",
            "name": "table_details_string"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_id}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8
            },
            "customWidth": "50",
            "name": "table_details_number_id"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"{details_bool}\",\"transformers\":null}",
              "size": 3,
              "noDataMessage": "Unknown",
              "queryType": 8,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Value",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "true",
                          "representation": "Check",
                          "text": ""
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "false",
                          "representation": "Inactive",
                          "text": ""
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "table_details_bool"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlserver_table_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Tables"
        }
      ],
      "name": "table_details"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "aed9584f-f4f7-4414-85f4-a610507b84b3",
                  "version": "KqlParameterItem/1.0",
                  "name": "indexType",
                  "label": "Index types",
                  "type": 2,
                  "description": "Select one or more index types",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "\"\"",
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"CLUSTERED\",\"label\":\"Clustered\"},\r\n    {\"value\":\"HEAP\",\"label\":\"Heap\"},\r\n    {\"value\":\"NONCLUSTERED\",\"label\":\"Nonclustered\"},\r\n    {\"value\":\"CLUSTERED COLUMNSTORE\",\"label\":\"Clustered columnstore\"},\r\n    {\"value\":\"NONCLUSTERED COLUMNSTORE\",\"label\":\"Nonclustered columnstore\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "value": [
                    "value::all"
                  ]
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "indexOperations",
                  "label": "Index operations",
                  "type": 2,
                  "description": "Filter indexes by the type of index operations. Index reads include single row seeks/lookups and range/full scans. Index writes include inserts, updates, and deletes.",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":\"A\",\"label\":\"All\"},\r\n    {\"value\":\"R\",\"label\":\"Reads only\"},\r\n    {\"value\":\"W\",\"label\":\"Writes only\"},\r\n    {\"value\":\"RW\",\"label\":\"Reads and writes\"},\r\n    {\"value\":\"N\",\"label\":\"None\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "A",
                  "id": "4362f22d-bd66-4430-bad3-0196d6c41593"
                },
                {
                  "id": "161a0b54-2199-4262-8563-940c51b2c920",
                  "version": "KqlParameterItem/1.0",
                  "name": "maxPartitions",
                  "label": "Number of partitions",
                  "type": 2,
                  "description": "For partitioned tables, include up to this number of partitions",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    {\"value\":1,\"label\":\"1\"},\r\n    {\"value\":10,\"label\":\"10\"},\r\n    {\"value\":50,\"label\":\"50\"},\r\n    {\"value\":100,\"label\":\"100\"},\r\n    {\"value\":200,\"label\":\"200\"}\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "10"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "index_metadata_parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let current_snapshot = materialize(\\r\\nsqlserver_index_metadata\\r\\n| where collection_time_utc between (\\r\\n                                    iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                    ..\\r\\n                                    iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                    ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where collection_time_utc <= iif(isempty(\\\"{databaseHistoricalSampleTime}\\\"), collection_time_utc, todatetime(\\\"{databaseSampleTime}\\\")) // If a historical database sample is selected, consider only index stats up to that time\\r\\n| where database_id == {selectedDatabase:$.database_id}\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where strlen(\\\"{indexType}\\\") == 0 or index_type in ({indexType:value})\\r\\n//| where isempty(columnstore_internal_rowset_type)\\r\\n| project-away collection_time_utc, server_name, machine_name, database_name, database_id\\r\\n| sort by object_id asc, index_id asc, partition_number asc, sample_time_utc asc\\r\\n| extend delta_leaf_insert_count = iif(database_engine_start_time_utc == prev(database_engine_start_time_utc) and object_id == prev(object_id) and index_id == prev(index_id) and partition_number == prev(partition_number) and leaf_insert_count >= prev(leaf_insert_count), leaf_insert_count - prev(leaf_insert_count), long(null)),\\r\\n         delta_leaf_delete_count = iif(database_engine_start_time_utc == prev(database_engine_start_time_utc) and object_id == prev(object_id) and index_id == prev(index_id) and partition_number == prev(partition_number) and leaf_delete_count >= prev(leaf_delete_count), leaf_delete_count - prev(leaf_delete_count), long(null)),\\r\\n         delta_leaf_update_count = iif(database_engine_start_time_utc == prev(database_engine_start_time_utc) and object_id == prev(object_id) and index_id == prev(index_id) and partition_number == prev(partition_number) and leaf_update_count >= prev(leaf_update_count), leaf_update_count - prev(leaf_update_count), long(null)),\\r\\n         delta_leaf_ghost_count = iif(database_engine_start_time_utc == prev(database_engine_start_time_utc) and object_id == prev(object_id) and index_id == prev(index_id) and partition_number == prev(partition_number) and leaf_ghost_count >= prev(leaf_ghost_count), leaf_ghost_count - prev(leaf_ghost_count), long(null)),\\r\\n         delta_range_scan_count = iif(database_engine_start_time_utc == prev(database_engine_start_time_utc) and object_id == prev(object_id) and index_id == prev(index_id) and partition_number == prev(partition_number) and range_scan_count >= prev(range_scan_count), range_scan_count - prev(range_scan_count), long(null)),\\r\\n         delta_singleton_lookup_count = iif(database_engine_start_time_utc == prev(database_engine_start_time_utc) and object_id == prev(object_id) and index_id == prev(index_id) and partition_number == prev(partition_number) and singleton_lookup_count >= prev(singleton_lookup_count), singleton_lookup_count - prev(singleton_lookup_count), long(null)),\\r\\n         delta_forwarded_fetch_count = iif(database_engine_start_time_utc == prev(database_engine_start_time_utc) and object_id == prev(object_id) and index_id == prev(index_id) and partition_number == prev(partition_number) and forwarded_fetch_count >= prev(forwarded_fetch_count), forwarded_fetch_count - prev(forwarded_fetch_count), long(null))\\r\\n| summarize arg_max(sample_time_utc, schema_name, object_name, index_name, index_type, is_unique, is_primary_key, is_unique_constraint, is_padded, is_disabled, has_filter, ignore_dup_key, auto_created, optimize_for_sequential_key, fill_factor, allow_row_locks, allow_page_locks, partition_compression, page_compression_attempt_count, page_compression_success_count, key_columns, included_columns, columnstore_order_columns, partitioning_column, filter_definition, partition_row_count, in_row_partition_size_mb, row_overflow_partition_size_mb, lob_partition_size_mb, is_xml_compressed),\\r\\n            interval_start = min(sample_time_utc),\\r\\n            leaf_insert_count = sum(delta_leaf_insert_count),\\r\\n            leaf_delete_count = sum(delta_leaf_delete_count),\\r\\n            leaf_update_count = sum(delta_leaf_update_count),\\r\\n            leaf_ghost_count = sum(delta_leaf_ghost_count),\\r\\n            range_scan_count = sum(delta_range_scan_count),\\r\\n            singleton_lookup_count = sum(delta_singleton_lookup_count),\\r\\n            forwarded_fetch_count = sum(delta_forwarded_fetch_count)\\r\\n            by object_id, index_id, partition_number\\r\\n// Partition numbers are not necessarily 1-based because we are collecting the last N most recently added partitions.\\r\\n// From this set of partitions, restrict to up to maxPartitions, preferring higher numbered partitions.\\r\\n| sort by object_id asc, index_id asc, partition_number desc\\r\\n| extend partition_row_number = row_number(1, object_id != prev(object_id) or index_id != prev(index_id)),\\r\\n         leaf_delete_count = leaf_delete_count + leaf_ghost_count,\\r\\n         is_unique = is_unique and not (is_primary_key) and not (is_unique_constraint),\\r\\n         interval_end = sample_time_utc\\r\\n| where partition_row_number <= {maxPartitions}\\r\\nand\\r\\n(\\r\\n\\\"{indexOperations}\\\" == \\\"A\\\"\\r\\nor\\r\\n\\\"{indexOperations}\\\" == \\\"R\\\" and (leaf_insert_count == 0 and leaf_delete_count == 0 and leaf_update_count == 0 and (singleton_lookup_count > 0 or range_scan_count > 0))\\r\\nor\\r\\n\\\"{indexOperations}\\\" == \\\"W\\\" and ((leaf_insert_count > 0 or leaf_delete_count > 0 or leaf_update_count > 0) and singleton_lookup_count == 0 and range_scan_count == 0)\\r\\nor\\r\\n\\\"{indexOperations}\\\" == \\\"RW\\\" and (leaf_insert_count > 0 or leaf_delete_count > 0 or leaf_update_count > 0 or singleton_lookup_count > 0 or range_scan_count > 0)\\r\\nor\\r\\n\\\"{indexOperations}\\\" == \\\"N\\\" and (leaf_insert_count == 0 and leaf_delete_count == 0 and leaf_update_count == 0 and singleton_lookup_count == 0 and range_scan_count == 0)\\r\\n)\\r\\n| project-away sample_time_utc, leaf_ghost_count\\r\\n);\\r\\n// column labels for each grid\\r\\nlet column_labels_string = dynamic(\\r\\n[\\r\\n\\\"key_columns\\\",\\\"included_columns\\\",\\\"columnstore_order_columns\\\",\\\"partitioning_column\\\",\\\"filter_definition\\\",\\\"partition_compression\\\"\\r\\n]);\\r\\nlet column_labels_number = dynamic(\\r\\n[\\r\\n\\\"fill_factor\\\",\\\"partition_row_count\\\"\\r\\n]);\\r\\nlet column_labels_number_id = dynamic(\\r\\n[\\r\\n\\\"object_id\\\",\\\"index_id\\\"\\r\\n]);\\r\\nlet column_labels_number_mb = dynamic(\\r\\n[\\r\\n\\\"in_row_partition_size_mb\\\",\\\"row_overflow_partition_size_mb\\\",\\\"lob_partition_size_mb\\\"\\r\\n]);\\r\\nlet column_labels_bool = dynamic(\\r\\n[\\r\\n\\\"is_unique\\\",\\\"ignore_dup_key\\\",\\\"is_primary_key\\\",\\\"is_unique_constraint\\\",\\\"is_padded\\\",\\\"is_disabled\\\",\\\"allow_row_locks\\\",\\\"allow_page_locks\\\",\\\"has_filter\\\",\\\"auto_created\\\",\\\"optimize_for_sequential_key\\\",\\\"is_xml_compressed\\\"\\r\\n]);\\r\\nlet column_labels_datetime = dynamic(\\r\\n[\\r\\n\\\"interval_start\\\",\\\"interval_end\\\"\\r\\n]);\\r\\n// result set for strings grid\\r\\nlet index_details_string = (\\r\\ncurrent_snapshot\\r\\n| project object_id, index_id, partition_number, key_columns, included_columns, columnstore_order_columns, partitioning_column, filter_definition,partition_compression\\r\\n| project object_id, index_id, partition_number, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_string to typeof(string) on (project column_label, column_value = tostring(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, index_id, partition_number, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_string = dynamic_to_json(make_list(c)) by object_id, index_id, partition_number // for each partition, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for numbers grid\\r\\nlet index_details_number = (\\r\\ncurrent_snapshot\\r\\n| project object_id, index_id, partition_number, fill_factor, partition_row_count\\r\\n| project object_id, index_id, partition_number, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number to typeof(string) on (project column_label, column_value = tolong(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, index_id, partition_number, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number = dynamic_to_json(make_list(c)) by object_id, index_id, partition_number // for each partition, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for id numbers grid\\r\\nlet index_details_number_id = (\\r\\ncurrent_snapshot\\r\\n| project object_id, index_id, partition_number\\r\\n| project object_id, index_id, partition_number, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_id to typeof(string) on (project column_label, column_value = toint(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, index_id, partition_number, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_id = dynamic_to_json(make_list(c)) by object_id, index_id, partition_number // for each partition, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for mb numbers grid\\r\\nlet index_details_number_mb = (\\r\\ncurrent_snapshot\\r\\n| project object_id, index_id, partition_number, in_row_partition_size_mb, row_overflow_partition_size_mb, lob_partition_size_mb\\r\\n| project object_id, index_id, partition_number, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_number_mb to typeof(string) on (project column_label, column_value = toreal(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, index_id, partition_number, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_number_mb = dynamic_to_json(make_list(c)) by object_id, index_id, partition_number // for each partition, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for boolean grid\\r\\nlet index_details_bool = (\\r\\ncurrent_snapshot\\r\\n| project object_id, index_id, partition_number, is_unique, ignore_dup_key, is_primary_key, is_unique_constraint, is_padded, is_disabled, allow_row_locks, allow_page_locks, has_filter, auto_created, optimize_for_sequential_key, is_xml_compressed\\r\\n| project object_id, index_id, partition_number, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_bool to typeof(string) on (project column_label, column_value = toboolean(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, index_id, partition_number, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_bool = dynamic_to_json(make_list(c)) by object_id, index_id, partition_number // for each partition, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\n// result set for datetime grid\\r\\nlet index_details_datetime = (\\r\\ncurrent_snapshot\\r\\n| project object_id, index_id, partition_number, interval_start, interval_end\\r\\n| project object_id, index_id, partition_number, columns = pack_all() // put all columns into a property bag\\r\\n| mv-apply column_label = column_labels_datetime to typeof(string) on (project column_label, column_value = todatetime(columns[column_label])) // create a row for each name/value pair\\r\\n| project-away columns\\r\\n| sort by column_label asc //make_list later will preserve sort order\\r\\n| project object_id, index_id, partition_number, c = pack(\\\"Property\\\", column_label, \\\"Value\\\", column_value) // introduce \\\"Property\\\" and \\\"Value\\\" column names\\r\\n| summarize details_datetime = dynamic_to_json(make_list(c)) by object_id, index_id, partition_number // for each partition, aggregate rowset into a json array of rows, to be used as grid source\\r\\n);\\r\\ncurrent_snapshot\\r\\n| lookup index_details_string on object_id, index_id, partition_number\\r\\n| lookup index_details_number on object_id, index_id, partition_number\\r\\n| lookup index_details_number_id on object_id, index_id, partition_number\\r\\n| lookup index_details_number_mb on object_id, index_id, partition_number\\r\\n| lookup index_details_bool on object_id, index_id, partition_number\\r\\n| lookup index_details_datetime on object_id, index_id, partition_number\\r\\n| extend total_index_ops = leaf_insert_count + leaf_delete_count + leaf_update_count + range_scan_count + singleton_lookup_count + forwarded_fetch_count,\\r\\n         index_read_write_ratio = toreal(range_scan_count + singleton_lookup_count) / toreal(leaf_insert_count + leaf_delete_count + leaf_update_count),\\r\\n         page_compression_success_ratio = toreal(page_compression_success_count) / toreal(page_compression_attempt_count)\\r\\n| extend is_unused_index = (not (is_unique or is_primary_key or is_unique_constraint) and index_type == \\\"NONCLUSTERED\\\" and total_index_ops == 0),\\r\\n         is_write_only_index = (not (is_unique or is_primary_key or is_unique_constraint) and index_type == \\\"NONCLUSTERED\\\" and isfinite(index_read_write_ratio) and index_read_write_ratio == 0),\\r\\n         is_write_mostly_index = (not (is_unique or is_primary_key or is_unique_constraint) and index_type == \\\"NONCLUSTERED\\\" and isfinite(index_read_write_ratio) and index_read_write_ratio > 0 and index_read_write_ratio <= 0.1),\\r\\n         is_low_fill_factor = (fill_factor < 80 and fill_factor != 0 and index_type in (\\\"CLUSTERED\\\", \\\"NONCLUSTERED\\\")),\\r\\n         is_row_locks_disabled = (not (allow_row_locks) and index_type in (\\\"CLUSTERED\\\", \\\"NONCLUSTERED\\\")),\\r\\n         is_page_locks_disabled = (not (allow_page_locks) and index_type in (\\\"CLUSTERED\\\", \\\"NONCLUSTERED\\\")),\\r\\n         is_inefficient_page_compression = (partition_compression == \\\"PAGE\\\" and isfinite(page_compression_success_ratio) and page_compression_success_ratio > 0.5),\\r\\n         is_high_heap_forward_fetches = (index_type == \\\"HEAP\\\" and forwarded_fetch_count > 10000),\\r\\n         index_tooltip = strcat(\\r\\n                               iif(is_primary_key, \\\"🔑 Primary key constraint\\\\n\\\", \\\"\\\"),\\r\\n                               iif(is_unique_constraint, \\\"🔑 Unique constraint\\\\n\\\", \\\"\\\"),\\r\\n                               iif(is_unique, \\\"1️⃣ Unique\\\\n\\\", \\\"\\\"),\\r\\n                               iif(has_filter, \\\"▼ Filtered\\\\n\\\", \\\"\\\"),\\r\\n                               iif(ignore_dup_key, \\\"Ignores duplicate key\\\\n\\\", \\\"\\\"),\\r\\n                               iif(is_padded, \\\"Padded\\\\n\\\", \\\"\\\"),\\r\\n                               iif(is_disabled, \\\"Disabled\\\\n\\\", \\\"\\\"),\\r\\n                               iif(auto_created, \\\"Auto-created\\\\n\\\", \\\"\\\"),\\r\\n                               iif(optimize_for_sequential_key, \\\"Optimized for sequential key\\\\n\\\", \\\"\\\")\\r\\n                               ),\\r\\n         index_type = case(\\r\\n                          index_type == \\\"CLUSTERED\\\", \\\"Clustered\\\",\\r\\n                          index_type == \\\"HEAP\\\", \\\"Heap\\\",\\r\\n                          index_type == \\\"NONCLUSTERED\\\", \\\"Nonclustered\\\",\\r\\n                          index_type == \\\"CLUSTERED COLUMNSTORE\\\", \\\"Clustered columnstore\\\",\\r\\n                          index_type == \\\"NONCLUSTERED COLUMNSTORE\\\", \\\"Nonclustered columnstore\\\",\\r\\n                          index_type\\r\\n                          ),\\r\\n         compression = case(\\r\\n                           partition_compression == \\\"NONE\\\", \\\"None\\\",\\r\\n                           partition_compression == \\\"ROW\\\", \\\"Row\\\",\\r\\n                           partition_compression == \\\"PAGE\\\", \\\"Page\\\",\\r\\n                           partition_compression == \\\"COLUMNSTORE\\\", \\\"Columnstore\\\",\\r\\n                           partition_compression == \\\"COLUMNSTORE_ARCHIVE\\\", \\\"Columnstore archive\\\",\\r\\n                           \\\"\\\"\\r\\n                           ),\\r\\n         is_no_compression = (partition_compression == \\\"NONE\\\"),\\r\\n         is_row_compression = (partition_compression == \\\"ROW\\\"),\\r\\n         is_page_compression = (partition_compression == \\\"PAGE\\\"),\\r\\n         is_columnstore_compression = (partition_compression == \\\"COLUMNSTORE\\\"),\\r\\n         is_columnstore_archive_compression = (partition_compression == \\\"COLUMNSTORE_ARCHIVE\\\")\\r\\n| extend count_iw = iif(is_unused_index, 1, 0) + iif(is_write_only_index, 1, 0) + iif(is_write_mostly_index, 1, 0) + iif(is_low_fill_factor, 1, 0) + iif(is_row_locks_disabled, 1, 0) + iif(is_page_locks_disabled, 1, 0) + iif(is_inefficient_page_compression, 1, 0) + iif(is_high_heap_forward_fetches, 1, 0),\\r\\nindex_warnings =\\r\\nstrcat(\\r\\niif(is_unused_index, \\\"|⚠️ This index was not used by any query during the selected time interval. If all critical workloads have executed during this time, consider dropping this index to reduce storage overhead. Before dropping the index, review index operations on all readable replicas of this database, if any.|\\\\r\\\\n\\\", \\\"\\\"),\\r\\niif(is_write_only_index, \\\"|⚠️ During the selected time interval, this index was not used by any query, but was written to. If all critical workloads have executed during this time, consider dropping this index to avoid the overhead of unnecessary writes, and to reduce storage overhead. Before dropping the index, review index operations on all readable replicas of this database, if any.|\\\\r\\\\n\\\", \\\"\\\"),\\r\\niif(is_write_mostly_index, \\\"|⚠️ During the selected time interval, this index was used for reads much less than for writes. If all critical workloads have executed during this time, consider dropping this index to avoid the overhead of unnecessary writes, and to reduce storage overhead. Before dropping the index, review index operations on all readable replicas of this database, if any.|\\\\r\\\\n\\\", \\\"\\\"),\\r\\niif(is_low_fill_factor, strcat(\\\"|⚠️ The fill factor for this index is \\\", tostring(fill_factor), \\\"%, while the default and recommended fill factor is 100%. A lower fill factor increases memory, storage, and IO overhead. Execute `ALTER INDEX \\\", index_name, \\\" ON \\\", schema_name, \\\".\\\", object_name, \\\" REBUILD WITH (ONLINE = ON, MAXDOP = 8, FILLFACTOR = 100);` to set the fill factor to 100. Index rebuild can be a long-running and resource-intensive operation.|\\\\r\\\\n\\\"), \\\"\\\"),\\r\\niif(is_row_locks_disabled, strcat(\\\"|❗ Row locks for this index are disabled. This often leads to concurrency problems such as blocking and deadlocks. Execute `ALTER INDEX \\\", index_name, \\\" ON \\\", schema_name, \\\".\\\", object_name, \\\" SET (ALLOW_ROW_LOCKS = ON);` to enable index row locks.|\\\\r\\\\n\\\"), \\\"\\\"),\\r\\niif(is_page_locks_disabled, strcat(\\\"|❗ Page locks for this index are disabled. This often leads to concurrency problems such as blocking and deadlocks. Execute `ALTER INDEX \\\", index_name, \\\" ON \\\", schema_name, \\\".\\\", object_name, \\\" SET (ALLOW_PAGE_LOCKS = ON);` to enable index page locks.|\\\\r\\\\n\\\"), \\\"\\\"),\\r\\niif(is_inefficient_page_compression, strcat(\\\"|⚠️ This index partition uses page compression, however most page compression attempts are abandoned because they do not achieve sufficiently high compression ratio. To avoid the CPU overhead of ineffective compression attempts, execute `ALTER INDEX \\\", index_name, \\\" ON \\\", schema_name, \\\".\\\", object_name, \\\" REBUILD WITH (ONLINE = ON, MAXDOP = 8, DATA_COMPRESSION = ROW);` to rebuild the index with row compression. If the table is partitioned, execute `ALTER INDEX \\\", index_name, \\\" ON \\\", schema_name, \\\".\\\", object_name, \\\" REBUILD PARTITION = \\\", tostring(partition_number), \\\" WITH (ONLINE = ON, MAXDOP = 8, DATA_COMPRESSION = ROW);` to rebuild just this partition.|\\\\r\\\\n\\\"), \\\"\\\"),\\r\\niif(is_high_heap_forward_fetches, strcat(\\\"|⚠️ Reads from this partition of a heap table resulted in extra IO because the partition contains many forwarding pointers. Execute `ALTER TABLE \\\", schema_name, \\\".\\\", object_name, \\\" REBUILD WITH (ONLINE = ON, MAXDOP = 8);` to rebuild this heap and remove forwarding pointers. If the table is partitioned, execute `ALTER TABLE \\\", schema_name, \\\".\\\", object_name, \\\" REBUILD PARTITION = \\\", tostring(partition_number), \\\" WITH (ONLINE = ON, MAXDOP = 8);` to rebuild just this partition. Alternatively, create a clustered index on this table.|\\\\r\\\\n\\\"), \\\"\\\")\\r\\n)\\r\\n| extend count_iw = iif(count_iw > 0, count_iw, int(null))\\r\\n| project schema_name, object_name, index_name, index_type, partition_number, compression, total_index_ops, count_iw, index_warnings, index_tooltip, is_no_compression, is_row_compression, is_page_compression, is_columnstore_compression, is_columnstore_archive_compression, is_primary_key, is_unique_constraint, is_unique, has_filter, ignore_dup_key, is_padded, is_disabled, auto_created, optimize_for_sequential_key, leaf_insert_count, leaf_delete_count, leaf_update_count, range_scan_count, singleton_lookup_count, forwarded_fetch_count, details_string, details_number, details_number_id, details_number_mb, details_bool, details_datetime\\r\\n| sort by tolower(schema_name) asc,\\r\\n          tolower(object_name) asc,\\r\\n          case(\\r\\n              index_type == \\\"Clustered\\\", 1,\\r\\n              index_type == \\\"Heap\\\", 2,\\r\\n              index_type == \\\"Clustered columnstore\\\", 3,\\r\\n              index_type == \\\"Nonclustered\\\", 4,\\r\\n              index_type == \\\"Nonclustered columnstore\\\", 5,\\r\\n              10\\r\\n              ) asc,\\r\\n          tolower(index_name) asc,\\r\\n          partition_number asc\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 0,
              "showAnalytics": true,
              "noDataMessage": "There is no data for specified parameters.",
              "exportedParameters": [
                {
                  "fieldName": "index_warnings",
                  "parameterName": "index_warnings"
                },
                {
                  "fieldName": "details_string",
                  "parameterName": "details_string",
                  "parameterType": 1,
                  "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
                },
                {
                  "fieldName": "details_number",
                  "parameterName": "details_number",
                  "parameterType": 1,
                  "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
                },
                {
                  "fieldName": "details_number_id",
                  "parameterName": "details_number_id",
                  "parameterType": 1,
                  "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
                },
                {
                  "fieldName": "details_number_mb",
                  "parameterName": "details_number_mb",
                  "parameterType": 1,
                  "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
                },
                {
                  "fieldName": "details_bool",
                  "parameterName": "details_bool",
                  "parameterType": 1,
                  "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
                },
                {
                  "fieldName": "details_datetime",
                  "parameterName": "details_datetime",
                  "parameterType": 1,
                  "defaultValue": "[{\"Property\":\"\",\"Value\":\"\"}]"
                }
              ],
              "showExportToExcel": true,
              "queryType": 9,
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "index_type",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "[\"index_type\"]",
                        "columnSettings": [
                          {
                            "columnName": "is_primary_key",
                            "color": "blueDark"
                          },
                          {
                            "columnName": "is_unique_constraint",
                            "color": "blue"
                          },
                          {
                            "columnName": "is_unique",
                            "color": "lightBlue"
                          },
                          {
                            "columnName": "has_filter",
                            "color": "turquoise"
                          },
                          {
                            "columnName": "ignore_dup_key",
                            "color": "yellow"
                          },
                          {
                            "columnName": "is_padded",
                            "color": "yellowDark"
                          },
                          {
                            "columnName": "is_disabled",
                            "color": "gray"
                          },
                          {
                            "columnName": "auto_created",
                            "color": "pink"
                          },
                          {
                            "columnName": "optimize_for_sequential_key",
                            "color": "purple"
                          }
                        ]
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"index_tooltip\"]"
                    }
                  },
                  {
                    "columnMatch": "compression",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "[\"compression\"]",
                        "columnSettings": [
                          {
                            "columnName": "is_no_compression",
                            "color": "green"
                          },
                          {
                            "columnName": "is_row_compression",
                            "color": "greenDark"
                          },
                          {
                            "columnName": "is_page_compression",
                            "color": "magenta"
                          },
                          {
                            "columnName": "is_columnstore_compression",
                            "color": "pink"
                          },
                          {
                            "columnName": "is_columnstore_archive_compression",
                            "color": "purple"
                          }
                        ],
                        "noRowsScaling": true
                      },
                      "customColumnWidthSetting": "17ch"
                    }
                  },
                  {
                    "columnMatch": "total_index_ops",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "singleton_lookup_count",
                            "color": "lightBlue"
                          },
                          {
                            "columnName": "range_scan_count",
                            "color": "grayBlue"
                          },
                          {
                            "columnName": "leaf_insert_count",
                            "color": "redBright"
                          },
                          {
                            "columnName": "leaf_update_count",
                            "color": "red"
                          },
                          {
                            "columnName": "leaf_delete_count",
                            "color": "redDark"
                          },
                          {
                            "columnName": "forwarded_fetch_count",
                            "color": "yellow"
                          }
                        ],
                        "noRowsScaling": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "Total index operations in the selected time range, including [\"singleton_lookup_count\"] single-row lookups/seeks (light blue), [\"range_scan_count\"] range or full scans (gray blue), [\"leaf_insert_count\"] inserts (bright red), [\"leaf_update_count\"] updates (red), [\"leaf_delete_count\"] deletes (dark red), and [\"forwarded_fetch_count\"] forwarded fetches (yellow)"
                    }
                  },
                  {
                    "columnMatch": "count_iw",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": ">",
                          "thresholdValue": "0",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "index_warnings",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "index_tooltip",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_no_compression",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_row_compression",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_page_compression",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_columnstore_compression",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_columnstore_archive_compression",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_primary_key",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_unique_constraint",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_unique",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "has_filter",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ignore_dup_key",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_padded",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "is_disabled",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "auto_created",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "optimize_for_sequential_key",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "leaf_insert_count",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "leaf_delete_count",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "leaf_update_count",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "range_scan_count",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "singleton_lookup_count",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "forwarded_fetch_count",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "details_string",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "details_number",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "details_number_id",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "details_number_mb",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "details_bool",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "details_datetime",
                    "formatter": 5
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "schema_name",
                    "label": "Schema"
                  },
                  {
                    "columnId": "object_name",
                    "label": "Object"
                  },
                  {
                    "columnId": "index_name",
                    "label": "Index"
                  },
                  {
                    "columnId": "index_type",
                    "label": "Type"
                  },
                  {
                    "columnId": "partition_number",
                    "label": "Partition"
                  },
                  {
                    "columnId": "compression",
                    "label": "Compression"
                  },
                  {
                    "columnId": "total_index_ops",
                    "label": "Operations"
                  },
                  {
                    "columnId": "count_iw",
                    "label": "Warnings"
                  }
                ]
              }
            },
            "name": "index_metadata"
          },
          {
            "type": 1,
            "content": {
              "json": "|Index warnings|\r\n|:--|\r\n{index_warnings}"
            },
            "conditionalVisibility": {
              "parameterName": "index_warnings",
              "comparison": "isNotEqualTo"
            },
            "name": "index_warnings"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Selected index details",
              "expandable": true,
              "expanded": true,
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_id}\",\"transformers\":null}",
                    "size": 3,
                    "noDataMessage": "Unknown",
                    "queryType": 8
                  },
                  "customWidth": "50",
                  "name": "index_details_number_id"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number}\",\"transformers\":null}",
                    "size": 3,
                    "noDataMessage": "Unknown",
                    "queryType": 8,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "index_details_number"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{details_bool}\",\"transformers\":null}",
                    "size": 3,
                    "noDataMessage": "Unknown",
                    "queryType": 8,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Value",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "Check",
                                "text": ""
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "Inactive",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          },
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "index_details_bool"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{details_string}\",\"transformers\":null}",
                    "size": 3,
                    "noDataMessage": "Unknown",
                    "queryType": 8
                  },
                  "customWidth": "50",
                  "name": "index_details_string"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{details_number_mb}\",\"transformers\":null}",
                    "size": 3,
                    "noDataMessage": "Unknown",
                    "queryType": 8,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Value",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 4,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "index_details_number_mb"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"1.0.0\",\"content\":\"{details_datetime}\",\"transformers\":null}",
                    "size": 3,
                    "noDataMessage": "Unknown",
                    "queryType": 8,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Value",
                          "formatter": 6,
                          "numberFormat": {
                            "unit": 4,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          },
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "Property",
                          "sortOrder": 2
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "Property",
                        "sortOrder": 2
                      }
                    ]
                  },
                  "customWidth": "50",
                  "name": "index_details_datetime"
                }
              ],
              "exportParameters": true
            },
            "conditionalVisibilities": [
              {
                "parameterName": "sqlserver_index_metadata",
                "comparison": "isEqualTo",
                "value": "1"
              },
              {
                "parameterName": "selectedDatabase",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "databaseTabName",
                "comparison": "isEqualTo",
                "value": "Indexes"
              }
            ],
            "name": "index_details"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "sqlserver_index_metadata",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "databaseTabName",
          "comparison": "isEqualTo",
          "value": "Indexes"
        },
        {
          "parameterName": "selectedDatabase",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "index_metadata_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}