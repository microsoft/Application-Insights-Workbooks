{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let trend = (\\r\\nsqlserver_volume_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, volume_id, available_volume_storage_ratio = toreal(available_mb / total_mb)\\r\\n| make-series available_volume_storage_ratio_trend = max(available_volume_storage_ratio) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain} by volume_id\\r\\n);\\r\\nsqlserver_volume_storage_utilization\\r\\n| where sample_time_utc between (\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:start} - 1h), {timeRange:start})\\r\\n                                ..\\r\\n                                iif(({timeRange:end} - {timeRange:start}) <= 1h, ({timeRange:end} + 1h), {timeRange:end})\\r\\n                                ) // Expand the range if selected range is shorter than the least frequent collection interval (1h)\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| summarize arg_max(sample_time_utc, *) by volume_id\\r\\n| extend last_available_volume_storage_ratio = toreal(toreal(available_mb) / total_mb),\\r\\n         volume_label = strcat(volume_mount_point, \\\" \\\", case(is_compressed == 1 and is_read_only == 1, \\\"(Compressed, read-only)\\\", is_compressed == 1 and is_read_only == 0, \\\"(Compressed)\\\", is_compressed == 0 and is_read_only == 1, \\\"(Read-only)\\\", \\\"\\\")),\\r\\n         total_file_size_mb = toreal(total_data_file_size_mb + total_log_file_size_mb)\\r\\n| extend total_file_size_label = strcat(round(100 * total_data_file_size_mb/total_file_size_mb, 1), \\\"% | \\\", round(100 * total_log_file_size_mb/total_file_size_mb, 1), \\\"%\\\")\\r\\n| join kind=leftouter trend on volume_id\\r\\n| project volume_label, logical_volume_name, file_system_type, last_available_volume_storage_ratio, available_volume_storage_ratio_trend = series_fill_linear(available_volume_storage_ratio_trend, int(null), false), available_mb, total_mb, total_file_size_mb, count_databases, count_data_files, count_log_files, count_filestream_or_xtp_directories, total_data_file_size_mb, total_log_file_size_mb, total_file_size_label\\r\\n| sort by volume_label asc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "Storage volume consumption",
        "noDataMessage": "There is no data for specified parameters.",
        "queryType": 9,
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "last_available_volume_storage_ratio",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "redGreen",
                "customColumnWidthSetting": "15ch"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "percent",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "available_volume_storage_ratio_trend",
              "formatter": 21,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "redGreen"
              },
              "tooltipFormat": {
                "tooltip": "Change in available size over selected time range"
              }
            },
            {
              "columnMatch": "available_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_mb",
              "formatter": 0,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_file_size_mb",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"total_file_size_label\"]",
                  "columnSettings": [
                    {
                      "columnName": "total_data_file_size_mb",
                      "color": "blue"
                    },
                    {
                      "columnName": "total_log_file_size_mb",
                      "color": "greenDark"
                    }
                  ],
                  "noRowsScaling": true
                }
              },
              "tooltipFormat": {
                "tooltip": "Data files (blue), log files (green)"
              }
            },
            {
              "columnMatch": "count_databases",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              },
              "tooltipFormat": {
                "tooltip": "The number of databases with at least one file on the volume"
              }
            },
            {
              "columnMatch": "count_data_files",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "count_log_files",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "count_filestream_or_xtp_directories",
              "formatter": 0,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_data_file_size_mb",
              "formatter": 5,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_log_file_size_mb",
              "formatter": 5,
              "numberFormat": {
                "unit": 4,
                "options": {
                  "style": "decimal",
                  "useGrouping": true
                }
              }
            },
            {
              "columnMatch": "total_file_size_label",
              "formatter": 5
            }
          ],
          "labelSettings": [
            {
              "columnId": "volume_label",
              "label": "Volume"
            },
            {
              "columnId": "logical_volume_name",
              "label": "Volume name"
            },
            {
              "columnId": "file_system_type",
              "label": "File system"
            },
            {
              "columnId": "last_available_volume_storage_ratio",
              "label": "Available %"
            },
            {
              "columnId": "available_volume_storage_ratio_trend",
              "label": "Available size trend"
            },
            {
              "columnId": "available_mb",
              "label": "Available size"
            },
            {
              "columnId": "total_mb",
              "label": "Total size"
            },
            {
              "columnId": "total_file_size_mb",
              "label": "Data vs. log size"
            },
            {
              "columnId": "count_databases",
              "label": "Databases"
            },
            {
              "columnId": "count_data_files",
              "label": "Data files"
            },
            {
              "columnId": "count_log_files",
              "label": "Log files"
            },
            {
              "columnId": "count_filestream_or_xtp_directories",
              "label": "Filestream/XTP directories"
            },
            {
              "columnId": "total_data_file_size_mb",
              "label": "Data files size"
            },
            {
              "columnId": "total_log_file_size_mb",
              "label": "Log files size"
            }
          ]
        },
        "tileSettings": {
          "titleContent": {
            "columnMatch": "metric_name",
            "formatter": 1,
            "tooltipFormat": {
              "tooltip": "Percentage of maximum size. For more information, see Storage consumption details."
            }
          },
          "rightContent": {
            "columnMatch": "last_metric_value",
            "formatter": 12,
            "formatOptions": {
              "min": 0,
              "max": 1,
              "palette": "greenRed"
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "percent",
                "minimumFractionDigits": 2
              },
              "emptyValCustomText": "-"
            }
          },
          "secondaryContent": {
            "columnMatch": "metric_value",
            "formatter": 9,
            "formatOptions": {
              "min": 0,
              "max": 1,
              "palette": "greenRed"
            }
          },
          "showBorder": false,
          "sortCriteriaField": "tile_ordinal",
          "sortOrderField": 1
        },
        "graphSettings": {
          "type": 0
        },
        "chartSettings": {
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "Maximum query store",
              "color": "redBright"
            },
            {
              "seriesName": "Persistent version store",
              "color": "orange"
            },
            {
              "seriesName": "Used query store",
              "color": "green"
            },
            {
              "seriesName": "Online index version store",
              "color": "pink"
            },
            {
              "seriesName": "Hyperscale RBPEX",
              "color": "blue"
            }
          ],
          "showDataPoints": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 0,
              "options": {
                "style": "percent",
                "useGrouping": true,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "name": "volume_storage_consumption"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Storage volume IO statistics",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Metrics on these charts describe storage IO statistics including IOPS, throughput, and latency for volumes used by this database engine instance. Separate charts are provided for reads and writes. Data is collected from [sys.dm_io_virtual_file_stats()](https://go.microsoft.com/fwlink/?linkid=2198746)."
            },
            "conditionalVisibility": {
              "parameterName": "showDescriptions",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "storage_io_stats_help"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "ca53e0e9-7129-4b85-b842-35b42d1ab5c4",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "IOPS",
                  "subTarget": "IOPS",
                  "style": "link",
                  "linkIsContextBlade": true
                },
                {
                  "id": "8b5fd7cb-85e0-4912-aaf3-de7c1b10d7d4",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Throughput",
                  "subTarget": "Throughput",
                  "style": "link"
                },
                {
                  "id": "f6a93425-3f64-42f3-8715-4d59849ff645",
                  "cellValue": "storageTabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Latency",
                  "subTarget": "Latency",
                  "style": "link"
                }
              ]
            },
            "name": "storage_io_stats_navigation"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_reads, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_reads = iif(num_of_reads >= prev(num_of_reads) and database_id == prev(database_id) and file_id == prev(file_id), num_of_reads - prev(num_of_reads), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| extend iops = toreal(delta_num_of_reads) / delta_io_snapshot_sample_ms * 1000\\r\\n| summarize iops = sum(iops) by sample_time_utc, volume_mount_point, file_type\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), iops\\r\\n| make-series metric = max(iops) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Read IOPS",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "IOPS"
            },
            "name": "read_iops"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_writes, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_writes = iif(num_of_writes >= prev(num_of_writes) and database_id == prev(database_id) and file_id == prev(file_id), num_of_writes - prev(num_of_writes), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| extend iops = toreal(delta_num_of_writes) / delta_io_snapshot_sample_ms * 1000\\r\\n| summarize iops = sum(iops) by sample_time_utc, volume_mount_point, file_type\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), iops\\r\\n| make-series metric = max(iops) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Write IOPS",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "IOPS"
            },
            "name": "write_iops"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_bytes_read, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_bytes_read = iif(num_of_bytes_read >= prev(num_of_bytes_read) and database_id == prev(database_id) and file_id == prev(file_id), num_of_bytes_read - prev(num_of_bytes_read), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_bytes_read = sum(delta_num_of_bytes_read) by sample_time_utc, volume_mount_point, file_type, delta_io_snapshot_sample_ms\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), delta_read_throughput = toreal(delta_num_of_bytes_read) / delta_io_snapshot_sample_ms * 1000\\r\\n| make-series metric = max(delta_read_throughput) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Read throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Throughput"
            },
            "name": "read_throughput"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_bytes_written, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc, io_snapshot_sample_ms asc\\r\\n| extend delta_num_of_bytes_written = iif(num_of_bytes_written >= prev(num_of_bytes_written) and database_id == prev(database_id) and file_id == prev(file_id), num_of_bytes_written - prev(num_of_bytes_written), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_bytes_written = sum(delta_num_of_bytes_written) by sample_time_utc, volume_mount_point, file_type, delta_io_snapshot_sample_ms\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), delta_write_throughput = toreal(delta_num_of_bytes_written) / delta_io_snapshot_sample_ms * 1000\\r\\n| make-series metric = max(delta_write_throughput) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Write throughput",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 11,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Throughput"
            },
            "name": "write_throughput"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_reads, io_stall_read_ms, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc\\r\\n| extend delta_num_of_reads = iif(num_of_reads >= prev(num_of_reads) and database_id == prev(database_id) and file_id == prev(file_id), num_of_reads - prev(num_of_reads), long(null)),\\r\\n         delta_io_stall_read_ms = iif(io_stall_read_ms >= prev(io_stall_read_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_stall_read_ms - prev(io_stall_read_ms), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_reads = sum(delta_num_of_reads),\\r\\n            delta_io_stall_read_ms = sum(delta_io_stall_read_ms)\\r\\n  by sample_time_utc, file_type, volume_mount_point\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), delta_read_latency_ms = iif(delta_num_of_reads != 0, toreal(delta_io_stall_read_ms) / delta_num_of_reads, real(null))\\r\\n| make-series metric = max(delta_read_latency_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Read latency",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Latency"
            },
            "name": "read_latency"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"sqlserver_storage_io\\r\\n| where sample_time_utc between (({timeRange:start} - {timeRange:grain}) .. {timeRange:end})\\r\\n| where machine_name =~ @\\\"{machineName}\\\"\\r\\n| where server_name =~ @\\\"{serverName}\\\"\\r\\n| project sample_time_utc, file_id, file_type, database_id, volume_mount_point, num_of_writes, io_stall_write_ms, io_snapshot_sample_ms\\r\\n| sort by database_id asc, file_id asc, sample_time_utc asc\\r\\n| extend delta_num_of_writes = iif(num_of_writes >= prev(num_of_writes) and database_id == prev(database_id) and file_id == prev(file_id), num_of_writes - prev(num_of_writes), long(null)),\\r\\n         delta_io_stall_write_ms = iif(io_stall_write_ms >= prev(io_stall_write_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_stall_write_ms - prev(io_stall_write_ms), long(null)),\\r\\n         delta_io_snapshot_sample_ms = iif(io_snapshot_sample_ms >= prev(io_snapshot_sample_ms) and database_id == prev(database_id) and file_id == prev(file_id), io_snapshot_sample_ms - prev(io_snapshot_sample_ms), long(null))\\r\\n| where isnotempty(delta_io_snapshot_sample_ms)\\r\\n| summarize delta_num_of_writes = sum(delta_num_of_writes),\\r\\n            delta_io_stall_write_ms = sum(delta_io_stall_write_ms)\\r\\n  by sample_time_utc, file_type, volume_mount_point\\r\\n| project sample_time_utc, series_label = strcat(volume_mount_point, \\\" | \\\", file_type), delta_write_latency_ms = iif(delta_num_of_writes != 0, toreal(delta_io_stall_write_ms) / delta_num_of_writes, real(null))\\r\\n| make-series metric = max(delta_write_latency_ms) default = long(null) on sample_time_utc from {timeRange:start} to {timeRange:end} step {timeRange:grain}/{grainFactor} by series_label\\r\\n| project series_label, metric = series_fill_forward(series_fill_linear(metric, int(null), false)), sample_time_utc\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
              "size": 1,
              "aggregation": 5,
              "showAnalytics": true,
              "title": "Write latency",
              "noDataMessage": "There is no data for specified parameters.",
              "timeBrushParameterName": "timeRange",
              "queryType": 9,
              "visualization": "linechart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "storageTabName",
              "comparison": "isEqualTo",
              "value": "Latency"
            },
            "name": "write_latency"
          }
        ]
      },
      "name": "storage_io_stats_group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}