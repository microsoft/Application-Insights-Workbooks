{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d78e016e-7f9c-4ddb-be50-9cc3317387b6",
            "version": "KqlParameterItem/1.0",
            "name": "qdsMetric",
            "label": "Metric",
            "type": 1,
            "description": "Find top queries sorting by selected metric in descending order",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a3523dda-4080-4f76-9e12-f6b835a09f56",
            "version": "KqlParameterItem/1.0",
            "name": "qdsExecutionType",
            "label": "Execution types",
            "type": 2,
            "description": "Select one or more query execution types",
            "multiSelect": true,
            "quote": "",
            "delimiter": ",",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "0,1,2,3,4",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all"
          },
          {
            "id": "bc7a7dae-4205-422c-9c5c-97b86ad051be",
            "version": "KqlParameterItem/1.0",
            "name": "qdsDatabaseNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true
          },
          {
            "id": "07f39986-d4e0-4205-b586-dc4924600e4d",
            "version": "KqlParameterItem/1.0",
            "name": "qdsQueryHash",
            "label": "Query hash",
            "type": 1,
            "description": "Enter a query hash to show top queries with that hash. This is an optional parameter.",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "paramValidationRules": [
                {
                  "regExp": "\\\"",
                  "match": false,
                  "message": "Query hash filter value cannot contain double quotes"
                }
              ]
            }
          },
          {
            "id": "7917da4e-962c-4ce8-8296-e6f6f22e3992",
            "version": "KqlParameterItem/1.0",
            "name": "qdsQueryText",
            "label": "Query text",
            "type": 1,
            "description": "Enter a string to find queries with SQL text containing this string. This is an optional parameter.",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "multiLineText": true,
              "editorLanguage": "sql",
              "multiLineHeight": 3
            }
          },
          {
            "id": "93ff8197-0255-46c4-8435-3d45d6775830",
            "version": "KqlParameterItem/1.0",
            "name": "qdsStartTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "c2585482-48ef-492b-b0b9-4b9a301fb47b",
            "version": "KqlParameterItem/1.0",
            "name": "qdsEndTime",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "c80d7360-682b-402d-b90e-d6d0f0e3da3e",
            "version": "KqlParameterItem/1.0",
            "name": "adxClusterUri",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "da99f051-8fab-48e2-8e86-8d27f4b7535b",
            "version": "KqlParameterItem/1.0",
            "name": "adxDatabase",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "d3aed10f-bf09-47ab-94a0-9c75319f1bcc",
            "version": "KqlParameterItem/1.0",
            "name": "machineNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "731c20f8-4156-4b65-9dbf-41976a57abfc",
            "version": "KqlParameterItem/1.0",
            "name": "serverNameFilter",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "alwaysHide",
        "comparison": "isNotEqualTo"
      },
      "name": "top_database_parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let qds_metrics_db_agg = materialize (\\r\\nsqlserver_query_runtime_stats\\r\\n| where interval_start_time >= todatetime(\\\"{qdsStartTime}\\\") and interval_end_time <= todatetime(\\\"{qdsEndTime}\\\")\\r\\n{machineNameFilter}\\r\\n{serverNameFilter}\\r\\n{qdsDatabaseNameFilter}\\r\\n| where execution_type in ({qdsExecutionType})\\r\\n| where query_hash == iif(isnotempty(@\\\"{qdsQueryHash}\\\"), @\\\"{qdsQueryHash}\\\", query_hash)\\r\\n| where query_sql_text contains \\\"{qdsQueryText:escape}\\\"\\r\\n| summarize count_executions = sum(count_executions),\\r\\n            duration_us = sum(avg_duration_us * count_executions),\\r\\n            cpu_time_us = sum(avg_cpu_time_us * count_executions),\\r\\n            logical_io_reads = sum(avg_logical_io_reads * count_executions),\\r\\n            logical_io_writes = sum(avg_logical_io_writes * count_executions),\\r\\n            physical_io_reads = sum(avg_physical_io_reads * count_executions),\\r\\n            num_physical_io_reads = sum(avg_num_physical_io_reads * count_executions),\\r\\n            clr_time_us = sum(avg_clr_time_us * count_executions),\\r\\n            dop = sumif(avg_dop * count_executions, is_parallel_plan), // Total DOP for serial queries is meaningless, show as zero\\r\\n            query_max_used_memory = sum(avg_query_max_used_memory * count_executions),\\r\\n            rowcount = sum(avg_rowcount * count_executions),\\r\\n            log_bytes_used = sum(avg_log_bytes_used * count_executions),\\r\\n            tempdb_space_used = sum(avg_tempdb_space_used * count_executions)\\r\\n            by machine_name, server_name, database_name\\r\\n| project machine_name,\\r\\n          server_name,\\r\\n          database_name,\\r\\n          qds_metric = case(\\r\\n                           \\\"{qdsMetric}\\\"==\\\"count_executions\\\", toreal(count_executions),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"duration\\\", toreal(duration_us),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"cpu_time\\\", toreal(cpu_time_us),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"logical_io_reads\\\", toreal(logical_io_reads),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"logical_io_writes\\\", toreal(logical_io_writes),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"physical_io_reads\\\", toreal(physical_io_reads),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"num_physical_io_reads\\\", toreal(num_physical_io_reads),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"clr_time\\\", toreal(clr_time_us),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"dop\\\", toreal(dop),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"query_max_used_memory\\\", toreal(query_max_used_memory),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"rowcount\\\", toreal(rowcount),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"log_bytes_used\\\", toreal(log_bytes_used),\\r\\n                           \\\"{qdsMetric}\\\"==\\\"tempdb_space_used\\\", toreal(tempdb_space_used),\\r\\n                           real(null)\\r\\n                           )\\r\\n);\\r\\nlet total_qds_metric = toscalar(\\r\\nqds_metrics_db_agg\\r\\n| summarize sum(qds_metric)\\r\\n);\\r\\nqds_metrics_db_agg\\r\\n| project label = strcat(database_name, \\\" on \\\", iif(machine_name =~ server_name, server_name, strcat(server_name, \\\" (\\\", machine_name, \\\")\\\"))),\\r\\n          qds_metric_db_ratio = 100 * (qds_metric / total_qds_metric)\\r\\n;\",\"clusterName\":\"{adxClusterUri}\",\"databaseName\":\"{adxDatabase}\"}",
        "size": 3,
        "showAnalytics": true,
        "noDataMessage": "There is no data for specified parameters.",
        "showExportToExcel": true,
        "queryType": 9,
        "visualization": "piechart",
        "chartSettings": {
          "createOtherGroup": 10,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        },
        "mapSettings": {
          "locInfo": "LatLong",
          "sizeSettings": "qds_metric_db_ratio",
          "sizeAggregation": "Sum",
          "legendMetric": "qds_metric_db_ratio",
          "legendAggregation": "Sum",
          "itemColorSettings": {
            "type": "heatmap",
            "colorAggregation": "Sum",
            "nodeColorField": "qds_metric_db_ratio",
            "heatmapPalette": "greenRed"
          }
        }
      },
      "name": "top_databases"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}