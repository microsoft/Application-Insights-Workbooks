{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "bd0df3d6-232e-4a09-a5ca-262bd07f045a",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_table_exists",
            "type": 1,
            "query": "let checktable = (tb:string)\r\n{\r\n// 0 = no error\r\n// 1 = table does not exist (need to enable RFC)\r\n// 2 = table exists, but column v1 does not (or) column v1 exists but no data in the table (need to wait)\r\nlet c1 = \"Type\";\r\nlet dummy = \"unmÃ¶glicher-wert!\";\r\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\r\nlet checkRecords =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(tb)\r\n      | summarize records = count()\r\n    )\r\n  | project records\r\n  | top 1 by records desc\r\n;\r\nlet checkTableExists =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(tb)\r\n      | count\r\n      | extend miss = 0\r\n    )\r\n  | project miss\r\n  | limit 2\r\n  | top 1 by miss asc\r\n;\r\nlet checkColumnExists =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(tb)\r\n      | extend miss = 0\r\n      | extend columnV1 = column_ifexists(c1, dummy)\r\n    )\r\n  | project miss, columnV1\r\n  | limit 2\r\n  | top 1 by miss asc\r\n ;\r\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\r\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\r\nlet tableRecords = toscalar(checkRecords | summarize max(records));\r\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\r\ntoscalar(x)\r\n};\r\nlet systemavailability = checktable('SapHana_SystemAvailability_CL');\r\nlet alerts = checktable('SapHana_Alerts_CL');\r\nlet backup = checktable('SapHana_BackupCatalog_CL');\r\nlet disks = checktable('SapHana_Disks_CL');\r\nlet deltamerge = checktable('SapHana_DeltaMerge_Count_CL');\r\nlet hostconfig = checktable('SapHana_HostConfig_CL');\r\nlet hostinformation = checktable('SapHana_HostInformation_CL');\r\nlet iosavepoint = checktable('SapHana_IO_Savepoint_CL');\r\nlet licensestatus = checktable('SapHana_License_Status_CL');\r\nlet loadhistory = checktable('SapHana_LoadHistory_CL');\r\nlet mvcc = checktable('SapHana_Mvcc_CL');\r\nlet datasize = checktable('SapHana_size01_CL');\r\nlet systemoverview = checktable('SapHana_SystemOverview_CL');\r\nlet systemreplication = checktable('SapHana_SystemReplication_CL');\r\nlet longidlingcursors = checktable('SapHana_LongIdlingCursors_CL');\r\nlet longrunningtransactions = checktable('SapHana_LongRunningTransactions_CL');\r\nlet uncommittedwritetransactions = checktable('SapHana_UncommittedWriteTransactions_CL');\r\nlet blockedtransactions = checktable('SapHana_BlockedTransactions_CL');\r\nlet configurationparameters = checktable('SapHana_ConfigurationParameters_CL');\r\nlet networkthroughput = checktable('SapHana_InternodeSendThroughput_CL');\r\nlet diskfragmentation = checktable('SapHana_DiskFragmentation_CL');\r\nlet memoryserviceusage = checktable('SapHana_HighMemoryUsageService_CL');\r\nlet services = checktable('SapHana_Services_CL');\r\nlet T = datatable(tablename:string, id:string)\r\n[\r\n'SapHana_SystemAvailability_CL', '',\r\n];\r\nT\r\n|project tablename\r\n| extend new_col = strcat('SapHana_SystemAvailability_CL:',systemavailability,',SapHana_Alerts_CL:',alerts,\r\n',SapHana_BackupCatalog_CL:',backup,\r\n',SapHana_Disks_CL:',disks,\r\n',SapHana_HostConfig_CL:',hostconfig,\r\n',SapHana_HostInformation_CL:',hostinformation,\r\n',SapHana_IO_Savepoint_CL:',iosavepoint,\r\n',SapHana_License_Status_CL:',licensestatus,\r\n',SapHana_LoadHistory_CL:',loadhistory,\r\n',SapHana_Mvcc_CL:',mvcc,\r\n',SapHana_size01_CL:',datasize,\r\n',SapHana_SystemOverview_CL:',systemoverview,\r\n',SapHana_SystemReplication_CL:',systemreplication,\r\n',SapHana_LongIdlingCursors_CL:', longidlingcursors,\r\n',SapHana_LongRunningTransactions_CL:',longrunningtransactions,\r\n',SapHana_UncommittedWriteTransactions_CL:',uncommittedwritetransactions,\r\n',SapHana_BlockedTransactions_CL:', blockedtransactions,\r\n',SapHana_ConfigurationParameters_CL:',configurationparameters,\r\n',SapHana_InternodeSendThroughput_CL:',networkthroughput,\r\n',SapHana_DiskFragmentation_CL:',diskfragmentation,\r\n',SapHana_HighMemoryUsageService_CL:',memoryserviceusage,\r\n',SapHana_Services_CL:',services)\r\n|project-away tablename",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "cc5c28b3-a8e6-4ecc-93aa-2f0b2e622355",
            "version": "KqlParameterItem/1.0",
            "name": "param_ams_resource",
            "type": 5,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.workloads/monitors": true
              },
              "additionalResourceOptions": [],
              "showDefault": false
            }
          },
          {
            "id": "b008ea83-66fe-43c5-803a-5ed6e7014a5e",
            "version": "KqlParameterItem/1.0",
            "name": "param_provider_type",
            "type": 1,
            "value": "SapHana"
          },
          {
            "id": "d40aead0-a56c-4f56-95b0-6f7a2de262e3",
            "version": "KqlParameterItem/1.0",
            "name": "param_providers_list",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{param_ams_resource}/providerInstances/\",\"urlParams\":[{\"key\":\"api-version\",\"value\":\"2023-04-01\"},{\"key\":\"pageLimit\",\"value\":\"1000\"}],\"batchDisabled\":false,\"transformers\":null}",
            "queryType": 12
          },
          {
            "id": "8a8d8fdc-157c-4367-9410-c96e9180746e",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error",
            "type": 1,
            "query": "// 0 = no error\r\n// 1 = table does not exist (need to add provider)\r\n// 2 = table exists, but column v1 does not (need to wait)\r\n// 3 = table exists, column v1 too, but not column v2 (need to upgrade)\r\n// 4 = table exists, column v1 and column v2 as well, but no records (need to wait)\r\nlet t = \"SapHana_SystemOverview_CL\";\r\nlet c1 = \"NAME_s\";\r\nlet c2 = \"VALUE_s\";\r\nlet dummy = \"unmÃ¶glicher-wert!\";\r\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, columnV2 = dummy, records = -1 };\r\nlet checkRecords =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(t)\r\n      | summarize records = count()\r\n    )\r\n  | project records\r\n  | top 1 by records desc\r\n;\r\nlet checkTableExists =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(t)\r\n      | count\r\n      | extend miss = 0\r\n    )\r\n  | project miss\r\n  | limit 2\r\n  | top 1 by miss asc\r\n;\r\nlet checkColumnExists =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(t)\r\n      | extend miss = 0\r\n      | extend columnV1 = column_ifexists(c1, dummy)\r\n      | extend columnV2 = column_ifexists(c2, dummy)\r\n    )\r\n  | project miss, columnV1, columnV2\r\n  | limit 2\r\n | top 1 by miss asc\r\n;\r\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != \"1\");\r\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\r\nlet columnV2Exists = toscalar(checkColumnExists | summarize max(columnV2) != dummy);\r\nlet tableRecords = toscalar(checkRecords | summarize max(records));\r\nlet x = iif(tableExists, iif(columnV1Exists, iif(columnV2Exists, iif(tableRecords > 0, \"0\", \"2\"), \"3\"), \"2\"), \"1\");\r\nprint toscalar(x)\r\n//print tableExists, columnV1Exists, columnV2Exists, tableRecords\r\n",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "64ea0b11-f757-4116-b7af-45188c04de9f",
            "version": "KqlParameterItem/1.0",
            "name": "param_alert_templates",
            "type": 1,
            "typeSettings": {
              "multiLineText": true,
              "editorLanguage": "text"
            },
            "value": "[\r\n\t{\r\n\t\t\"name\": \"SAP HANA High CPU Usage Percent\",\r\n\t\t\"description\": \"Fired when a SAP HANA database CPU utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-cpu-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_LoadHistory_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | summarize AggregatedValue = percentile(CPU_d,95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"90\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"3\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"10\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA High Memory Usage Percent\",\r\n\t\t\"description\": \"Fired when a SAP HANA database memory utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-memory-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_LoadHistory_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend memoryPercent=MEMORY_USED_d/MEMORY_SIZE_d*100 | summarize AggregatedValue = percentile(memoryPercent,95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"90\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"3\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"10\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA Health Base on CPU and Memory\",\r\n\t\t\"description\": \"Fired when a SAP HANA database is unhealth based on CPU and memory. Looks at the 95th percentile value over 5 minutes, and if both CPU and memory exceeds 80 percent, the SAP HANA database is considered unhealthy.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-cpu-memory-health\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_LoadHistory_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | where HOST_s == '{Aggregate}' | extend memoryPercent=MEMORY_USED_d/MEMORY_SIZE_d*100 | summarize AggregatedCPU = percentile(CPU_d,95), AggregatedMemory = percentile(memoryPercent,95) by bin(TimeGenerated, 5m), HOST_s| extend AggregatedValue = iff(AggregatedCPU > 80 and AggregatedMemory > 80, 0, 1)\",\r\n\t\t\t\"aggregateName\": \"host\",\r\n\t\t\t\"aggregateDropDownQuery\": \"SapHana_LoadHistory_CL | distinct HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"LessThan\",\r\n\t\t\t\"defaultThreshold\": \"1\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"3\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"10\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n    {\r\n\t\t\"name\": \"SAP HANA Data Volume Disk Usage\",\r\n\t\t\"description\": \"Fired when a SAP HANA database data volume disk utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-datavolume-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_Disks_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and USAGE_TYPE_s == 'DATA' | summarize AggregatedValue = percentile((USED_SIZE_d/TOTAL_SIZE_d*100),95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"70\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"3\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"30\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"300\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n    {\r\n\t\t\"name\": \"SAP HANA Log Volume Disk Usage\",\r\n\t\t\"description\": \"Fired when a SAP HANA database log volume disk utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-logvolume-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_Disks_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and USAGE_TYPE_s == 'LOG' | summarize AggregatedValue = percentile((USED_SIZE_d/TOTAL_SIZE_d*100),95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"70\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"30\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"300\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n    {\r\n\t\t\"name\": \"SAP HANA Trace Volume Disk Usage\",\r\n\t\t\"description\": \"Fired when a SAP HANA trace volume (hana-shared) disk utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-tracevolume-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_Disks_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and USAGE_TYPE_s == 'TRACE' | summarize AggregatedValue = percentile((USED_SIZE_d/TOTAL_SIZE_d*100),95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"70\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"30\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"300\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n    {\r\n\t\t\"name\": \"SAP HANA Log Backup Volume Disk Usage\",\r\n\t\t\"description\": \"Fired when a SAP HANA database log backup volume disk utilization percentage exceeds the specified threshold. This alert is only applicable when log backup is performed to disk. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-logbackupvolume-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\"query\": \"SapHana_Disks_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and USAGE_TYPE_s contains 'LOG_BACKUP' | summarize AggregatedValue = percentile((USED_SIZE_d/TOTAL_SIZE_d*100),95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"70\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"30\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"300\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA Failed Data Backups\",\r\n\t\t\"description\": \"Fired when a SAP HANA database reported a failed data backup. This includes tenant DBs and SYSTEMDB failed backup.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-failed-databackup\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_BackupCatalog_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and ENTRY_TYPE_NAME_s contains 'data' | extend AggregateValue = iff(STATE_NAME_s == 'failed', 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThanOrEqual\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"15\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"60\"\r\n\t\t\t}\r\n\t\t}\r\n    },\r\n\t{\r\n\t\t\"name\": \"SAP HANA Failed Log Backups\",\r\n\t\t\"description\": \"Fired when a SAP HANA database reported a failed log backup. This includes tenant DBs and SYSTEMDB failed backup.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-failed-logbackup\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_BackupCatalog_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and ENTRY_TYPE_NAME_s == 'log backup' | extend AggregateValue = iff(STATE_NAME_s == 'failed', 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"10\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA System Replication Error\",\r\n\t\t\"description\": \"Fired when a SAP HANA database service reported an error on system replication. This includes tenant DBs and SYSTEMDB services.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-errornous-systemreplication\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_SystemReplication_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend AggregateValue = iff(SERVICE_REPLICATION_STATUS_s == 'ERROR', 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"Equal\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"5\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA System Availability\",\r\n\t\t\"description\": \"Fired when a SAP HANA system hasn't reported a PING alive for the last 20 mins.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-availability-reponse\",\r\n\t\t\"severity\": \"1\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"let StartTime=now(); SapHana_SystemAvailability_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | where EVENT_NAME_s == 'PING' | top 1 by TimeGenerated desc | extend AggregateValue = iff(StartTime - TimeGenerated > 20min, 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"0\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"5\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA Configuration Parameter With High Priority\",\r\n\t\t\"description\": \"Fired when any SAP HANA database configuration parameter has 'Very High Priority' for the last 15 mins.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-configuration-parameter-high-priority-item\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"let StartTime=now(); SapHana_ConfigurationParameters_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | where P_s == 1 | extend AggregateValue = iff(StartTime - TimeGenerated > 15min, 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"0\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"15\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"30\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA Long Running Statements\",\r\n\t\t\"description\": \"Fired when a SAP HANA database has any long running statements for the last 15 mins.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-long-running-statement\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"let StartTime=now(); SapHana_LongRunningTransactions_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend AggregateValue = iff(StartTime - TimeGenerated > 15min, 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"0\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"15\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"30\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA Long Idling Cursors\",\r\n\t\t\"description\": \"Fired when a SAP HANA database has any long idling cursors for the last 15 mins.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-long-idle-cursor\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"let StartTime=now(); SapHana_LongIdlingCursors_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend AggregateValue = iff(StartTime - TimeGenerated > 15min, 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"0\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"15\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"30\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA Blocked Transactions\",\r\n\t\t\"description\": \"Fired when a SAP HANA database has any blocked transactions for the last 15 mins.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-blocked-transactions\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"let StartTime=now(); SapHana_BlockedTransactions_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend AggregateValue = iff(StartTime - TimeGenerated > 15min, 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"0\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"15\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"30\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n]"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "dummyneverset",
        "comparison": "isNotEqualTo"
      },
      "name": "parameters - 0"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "223c257a-6dec-4706-89fb-239a2b0eba9f",
            "version": "KqlParameterItem/1.0",
            "name": "param_timeframe",
            "label": "Time Range",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "00a134d0-8216-40ff-8d83-5727cec35384",
            "version": "KqlParameterItem/1.0",
            "name": "param_provider",
            "label": "Provider",
            "type": 2,
            "isRequired": true,
            "query": "SapHana_SystemOverview_CL \r\n| where TimeGenerated > ago(30d)\r\n| extend sid = tostring(VALUE_s)\r\n| extend provider = tostring(PROVIDER_INSTANCE_s)\r\n| where NAME_s == \"Instance ID\"\r\n| distinct provider\r\n| sort by provider asc\r\n;",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": "Tenant-G00"
          },
          {
            "id": "1a3cf1c4-9997-4a7c-922a-c91434ac1563",
            "version": "KqlParameterItem/1.0",
            "name": "param_database",
            "type": 1,
            "query": "SapHana_size01_CL\r\n| where TimeGenerated > ago(1d)\r\n| where PROVIDER_INSTANCE_s == '{param_provider}' \r\n| order by Time_Generated_t desc\r\n| take 1\r\n| project DATABASE_NAME_s\r\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "96ca4797-c752-4aa7-8bdc-71b228cb85a4",
            "version": "KqlParameterItem/1.0",
            "name": "param_host",
            "label": "Host",
            "type": 1,
            "isRequired": true,
            "query": "SapHana_SystemAvailability_CL \r\n| where TimeGenerated > ago(30d)\r\n| where PROVIDER_INSTANCE_s == \"{param_provider}\"\r\n| distinct HOST_s\r\n| sort by HOST_s asc\r\n;",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "System Overview Parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "SapHana_SystemAvailability_CL\r\n| where Time_Generated_t between (todatetime({param_timeframe:start}) .. todatetime({param_timeframe:end}))\r\n| where PROVIDER_INSTANCE_s == '{param_provider}'\r\n| where HOST_s == \"{param_host}\"\r\n| extend Status = iff(HOST_ACTIVE_s == 'YES', 0, 1)\r\n| summarize availability=countif(Status == 0), total=count() by bin(Time_Generated_t, timespan(15m))\r\n| extend availability = (availability / total) * 100\r\n| summarize avg(availability)\r\n| extend type=\"Average Availability\"\r\n| project avg_availability, type",
        "size": 1,
        "aggregation": 3,
        "color": "green",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "type",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "avg_availability",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 3
              }
            }
          },
          "showBorder": false
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Instance_Process",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "instanceNr_d",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "xAxis": "serverTimestamp_t",
          "yAxis": [
            "Availability"
          ],
          "ySettings": {
            "numberFormatSettings": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            },
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "param_database",
        "comparison": "isEqualTo",
        "value": "SYSTEMDB"
      },
      "name": "AvailabilityTrend - SYSTEMDB"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "SapHana_SystemAvailability_CL\r\n| where Time_Generated_t between (todatetime({param_timeframe:start}) .. todatetime({param_timeframe:end}))\r\n| where PROVIDER_INSTANCE_s == '{param_provider}'\r\n| where SERVICE_NAME_s == 'indexserver'\r\n| where HOST_s == \"{param_host}\"\r\n| extend Status = iff(HOST_ACTIVE_s == 'STARTING', 0, 1)\r\n| summarize availability=countif(Status == 0), total=count() by bin(Time_Generated_t, timespan(15m))\r\n| extend availability = (availability / total) * 100\r\n| summarize avg(availability)\r\n| extend type=\"Average Availability\"\r\n| project avg_availability, type",
        "size": 1,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "type",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "avg_availability",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 3
              }
            }
          },
          "showBorder": false
        }
      },
      "conditionalVisibility": {
        "parameterName": "param_database",
        "comparison": "isNotEqualTo",
        "value": "SYSTEMDB"
      },
      "name": "query - 4"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let availability_table = SapHana_SystemAvailability_CL\r\n| where Time_Generated_t between (todatetime({param_timeframe:start}) .. todatetime({param_timeframe:end}))\r\n| where PROVIDER_INSTANCE_s == '{param_provider}'\r\n| where SERVICE_NAME_s != \"\"\r\n| where DATABASE_NAME_s == '{param_database}'\r\n| where HOST_s == \"{param_host}\"\r\n| extend service_event = iff(SERVICE_NAME_s == '', EVENT_NAME_s, SERVICE_NAME_s)\r\n| extend Status = case(SERVICE_ACTIVE_s == 'YES', 0,\r\n                       SERVICE_ACTIVE_s == 'STARTING', 1,\r\n                       SERVICE_ACTIVE_s == 'STOPPING', 2,                        \r\n                       SERVICE_ACTIVE_s == 'UNKNOWN', 3,\r\n                       4) //NO\r\n| project service_event, SERVICE_NAME_s, SERVICE_ACTIVE_s, Status, HOST_STATUS_s, HOST_ACTIVE_s, PORT_d, TimeGenerated\r\n;\r\nlet services_table = SapHana_Services_CL\r\n| extend Status = case(ACTIVE_STATUS_s == 'YES', 0,\r\n                       ACTIVE_STATUS_s == 'STARTING', 1,\r\n                       ACTIVE_STATUS_s == 'STOPPING', 2,                        \r\n                       ACTIVE_STATUS_s == 'UNKNOWN', 3,\r\n                       4) //NO\r\n| where HOST_s == \"{param_host}\"\r\n| project SERVICE_NAME_s, PORT_d, Status, ACTIVE_STATUS_s, TimeGenerated\r\n;\r\nlet timerange_from=toscalar(todatetime(format_datetime({param_timeframe:start},'yyyy-MM-dd')));\r\navailability_table\r\n| union services_table\r\n| summarize total=count(), failureCount=countif(Status != 0)   by SERVICE_NAME_s, bin(TimeGenerated,5m)\r\n//| make-series total=count(), failureCount=countif(Status != 0) on TimeGenerated in range(timerange_from, {param_timeframe:end}, 1h) by SERVICE_NAME_s//, TimeGenerated\r\n| extend Availability = round(((toreal(total) - toreal(failureCount)) / toreal(total)) * 100, 2)\r\n//| extend samples = range(bin(timerange_from, 1m), {param_timeframe:end}, 1m)\r\n//| make-series total=count(), failureCount=countif(Status != 0) on TimeGenerated in range(timerange_from, {param_timeframe:end}, 1h) by service_event, SERVICE_NAME_s, PORT_d, SERVICE_ACTIVE_s, TimeGenerated\r\n//| render timechart ",
        "size": 0,
        "aggregation": 3,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "linechart",
        "chartSettings": {
          "xAxis": "TimeGenerated",
          "yAxis": [
            "Availability"
          ],
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "useGrouping": true,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "name": "query - 4"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}