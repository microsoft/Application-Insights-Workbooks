{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<div style=\"float: right\">\r\n\tUpdated every 2 minutes.\r\n</div>"
            },
            "name": "availability - text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "\r\nlet baseQuery = SapHana_SystemAvailability_CL\r\n    | where Time_Generated_t between (todatetime({param_timeframe:start}) .. todatetime({param_timeframe:end}))\r\n    | where PROVIDER_INSTANCE_s == '{param_provider}'\r\n    | extend Status = iff(HOST_ACTIVE_s == 'YES', 0, 1);\r\nlet timespanCount = baseQuery \r\n    | summarize RecordCount=count()\r\n    | extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n    | extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n    | extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n    | extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n    | extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n    | project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nlet bq = baseQuery\r\n    | summarize availability=countif(Status == 0), total=count() by bin(TimeGenerated, timespanInterval), HOST_s\r\n    | extend availability = round((availability / total) * 100, 2)\r\n    | extend host_gap = 'gap'\r\n    | project-away total;\r\nlet oldest_data = bq\r\n    | order by TimeGenerated asc \r\n    | limit 1;\r\nlet fill_data_start = oldest_data\r\n    | extend TimeGeneratedO = TimeGenerated\r\n    | extend TimeGenerated = (todatetime({param_timeframe:start}))\r\n    | extend diff = abs(datetime_diff('minute', todatetime({param_timeframe:start}), TimeGeneratedO))\r\n    | extend HOST_s = strcat(HOST_s, ' Estimated')\r\n    | where diff > 20\r\n    | project-away TimeGeneratedO, diff;\r\nlet fill_data_end = oldest_data\r\n    | extend TimeGeneratedO = TimeGenerated\r\n    | extend TimeGenerated = datetime_add('minute', -1, TimeGenerated)\r\n    | extend diff = abs(datetime_diff('minute', todatetime({param_timeframe:start}), TimeGeneratedO))\r\n    | extend host_gap = 'gap'\r\n    | extend HOST_s = strcat(HOST_s, ' Estimated')\r\n    | where diff > 20\r\n    | project-away TimeGeneratedO, diff;\r\nbq\r\n| union fill_data_start\r\n| union fill_data_end\r\n| order by TimeGenerated asc;\r\n\r\n// let host_ip = SapHana_HostConfig_CL\r\n// | where PROVIDER_INSTANCE_s == '{param_provider}'\r\n// | distinct  HOST_s, IP_s, PROVIDER_INSTANCE_s;\r\n// let baseQuery = SapHana_SqlProbe_CL \r\n//     | where Time_Generated_t between (todatetime({param_timeframe:start}) .. todatetime({param_timeframe:end}))\r\n//     | where PROVIDER_INSTANCE_s == '{param_provider}'\r\n//     | extend Status = iff(SUCCESS_b == true, 0, 1)\r\n//     | project-rename IP_s = HOST_s;   \r\n// let timespanCount = baseQuery \r\n//     | summarize RecordCount=count()\r\n//     | extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n//     | extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n//     | extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n//     | extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n//     | extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n//     | project Interval;\r\n// let timespanInterval = toscalar(timespanCount);\r\n// let bq = baseQuery\r\n//     | join kind=inner(host_ip) on PROVIDER_INSTANCE_s, IP_s\r\n//     | summarize availability=countif(Status == 0), total=count() by bin(TimeGenerated, timespanInterval), HOST_s\r\n//     | extend availability = round((availability / total) * 100, 2);\r\n// bq;\r\n",
              "size": 0,
              "aggregation": 2,
              "title": "Availability Status Trend",
              "timeBrushParameterName": "param_timeframe",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "availability"
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  },
                  "min": 0,
                  "max": 100
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "param_database",
              "comparison": "isEqualTo",
              "value": "SYSTEMDB"
            },
            "showPin": true,
            "name": "availability - System graph"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let baseQuery = SapHana_SystemAvailability_CL\r\n| where Time_Generated_t between (todatetime({param_timeframe:start}) .. todatetime({param_timeframe:end}))\r\n| where PROVIDER_INSTANCE_s == '{param_provider}'\r\n| where SERVICE_NAME_s == 'indexserver'\r\n| extend Status = iff(HOST_ACTIVE_s == 'STARTING', 0, 1);\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nlet bq = baseQuery\r\n| summarize availability=countif(Status == 0), total=count() by bin(TimeGenerated, timespanInterval), HOST_s\r\n| extend availability = round((availability / total) * 100, 2)\r\n| extend host_gap = 'gap'\r\n| project-away total;\r\nlet oldest_data = bq\r\n| order by TimeGenerated asc \r\n| limit 1;\r\nlet fill_data_start = oldest_data\r\n    | extend TimeGeneratedO = TimeGenerated\r\n    | extend TimeGenerated = todatetime({param_timeframe:start})\r\n    | extend diff = abs(datetime_diff('minute', todatetime({param_timeframe:start}), TimeGeneratedO))\r\n    | extend HOST_s = strcat(HOST_s, ' Estimated')\r\n    | where diff > 20\r\n    | project-away TimeGeneratedO, diff;\r\nlet fill_data_end = oldest_data\r\n    | extend TimeGeneratedO = TimeGenerated\r\n    | extend TimeGenerated = datetime_add('minute', -1, TimeGenerated)\r\n    | extend diff = abs(datetime_diff('minute', todatetime({param_timeframe:start}), TimeGeneratedO))\r\n    | extend host_gap = 'gap'\r\n    | extend HOST_s = strcat(HOST_s, ' Estimated')\r\n    | where diff > 20\r\n    | project-away TimeGeneratedO, diff;\r\nbq\r\n| union fill_data_start\r\n| union fill_data_end\r\n| order by TimeGenerated asc;\r\n",
              "size": 0,
              "aggregation": 2,
              "title": "Availability Status Trend",
              "timeBrushParameterName": "param_timeframe",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "availability"
                ],
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 2
                    }
                  },
                  "min": 0,
                  "max": 100
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "param_database",
              "comparison": "isNotEqualTo",
              "value": "SYSTEMDB"
            },
            "showPin": true,
            "name": "availability - Tenant graph"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "No availability data avaialble for services",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "param_check_services",
                    "comparison": "isNotEqualTo",
                    "value": "0"
                  },
                  "name": "text - 3"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": " let tsm = toscalar(SapHana_SystemAvailability_CL\r\n    | where _TIMESERIES_UTC_t   between (todatetime({param_timeframe:start}) .. todatetime({param_timeframe:end}))\r\n| where PROVIDER_INSTANCE_s == '{param_provider}'\r\n| where SERVICE_NAME_s != \"\"\r\n| where DATABASE_NAME_s == '{param_database}'\r\n| summarize TGM = max(_TIMESERIES_UTC_t));\r\nlet availability_table = SapHana_SystemAvailability_CL\r\n    | where _TIMESERIES_UTC_t == tsm\r\n| where PROVIDER_INSTANCE_s == '{param_provider}'\r\n| where SERVICE_NAME_s != \"\"\r\n| where DATABASE_NAME_s == '{param_database}'\r\n    | extend service_event = iff(SERVICE_NAME_s == '', EVENT_NAME_s, SERVICE_NAME_s)\r\n    | extend SingleStatus = case(\r\n                          SERVICE_ACTIVE_s == 'YES' or SERVICE_ACTIVE_s == 'STARTING', 'Yes',\r\n                          SERVICE_ACTIVE_s == 'STOPPING' or SERVICE_ACTIVE_s == 'UNKNOWN', 'No',\r\n                          'No'\r\n                      ) //NO\r\n    | project\r\n        service_event,\r\n        SERVICE_NAME_s,\r\n        SERVICE_ACTIVE_s,\r\n        HOST_s,\r\n        HOST_STATUS_s,\r\n        HOST_ACTIVE_s,\r\n        PORT_d,\r\n        TimeGenerated,\r\n        SingleStatus\r\n;\r\nlet services_table = SapHana_Services_CL\r\n    | where TimeGenerated between(todatetime(datetime_add('hour', -24, {param_timeframe:end})) .. todatetime({param_timeframe:end}))\r\n    | where PROVIDER_INSTANCE_s == '{param_provider}'\r\n    | extend SingleStatus = case(\r\n                          ACTIVE_STATUS_s == 'YES' or ACTIVE_STATUS_s == 'STARTING', 'Yes',\r\n                          ACTIVE_STATUS_s == 'STOPPING' or ACTIVE_STATUS_s == 'UNKNOWN', 'No',\r\n                          'No'\r\n                      ) //NO\r\n    | project SERVICE_NAME_s, HOST_s, PORT_d, ACTIVE_STATUS_s, TimeGenerated, SingleStatus\r\n;\r\navailability_table\r\n| union services_table\r\n| distinct SERVICE_NAME_s, HOST_s, PORT_d, SingleStatus\r\n// let availability_table = SapHana_SystemAvailability_CL\r\n//     | where Time_Generated_t between (todatetime(datetime(\"2024-03-13T02:29:58.000Z\")) .. todatetime(datetime(\"2024-03-13T14:23:00.000Z\")))\r\n//     | where PROVIDER_INSTANCE_s == 'ad2-lb'\r\n//     | where SERVICE_NAME_s != \"\"\r\n//     | where DATABASE_NAME_s == 'SYSTEMDB'\r\n//     | extend service_event = iff(SERVICE_NAME_s == '', EVENT_NAME_s, SERVICE_NAME_s)\r\n//     | extend Status = case(\r\n//                           SERVICE_ACTIVE_s == 'YES',\r\n//                           0,\r\n//                           SERVICE_ACTIVE_s == 'STARTING',\r\n//                           1,\r\n//                           SERVICE_ACTIVE_s == 'STOPPING',\r\n//                           2,                        \r\n//                           SERVICE_ACTIVE_s == 'UNKNOWN',\r\n//                           3,\r\n//                           4\r\n//                       ) //NO\r\n//     | project\r\n//         service_event,\r\n//         SERVICE_NAME_s,\r\n//         SERVICE_ACTIVE_s,\r\n//         Status,\r\n//         HOST_s,\r\n//         HOST_STATUS_s,\r\n//         HOST_ACTIVE_s,\r\n//         PORT_d,\r\n//         TimeGenerated\r\n// ;\r\n// let services_table = SapHana_Services_CL\r\n//     | where TimeGenerated > ago(24h)\r\n//     | extend Status = case(\r\n//                           ACTIVE_STATUS_s == 'YES',\r\n//                           0,\r\n//                           ACTIVE_STATUS_s == 'STARTING',\r\n//                           1,\r\n//                           ACTIVE_STATUS_s == 'STOPPING',\r\n//                           2,                        \r\n//                           ACTIVE_STATUS_s == 'UNKNOWN',\r\n//                           3,\r\n//                           4\r\n//                       ) //NO\r\n//     | project SERVICE_NAME_s, HOST_s, PORT_d, Status, ACTIVE_STATUS_s, TimeGenerated\r\n// ;\r\n// availability_table\r\n// | union services_table\r\n// | summarize total=count(), failureCount=countif(Status != 0) by service_event, SERVICE_NAME_s, HOST_s, PORT_d, SERVICE_ACTIVE_s\r\n// | extend Availability = round(((toreal(total) - toreal(failureCount)) / toreal(total)) * 100, 2)\r\n// | summarize\r\n//     Availability = round(avg(Availability), 2),\r\n//     AvailabilityTrend = make_list(Availability)\r\n//     by PORT_d, SERVICE_NAME_s, HOST_s",
                    "size": 0,
                    "title": "Services Availability Status",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 7,
                          "formatOptions": {
                            "linkTarget": "WorkbookTemplate",
                            "linkIsContextBlade": true,
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/SapMonitor2.0/SapHana/ApplicationServerInsights",
                              "typeSource": "workbook",
                              "gallerySource": "workbook",
                              "locationSource": "default",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "param_timeframe",
                                  "source": "static",
                                  "value": "param_timeframe"
                                },
                                {
                                  "name": "param_provider",
                                  "source": "static",
                                  "value": "param_provider"
                                },
                                {
                                  "name": "param_host",
                                  "source": "cell",
                                  "value": "HOST_s"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "HOST_s",
                          "formatter": 5,
                          "formatOptions": {
                            "linkTarget": "WorkbookTemplate",
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/SapMonitor2.0/SapHana/ApplicationServerInsights",
                              "typeSource": "workbook",
                              "gallerySource": "workbook",
                              "locationSource": "default",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "HOST_s",
                                  "source": "cell",
                                  "value": ""
                                },
                                {
                                  "name": "param_timeframe",
                                  "source": "static",
                                  "value": "param_timeframe"
                                },
                                {
                                  "name": "param_provider",
                                  "source": "static",
                                  "value": "param_provider"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "SingleStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Yes",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "Yes",
                                "representation": "3",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "HOST_s"
                        ],
                        "expandTopLevel": true
                      },
                      "labelSettings": [
                        {
                          "columnId": "SERVICE_NAME_s",
                          "label": "Service Name"
                        },
                        {
                          "columnId": "HOST_s",
                          "label": "Host"
                        },
                        {
                          "columnId": "PORT_d",
                          "label": "Port"
                        },
                        {
                          "columnId": "SingleStatus",
                          "label": "Available"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "param_check_services",
                    "comparison": "isEqualTo",
                    "value": "0"
                  },
                  "showPin": true,
                  "name": "availability - table"
                }
              ]
            },
            "name": "System Availability Services"
          },
          {
            "type": 1,
            "content": {
              "json": "<div style=\"float: right\">\r\n\tUpdated every 2 minutes.\r\n</div>"
            },
            "name": "Availability - text "
          }
        ]
      },
      "name": "group - 0"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}