{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "3b07e0eb-f988-40ef-bd30-b56f8bac5d2e",
            "version": "KqlParameterItem/1.0",
            "name": "param_alert_templates",
            "type": 1,
            "isRequired": true,
            "value": "[\n\t{\n\t\t\"name\": \"Cluster Primary node switched\",\n\t\t\"description\": \"SUSE Linux only: Fired when primary node switched for a resource\",\n\t\t\"author\": \"Microsoft\",\n\t\t\"templateId\": \"hacluster-resource-switched\",\n\t\t\"severity\": \"2\",\n\t\t\"alertTemplate\": {\n\t\t\t\"query\": \"Prometheus_HaClusterExporter_CL| where name_s == 'ha_cluster_pacemaker_resources'| where value_d == 1| extend jsonlabel = parse_json(labels_s)| extend PrimaryNode = tostring(jsonlabel.node), resource = tostring(jsonlabel.resource), clone = tostring(jsonlabel.clone), ismaster = tostring(jsonlabel.role)| extend isprimary = iff(clone == '', 1, iff(ismaster == 'master', 1, 0))| where isprimary == 1| summarize count() by bin(TimeGenerated, 30m), resource, clusterName_s, sid_s, PrimaryNode| summarize hostcount=count() by TimeGenerated, resource, clusterName_s, sid_s| extend AggregatedValue = iff(hostcount > 1, 1 , 0)\",\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\n\t\t\t\"defaultThreshold\": \"0\",\n\t\t\t\"metricMeasurement\": {\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\n\t\t\t\t\"threshold\": \"0\",\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\n\t\t\t\t\"metricColumn\": \"AggregatedValue\",\n\t\t\t\t\"frequencyInMinutes\": \"10\",\n\t\t\t\t\"timeWindowInMinutes\": \"60\"\n\t\t\t}\n\t\t}\n\t}\n]\n",
            "typeSettings": {
              "multiLineText": true,
              "editorLanguage": "json",
              "multiLineHeight": 20
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "6fcf88fd-b02d-44d4-8518-dd98212aedae",
            "version": "KqlParameterItem/1.0",
            "name": "param_provider_type",
            "type": 1,
            "value": "PrometheusHaCluster",
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "92e2c347-22df-4b92-9de7-54a4088c3929",
            "version": "KqlParameterItem/1.0",
            "name": "param_provider_instance",
            "type": 1,
            "value": "HACLUSTER"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.workloads/monitors"
      },
      "conditionalVisibility": {
        "parameterName": "developerMode",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 8"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "4054bbe9-725c-48bb-b1d5-d11e18ccaa0d",
            "version": "KqlParameterItem/1.0",
            "name": "tableExists",
            "type": 1,
            "description": "Global check if Prometheus table exists",
            "isRequired": true,
            "query": "let tableMissing = view () { print tableExists='0' };\r\nunion isfuzzy=true tableMissing, (Prometheus_HaClusterExporter_CL | getschema | summarize c=count() | project tableExists=iff(c > 0, '1', '0')) \r\n| top 1 by tableExists desc",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "c53a664b-ece7-4464-9f23-dd7bc3e7293a",
            "version": "KqlParameterItem/1.0",
            "name": "developerMode",
            "type": 1,
            "description": "Set to 1 to enable additional Views (such as WIP)",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "else result = '0'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "0"
                }
              }
            ]
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.workloads/monitors"
      },
      "name": "Test_HAClusterTableExists"
    },
    {
      "type": 1,
      "content": {
        "json": "## High-availability cluster status\n---"
      },
      "name": "text - 2"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "list",
        "links": [
          {
            "id": "8d84a87b-e396-4008-ac65-3c34577f6aa6",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Alerts",
            "style": "primary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/SapMonitor2.0/Alerts/Alerts",
              "typeSource": "workbook",
              "gallerySource": "workbook",
              "locationSource": "default",
              "passSpecificParams": true,
              "templateParameters": [
                {
                  "name": "AlertTemplates",
                  "source": "parameter",
                  "value": "param_alert_templates"
                },
                {
                  "name": "ProviderType",
                  "source": "parameter",
                  "value": "param_provider_type"
                },
                {
                  "name": "Provider instance",
                  "source": "parameter",
                  "value": "param_provider_instance"
                }
              ]
            }
          }
        ]
      },
      "name": "links - 7"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "5fd076e7-47ad-40fc-b64b-5c1e917842da",
            "cellValue": "selectedTabView",
            "linkTarget": "parameter",
            "linkLabel": "Cluster Status",
            "subTarget": "1",
            "style": "link"
          },
          {
            "id": "f6401734-d00d-4e8d-80eb-256456478fde",
            "cellValue": "selectedTabView",
            "linkTarget": "parameter",
            "linkLabel": "Endpoint Status",
            "subTarget": "2",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "developerMode",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "developerViewSelection"
    },
    {
      "type": 1,
      "content": {
        "json": "---\nPlease select a cluster below to show further details"
      },
      "name": "text - 2 - Copy"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// of all currently running endpoints\r\n// find the most recent correlation id\r\nlet upstatus = Prometheus_HaClusterExporter_CL\r\n| where TimeGenerated > ago(10min)\r\n| where name_s == \"sapmon\"\r\n| summarize arg_max(TimeGenerated, correlation_id_g, value_d) by sid_s, clusterName_s, hostname_s\r\n| project correlation_id_g;\r\n//identify the master (status = DC)\r\nlet dcstatus = materialize(Prometheus_HaClusterExporter_CL\r\n| where correlation_id_g in (upstatus)\r\n| where name_s == 'ha_cluster_pacemaker_nodes'\r\n| where value_d == 1\r\n| extend node_status=parse_json(labels_s)\r\n| where node_status['status']=='dc'\r\n| where tostring(node_status['node']) == hostname_s\r\n| summarize arg_max(TimeGenerated, correlation_id_g) by sid_s, clusterName_s, hostname_s\r\n| project correlation_id_g);\r\n//find all pacemaker resources and their status from dc metrics\r\n( Prometheus_HaClusterExporter_CL\r\n| where correlation_id_g in (dcstatus)\r\n| where name_s == \"ha_cluster_pacemaker_resources\" \r\n| where value_d == 1\r\n| extend  resources = parse_json(labels_s)\r\n| summarize \r\n    resources_failed = countif(resources['status'] == 'failed' or resources['status'] == 'failed_ignored'), \r\n    resources_blocked = countif(resources['status'] == 'blocked' or resources['status'] == 'orphaned'), \r\n    resources_active = countif(resources['status'] == 'active' and resources['managed'] == 'true'),\r\n    resources_unmanaged = countif(resources['managed'] == 'false'),\r\n    status_red = countif(resources['status'] == 'failed' or resources['status'] == 'failed_ignored'), \r\n    status_yellow = countif(resources['status'] == 'blocked' or resources['status'] == 'orphaned'), \r\n    status_green = countif(resources['status'] == 'active' and resources['managed'] == 'true'),\r\n    status_grey = countif(resources['managed'] == 'false')\r\n    by sid_s, clusterName_s)\r\n| union \r\n//find all pacemaker nodes and their status from dc metrics\r\n( Prometheus_HaClusterExporter_CL\r\n| where correlation_id_g in (dcstatus)\r\n| where name_s == \"ha_cluster_pacemaker_nodes\" \r\n| where value_d == 1\r\n| extend  nodes = parse_json(labels_s)\r\n| summarize \r\n    nodes_unclean = countif(nodes['status'] == 'unclean'), \r\n    nodes_pending_shutdown = countif(nodes['status'] == 'pending' or nodes['status'] == 'shutdown'  or nodes['status'] == 'standby_onfail'), \r\n    nodes_online = countif(nodes['status'] == 'online'),\r\n    nodes_maint_standby = countif(nodes['status'] == 'maintenance' or nodes['status'] == 'standby'),\r\n    status_red = countif(nodes['status'] == 'unclean'), \r\n    status_yellow = countif(nodes['status'] == 'pending' or nodes['status'] == 'shutdown'  or nodes['status'] == 'standby_onfail'), \r\n    status_green = countif(nodes['status'] == 'online' or nodes['status'] == 'dc'),\r\n    status_grey = countif(nodes['status'] == 'maintenance' or nodes['status'] == 'standby')\r\n    by sid_s, clusterName_s)   \r\n| union \r\n//find all exporter up-status as additional metric\r\n(Prometheus_HaClusterExporter_CL\r\n| where correlation_id_g in (upstatus)\r\n| where name_s == 'up'\r\n| summarize status_grey = case(countif(value_d==1) == 0, 1, 0)//only count grey status if there is no (0) endpoints up\r\n    by sid_s, clusterName_s)\r\n//summarize per cluster per sid\r\n| summarize sum(resources_failed),sum(resources_blocked),sum(resources_active),sum(resources_unmanaged),sum(nodes_unclean),sum(nodes_pending_shutdown),sum(nodes_online),sum(nodes_maint_standby),cluster_status = case(sum(status_red) > 0, 'red', sum(status_yellow) > 0, 'yellow', sum(status_grey) > 0, 'grey', sum(status_green) > 0, 'green', 'greyblue')  by sid_s, clusterName_s\r\n| project cluster_status,sum_resources_failed,sum_resources_blocked, sum_resources_active, sum_resources_unmanaged,sum_nodes_unclean, sum_nodes_pending_shutdown,sum_nodes_online,sum_nodes_maint_standby,sid_s,clusterName_s",
              "size": 4,
              "exportedParameters": [
                {
                  "fieldName": "sid_s",
                  "parameterName": "selected_sid",
                  "parameterType": 1
                },
                {
                  "fieldName": "clusterName_s",
                  "parameterName": "selected_clustername",
                  "parameterType": 1
                }
              ],
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "cluster_status",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "text": "[\"sid_s\"] - [\"clusterName_s\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "green",
                          "representation": "green",
                          "text": "[\"sid_s\"] - [\"clusterName_s\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "red",
                          "representation": "redBright",
                          "text": "[\"sid_s\"] - [\"clusterName_s\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "greyblue",
                          "representation": "grayBlue",
                          "text": "[\"sid_s\"] - [\"clusterName_s\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "grey",
                          "representation": "gray",
                          "text": "[\"sid_s\"] - [\"clusterName_s\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "yellow",
                          "representation": "yellow",
                          "text": "[\"sid_s\"] - [\"clusterName_s\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "blue",
                          "text": "[\"sid_s\"] - [\"clusterName_s\"]"
                        }
                      ]
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "sid_s",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "clusterName_s",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "cluster_status",
                    "label": "cluster SID & name",
                    "comment": "overall cluster status"
                  },
                  {
                    "columnId": "sum_resources_failed",
                    "label": "resources failed",
                    "comment": "count of resources failed"
                  },
                  {
                    "columnId": "sum_resources_blocked",
                    "label": "resources blocked",
                    "comment": "count of resources blocked or orphaned"
                  },
                  {
                    "columnId": "sum_resources_active",
                    "label": "resources active",
                    "comment": "count of resources active"
                  },
                  {
                    "columnId": "sum_resources_unmanaged",
                    "label": "resources unmanaged",
                    "comment": "count of resources unmanaged"
                  },
                  {
                    "columnId": "sum_nodes_unclean",
                    "label": "nodes unclean",
                    "comment": "count of unclean nodes"
                  },
                  {
                    "columnId": "sum_nodes_pending_shutdown",
                    "label": "nodes pending",
                    "comment": "count of pending, shutdown or standby onfail nodes"
                  },
                  {
                    "columnId": "sum_nodes_online",
                    "label": "nodes online",
                    "comment": "count of online nodes"
                  },
                  {
                    "columnId": "sum_nodes_maint_standby",
                    "label": "nodes standby",
                    "comment": "count of nodes in maintenance or standby"
                  },
                  {
                    "columnId": "sid_s",
                    "label": "SID",
                    "comment": "The SID label for the cluster"
                  },
                  {
                    "columnId": "clusterName_s",
                    "label": "cluster name",
                    "comment": "The pacemaker name of the cluster"
                  }
                ]
              },
              "sortBy": [],
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "clusterName_s",
                  "formatter": 1,
                  "formatOptions": {}
                },
                "bottomContent": {
                  "columnMatch": "sid_s",
                  "formatter": 1,
                  "formatOptions": {}
                },
                "nodeIdField": "sid_s",
                "graphOrientation": 3,
                "showOrientationToggles": false,
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "cluster_status",
                  "type": 3,
                  "thresholdsGrid": [
                    {
                      "operator": "==",
                      "thresholdValue": "red",
                      "representation": "red"
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "yellow",
                      "representation": "yellow"
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "grey",
                      "representation": "gray"
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "green",
                      "representation": "green"
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "greyblue",
                      "representation": "grayBlue"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "blue"
                    }
                  ]
                },
                "hivesMargin": 2
              }
            },
            "conditionalVisibility": {
              "parameterName": "tableExists",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "Cluster status"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let master = Prometheus_HaClusterExporter_CL\n| where TimeGenerated > ago(10min)\n| where value_d == 1\n| extend node_status=parse_json(labels_s)\n| where node_status['status']=='dc'\n| where sid_s == '{selected_sid}'\n| where clusterName_s == '{selected_clustername}'\n| where tostring(node_status['node']) == hostname_s\n| summarize arg_max(TimeGenerated, correlation_id_g, value_d) by sid_s, clusterName_s, hostname_s\n| top 1 by TimeGenerated\n| project correlation_id_g;\n//find all pacemaker resources and their status from dc metrics\nPrometheus_HaClusterExporter_CL\n| where correlation_id_g in (master)\n//| where name_s == 'ha_cluster_pacemaker_location_constraints' \n| extend  resources = parse_json(labels_s)\n| where ( resources['constraint'] startswith 'cli-ban' ) or ( resources['constraint'] startswith 'cli-prefer' )\n| project   resource_constraint=resources['constraint'],Impact=\"warning\"",
              "size": 4,
              "title": "We checked the cluster settings and found these location constraints that will impact cluster behavior:",
              "noDataMessage": "no cli location constraints",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Impact",
                    "formatter": 11
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "resource_constraint",
                    "label": "Resource constraint name",
                    "comment": "The name of the resource constraint"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "selected_clustername",
              "comparison": "isNotEqualTo"
            },
            "name": "locationconstraints-query"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "//find the most recent records for each cluster node\r\n//identify the master (status = DC)\r\n//and return the correlation ID from that node only\r\nlet master = Prometheus_HaClusterExporter_CL\r\n| where TimeGenerated > ago(10min)\r\n| where value_d == 1\r\n| extend node_status=parse_json(labels_s)\r\n| where node_status['status']=='dc'\r\n| where tostring(node_status['node']) == hostname_s\r\n| where sid_s == '{selected_sid}'\r\n| where clusterName_s=='{selected_clustername}'\r\n| summarize arg_max(TimeGenerated, correlation_id_g) by sid_s, clusterName_s, hostname_s\r\n| top 1 by TimeGenerated\r\n| project correlation_id_g;\r\nPrometheus_HaClusterExporter_CL\r\n| where correlation_id_g in (master)\r\n| where name_s == \"ha_cluster_pacemaker_nodes\"\r\n| where value_d == 1\r\n| extend  resources = parse_json(labels_s)\r\n| project hostname_s, correlation_id_g, resources['node'], resources['type'], resources['status'], value_d\r\n| order by tostring(resources_node) asc",
                    "size": 2,
                    "title": "Node status",
                    "noDataMessage": "No monitoring data has been received.",
                    "noDataMessageStyle": 4,
                    "exportedParameters": [
                      {
                        "parameterType": 1
                      },
                      {
                        "fieldName": "resources_node",
                        "parameterName": "selected_hostname",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "resources_status",
                        "parameterName": "selected_status",
                        "parameterType": 1
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "hostname",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "correlation_id_g",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "resources_node",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "resources_type",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "resources_status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "unclean",
                                "representation": "critical",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "pending",
                                "representation": "warning",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "shutdown",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "standby_onfail",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "online",
                                "representation": "Available",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "dc",
                                "representation": "Available",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "expected_up",
                                "representation": "Available",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "maintenance",
                                "representation": "stopped",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "standby",
                                "representation": "stopped",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "uninitialized",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "value_d",
                          "formatter": 5,
                          "formatOptions": {}
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "resources_node"
                        ],
                        "expandTopLevel": true,
                        "finalBy": "resources_type"
                      },
                      "sortBy": [
                        {
                          "itemKey": "$gen_thresholds_resources_status_5",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "resources_node",
                          "label": "Node"
                        },
                        {
                          "columnId": "resources_type",
                          "label": "Resource Type"
                        },
                        {
                          "columnId": "resources_status",
                          "label": "Status"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "$gen_thresholds_resources_status_5",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selected_clustername",
                    "comparison": "isNotEqualTo"
                  },
                  "name": "Nodestatus-query"
                },
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "ac3e5581-5682-4da9-aa10-5ff4ed939e9b",
                        "version": "KqlParameterItem/1.0",
                        "name": "node_timerange",
                        "label": "Time Range",
                        "type": 4,
                        "description": "Time range for node status display",
                        "isRequired": true,
                        "value": {
                          "durationMs": 14400000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 300000
                            },
                            {
                              "durationMs": 900000
                            },
                            {
                              "durationMs": 1800000
                            },
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            },
                            {
                              "durationMs": 259200000
                            },
                            {
                              "durationMs": 604800000
                            },
                            {
                              "durationMs": 1209600000
                            },
                            {
                              "durationMs": 2419200000
                            },
                            {
                              "durationMs": 2592000000
                            },
                            {
                              "durationMs": 5184000000
                            },
                            {
                              "durationMs": 7776000000
                            }
                          ],
                          "allowCustom": true
                        },
                        "timeContext": {
                          "durationMs": 86400000
                        }
                      },
                      {
                        "id": "62e5c1d6-0169-474e-ac4b-c3008dfbbdae",
                        "version": "KqlParameterItem/1.0",
                        "name": "selected_hostname",
                        "label": "Node Name",
                        "type": 2,
                        "isRequired": true,
                        "isGlobal": true,
                        "query": "let local_selected_sid = '{selected_sid}';\nlet local_selected_clustername = '{selected_clustername}';\n//let local_selected_sid = 'H10';\n//let local_selected_clustername = 'hacluster';\nlet master = Prometheus_HaClusterExporter_CL\n| where TimeGenerated > ago(10min)\n| where value_d == 1\n| extend node_status=parse_json(labels_s)\n| where node_status['status']=='dc'\n| where tostring(node_status['node']) == hostname_s\n| where sid_s == local_selected_sid\n| where clusterName_s== local_selected_clustername\n| summarize arg_max(TimeGenerated, correlation_id_g) by sid_s, clusterName_s, hostname_s\n| top 1 by TimeGenerated\n| project correlation_id_g;\nPrometheus_HaClusterExporter_CL\n| where correlation_id_g in (master)\n| where name_s == \"ha_cluster_pacemaker_nodes\"\n| where value_d == 1\n| extend  resources = parse_json(labels_s)\n| project node=tostring(resources['node'])\n| distinct node\n| order by node asc\n| project node_value=node, node_display=node, is_selected=row_number() == 1",
                        "typeSettings": {
                          "additionalResourceOptions": [],
                          "showDefault": false
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "nodestatus-timerange"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let local_selected_sid = '{selected_sid}';\nlet local_selected_clustername = '{selected_clustername}';\nlet local_selected_hostname =  '{selected_hostname}';\nlet local_timeframe_start = {node_timerange:start} ;\nlet local_timeframe_end = {node_timerange:end} ;\n//\n//find the most recent records for each cluster node\n//identify the master (status = DC)\n//and return the correlation ID from that node only\n//find the most recent records for each cluster node\n//identify the master (status = DC)\n//and return the correlation IDs from that node only\nlet master = Prometheus_HaClusterExporter_CL\n| where TimeGenerated > local_timeframe_start\n| where TimeGenerated < local_timeframe_end\n| where value_d == 1\n| extend node_status=parse_json(labels_s)\n| where node_status['status']=='dc'\n| where tostring(node_status['node']) == hostname_s\n| where sid_s == local_selected_sid\n| where clusterName_s==local_selected_clustername\n//| summarize TimeGenerated, correlation_id_g by sid_s, clusterName_s, hostname_s\n| project correlation_id_g;\n//master\nlet workdata=materialize(Prometheus_HaClusterExporter_CL\n| where correlation_id_g in (master)\n| where name_s == \"ha_cluster_pacemaker_nodes\"\n| where value_d == 1\n| extend  resources = parse_json(labels_s)\n| extend nodename=tostring(resources['node'])\n| where nodename == local_selected_hostname \n//| where nodename in ( {selected_hostname} )\n| project TimeGenerated, nodename, node_status=resources['status'], value=value_d);\n//workdata\nlet ts3=workdata\n| where node_status == 'dc'\n| order by TimeGenerated desc;\nlet ts2=workdata\n| where node_status == 'online'\n| order by TimeGenerated desc;\nlet ts1=workdata\n| where node_status == 'expected_up'\n| order by TimeGenerated desc;\nts1 \n| join kind=leftouter ( ts2 ) on TimeGenerated,nodename\n| join kind=leftouter ( ts3 ) on TimeGenerated,nodename\n| project TimeGenerated, nodename, expected_up=value, is_online=value1, is_dc=value2\n| order by TimeGenerated desc;",
                    "size": 0,
                    "aggregation": 5,
                    "title": "Node {selected_hostname} status over time",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "timechart",
                    "chartSettings": {
                      "xAxis": "TimeGenerated",
                      "showLegend": true,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "value_d",
                          "label": "Value"
                        },
                        {
                          "seriesName": "expected_up",
                          "label": "expected up"
                        },
                        {
                          "seriesName": "is_online",
                          "label": "online"
                        },
                        {
                          "seriesName": "is_dc",
                          "label": "is dc"
                        }
                      ],
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 0,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          }
                        },
                        "min": 0,
                        "max": 1
                      }
                    }
                  },
                  "name": "nodestatusovertime-query"
                }
              ]
            },
            "customWidth": "45",
            "conditionalVisibility": {
              "parameterName": "selected_clustername",
              "comparison": "isNotEqualTo"
            },
            "name": "node-status-detail-group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let truefalse = datatable(Key:string , Value1:long)\n[\n    'false',0,\n    'true',1\n];\nlet local_selected_sid = '{selected_sid}';\nlet local_selected_clustername = '{selected_clustername}';\nlet local_selected_resource = '{selected_resource}';\n//find the most recent records for each cluster node\n//identify the master (status = DC)\n//and return the correlation ID from that node only\nlet master = Prometheus_HaClusterExporter_CL\n| where TimeGenerated > {param_resource_timerange:start} \n| where TimeGenerated < {param_resource_timerange:end} \n| where value_d == 1\n| extend node_status=parse_json(labels_s)\n| where node_status['status']=='dc'\n| where sid_s == local_selected_sid\n| where clusterName_s == local_selected_clustername\n| where tostring(node_status['node']) == hostname_s\n| project correlation_id_g;\n//find all pacemaker resources and their status from dc metrics\nPrometheus_HaClusterExporter_CL\n| where correlation_id_g in (master)\n| where name_s == 'ha_cluster_pacemaker_resources' \n//| where value_d == 1\n| extend  resources = parse_json(labels_s)\n| where resources['resource'] == local_selected_resource\n| project TimeGenerated, resource_agent = resources['agent'], resource_resource = resources['resource'], resource_node = resources['node'], resource_managed = resources['managed'], resource_role= resources['role'], resource_status=resources['status']\n| extend resource_managed_string = tostring(resource_managed) \n| join kind=leftouter truefalse on $left.resource_managed_string == $right.Key",
                    "size": 0,
                    "title": "{selected_sid}-{selected_clustername} - {selected_resource}",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "query - 0"
                }
              ]
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "selected_resource",
              "comparison": "isNotEqualTo"
            },
            "name": "group - 5"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "//find the most recent records for each cluster node\r\n//identify the master (status = DC)\r\n//and return the correlation ID from that node only\r\nlet master = materialize(Prometheus_HaClusterExporter_CL\r\n| where TimeGenerated > ago(40min)\r\n| where value_d == 1\r\n| extend node_status=parse_json(labels_s)\r\n| where node_status['status']=='dc'\r\n| where sid_s == '{selected_sid}'\r\n| where clusterName_s == '{selected_clustername}'\r\n| where tostring(node_status['node']) == hostname_s\r\n| summarize arg_max(TimeGenerated, correlation_id_g, value_d) by sid_s, clusterName_s, hostname_s\r\n| top 1 by TimeGenerated\r\n| project correlation_id_g);\r\n//find all pacemaker resources and their status from dc metrics\r\nPrometheus_HaClusterExporter_CL\r\n| where correlation_id_g in (master)\r\n| where name_s == 'ha_cluster_pacemaker_resources' \r\n| where value_d == 1\r\n| extend  resources = parse_json(labels_s)\r\n| project  correlation_id_g, name_s, value_d, resource_agent = resources['agent'], resource_resource = resources['resource'], resource_node = resources['node'], resource_managed = resources['managed'], resource_role= resources['role'], resource_status=resources['status']\r\n//| summarize count() by correlation_id_g, name_s, value_d,tostring(resource_agent),tostring(resource_resource), tostring(resource_node),tostring(resource_managed)\r\n| summarize \r\n    status_managed = countif(tolower(resource_managed) == 'true'), \r\n    status_active = countif(tolower(resource_status) == 'active'),\r\n    status_orphaned = countif(tolower(resource_status) == 'orphaned'),\r\n    status_blocked = countif(tolower(resource_status) == 'blocked'),\r\n    status_failed = countif(tolower(resource_status) == 'failed'),\r\n    status_failure_ignored = countif(tolower(resource_status) == 'failure_ignored')\r\n    by correlation_id_g,name_s,value_d,tostring(resource_agent),tostring(resource_resource),tostring(resource_node)\r\n| summarize resource_managed = case(sum(status_managed) > 0,\"true\",\"false\"), resource_status = case(sum(status_failure_ignored) > 0, 'failure_ignored', sum(status_failed) > 0, 'failed', sum(status_blocked) > 0, 'blocked', sum(status_orphaned) > 0, 'orphaned', sum(status_active) > 0, 'active', 'inactive') by correlation_id_g,name_s,value_d,tostring(resource_agent),tostring(resource_resource),tostring(resource_node)",
                    "size": 2,
                    "title": "Resource status",
                    "noDataMessage": "No monitoring data has been received.",
                    "noDataMessageStyle": 4,
                    "exportedParameters": [
                      {
                        "parameterType": 1
                      },
                      {
                        "fieldName": "resource_resource",
                        "parameterName": "selected_resource",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "resource_agent",
                        "parameterName": "selected_agent",
                        "parameterType": 1
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "correlation_id_g",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "name_s",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "value_d",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "resource_agent",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "resource_resource",
                          "formatter": 5,
                          "formatOptions": {}
                        },
                        {
                          "columnMatch": "resource_managed",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "success",
                                "text": ""
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "disabled",
                                "text": ""
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "resource_status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "failed",
                                "representation": "4",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "failed_ignored",
                                "representation": "4",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "blocked",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "orphaned",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "active",
                                "representation": "Available",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "uninitialized",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "resource_resource"
                        ],
                        "expandTopLevel": true,
                        "finalBy": "resource_agent"
                      },
                      "sortBy": [
                        {
                          "itemKey": "$gen_thresholds_resource_managed_7",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "resource_agent",
                          "label": "Agent"
                        },
                        {
                          "columnId": "resource_resource",
                          "label": "Resource"
                        },
                        {
                          "columnId": "resource_node",
                          "label": "Node"
                        },
                        {
                          "columnId": "resource_managed",
                          "label": "Managed"
                        },
                        {
                          "columnId": "resource_status",
                          "label": "Resource status"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "$gen_thresholds_resource_managed_7",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selected_sid",
                    "comparison": "isNotEqualTo"
                  },
                  "name": "resourcestatus-query"
                },
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "60571c79-f539-4813-9069-c1d5b14a8627",
                        "version": "KqlParameterItem/1.0",
                        "name": "param_resource_timerange",
                        "type": 4,
                        "isRequired": true,
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 300000
                            },
                            {
                              "durationMs": 900000
                            },
                            {
                              "durationMs": 1800000
                            },
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            },
                            {
                              "durationMs": 259200000
                            },
                            {
                              "durationMs": 604800000
                            },
                            {
                              "durationMs": 1209600000
                            },
                            {
                              "durationMs": 2419200000
                            },
                            {
                              "durationMs": 2592000000
                            },
                            {
                              "durationMs": 5184000000
                            },
                            {
                              "durationMs": 7776000000
                            }
                          ]
                        },
                        "value": {
                          "durationMs": 14400000
                        },
                        "label": "Time Range"
                      },
                      {
                        "version": "KqlParameterItem/1.0",
                        "name": "selected_resource",
                        "label": "Resource",
                        "type": 2,
                        "isRequired": true,
                        "isGlobal": true,
                        "query": "let local_selected_sid = '{selected_sid}';\nlet local_selected_clustername = '{selected_clustername}';\n//let local_selected_sid = 'H10';\n//let local_selected_clustername = 'hacluster';\nlet master = Prometheus_HaClusterExporter_CL\n| where TimeGenerated > ago(10min)\n| where value_d == 1\n| extend node_status=parse_json(labels_s)\n| where node_status['status']=='dc'\n| where tostring(node_status['node']) == hostname_s\n| where sid_s == local_selected_sid\n| where clusterName_s== local_selected_clustername\n| summarize arg_max(TimeGenerated, correlation_id_g) by sid_s, clusterName_s, hostname_s\n| top 1 by TimeGenerated\n| project correlation_id_g;\nPrometheus_HaClusterExporter_CL\n| where correlation_id_g in (master)\n| where name_s == \"ha_cluster_pacemaker_resources\"\n| where value_d == 1\n| extend  resources = parse_json(labels_s)\n| project resource=tostring(resources['resource'])\n| distinct resource\n| order by resource asc\n| project resource_value=resource, resource_display=resource, is_selected=row_number() == 1",
                        "typeSettings": {
                          "additionalResourceOptions": [],
                          "showDefault": false
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces",
                        "id": "a263aabf-e858-4d58-8f76-2bafff664a2d"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "parameters - 7"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let local_selected_sid = '{selected_sid}';\nlet local_selected_clustername = '{selected_clustername}';\nlet local_selected_resource = '{selected_resource}';\nlet local_timeframe_start = {param_resource_timerange:start} ;\nlet local_timeframe_end = {param_resource_timerange:end} ;\n//\n//find the most recent records for each cluster node\n//identify the master (status = DC)\n//and return the correlation ID from that node only\nlet master = materialize(Prometheus_HaClusterExporter_CL\n| where TimeGenerated > local_timeframe_start\n| where TimeGenerated < local_timeframe_end\n| where value_d == 1\n| extend node_status=parse_json(labels_s)\n| where node_status['status']=='dc'\n| where sid_s == local_selected_sid\n| where clusterName_s == local_selected_clustername\n| where tostring(node_status['node']) == hostname_s\n| project correlation_id_g);\n//find all pacemaker resources and their status from dc metrics\nlet clusterdata = materialize(Prometheus_HaClusterExporter_CL\n| where correlation_id_g in (master)\n//| where name_s == 'ha_cluster_pacemaker_resources' \n//| where value_d == 1\n| extend  resources = parse_json(labels_s)\n| where resources['resource'] == local_selected_resource\n| project TimeGenerated, name_s,resource_agent = resources['agent'],  resource_node = resources['node'], value = value_d );\nlet c1 = clusterdata\n| where name_s == 'ha_cluster_pacemaker_migration_threshold' ;\nlet c2 = clusterdata\n| where name_s == 'ha_cluster_pacemaker_fail_count' ;\nc1 | join c2 on TimeGenerated \n| project TimeGenerated, node=resource_node, threshold = value, failcount = value1",
                    "size": 0,
                    "aggregation": 2,
                    "title": "Resource {selected_resource} status over time",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "timechart",
                    "chartSettings": {
                      "xAxis": "TimeGenerated",
                      "yAxis": [
                        "threshold",
                        "failcount"
                      ],
                      "seriesLabelSettings": [
                        {
                          "seriesName": "failcount",
                          "label": "failure count"
                        }
                      ]
                    }
                  },
                  "name": "resourcesovertime-query"
                }
              ]
            },
            "customWidth": "45",
            "conditionalVisibility": {
              "parameterName": "selected_clustername",
              "comparison": "isNotEqualTo"
            },
            "name": "resource-status-detail-group"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "13dae9f5-3681-4d49-90e5-a858c263c78f",
                  "version": "KqlParameterItem/1.0",
                  "name": "selected_sid",
                  "type": 1,
                  "isGlobal": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "h10"
                },
                {
                  "id": "cbf5ac1c-2af4-4178-b3bc-7a6d9c5f581f",
                  "version": "KqlParameterItem/1.0",
                  "name": "selected_clustername",
                  "type": 1,
                  "isGlobal": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "hacluster"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.workloads/monitors"
            },
            "conditionalVisibility": {
              "parameterName": "developerMode",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "parameters - 5"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTabView",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "clusterStatusView"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "//find latest correlation id per node per cluster per sid, consider only last 10min\r\nlet correlations = materialize(Prometheus_HaClusterExporter_CL\r\n| where TimeGenerated > ago(10min)\r\n| where name_s == \"sapmon\"\r\n| summarize arg_max(TimeGenerated, correlation_id_g, labels_s) by sid_s, clusterName_s, hostname_s\r\n| project correlation_id_g);\r\nPrometheus_HaClusterExporter_CL\r\n| where correlation_id_g in (correlations)\r\n| where name_s == \"sapmon\"\r\n| order by sid_s asc, clusterName_s asc\r\n| summarize num_nodes = count(), nodes_online = countif(value_d == 1), cluster_status = round(countif(value_d == 1) / (count() * 1.0), 2)\r\n    by sid_s, clusterName_s",
              "size": 0,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "clusterName_s",
                  "formatter": 1,
                  "formatOptions": {}
                },
                "centerContent": {
                  "columnMatch": "nodes_online",
                  "formatter": 1,
                  "formatOptions": {},
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "num_nodes",
                  "formatOptions": {}
                },
                "bottomContent": {
                  "columnMatch": "sid_s",
                  "formatOptions": {}
                },
                "nodeIdField": "sid_s",
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "cluster_status",
                  "type": 3,
                  "thresholdsGrid": [
                    {
                      "operator": "==",
                      "thresholdValue": "1",
                      "representation": "green"
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "0",
                      "representation": "red"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "yellow"
                    }
                  ]
                },
                "hivesMargin": 2
              }
            },
            "name": "Exporter status"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTabView",
        "comparison": "isEqualTo",
        "value": "2"
      },
      "name": "endpointStatusView"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
