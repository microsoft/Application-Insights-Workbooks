{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "e91a1c4a-7d1c-41be-8e29-821d88520209",
            "cellValue": "Tab1",
            "linkTarget": "parameter",
            "linkLabel": "Settings",
            "subTarget": "Resources",
            "style": "link"
          },
          {
            "id": "6debc56f-658e-4b7b-9c2c-cbb0c86f1381",
            "cellValue": "Tab1",
            "linkTarget": "parameter",
            "linkLabel": "Help",
            "subTarget": "Help",
            "style": "link"
          }
        ]
      },
      "name": "Parameter Tabs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "be010145-85ef-4779-a7ce-88e18d144ae4",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "Choose the relevant subscriptions",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| where type =~ 'microsoft.insights/webtests'\r\n| summarize dcount(name) by subscriptionId\r\n| order by dcount_name desc\r\n| extend Rank = row_number()\r\n| project value = subscriptionId, label = subscriptionId, selected = Rank == 1\r\n",
            "crossComponentResources": [
              "value::selected"
            ],
            "typeSettings": {
              "limitSelectTo": 100,
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "8d2e1300-4187-431d-afad-76c8498d385d",
            "version": "KqlParameterItem/1.0",
            "name": "Resource_Group",
            "label": "Resource Group",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| where type =~ 'microsoft.insights/components'\r\n| summarize count() by resourceGroup, subscriptionId\r\n| order by count_ desc\r\n| extend Rank = row_number()\r\n| project value = resourceGroup, label = resourceGroup, selected = Rank <= 1",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "limitSelectTo": 100,
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "dfcb9b49-d323-4575-9072-4e656f0d3329",
            "version": "KqlParameterItem/1.0",
            "name": "Resources",
            "label": "App Insights Resources",
            "type": 5,
            "description": "Choose App Insights resources of interest",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| where type =~ 'microsoft.insights/components'\r\n| where array_length(dynamic([{Resource_Group}])) == 0 or '*' in ({Resource_Group}) or  resourceGroup in~ ({Resource_Group})\r\n| extend lowerId = tolower(id)\r\n| join (Resources | where type =~ \"microsoft.insights/webtests\"\r\n| extend linkedResource = extract(@'\"hidden-link:([\\/\\w\\-\\.]+)\"', 1, tostring(tags)) \r\n| extend lowerLinked = tolower(linkedResource) \r\n| project id, lowerLinked, linkedResource) on $left.lowerId == $right.lowerLinked\r\n| project-away lowerLinked, lowerId\r\n| summarize count() by id, subscriptionId\r\n| order by count_ desc\r\n| project value = id, label = id, selected = row_number() <= 5\r\n",
            "value": [],
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.insights/components": true
              },
              "limitSelectTo": 100,
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "dd6bfdf1-14ba-495d-8b9f-7a8a9d098901",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "description": "Define the overall time period you report on",
            "isRequired": true,
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "842e7cf8-8635-4f78-bcf2-0dc19fcd2f3c",
            "version": "KqlParameterItem/1.0",
            "name": "WebTests",
            "label": "Web Tests",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "availabilityResults\r\n| distinct name\r\n| order by name asc\r\n| extend Rank = row_number()\r\n| project value = name, label = name, selected = Rank <= 20",
            "crossComponentResources": [
              "{Resources}"
            ],
            "typeSettings": {
              "limitSelectTo": 100,
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.insights/components",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "034c2381-cb44-4bf3-ab55-06951bc1f687",
            "version": "KqlParameterItem/1.0",
            "name": "Target_Nines",
            "label": "Availability Target %",
            "type": 1,
            "description": "Choose your availability % target",
            "isRequired": true,
            "value": "99.5",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "conditionalVisibility": {
        "parameterName": "Tab1",
        "comparison": "isEqualTo",
        "value": "Resources"
      },
      "name": "Resource Parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "**Overview**<br>\r\n* This report is intended to provide easy **SLA** reporting & outage information for your services regardless of the subscription or App Insights resource where the tests are running. \r\n* If you have consistent maintenance windows then you can ignore results during those times to provide accurate results.\r\n* Outages are defined at the individual test level & uses a similar criteria to the default Availability alerting critieria of X failures over N period of time. \r\n* If you need more details or different visualizations every part of this report can be **edited** & **customized**.\r\n* Ensure all parameters are set for the report to function properly.\r\n**Note** Classic App Insights resources are not linkable in reports. Only Log Analytics based resources will link back to the App Insights instance."
            },
            "name": "Overview Text"
          },
          {
            "type": 1,
            "content": {
              "json": "\r\n**Maintenance & Outage Parameters** <br>\r\n* Define your outage at the **individual** test level.  \r\n* **Failure Threshold** is how many failures can occur in a given time window to be considered a service outage. \r\n* **3 / 5 locations is the recommended threshold** but depends on how many locations you run your tests from. \r\n* **Outage Window** is in minutes & determines how long you consider your service to be down & over what window the failure threshold is evaluated. * **5 minutes is the recommend period.**\r\n* **Maintenance Period** defines the frequency your maintenance window occurs over. Set the period to NEVER if you don't conduct regular maintenance. \r\n* **Maintenance Window** ignores test results during set days of the week & hours. \r\n<br> Ex. If you choose October 24th, Saturday 10 pm - October 25th, Sunday 10am then it will ignore every result during 10 pm - 10 am on **every** Saturday & Sunday in the overall reporting time range.\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "{Tab1}",
              "comparison": "isEqualTo",
              "value": "Help"
            },
            "name": "Parameter Text"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "Tab1",
        "comparison": "isEqualTo",
        "value": "Help"
      },
      "name": "Explanation"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<h2>No available Azure Subscription has Availability tests present or no subscription has been selected.</h2>\r\n\r\nEnsure that your selected subscriptions actually have Availability tests present. You may have a subscription filter present. Select one or more qualifying subscriptions to get started.\r\n\r\n**Selection of more than 100 resources is not supported**",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "Subscriptions",
              "comparison": "isEqualTo"
            },
            "name": "Subscription Warning"
          },
          {
            "type": 1,
            "content": {
              "json": "<h2>No available App Insights resource has Webtests present or no resource has been selected.</h2>\r\n\r\nEnsure that your selected App Insights resources actually have Availability tests present. Select one or more qualifying App Insights resources to get started.\r\n\r\n**Selection of more than 100 resources is not supported**",
              "style": "error"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "Resource_Group",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "Subscriptions",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "Resources",
                "comparison": "isEqualTo"
              }
            ],
            "name": "App Insights Warning"
          }
        ]
      },
      "name": "Warning"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<h2>No available Resource Group has App Insights resources present or no Resource Group has been selected.</h2>\r\n\r\nEnsure that your selected resource groups actually have App Insights resources present. Select one or more qualifying resource group to get started. You may need to update your subscription filter too.\r\n\r\n**Selection of more than 100 resources is not supported**",
              "style": "error"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "Resource_Group",
                "comparison": "isEqualTo"
              },
              {
                "parameterName": "Subscriptions",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "App Insights Warning"
          }
        ]
      },
      "name": "Warning - Resource Group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "loadType": "always",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "c3450f6f-d4e8-469b-a1d3-b9a7a9153d23",
                  "version": "KqlParameterItem/1.0",
                  "name": "FailureThreshold",
                  "label": "Failure Threshold",
                  "type": 1,
                  "description": "Define how many location failures constitutes a service outage",
                  "isRequired": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "3"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "7b36dfd0-39af-4fa3-82d2-edf09b4d29f7",
                  "version": "KqlParameterItem/1.0",
                  "name": "OutageWindow",
                  "label": "Outage Window (minutes)",
                  "type": 1,
                  "description": "Define the time grain you examine for service outages",
                  "isRequired": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "5"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "e0b972a3-43e5-46b3-ac8d-13eeb40cddd8",
                  "version": "KqlParameterItem/1.0",
                  "name": "Maintenance_Period",
                  "label": "Maintenance Period",
                  "type": 2,
                  "description": "Select the time period your maintenance window occurs over",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":3, \"label\":\"Never\", \"selected\":true},\r\n    { \"value\":1, \"label\":\"Weekly\"},\r\n    { \"value\":2, \"label\":\"Daily\" }\r\n]"
                },
                {
                  "id": "e8c5217d-02e5-42f0-a439-72e24c27d385",
                  "version": "KqlParameterItem/1.0",
                  "name": "Maintenance_Window",
                  "label": "Maintenance Window",
                  "type": 4,
                  "description": "Define your maintenance Window",
                  "isRequired": true,
                  "value": {
                    "durationMs": 129600000,
                    "endTime": "2020-11-18T21:48:00.000Z"
                  },
                  "typeSettings": {
                    "selectableValues": [],
                    "allowCustom": true
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.insights/components"
            },
            "name": "Outage Parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Resources}"
              ],
              "parameters": [
                {
                  "id": "a322070a-7513-41f4-bb07-77a5ee3061ba",
                  "version": "KqlParameterItem/1.0",
                  "name": "ThresWindow",
                  "type": 1,
                  "description": "Convert maintenance window to seconds",
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "{Maintenance_Window:seconds}"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 129600000,
                    "endTime": "2020-11-18T21:48:00.000Z"
                  },
                  "timeContextFromParameter": "Maintenance_Window"
                },
                {
                  "id": "89448dee-7e49-48bf-838a-cc3e6ddc55ae",
                  "version": "KqlParameterItem/1.0",
                  "name": "Threshold",
                  "type": 1,
                  "description": "Error check for a full day maintenance period",
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "ThresWindow",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "86400",
                        "resultValType": "static",
                        "resultVal": "Error"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "Success"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000,
                    "endTime": "2020-11-13T18:25:00.000Z"
                  },
                  "timeContextFromParameter": "Maintenance_Window"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.insights/components"
            },
            "name": "Hidden Parameters"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<h2>No Maintenance Window Selected.</h2>\r\n\r\nSelect a weekly or daily maintenace window & reccurence. If you don't perform routine maintenance set it for a one minute window on the weekend or your regular downtime."
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "Maintenance_Window",
                      "comparison": "isEqualTo"
                    },
                    {
                      "parameterName": "Maintenance_Period",
                      "comparison": "isEqualTo"
                    }
                  ],
                  "name": "Maintenance Warning"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "<h2>No Failure Thresold or Outage Window set.</h2>\r\n\r\nSet your location failure threshold per test to define an outage & the grain you would like to evaluate on."
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "FailureThreshold",
                      "comparison": "isEqualTo"
                    },
                    {
                      "parameterName": "OutageWindow",
                      "comparison": "isNotEqualTo"
                    }
                  ],
                  "name": "Outage Window Warning"
                }
              ]
            },
            "name": "Warning"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "Tab1",
        "comparison": "isEqualTo",
        "value": "Resources"
      },
      "name": "Outage"
    },
    {
      "type": 1,
      "content": {
        "json": "### Do not set the Maintenance Window to a full day",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Threshold",
          "comparison": "isEqualTo",
          "value": "Error"
        },
        {
          "parameterName": "Maintenance_Period",
          "comparison": "isEqualTo",
          "value": "2"
        }
      ],
      "name": "Maintenance Window Warning"
    },
    {
      "type": 1,
      "content": {
        "json": "## No Web Tests are set.\r\n\r\nIf you are experiencing resource parameter errors then edit the parameter & examine the error message from the generating query. \r\n\r\n**Selection of more than 100 resources is not supported**",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "WebTests",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "Subscriptions",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "Resources",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TimeRange",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "Web Test Warning"
    },
    {
      "type": 1,
      "content": {
        "json": "## No Time Range is set.\r\n\r\nSelect a Time Range to get started ",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Subscriptions",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "Resources",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TimeRange",
          "comparison": "isEqualTo"
        }
      ],
      "name": "Time Range Warning"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "c73e3e84-283d-4344-ab7c-afbacf1d8913",
            "cellValue": "Tab",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "preText": "Overview",
            "style": "primary"
          },
          {
            "id": "6757ab27-1549-4ac5-9f37-8744e3349f23",
            "cellValue": "Tab",
            "linkTarget": "parameter",
            "linkLabel": "Outages & Downtime",
            "subTarget": "Downtime",
            "style": "link"
          },
          {
            "id": "a7e7416d-223f-49db-bbaf-607cc53c0ff5",
            "cellValue": "Tab",
            "linkTarget": "parameter",
            "linkLabel": "Failures by Location",
            "subTarget": "Location",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "WebTests",
        "comparison": "isNotEqualTo"
      },
      "name": "Visual Tabs",
      "styleSettings": {
        "margin": "0px"
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start})); //maintenance window variable dynamically set by parameters\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); //maintenance window variable dynamically set by parameters\r\navailabilityResults\r\n| where name in ({WebTests}) //web test filter\r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart) //beginning of maintenance filter\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp) //end of maintenance filter\r\n| project name, timestamp, startLocalMaintenanceWindow, endLocalMaintenanceWindow, duration, appName, location, success //start of actual query\r\n| project name, success, location, duration, appName, timestamp\r\n| where duration > 0\r\n| extend Outage = case(success contains '1', 0, 1)\r\n| summarize sum(Outage), avg(duration) by name, appName, bin(timestamp, {OutageWindow}m) //bin by outage window parameter\r\n| summarize ['Success Bins'] = todouble(countif(sum_Outage < toint({FailureThreshold}))), ['Fail Bins'] = todouble(countif(sum_Outage >= toint({FailureThreshold}))), ['Total Bins'] = todouble(count())\r\n| extend ['Web Test'] = 'Web Test', ['Test Success %'] = (['Success Bins'] / ['Total Bins'])*100 //calculate success percentage over chosen time period\r\n| extend ['Target 9s'] = iff(['Test Success %'] >= {Target_Nines}, 1, 0)\r\n| project ['Test Success %'], ['Target 9s'] //end of actual query",
              "size": 4,
              "showAnalytics": true,
              "title": "Overall Availability %",
              "timeContext": {
                "durationMs": 604800000
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "crossComponentResources": [
                "{Resources}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 1,
                  "tooltipFormat": {
                    "tooltip": "Not on target"
                  }
                },
                "leftContent": {
                  "columnMatch": "Test Success %",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "max": 100,
                    "palette": "redGreen"
                  },
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumSignificantDigits": 4
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Target 9s",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": "==",
                        "thresholdValue": "1",
                        "representation": "success",
                        "text": "{1} On Target"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "representation": "2",
                        "text": "{1} Under Target"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "success",
                        "text": "{0}{1}"
                      }
                    ]
                  }
                },
                "showBorder": false,
                "size": "auto"
              }
            },
            "customWidth": "25",
            "name": "SLA"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start})); //maintenance window variable dynamically set by parameters\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); //maintenance window variable dynamically set by parameters\r\navailabilityResults\r\n| where name in ({WebTests}) //web test filter\r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart) //beginning of maintenance filter\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp) //end of maintenance filter\r\n| project name, timestamp, startLocalMaintenanceWindow, endLocalMaintenanceWindow, success, appName, message, location //start of query\r\n| extend Outage = case(success contains '1', 0, 1)\r\n| project name, appName, timestamp, location, Outage, message\r\n| summarize sum(Outage) by appName, name, bin(timestamp, {OutageWindow}m)\r\n| sort by appName, name, timestamp \r\n| where sum_Outage >= {FailureThreshold} //filter down to outage periods only & start definition of singular outage occurences\r\n| extend OutageClassification = case(\r\nname != prev(name), 'End of Outage', //bracket test name by final outage\r\nname != next(name), 'Beginning of Outage', //bracket test name by initial outage time\r\nname == next(name) and next(timestamp) == timestamp - {OutageWindow}m, 'Inner Outage', //if the previous record has a timestamp with the outage window difference then same outage\r\nname == next(name) and next(timestamp) != timestamp - {OutageWindow}m, 'Beginning', //if the next timestamp is different by more than outagewindow then it is a new outage\r\n'ELSE')\r\n| extend OutageClassification = case(\r\nname != prev(name) and name != next(name), 'Singular Outage',\r\nOutageClassification == 'Beginning of Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Singular Outage' ,//Single bin outage\r\nOutageClassification == 'End of Outage' and next(timestamp) != timestamp - {OutageWindow}m, 'Singular Outage' //Single bin outage\r\n,OutageClassification)\r\n| extend OutageClassification = case(\r\nOutageClassification == 'Inner Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Ending' //identify time shifts that signify end of outages\r\n,OutageClassification)\r\n| where OutageClassification != 'Inner Outage' //filter out unnecessary values\r\n| extend BeginningDate = case(\r\nOutageClassification == 'End of Outage', next(timestamp),\r\nOutageClassification == 'Ending', next(timestamp)\r\n,timestamp) //set the correct beginning date based on record\r\n| extend EndingDate = case(\r\nOutageClassification == 'Singular Outage', timestamp + {OutageWindow}m\r\n,timestamp) //consolidate records around the outage ending record\r\n| where OutageClassification != 'Beginning of Outage' and OutageClassification != 'Beginning' //filter down to the full instances\r\n| summarize count()",
              "size": 4,
              "showAnalytics": true,
              "title": "Total Outages",
              "noDataMessage": "No outages detected",
              "noDataMessageStyle": 3,
              "timeContext": {
                "durationMs": 604800000
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "crossComponentResources": [
                "{Resources}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {},
                "secondaryContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "palette": "red"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumSignificantDigits": 4
                    }
                  }
                },
                "showBorder": false,
                "size": "auto"
              }
            },
            "customWidth": "25",
            "name": "Total Outages"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start})); //maintenance window variable dynamically set by parameters\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); //maintenance window variable dynamically set by parameters\r\navailabilityResults\r\n| where name in ({WebTests}) //web test filter\r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart) //beginning of maintenance filter\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp) //end of maintenance filter\r\n| project name, success, timestamp\r\n| extend Outage = case(success contains '1', 0, 1)\r\n| summarize sum(Outage) by name, bin(timestamp, {OutageWindow}m)\r\n| where sum_Outage >= toint({FailureThreshold})\r\n| summarize ['5 Min period Outage count'] = count() by name\r\n| project name, ['Outage Minutes'] = ['5 Min period Outage count'] * 5\r\n| summarize sum(['Outage Minutes'])",
              "size": 4,
              "showAnalytics": true,
              "title": "Total Down Time",
              "color": "magenta",
              "noDataMessage": "No downtime to report",
              "noDataMessageStyle": 3,
              "timeContext": {
                "durationMs": 604800000
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "crossComponentResources": [
                "{Resources}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "sum_Outage Minutes",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 25,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": false,
                "size": "auto"
              }
            },
            "customWidth": "25",
            "showPin": false,
            "name": "Total Downtime",
            "styleSettings": {
              "maxWidth": "25"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start}));\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); \r\navailabilityResults\r\n| where name in ({WebTests})\r\n| extend Outage = case(success contains '1', 0, 1)\r\n| project name, timestamp, location, Outage, message, appName\r\n| summarize sum(Outage) by appName, name, bin(timestamp, {OutageWindow}m)\r\n| where sum_Outage >= toint({FailureThreshold})\r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart)\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow and timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp)\r\n| sort by appName, name, timestamp\r\n| extend OutageClassification = case(\r\nname != prev(name), 'End of Outage', //bracket test name by final outage\r\nname != next(name), 'Beginning of Outage', //bracket test name by initial outage time\r\nname == next(name) and next(timestamp) == timestamp - {OutageWindow}m, 'Inner Outage', //if the previous record has a timestamp with the outage window difference then same outage\r\nname == next(name) and next(timestamp) != timestamp - {OutageWindow}m, 'Beginning', //if the next timestamp is different by more than outagewindow then it is a new outage\r\n'ELSE')\r\n| extend OutageClassification = case(\r\nname != prev(name) and name != next(name), 'Singular Outage',\r\nOutageClassification == 'Beginning of Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Singular Outage' ,//Single bin outage\r\nOutageClassification == 'End of Outage' and next(timestamp) != timestamp - {OutageWindow}m, 'Singular Outage' //Single bin outage\r\n,OutageClassification)\r\n| extend OutageClassification = case(\r\nOutageClassification == 'Inner Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Ending' //identify time shifts that signify end of outages\r\n,OutageClassification)\r\n| where OutageClassification != 'Inner Outage' //filter out unnecessary values\r\n| extend BeginningDate = case(\r\nOutageClassification == 'End of Outage', next(timestamp),\r\nOutageClassification == 'Ending', next(timestamp)\r\n,timestamp) //set the correct beginning date based on record\r\n| extend EndingDate = case(\r\nOutageClassification == 'Singular Outage', timestamp + {OutageWindow}m\r\n,timestamp) //consolidate records around the outage ending record\r\n| where OutageClassification != 'Beginning of Outage' and OutageClassification != 'Beginning' //filter down to the full instances\r\n| project name, timestamp, startLocalMaintenanceWindow, endLocalMaintenanceWindow\r\n| summarize max(timestamp) by name\r\n| project ['Last Outage'] =  (now() - max_timestamp) / 1h, max_timestamp, name\r\n| top 1 by ['Last Outage'] asc",
              "size": 4,
              "showAnalytics": true,
              "title": "Time Since Last Outage",
              "color": "blueDark",
              "noDataMessage": "No outage to report",
              "noDataMessageStyle": 3,
              "timeContext": {
                "durationMs": 604800000
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "crossComponentResources": [
                "{Resources}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "name"
                },
                "leftContent": {
                  "columnMatch": "Last Outage",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 26,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "minimumFractionDigits": 2,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "max_timestamp",
                  "formatter": 6
                },
                "showBorder": false,
                "size": "auto"
              }
            },
            "customWidth": "25",
            "showPin": false,
            "name": "Last Outage ",
            "styleSettings": {
              "maxWidth": "25"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start})); //maintenance window variable dynamically set by parameters\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); //maintenance window variable dynamically set by parameters\r\navailabilityResults\r\n| where name in ({WebTests}) //web test filter\r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart) //beginning of maintenance filter\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp) //end of maintenance filter\r\n| project name, timestamp, startLocalMaintenanceWindow, endLocalMaintenanceWindow, success, appName //start of query\r\n| extend Outage = case(success contains '1', 0, 1)\r\n| project appName, name, timestamp, Outage\r\n| summarize sum(Outage) by appName, name, bin(timestamp, {OutageWindow}m) //bin by evaluation period chosen\r\n| sort by appName, name, timestamp\r\n| where sum_Outage >= {FailureThreshold} //filter down to outages only\r\n| extend OutageClassification = case(\r\nname != prev(name), 'End of Outage', //bracket test name by final outage\r\nname != next(name), 'Beginning of Outage', //bracket test name by initial outage time\r\nname == next(name) and next(timestamp) == timestamp - {OutageWindow}m, 'Inner Outage', //if the previous record has a timestamp with the outage window difference then same outage\r\nname == next(name) and next(timestamp) != timestamp - {OutageWindow}m, 'Beginning', //if the next timestamp is different by more than outagewindow then it is a new outage\r\n'ELSE')\r\n| extend OutageClassification = case(\r\nname != prev(name) and name != next(name), 'Singular Outage',\r\nOutageClassification == 'Beginning of Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Singular Outage' ,//Single bin outage\r\nOutageClassification == 'End of Outage' and next(timestamp) != timestamp - {OutageWindow}m, 'Singular Outage' //Single bin outage\r\n,OutageClassification)\r\n| extend OutageClassification = case(\r\nOutageClassification == 'Inner Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Ending' //identify time shifts that signify end of outages\r\n,OutageClassification)\r\n| where OutageClassification != 'Inner Outage' //filter out unnecessary values\r\n| extend BeginningDate = case(\r\nOutageClassification == 'End of Outage', next(timestamp),\r\nOutageClassification == 'Ending', next(timestamp)\r\n,timestamp) //set the correct beginning date based on record\r\n| extend EndingDate = case(\r\nOutageClassification == 'Singular Outage', timestamp + {OutageWindow}m\r\n,timestamp) //consolidate records around the outage ending record\r\n| where OutageClassification != 'Beginning of Outage' and OutageClassification != 'Beginning' //filter down to the full outage instances\r\n| extend TotalOutageTime = EndingDate - BeginningDate //use bracketed outage evaluation periods to calculate distinct outage time\r\n| project appName, name, BeginningDate, EndingDate, ['Total Outage Time'] = ['TotalOutageTime'] / 1m\r\n| sort by ['Total Outage Time'] desc\r\n| top 10 by ['Total Outage Time'] desc //end of actual query\r\n\r\n\r\n\r\n\r\n\r\n",
              "size": 1,
              "showAnalytics": true,
              "title": "Top Longest Outages & Beginning Datetime (UTC)",
              "noDataMessage": "No outages to report",
              "noDataMessageStyle": 3,
              "timeContext": {
                "durationMs": 604800000
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "crossComponentResources": [
                "{Resources}"
              ],
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "name",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    }
                  },
                  {
                    "columnMatch": "timestamp",
                    "formatter": 6,
                    "dateFormat": {
                      "formatName": "fullDateTimePattern"
                    }
                  },
                  {
                    "columnMatch": "Total Outage Time",
                    "formatter": 6,
                    "dateFormat": {
                      "formatName": "longTimePattern"
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "name",
                  "formatter": 1,
                  "formatOptions": {
                    "linkColumn": "appName",
                    "linkTarget": "Resource",
                    "subTarget": "availability"
                  }
                },
                "leftContent": {
                  "columnMatch": "Total Outage Time",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "red"
                  },
                  "numberFormat": {
                    "unit": 25,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "BeginningDate",
                  "formatter": 6,
                  "dateFormat": {
                    "showUtcTime": true,
                    "formatName": "shortDateTimePattern"
                  }
                },
                "showBorder": false,
                "sortCriteriaField": "Total Outage Time",
                "sortOrderField": 2,
                "size": "auto"
              }
            },
            "showPin": false,
            "name": "Longest Outages"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start})); //maintenance window variable dynamically set by parameters\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); //maintenance window variable dynamically set by parameters\r\navailabilityResults\r\n| where name in ({WebTests}) //web test filter\r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart) //beginning of maintenance filter\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp) //end of maintenance filter\r\n| project name, timestamp, duration, appName, location, success\r\n| project name, success, location, duration, appName, timestamp\r\n| where duration > 0\r\n| extend Outage = case(success contains '1', 0, 1)\r\n| summarize sum(Outage), avg(duration) by name, appName, bin(timestamp, {OutageWindow}m)\r\n| summarize ['Success Bins'] = todouble(countif(sum_Outage < toint({FailureThreshold}))), ['Fail Bins'] = todouble(countif(sum_Outage >= toint({FailureThreshold}))), ['Total Bins'] = todouble(count()), ['Max Duration'] = max(avg_duration), ['Avg Duration'] = avg(avg_duration) by name, appName\r\n| extend ['Web Test'] = 'Web Test', ['Test Success %'] = (['Success Bins'] / ['Total Bins'])*100\r\n| join kind=leftouter (\r\n    availabilityResults\r\n    | where name in ({WebTests})\r\n    | extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart)\r\n    | extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n    | where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp)\r\n    | project name, timestamp, startLocalMaintenanceWindow, endLocalMaintenanceWindow, duration, appName, location, success\r\n    | extend Outage = case(success contains '1', 0, 1)\r\n    | project name, appName, timestamp, location, Outage\r\n    | summarize sum(Outage) by appName, name, bin(timestamp, {OutageWindow}m)\r\n    | sort by appName, name, timestamp\r\n    | where sum_Outage >= {FailureThreshold} //filter down to outages only\r\n    | extend OutageClassification = case(\r\n    name != prev(name), 'End of Outage', //bracket test name by final outage\r\n    name != next(name), 'Beginning of Outage', //bracket test name by initial outage time\r\n    name == next(name) and next(timestamp) == timestamp - {OutageWindow}m, 'Inner Outage', //if the previous record has a timestamp with the outage window difference then same outage\r\n    name == next(name) and next(timestamp) != timestamp - {OutageWindow}m, 'Beginning', //if the next timestamp is different by more than outagewindow then it is a new outage\r\n    'ELSE')\r\n    | extend OutageClassification = case(\r\n    name != prev(name) and name != next(name), 'Singular Outage',\r\n    OutageClassification == 'Beginning of Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Singular Outage' ,//Single bin outage\r\n    OutageClassification == 'End of Outage' and next(timestamp) != timestamp - {OutageWindow}m, 'Singular Outage' //Single bin outage\r\n    ,OutageClassification)\r\n    | extend OutageClassification = case(\r\n    OutageClassification == 'Inner Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Ending' //identify time shifts that signify end of outages\r\n    ,OutageClassification)\r\n    | where OutageClassification != 'Inner Outage' //filter out unnecessary values\r\n    | extend BeginningDate = case(\r\n    OutageClassification == 'End of Outage', next(timestamp),\r\n    OutageClassification == 'Ending', next(timestamp)\r\n    ,timestamp) //set the correct beginning date based on record\r\n    | extend EndingDate = case(\r\n    OutageClassification == 'Singular Outage', timestamp + {OutageWindow}m\r\n    ,timestamp) //consolidate records around the outage ending record\r\n    | where OutageClassification != 'Beginning of Outage' and OutageClassification != 'Beginning' //filter down to the full instances\r\n    | extend TotalOutageTime = EndingDate - BeginningDate\r\n    | summarize count() by name, appName\r\n    | project name, appName,['Outage Count'] = count_\r\n        ) on name, appName\r\n| extend ['Target 9s'] = iff(['Test Success %'] > {Target_Nines}, 1, 0)\r\n| extend ['Outage Count'] = iif(['Outage Count'] > 0, ['Outage Count'], 0)\r\n| project ['Web Test'], name, appName, ['Success Bins'], ['Fail Bins'], ['Total Bins'],['Avg Duration'],['Max Duration'],['Test Success %'],['Outage Count'], ['Target 9s']",
              "size": 0,
              "showAnalytics": true,
              "title": "Overview Table by Test (Expandable)",
              "noDataMessage": "No Web Tests returned for this time range and resource options",
              "noDataMessageStyle": 4,
              "timeContext": {
                "durationMs": 604800000
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "crossComponentResources": [
                "{Resources}"
              ],
              "visualization": "table",
              "showExpandCollapseGrid": true,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                    "formatter": 13,
                    "formatOptions": {
                      "linkColumn": "appName",
                      "linkTarget": "Resource",
                      "subTarget": "availability",
                      "showIcon": true,
                      "bladeOpenContext": {
                        "bladeParameters": []
                      }
                    }
                  },
                  {
                    "columnMatch": "Web Test",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "name",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "appName",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Success Bins",
                    "formatter": 5,
                    "formatOptions": {
                      "aggregation": "Sum"
                    }
                  },
                  {
                    "columnMatch": "Fail Bins",
                    "formatter": 5,
                    "formatOptions": {
                      "aggregation": "Sum"
                    }
                  },
                  {
                    "columnMatch": "Total Bins",
                    "formatter": 22,
                    "formatOptions": {
                      "aggregation": "Sum",
                      "compositeBarSettings": {
                        "labelText": "[\"Success Bins\"] of [\"Total Bins\"] available",
                        "columnSettings": [
                          {
                            "columnName": "Success Bins",
                            "color": "green"
                          },
                          {
                            "columnName": "Fail Bins",
                            "color": "redBright"
                          }
                        ]
                      },
                      "customColumnWidthSetting": "170px"
                    }
                  },
                  {
                    "columnMatch": "Avg Duration",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "palette": "red",
                      "aggregation": "Average",
                      "customColumnWidthSetting": "120px"
                    },
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Max Duration",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "yellow",
                      "aggregation": "Max",
                      "customColumnWidthSetting": "120px"
                    },
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Test Success %",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "redGreen",
                      "customColumnWidthSetting": "130px"
                    },
                    "numberFormat": {
                      "unit": 1,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Outage Count",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "palette": "red",
                      "aggregation": "Sum",
                      "customColumnWidthSetting": "130px"
                    }
                  },
                  {
                    "columnMatch": "Target 9s",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "1",
                          "representation": "success",
                          "text": "On Target"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "0",
                          "representation": "2",
                          "text": "Under Target"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0}{1}"
                        }
                      ],
                      "aggregation": "Min"
                    }
                  },
                  {
                    "columnMatch": "5m Success Bins",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "palette": "green",
                      "aggregation": "Sum",
                      "customColumnWidthSetting": "135px"
                    }
                  },
                  {
                    "columnMatch": "5m Fail Bins",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "palette": "redBright",
                      "aggregation": "Sum",
                      "customColumnWidthSetting": "115px"
                    }
                  },
                  {
                    "columnMatch": "Total 5m Bins",
                    "formatter": 22,
                    "formatOptions": {
                      "aggregation": "Sum",
                      "compositeBarSettings": {
                        "labelText": "[\"{OutageWindow}m Success Bins\"] of [\"total\"] succeeded",
                        "columnSettings": [
                          {
                            "columnName": "5m Success Bins",
                            "color": "green"
                          },
                          {
                            "columnName": "5m Fail Bins",
                            "color": "redBright"
                          }
                        ]
                      },
                      "customColumnWidthSetting": "120px"
                    },
                    "tooltipFormat": {}
                  },
                  {
                    "columnMatch": "total",
                    "formatter": 5,
                    "formatOptions": {
                      "aggregation": "Sum"
                    }
                  },
                  {
                    "columnMatch": "Success Count",
                    "formatter": 4,
                    "formatOptions": {
                      "palette": "green",
                      "aggregation": "Sum",
                      "customColumnWidthSetting": "160px"
                    }
                  },
                  {
                    "columnMatch": "Fail Count",
                    "formatter": 4,
                    "formatOptions": {
                      "palette": "redBright",
                      "aggregation": "Sum",
                      "customColumnWidthSetting": "140px"
                    }
                  },
                  {
                    "columnMatch": "Total 5m Windows",
                    "formatter": 22,
                    "formatOptions": {
                      "aggregation": "Sum",
                      "compositeBarSettings": {
                        "labelText": "['{OutageWindow}m Success Count'] of [\"total\"] are healthy",
                        "columnSettings": [
                          {
                            "columnName": "5m Success Count",
                            "color": "green"
                          },
                          {
                            "columnName": "5m Fail Count",
                            "color": "redBright"
                          }
                        ]
                      },
                      "customColumnWidthSetting": "160px"
                    }
                  },
                  {
                    "columnMatch": "Total Tests",
                    "formatter": 22,
                    "formatOptions": {
                      "aggregation": "Sum",
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": [
                          {
                            "columnName": "Success Count",
                            "color": "green"
                          },
                          {
                            "columnName": "Fail Count",
                            "color": "redBright"
                          }
                        ]
                      },
                      "customColumnWidthSetting": "135px"
                    }
                  },
                  {
                    "columnMatch": "Availability",
                    "formatter": 13,
                    "formatOptions": {
                      "linkColumn": "appName",
                      "linkTarget": "OpenBlade",
                      "showIcon": true,
                      "bladeOpenContext": {
                        "bladeParameters": []
                      }
                    }
                  },
                  {
                    "columnMatch": "Resource",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "Resource"
                    }
                  },
                  {
                    "columnMatch": "name1",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "appId",
                    "formatter": 13,
                    "formatOptions": {
                      "linkTarget": "Resource",
                      "showIcon": true
                    }
                  }
                ],
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "Web Test"
                  ],
                  "expandTopLevel": false,
                  "finalBy": "name"
                },
                "sortBy": [
                  {
                    "itemKey": "$gen_heatmap_Test Success %_9",
                    "sortOrder": 2
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "$gen_heatmap_Test Success %_9",
                  "sortOrder": 2
                }
              ]
            },
            "customWidth": "100",
            "showPin": false,
            "name": "Overview Table"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Tab",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "WebTests",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "Overview"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start})); //maintenance window variable dynamically set by parameters\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); //maintenance window variable dynamically set by parameters\r\navailabilityResults\r\n| where name in ({WebTests}) //web test filter\r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart) //beginning of maintenance filter\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp) //end of maintenance filter\r\n| project name, timestamp, success, appName, message, location //start of query\r\n| extend Outage = case(success contains '1', 0, 1)\r\n| project name, appName, timestamp, location, Outage, message\r\n| summarize sum(Outage) by appName, name, bin(timestamp, {OutageWindow}m)\r\n| sort by appName, name, timestamp\r\n| where sum_Outage >= {FailureThreshold} //filter down to outages only\r\n| extend OutageClassification = case(\r\nname != prev(name), 'End of Outage', //bracket test name by final outage\r\nname != next(name), 'Beginning of Outage', //bracket test name by initial outage time\r\nname == next(name) and next(timestamp) == timestamp - {OutageWindow}m, 'Inner Outage', //if the previous record has a timestamp with the outage window difference then same outage\r\nname == next(name) and next(timestamp) != timestamp - {OutageWindow}m, 'Beginning', //if the next timestamp is different by more than outagewindow then it is a new outage\r\n'ELSE')\r\n| extend OutageClassification = case(\r\nname != prev(name) and name != next(name), 'Singular Outage',\r\nOutageClassification == 'Beginning of Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Singular Outage' ,//Single bin outage\r\nOutageClassification == 'End of Outage' and next(timestamp) != timestamp - {OutageWindow}m, 'Singular Outage' //Single bin outage\r\n,OutageClassification)\r\n| extend OutageClassification = case(\r\nOutageClassification == 'Inner Outage' and prev(timestamp) != timestamp + {OutageWindow}m, 'Ending' //identify time shifts that signify end of outages\r\n,OutageClassification)\r\n| where OutageClassification != 'Inner Outage' //filter out unnecessary values\r\n| extend BeginningDate = case(\r\nOutageClassification == 'End of Outage', next(timestamp),\r\nOutageClassification == 'Ending', next(timestamp)\r\n,timestamp) //set the correct beginning date based on record\r\n| extend EndingDate = case(\r\nOutageClassification == 'Singular Outage', timestamp + {OutageWindow}m\r\n,timestamp) //consolidate records around the outage ending record\r\n| where OutageClassification != 'Beginning of Outage' and OutageClassification != 'Beginning' //filter down to the full instances\r\n| extend TotalOutageTime = EndingDate - BeginningDate\r\n| project appName, name, BeginningDate, EndingDate, ['Total Outage Time'] = ['TotalOutageTime'] / 1m\r\n| summarize count() by name, appName",
              "size": 1,
              "showAnalytics": true,
              "title": "Total End to End Outages by Test",
              "noDataMessage": "No outages detected",
              "noDataMessageStyle": 3,
              "timeContext": {
                "durationMs": 2592000000
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "crossComponentResources": [
                "{Resources}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "name",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blueDark"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "appName",
                  "formatter": 13,
                  "formatOptions": {
                    "linkColumn": "appName",
                    "linkTarget": "Resource",
                    "subTarget": "availability",
                    "showIcon": true
                  }
                },
                "showBorder": false,
                "sortCriteriaField": "count_",
                "sortOrderField": 2,
                "size": "auto"
              }
            },
            "customWidth": "100",
            "showPin": false,
            "name": "Outages by Test",
            "styleSettings": {
              "maxWidth": "50"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start})); //maintenance window variable dynamically set by parameters\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); //maintenance window variable dynamically set by parameters\r\navailabilityResults\r\n| where name in ({WebTests}) //web test filter\r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart) //beginning of maintenance filter\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp) //end of maintenance filter\r\n| project name, timestamp, startLocalMaintenanceWindow, endLocalMaintenanceWindow, success, appName //start of actual query\r\n| extend Outage = case(success contains '1', 0, 1)\r\n| project name, appName, timestamp, Outage\r\n| summarize sum(Outage) by name, appName, bin(timestamp, {OutageWindow}m) //Calculates outage based on evaluation period parameter\r\n| where sum_Outage >= toint({FailureThreshold}) //filters out periods that don't meet set outage threshold\r\n| summarize ['5 Min period Outage count'] = count() by name, appName\r\n| project name, ['Outage Minutes'] = ['5 Min period Outage count'] * 5\r\n| sort by name asc //end of actual query",
              "size": 0,
              "showAnalytics": true,
              "title": "Total Down Time by Test",
              "noDataMessage": "No application downtime to report",
              "noDataMessageStyle": 3,
              "timeContext": {
                "durationMs": 0
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "crossComponentResources": [
                "{Resources}"
              ],
              "visualization": "barchart",
              "chartSettings": {
                "yAxis": [
                  "Outage Minutes"
                ],
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                },
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 25,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumSignificantDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "showPin": false,
            "name": "Downtime by Test",
            "styleSettings": {
              "maxWidth": "100"
            }
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Tab",
          "comparison": "isEqualTo",
          "value": "Downtime"
        },
        {
          "parameterName": "WebTests",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "Downtime by Test"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let adjustedMaintStart = case({Maintenance_Period} == 1, {Maintenance_Window:start} - startofweek({Maintenance_Window:start}), {Maintenance_Window:start} - startofday({Maintenance_Window:start})); //maintenance window variable dynamically set by parameters\r\nlet adjustedMaintEnd = case({Maintenance_Period} == 1, {Maintenance_Window:end} - startofweek({Maintenance_Window:end}), {Maintenance_Window:end} - startofday({Maintenance_Window:end})); //maintenance window variable dynamically set by parameters\r\navailabilityResults\r\n| where name in ({WebTests}) //web test parameter \r\n| extend startLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintStart, startofday(timestamp) + adjustedMaintStart) //beginning of maintenance filter\r\n| extend endLocalMaintenanceWindow = case({Maintenance_Period} == 1, startofweek(timestamp) + adjustedMaintEnd, startofday(timestamp) + adjustedMaintEnd)\r\n| where case({Maintenance_Period} == 1, timestamp !between (startLocalMaintenanceWindow .. endLocalMaintenanceWindow), \r\n            {Maintenance_Period} == 2, timestamp > endLocalMaintenanceWindow or timestamp < startLocalMaintenanceWindow, \r\n            timestamp == timestamp) //end of maintenance filter\r\n| project name, timestamp, startLocalMaintenanceWindow, endLocalMaintenanceWindow, success, appName, location //start of actual query\r\n| project name, success, location, timestamp\r\n| summarize testFail = todouble(countif(success == 0)) by location\r\n| extend str_location = replace(@' ',@'', location) //end of actual query",
        "size": 3,
        "showAnalytics": true,
        "title": "Failures by Testing Location",
        "noDataMessage": "No location failures detected for these resource options & time range",
        "noDataMessageStyle": 3,
        "timeContext": {
          "durationMs": 604800000
        },
        "timeContextFromParameter": "TimeRange",
        "exportMultipleValues": true,
        "exportAggregateParts": true,
        "exportedParameters": [
          {
            "fieldName": "location",
            "parameterName": "mapLocations",
            "parameterType": 8
          }
        ],
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "crossComponentResources": [
          "{Resources}"
        ],
        "visualization": "map",
        "mapSettings": {
          "locInfo": "AzureLoc",
          "locInfoColumn": "str_location",
          "sizeSettings": "testFail",
          "sizeAggregation": "Sum",
          "minSize": 13,
          "maxSize": 55,
          "minData": 0,
          "labelSettings": "location",
          "legendMetric": "testFail",
          "numberOfMetrics": 13,
          "legendAggregation": "Sum",
          "itemColorSettings": {
            "nodeColorField": "testFail",
            "colorAggregation": "Sum",
            "type": "heatmap",
            "heatmapPalette": "greenRed",
            "heatmapMin": 0
          },
          "numberFormatSettings": {
            "unit": 17,
            "options": {
              "style": "decimal",
              "maximumSignificantDigits": 3
            }
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "Tab",
        "comparison": "isEqualTo",
        "value": "Location"
      },
      "customWidth": "95",
      "name": "GeoMap Failures"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}