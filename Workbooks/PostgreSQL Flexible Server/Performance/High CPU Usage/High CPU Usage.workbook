{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "## Optimizing High CPU Utilization\r\n\r\nIn this troubleshooting guide we will try to identify the probable causes of high CPU utilization and possible fixes to mitigate the issue.\r\n\r\nHigh CPU utilization can be caused by several reasons which includes increased workload, slow running queries, increased number of connections on the server or suboptimal statistics in tables because autovacuum is not catching up with the workload. The table below highlights each step that needs to be followed using the troubleshooting guide to understand the behavior on the server.</h6>",
        "style": "info"
      },
      "name": "high cpu header"
    },
    {
      "type": 1,
      "content": {
        "json": "Step | Observations\r\n--- | ---\r\n**Select Parameters** | Step 0: Choose the time interval that you wish to analyze.\r\n**Understand CPU usage** | Step 1: Analyze `CPU` usage on the server using the `CPU Utilization` tab. Any spike in values compared to previous time intervals can be considered unusual which needs further investigation.\r\n**Understand the workload** | Step 2: Analyze `read` and `write workloads` using the `Workload Details` tab. Read workload includes select queries, while write workload includes insert, update, delete queries. Compare the CPU spike seen in step1 with read and write workloads. Any spike in workload during the window of interest points to increased workload on server.\r\n**Transaction Trend [tps] ** | Step 3: Analyze transaction trends on the server using the `Transaction Trends And Counts` tab.\r\n**Do you see long running transactions** | Step 4:  Analyze the `long running transactions` tab to identify PIDs which have long running transactions. Follow mitigation steps suggested in the tab and monitor CPU usage.\r\n**Identify time cosuming queries** | Step 5: Along with identifying long running transactions also analyze top time consuming queries during window of interest from the `High CPU consuming Queries` tab. Follow mitigation steps suggested in the tab and monitor CPU usage.\r\n**Understand connectivity patterns** | Step 6: Understand connectivity patterns from `Total User Only connections` tab. Follow mitigation steps suggested in the tab and monitor CPU Usage.\r\n"
      },
      "name": "high cpu workbook grid",
      "styleSettings": {
        "margin": "100",
        "padding": "100"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "#### Start by setting the following parameters:"
      },
      "name": "high cpu parameter set all"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "778f33f0-034d-4a5b-a7c7-9b990f81d7ea",
            "version": "KqlParameterItem/1.0",
            "name": "Resource",
            "type": 5,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false,
              "componentIdOnly": true
            }
          },
          {
            "id": "9ebd8e9a-5e9c-496a-bdb1-e41b9faaf9ad",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "TimeRange (Local Time)"
          },
          {
            "id": "f8678c39-7dad-4aef-aae1-d67793e82c01",
            "version": "KqlParameterItem/1.0",
            "name": "MIN_TIME_WINDOW_SEC",
            "type": 1,
            "description": "Defines the minimum time a connection may exist before it is classified as long lived",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "3600"
                }
              }
            ]
          },
          {
            "id": "13ee21e4-ee50-48cd-880d-6ea3b62d96c3",
            "version": "KqlParameterItem/1.0",
            "name": "HIGH_CONNECTION_COUNT",
            "type": 1,
            "description": "Minimum # of connections before server is classified as having a high connection count ",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "150"
                }
              }
            ]
          },
          {
            "id": "e9948714-d7f2-45f2-bd63-0ba9a493962b",
            "version": "KqlParameterItem/1.0",
            "name": "LONG_RUNNING_QUERY_SEC_DURATION_THRESHOLD",
            "type": 1,
            "description": "Defines the minimum number of seconds a query can take before it is classified in this workbook as long running ",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "7200"
                }
              }
            ]
          },
          {
            "id": "e43a4f05-b912-4815-870d-e22141b050fc",
            "version": "KqlParameterItem/1.0",
            "name": "WINDOW_SIZE_FOR_QUERY_TIME_CAPTURE",
            "type": 1,
            "description": "Specifies aggregation window to capture max query time for high time consuming queries ",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "30m"
                }
              }
            ]
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "MIN_XACT_TIME_MS_THRESHOLD_FOR_LONG_XACTS",
            "type": 1,
            "description": "Defines the minimum time a connection may exist before it is classified as long lived",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "7200000"
                }
              }
            ],
            "id": "e43b3ea3-5702-449e-8da6-fcba878649f9"
          },
          {
            "id": "8cbf68c1-e64a-4286-928b-f248a99a4989",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics | where Category =='PostgreSQLFlexQueryStoreRuntime' | project TimeGenerated, Resource, RuntimeStatsEntryId = tolong(     iff(isnotempty(AdditionalFields.Runtime_stats_entry_id), AdditionalFields.Runtime_stats_entry_id,         column_ifexists('Runtime_stats_entry_id_d',             column_ifexists('Runtime_stats_entry_id',                 column_ifexists('Runtime_stats_entry_id_s', \"\")             )         )     ) ), UserId = toint(     iff(isnotempty(AdditionalFields.Userid), AdditionalFields.Userid,         column_ifexists('Userid_d',             column_ifexists('Userid',                 column_ifexists('Userid_s', \"\")             )         )     ) ), DatabaseId = toint(     iff(isnotempty(AdditionalFields.Dbid), AdditionalFields.Dbid,         column_ifexists('Dbid_d',             column_ifexists('Dbid',                 column_ifexists('Dbid_s', \"\")             )         )     ) ), QueryId = tolong(     iff(isnotempty(AdditionalFields.Queryid), AdditionalFields.Queryid,         column_ifexists('Queryid_d',             column_ifexists('Queryid',                 column_ifexists('Queryid_s', \"\")             )         )     ) ), PlanId = tolong(     iff(isnotempty(AdditionalFields.Plan_id), AdditionalFields.Plan_id,         column_ifexists('Plan_id_d',             column_ifexists('Plan_id_s',                 column_ifexists('Plan_id', \"\")             )         )     ) ), StartTime = todatetime(     iff(isnotempty(AdditionalFields.Start_time), AdditionalFields.Start_time,         column_ifexists('Start_time_t',             column_ifexists('Start_time',                 column_ifexists('Start_time_s', \"\")             )         )     ) ), EndTime = todatetime(     iff(isnotempty(AdditionalFields.End_time), AdditionalFields.End_time,         column_ifexists('End_time_t',             column_ifexists('End_time',                 column_ifexists('End_time_s', \"\")             )         )     ) ), Calls = tolong(     iff(isnotempty(AdditionalFields.Calls), AdditionalFields.Calls,         column_ifexists('Calls_d',             column_ifexists('Calls',                 column_ifexists('Calls_s', \"\")             )         )     ) ), TotalExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Total_time), AdditionalFields.Total_time,         column_ifexists('Total_time_d',             column_ifexists('Total_time',                 column_ifexists('Total_time_s', \"\")             )         )     ) ), MinExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Min_time), AdditionalFields.Min_time,         column_ifexists('Min_time_d',             column_ifexists('Min_time',                 column_ifexists('Min_time_s', \"\")             )         )     ) ), MaxExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Max_time), AdditionalFields.Max_time,         column_ifexists('Max_time_d',             column_ifexists('Max_time',                 column_ifexists('Max_time_s', \"\")             )         )     ) ), MeanExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Mean_time), AdditionalFields.Mean_time,         column_ifexists('Mean_time_d',             column_ifexists('Mean_time',                 column_ifexists('Mean_time_s', \"\")             )         )     ) ), StdDevExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Stddev_time), AdditionalFields.Stddev_time,         column_ifexists('Stddev_time_d',             column_ifexists('Stddev_time',                 column_ifexists('Stddev_time_s', \"\")             )         )     ) ), Rows = tolong(     iff(isnotempty(AdditionalFields.Rows), AdditionalFields.Rows,         column_ifexists('Rows_d',             column_ifexists('Rows',                 column_ifexists('Rows_s', \"\")             )         )     ) ), SharedBlksHit = tolong(     iff(isnotempty(AdditionalFields.Shared_blks_hit), AdditionalFields.Shared_blks_hit,         column_ifexists('Shared_blks_hit_d',             column_ifexists('Shared_blks_hit',                 column_ifexists('Shared_blks_hit_s', \"\")             )         )     ) ), SharedBlksRead = tolong(     iff(isnotempty(AdditionalFields.Shared_blks_read), AdditionalFields.Shared_blks_read,         column_ifexists('Shared_blks_read_d',             column_ifexists('Shared_blks_read',                 column_ifexists('Shared_blks_read_s', \"\")             )         )     ) ), SharedBlksDirtied = tolong(     iff(isnotempty(AdditionalFields.Shared_blks_dirtied), AdditionalFields.Shared_blks_dirtied,         column_ifexists('Shared_blks_dirtied_d',             column_ifexists('Shared_blks_dirtied',                 column_ifexists('Shared_blks_dirtied_s', \"\")             )         )     ) ), SharedBlksWritten = tolong(     iff(isnotempty(AdditionalFields.Shared_blks_written), AdditionalFields.Shared_blks_written,         column_ifexists('Shared_blks_written_d',             column_ifexists('Shared_blks_written',                 column_ifexists('Shared_blks_written_s', \"\")             )         )     ) ), LocalBlksHit = tolong(     iff(isnotempty(AdditionalFields.Local_blks_hit), AdditionalFields.Local_blks_hit,         column_ifexists('Local_blks_hit_d',             column_ifexists('Local_blks_hit',                 column_ifexists('Local_blks_hit_s', \"\")             )         )     ) ), LocalBlksRead = tolong(     iff(isnotempty(AdditionalFields.Local_blks_read), AdditionalFields.Local_blks_read,         column_ifexists('Local_blks_read_d',             column_ifexists('Local_blks_read',                 column_ifexists('Local_blks_read_s', \"\")             )         )     ) ), LocalBlksDirtied = tolong(     iff(isnotempty(AdditionalFields.Local_blks_dirtied), AdditionalFields.Local_blks_dirtied,         column_ifexists('Local_blks_dirtied_d',             column_ifexists('Local_blks_dirtied',                 column_ifexists('Local_blks_dirtied_s', \"\")             )         )     ) ), LocalBlksWritten = tolong(     iff(isnotempty(AdditionalFields.Local_blks_written), AdditionalFields.Local_blks_written,         column_ifexists('Local_blks_written_d',             column_ifexists('Local_blks_written',                 column_ifexists('Local_blks_written_s', \"\")             )         )     ) ), TempBlksRead = tolong(     iff(isnotempty(AdditionalFields.Temp_blks_read), AdditionalFields.Temp_blks_read,         column_ifexists('Temp_blks_read_d',             column_ifexists('Temp_blks_read',                 column_ifexists('Temp_blks_read_s', \"\")             )         )     ) ), TempBlksWritten = tolong(     iff(isnotempty(AdditionalFields.Temp_blks_written), AdditionalFields.Temp_blks_written,         column_ifexists('Temp_blks_written_d',             column_ifexists('Temp_blks_written',                 column_ifexists('Temp_blks_written_s', \"\")             )         )     ) ), BlkReadTime = todouble(     iff(isnotempty(AdditionalFields.Blk_read_time), AdditionalFields.Blk_read_time,         column_ifexists('Blk_read_time_d',             column_ifexists('Blk_read_time',                 column_ifexists('Blk_read_time_s', \"\")             )         )     ) ), BlkWriteTime = todouble(     iff(isnotempty(AdditionalFields.Blk_write_time), AdditionalFields.Blk_write_time,         column_ifexists('Blk_write_time_d',             column_ifexists('Blk_write_time',                 column_ifexists('Blk_write_time_s', \"\")             )         )     ) ), IsSystemQuery = tobool(     iff(isnotempty(AdditionalFields.Is_system_query), AdditionalFields.Is_system_query,         column_ifexists('Is_system_query_b',             column_ifexists('Is_system_query',                 column_ifexists('Is_system_query_s', \"\")             )         )     ) ), QueryType = tostring(     iff(isnotempty(AdditionalFields.Query_type), AdditionalFields.Query_type,         column_ifexists('Query_type_s',             column_ifexists('Query_type', \"\")         )     ) )"
                }
              }
            ]
          },
          {
            "id": "7f241474-2356-49f4-bbac-1d528f3210e5",
            "version": "KqlParameterItem/1.0",
            "name": "SessionsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics | where Category =='PostgreSQLFlexSessions' | project TimeGenerated, Resource, DatabaseId = toint(     iff(isnotempty(AdditionalFields.Datid), AdditionalFields.Datid,         column_ifexists('Datid_d',             column_ifexists('Datid_s',                 column_ifexists('Datid', \"\")             )         )     )     ), DatabaseName = tostring(     iff(isnotempty(AdditionalFields.Database_name), AdditionalFields.Database_name,         column_ifexists('Database_name_s',            column_ifexists('Database_name', \"\")         )     ) ), ProcessId = toint(     iff(isnotempty(AdditionalFields.Pid), AdditionalFields.Pid,         column_ifexists('Pid_d',            column_ifexists('Pid', \"\")         )     ) ), UserId = toint(     iff(isnotempty(AdditionalFields.Usesysid), AdditionalFields.Usesysid,         column_ifexists('Usesysid_d',             column_ifexists('Usesysid_s',                 column_ifexists('Usesysid', \"\")             )         )     )     ), ApplicationName = tostring(     iff(isnotempty(AdditionalFields.Application_name), AdditionalFields.Application_name,         column_ifexists('Application_name_s',            column_ifexists('Application_name', \"\")         )     ) ), ClientIpAddress = tostring(     iff(isnotempty(AdditionalFields.Client_addr), AdditionalFields.Client_addr,         column_ifexists('Client_addr_s',            column_ifexists('Client_addr', \"\")         )     ) ), State = tostring(     iff(isnotempty(AdditionalFields.State), AdditionalFields.State,         column_ifexists('State_s',            column_ifexists('State', \"\")         )     ) ), WaitEventType = tostring(     iff(isnotempty(AdditionalFields.Wait_event_type), AdditionalFields.Wait_event_type,         column_ifexists('Wait_event_type_s',            column_ifexists('Wait_event_type', \"\")         )     ) ), WaitEvent = tostring(     iff(isnotempty(AdditionalFields.Wait_event), AdditionalFields.Wait_event,         column_ifexists('Wait_event_s',            column_ifexists('Wait_event', \"\")         )     ) ), BackendStartTime = todatetime(     iff(isnotempty(AdditionalFields.Backend_start), AdditionalFields.Backend_start,         column_ifexists('Backend_start_t',             column_ifexists('Backend_start',                 column_ifexists('Backend_start_s', \"\")             )         )     ) ), TransactionStartTime = todatetime(     iff(isnotempty(AdditionalFields.Xact_start), AdditionalFields.Xact_start,         column_ifexists('Xact_start_t',             column_ifexists('Xact_start_s',                 column_ifexists('Xact_start', \"\")             )         )     ) ), QueryStartTime = todatetime(     iff(isnotempty(AdditionalFields.Query_start), AdditionalFields.Query_start,         column_ifexists('Query_start_t',             column_ifexists('Query_start_s',                 column_ifexists('Query_start', \"\")             )         )     ) ), StateChangeTime = todatetime(     iff(isnotempty(AdditionalFields.State_change), AdditionalFields.State_change,         column_ifexists('State_change_t',             column_ifexists('State_change_s',                 column_ifexists('State_change', \"\")             )         )     ) ), CollectionTime = todatetime(     iff(isnotempty(AdditionalFields.Collection_time), AdditionalFields.Collection_time,         column_ifexists('Collection_time_t',             column_ifexists('Collection_time_s',                 column_ifexists('Collection_time', \"\")             )         )     ) ), TransactionId = tolong(     iff(isnotempty(AdditionalFields.Backend_xid), AdditionalFields.Backend_xid,         column_ifexists('Backend_xid_d',             column_ifexists('Backend_xid_s',                 column_ifexists('Backend_xid', \"\")             )         )     ) ), OldestTransactionId = tolong(     iff(isnotempty(AdditionalFields.Backend_xmin), AdditionalFields.Backend_xmin,         column_ifexists('Backend_xmin_d',             column_ifexists('Backend_xmin_s',                 column_ifexists('Backend_xmin', \"\")             )         )     ) ), BackendType = tostring(     iff(isnotempty(AdditionalFields.Backend_type), AdditionalFields.Backend_type,         column_ifexists('Backend_type_s',            column_ifexists('Backend_type', \"\")         )     ) )"
                }
              }
            ]
          },
          {
            "id": "e1c1909b-bda2-4692-b400-b666366a23a6",
            "version": "KqlParameterItem/1.0",
            "name": "MetricsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureMetrics"
                }
              }
            ]
          },
          {
            "id": "4e301c40-91f2-498d-8c7e-d8e476627646",
            "version": "KqlParameterItem/1.0",
            "name": "TablestatsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics | where Category =='PostgreSQLFlexTableStats' | project TimeGenerated, Resource, DatabaseName = tostring(     iff(isnotempty(AdditionalFields.DatabaseName), AdditionalFields.DatabaseName,         column_ifexists('DatabaseName_s',            column_ifexists('DatabaseName', \"\")         )     ) ), SchemaName = tostring(     iff(isnotempty(AdditionalFields.Schemaname), AdditionalFields.Schemaname,         column_ifexists('Schemaname_s',            column_ifexists('Schemaname', \"\")         )     ) ), LiveRowsCount = tolong(     iff(isnotempty(AdditionalFields.N_live_tup), AdditionalFields.N_live_tup,         column_ifexists('N_live_tup_d',             column_ifexists('N_live_tup',                 column_ifexists('N_live_tup_s', \"\")             )         )     ) ), DeadRowsCount = tolong(     iff(isnotempty(AdditionalFields.N_dead_tup), AdditionalFields.N_dead_tup,         column_ifexists('N_dead_tup_d',             column_ifexists('N_dead_tup',                 column_ifexists('N_dead_tup_s', \"\")             )         )     ) ), SeqentialScansCount = tolong(     iff(isnotempty(AdditionalFields.Seq_scan), AdditionalFields.Seq_scan,         column_ifexists('Seq_scan_d',             column_ifexists('Seq_scan',                 column_ifexists('Seq_scan_s', \"\")             )         )     ) ), RowsFromSeqentialScansCount = tolong(     iff(isnotempty(AdditionalFields.Seq_tup_read), AdditionalFields.Seq_tup_read,         column_ifexists('Seq_tup_read_d',             column_ifexists('Seq_tup_read',                 column_ifexists('Seq_tup_read_s', \"\")             )         )     ) ), IndexScansCount = tolong(     iff(isnotempty(AdditionalFields.Idx_scan), AdditionalFields.Idx_scan,         column_ifexists('Idx_scan_d',             column_ifexists('Idx_scan',                 column_ifexists('Idx_scan_s', \"\")             )         )     ) ), RowsFromIndexScansCount = tolong(     iff(isnotempty(AdditionalFields.Idx_tup_fetch), AdditionalFields.Idx_tup_fetch,         column_ifexists('Idx_tup_fetch_d',             column_ifexists('Idx_tup_fetch',                 column_ifexists('Idx_tup_fetch_s', \"\")             )         )     ) ), RowsInsertedCount = tolong(     iff(isnotempty(AdditionalFields.N_tup_ins), AdditionalFields.N_tup_ins,         column_ifexists('N_tup_ins_d',             column_ifexists('N_tup_ins',                 column_ifexists('N_tup_ins_s', \"\")             )         )     ) ), RowsUpdatedCount = tolong(     iff(isnotempty(AdditionalFields.N_tup_upd), AdditionalFields.N_tup_upd,         column_ifexists('N_tup_upd_d',             column_ifexists('N_tup_upd',                 column_ifexists('N_tup_upd_s', \"\")             )         )     ) ), RowsDeletedCount = tolong(     iff(isnotempty(AdditionalFields.N_tup_del), AdditionalFields.N_tup_del,         column_ifexists('N_tup_del_d',             column_ifexists('N_tup_del',                 column_ifexists('N_tup_del_s', \"\")             )         )     ) ), RowsHotUpdatedCount = tolong(     iff(isnotempty(AdditionalFields.N_tup_hot_upd), AdditionalFields.N_tup_hot_upd,         column_ifexists('N_tup_hot_upd_d',             column_ifexists('N_tup_hot_upd',                 column_ifexists('N_tup_hot_upd_s', \"\")             )         )     ) ), ModificationsSinceAnalyzeCount = tolong(     iff(isnotempty(AdditionalFields.N_mod_since_analyze), AdditionalFields.N_mod_since_analyze,         column_ifexists('N_mod_since_analyze_d',             column_ifexists('N_mod_since_analyze',                 column_ifexists('N_mod_since_analyze_s', \"\")             )         )     ) ), VacuumCount = tolong(     iff(isnotempty(AdditionalFields.Vacuum_count), AdditionalFields.Vacuum_count,         column_ifexists('Vacuum_count_d',             column_ifexists('Vacuum_count',                 column_ifexists('Vacuum_count_s', \"\")             )         )     ) ), AutovacuumCount = tolong(     iff(isnotempty(AdditionalFields.Autovacuum_count), AdditionalFields.Autovacuum_count,         column_ifexists('Autovacuum_count_d',             column_ifexists('Autovacuum_count',                 column_ifexists('Autovacuum_count_s', \"\")             )         )     ) ), AnalyzeCount = tolong(     iff(isnotempty(AdditionalFields.Analyze_count), AdditionalFields.Analyze_count,         column_ifexists('Analyze_count_d',             column_ifexists('Analyze_count',                 column_ifexists('Analyze_count_s', \"\")             )         )     ) ), AutoanalyzeCount = tolong(     iff(isnotempty(AdditionalFields.Autoanalyze_count), AdditionalFields.Autoanalyze_count,         column_ifexists('Autoanalyze_count_d',             column_ifexists('Autoanalyze_count',                 column_ifexists('Autoanalyze_count_s', \"\")             )         )     ) ), TablesCount = tolong(     iff(isnotempty(AdditionalFields.Tables_counter), AdditionalFields.Tables_counter,         column_ifexists('Tables_counter_d',             column_ifexists('Tables_counter',                 column_ifexists('Tables_counter_s', \"\")             )         )     ) ), TablesVacuumedCount = tolong(     iff(isnotempty(AdditionalFields.Tables_vacuumed), AdditionalFields.Tables_vacuumed,         column_ifexists('Tables_vacuumed_d',             column_ifexists('Tables_vacuumed',                 column_ifexists('Tables_vacuumed_s', \"\")             )         )     ) ), TablesAutovacuumedCount = tolong(     iff(isnotempty(AdditionalFields.Tables_autovacuumed), AdditionalFields.Tables_autovacuumed,         column_ifexists('Tables_autovacuumed_d',             column_ifexists('Tables_autovacuumed',                 column_ifexists('Tables_autovacuumed_s', \"\")             )         )     ) ), TablesAnalyzedCount = tolong(     iff(isnotempty(AdditionalFields.Tables_analyzed), AdditionalFields.Tables_analyzed,         column_ifexists('Tables_analyzed_d',             column_ifexists('Tables_analyzed',                 column_ifexists('Tables_analyzed_s', \"\")             )         )     ) ), TablesAutoanalyzedCount = tolong(     iff(isnotempty(AdditionalFields.Tables_autoanalyzed), AdditionalFields.Tables_autoanalyzed,         column_ifexists('Tables_autoanalyzed_d',             column_ifexists('Tables_autoanalyzed',                 column_ifexists('Tables_autoanalyzed_s', \"\")             )         )     ) )"
                }
              }
            ]
          },
          {
            "id": "c97c5981-2927-49e3-bb7f-28b91a02ecf3",
            "version": "KqlParameterItem/1.0",
            "name": "PGServerLogsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics | where Category =='PostgreSQLLogs' | project TimeGenerated, Resource, Timestamp = todatetime(     iff(isnotempty(AdditionalFields.timestamp), AdditionalFields.timestamp,         column_ifexists('timestamp_s',            column_ifexists('timestamp', \"\")         )     ) ), ProcessId = toint(     iff(isnotempty(AdditionalFields.processId), AdditionalFields.processId,         column_ifexists('processId_d',             column_ifexists('processId_s',                 column_ifexists('processId', \"\")             )         )     ) ), ErrorLevel = tostring(     iff(isnotempty(AdditionalFields.errorLevel), AdditionalFields.errorLevel,         column_ifexists('errorLevel_s',            column_ifexists('errorLevel', \"\")         )     ) ), SqlErrorCode = tostring(     iff(isnotempty(AdditionalFields.sqlerrcode), AdditionalFields.sqlerrcode,         column_ifexists('sqlerrcode_s',            column_ifexists('sqlerrcode', \"\")         )     ) ), Message = tostring(     iff(isnotempty(AdditionalFields.message), AdditionalFields.message,         column_ifexists('Message',            column_ifexists('message_s', \"\")         )     ) ), Detail = tostring(     iff(isnotempty(AdditionalFields.detail), AdditionalFields.detail,         column_ifexists('detail_s',            column_ifexists('detail', \"\")         )     ) ), Hint = tostring(     iff(isnotempty(AdditionalFields.hint), AdditionalFields.hint,         column_ifexists('hint_s',            column_ifexists('hint', \"\")         )     ) ), Query = tostring(     iff(isnotempty(AdditionalFields.query), AdditionalFields.query,         column_ifexists('query_s',            column_ifexists('query', \"\")         )     ) ), Context = tostring(     iff(isnotempty(AdditionalFields.context), AdditionalFields.context,         column_ifexists('context_s',            column_ifexists('context', \"\")         )     ) ), Statement = tostring(     iff(isnotempty(AdditionalFields.statement), AdditionalFields.statement,         column_ifexists('statement_s',            column_ifexists('statement', \"\")         )     ) ), SchemaName = tostring(     iff(isnotempty(AdditionalFields.schema_name), AdditionalFields.schema_name,         column_ifexists('schema_name_s',            column_ifexists('schema_name', \"\")         )     ) ), TableName = tostring(     iff(isnotempty(AdditionalFields.table_name), AdditionalFields.table_name,         column_ifexists('table_name_s',            column_ifexists('table_name', \"\")         )     ) ), ColumnName = tostring(     iff(isnotempty(AdditionalFields.column_name), AdditionalFields.column_name,         column_ifexists('column_name_s',            column_ifexists('column_name', \"\")         )     ) ), DatatypeName = tostring(     iff(isnotempty(AdditionalFields.datatype_name), AdditionalFields.datatype_name,         column_ifexists('datatype_name_s',            column_ifexists('datatype_name', \"\")         )     ) ), ConstraintName = tostring(     iff(isnotempty(AdditionalFields.constraint_name), AdditionalFields.constraint_name,         column_ifexists('constraint_name_s',            column_ifexists('constraint_name', \"\")         )     ) )"
                }
              }
            ]
          },
          {
            "id": "e8b3a34f-b56a-44a5-9b23-07810aa47995",
            "version": "KqlParameterItem/1.0",
            "name": "MIN_SESSION_TIME_SEC_THRESHOLD_FOR_LONG_SESSIONS",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "1200"
                }
              }
            ]
          },
          {
            "id": "1215c1a2-2b3c-44d3-9818-864c8e792049",
            "version": "KqlParameterItem/1.0",
            "name": "AV_LOOK_BACK_DAYS",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "7d"
                }
              }
            ]
          },
          {
            "id": "3165c85f-3d3f-48d7-882e-1d8fa747655d",
            "version": "KqlParameterItem/1.0",
            "name": "AV_BLOAT_THRESHOLD",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "50"
                }
              }
            ]
          }
        ],
        "style": "above",
        "queryType": 1,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "high cpu parameters all"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "86be5e3b-33b7-4355-a24a-243bdd914591",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagnosticsGetEnabledGroups",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.value[?(@.properties.workspaceId!=null )].properties.logs[?(@.categoryGroup!=null&&@.enabled==true)]\",\"columns\":[{\"path\":\"$.categoryGroup\",\"columnid\":\"CategoryGroup\"}]}}]}",
            "queryType": 12
          },
          {
            "id": "3026f6d9-f060-40d1-87a5-6d18204ada0b",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagnosticsGetAllEnabledCategories",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.value[?(@.properties.workspaceId!=null )].properties.logs[?(@.category!=null&&@.enabled==true)]\",\"columns\":[{\"path\":\"$.category\",\"columnid\":\"Category\"}]}}]}",
            "queryType": 12
          },
          {
            "id": "477ec0d7-9343-498c-9124-6ab8e638c20c",
            "version": "KqlParameterItem/1.0",
            "name": "LessThanOneHourInterval",
            "type": 1,
            "query": "let interval = 1h;\r\nprint iff({TimeRange:end} - {TimeRange:start} < interval, \"Yes\", \"No\")",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "75222467-e8dd-49e2-acce-4dd4306b5d20",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreCheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/pg_qs.query_capture_mode?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":true,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$..value\",\"columnid\":\"value\",\"substringRegexMatch\":\"^None|NONE|none$\",\"substringReplace\":\"none\"}]}}]}",
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 12
          },
          {
            "id": "77b10db0-dfc9-451b-97dd-1e3fbc6ea695",
            "version": "KqlParameterItem/1.0",
            "name": "isQueryStoreEnabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "QueryStoreCheck",
                  "operator": "!=",
                  "rightValType": "static",
                  "rightVal": "none",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "56b02e54-1a1d-42f8-a28b-f15880f68523",
            "version": "KqlParameterItem/1.0",
            "name": "HighCPUQueries",
            "type": 1,
            "query": "let dt = {TimeRange:end};\r\nlet GlobalEndTime = iff(dt<now(), dt, now());\r\nlet GlobalStartTime= iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime(GlobalEndTime)-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start});\r\nlet Start_Time = todatetime(GlobalStartTime);\r\nlet End_Time = todatetime(GlobalEndTime);\r\n{QueryStoreTable}\r\n| where todatetime(EndTime) >= Start_Time and todatetime(EndTime) <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n //| summarize max(Mean_time_d) by Queryid_d\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "25b4ff8a-def1-4bf4-81b2-62f9b180ffcb",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryAPI",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..replicationRole\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "3313e0fe-1cc6-4cd9-bb5a-a2197f5ed2bf",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryCheck",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "IsServerPrimaryAPI",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Primary",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "5dab1bb7-fa88-4a62-b1b7-ee99a4a55d4c",
            "version": "KqlParameterItem/1.0",
            "name": "IsAVCatchingUp",
            "type": 1,
            "query": "\r\nlet dt = {TimeRange:end};\r\nlet GlobalEndTime = iff(dt<now(), dt, now());\r\n\r\nlet GlobalStartTime= iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime(GlobalEndTime)-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start});\r\n\r\nlet Start_Time = todatetime(GlobalEndTime)-{AV_LOOK_BACK_DAYS};\r\nlet End_Time = todatetime(GlobalEndTime);\r\nlet MAX_BLOAT_PCT=100;\r\nAzureDiagnostics\r\n| where Category =='PostgreSQLFlexTableStats'\r\n| project\r\nTimeGenerated,\r\nResource,\r\nDatabaseName = tostring(\r\n    iff(isnotempty(AdditionalFields.DatabaseName), AdditionalFields.DatabaseName,\r\n        column_ifexists('DatabaseName_s',\r\n           column_ifexists('DatabaseName', \"\")\r\n        )\r\n    )\r\n),\r\nSchemaName = tostring(\r\n    iff(isnotempty(AdditionalFields.Schemaname), AdditionalFields.Schemaname,\r\n        column_ifexists('Schemaname_s',\r\n           column_ifexists('Schemaname', \"\")\r\n        )\r\n    )\r\n),\r\nLiveRowsCount = tolong(\r\n    iff(isnotempty(AdditionalFields.N_live_tup), AdditionalFields.N_live_tup,\r\n        column_ifexists('N_live_tup_d',\r\n            column_ifexists('N_live_tup',\r\n                column_ifexists('N_live_tup_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nDeadRowsCount = tolong(\r\n    iff(isnotempty(AdditionalFields.N_dead_tup), AdditionalFields.N_dead_tup,\r\n        column_ifexists('N_dead_tup_d',\r\n            column_ifexists('N_dead_tup',\r\n                column_ifexists('N_dead_tup_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nSeqentialScansCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Seq_scan), AdditionalFields.Seq_scan,\r\n        column_ifexists('Seq_scan_d',\r\n            column_ifexists('Seq_scan',\r\n                column_ifexists('Seq_scan_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nRowsFromSeqentialScansCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Seq_tup_read), AdditionalFields.Seq_tup_read,\r\n        column_ifexists('Seq_tup_read_d',\r\n            column_ifexists('Seq_tup_read',\r\n                column_ifexists('Seq_tup_read_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nIndexScansCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Idx_scan), AdditionalFields.Idx_scan,\r\n        column_ifexists('Idx_scan_d',\r\n            column_ifexists('Idx_scan',\r\n                column_ifexists('Idx_scan_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nRowsFromIndexScansCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Idx_tup_fetch), AdditionalFields.Idx_tup_fetch,\r\n        column_ifexists('Idx_tup_fetch_d',\r\n            column_ifexists('Idx_tup_fetch',\r\n                column_ifexists('Idx_tup_fetch_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nRowsInsertedCount = tolong(\r\n    iff(isnotempty(AdditionalFields.N_tup_ins), AdditionalFields.N_tup_ins,\r\n        column_ifexists('N_tup_ins_d',\r\n            column_ifexists('N_tup_ins',\r\n                column_ifexists('N_tup_ins_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nRowsUpdatedCount = tolong(\r\n    iff(isnotempty(AdditionalFields.N_tup_upd), AdditionalFields.N_tup_upd,\r\n        column_ifexists('N_tup_upd_d',\r\n            column_ifexists('N_tup_upd',\r\n                column_ifexists('N_tup_upd_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nRowsDeletedCount = tolong(\r\n    iff(isnotempty(AdditionalFields.N_tup_del), AdditionalFields.N_tup_del,\r\n        column_ifexists('N_tup_del_d',\r\n            column_ifexists('N_tup_del',\r\n                column_ifexists('N_tup_del_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nRowsHotUpdatedCount = tolong(\r\n    iff(isnotempty(AdditionalFields.N_tup_hot_upd), AdditionalFields.N_tup_hot_upd,\r\n        column_ifexists('N_tup_hot_upd_d',\r\n            column_ifexists('N_tup_hot_upd',\r\n                column_ifexists('N_tup_hot_upd_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nModificationsSinceAnalyzeCount = tolong(\r\n    iff(isnotempty(AdditionalFields.N_mod_since_analyze), AdditionalFields.N_mod_since_analyze,\r\n        column_ifexists('N_mod_since_analyze_d',\r\n            column_ifexists('N_mod_since_analyze',\r\n                column_ifexists('N_mod_since_analyze_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nVacuumCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Vacuum_count), AdditionalFields.Vacuum_count,\r\n        column_ifexists('Vacuum_count_d',\r\n            column_ifexists('Vacuum_count',\r\n                column_ifexists('Vacuum_count_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nAutovacuumCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Autovacuum_count), AdditionalFields.Autovacuum_count,\r\n        column_ifexists('Autovacuum_count_d',\r\n            column_ifexists('Autovacuum_count',\r\n                column_ifexists('Autovacuum_count_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nAnalyzeCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Analyze_count), AdditionalFields.Analyze_count,\r\n        column_ifexists('Analyze_count_d',\r\n            column_ifexists('Analyze_count',\r\n                column_ifexists('Analyze_count_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nAutoanalyzeCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Autoanalyze_count), AdditionalFields.Autoanalyze_count,\r\n        column_ifexists('Autoanalyze_count_d',\r\n            column_ifexists('Autoanalyze_count',\r\n                column_ifexists('Autoanalyze_count_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nTablesCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Tables_counter), AdditionalFields.Tables_counter,\r\n        column_ifexists('Tables_counter_d',\r\n            column_ifexists('Tables_counter',\r\n                column_ifexists('Tables_counter_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nTablesVacuumedCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Tables_vacuumed), AdditionalFields.Tables_vacuumed,\r\n        column_ifexists('Tables_vacuumed_d',\r\n            column_ifexists('Tables_vacuumed',\r\n                column_ifexists('Tables_vacuumed_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nTablesAutovacuumedCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Tables_autovacuumed), AdditionalFields.Tables_autovacuumed,\r\n        column_ifexists('Tables_autovacuumed_d',\r\n            column_ifexists('Tables_autovacuumed',\r\n                column_ifexists('Tables_autovacuumed_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nTablesAnalyzedCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Tables_analyzed), AdditionalFields.Tables_analyzed,\r\n        column_ifexists('Tables_analyzed_d',\r\n            column_ifexists('Tables_analyzed',\r\n                column_ifexists('Tables_analyzed_s', \"\")\r\n            )\r\n        )\r\n    )\r\n),\r\nTablesAutoanalyzedCount = tolong(\r\n    iff(isnotempty(AdditionalFields.Tables_autoanalyzed), AdditionalFields.Tables_autoanalyzed,\r\n        column_ifexists('Tables_autoanalyzed_d',\r\n            column_ifexists('Tables_autoanalyzed',\r\n                column_ifexists('Tables_autoanalyzed_s', \"\")\r\n            )\r\n        )\r\n    )\r\n)\r\n|where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where DatabaseName !in (\"azure_sys\",\"azure_maintenance\")\r\n| where LiveRowsCount >100 and DeadRowsCount >1000\r\n| summarize LiveTuplesCluster= sum(LiveRowsCount),DeadTuplesCluster=sum(DeadRowsCount)  \r\n  by bin(TimeGenerated,5m),DatabaseName\r\n| summarize LiveTuplesCluster= max(LiveTuplesCluster),DeadTuplesCluster=max(DeadTuplesCluster)  \r\n  by bin(TimeGenerated,1d),DatabaseName\r\n| extend BloatRatio=toreal(DeadTuplesCluster)/toreal((DeadTuplesCluster+LiveTuplesCluster))*100\r\n| extend BloatRatio = iff( isnan(BloatRatio), 0.0, BloatRatio)\r\n|project TimeGenerated, DatabaseName, BloatRatio\r\n|summarize arg_max(TimeGenerated,latest_bloat_pct=(MAX_BLOAT_PCT-BloatRatio)),arg_min(TimeGenerated,last_bloat_pct=(MAX_BLOAT_PCT-BloatRatio)) by DatabaseName\r\n|extend  pct_bloat_change = toreal(((latest_bloat_pct-last_bloat_pct)/((latest_bloat_pct+last_bloat_pct)/2))*100)\r\n|extend pct_bloat_change = iff(isnan(pct_bloat_change),0.0,pct_bloat_change)\r\n|extend actual_latest_pct=MAX_BLOAT_PCT-latest_bloat_pct\r\n|where pct_bloat_change >{AV_BLOAT_THRESHOLD} or actual_latest_pct >{AV_BLOAT_THRESHOLD}\r\n|project DatabaseName\r\n",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "fec93f41-8dbe-4eb5-a7b8-d1cae4b20284",
            "version": "KqlParameterItem/1.0",
            "name": "_SevenDaysAgoTimestamp",
            "type": 1,
            "query": "let dt = {TimeRange:end}-7d;\r\nprint \r\nv=format_datetime(dt, 'MM/dd/yyyy hh:mm tt')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0
          },
          {
            "id": "092a79be-1a20-481d-9a1e-90c468a0a362",
            "version": "KqlParameterItem/1.0",
            "name": "IsMetricsCollectorDatabaseActivityOn",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/metrics.collector_database_activity?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":true,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$..value\",\"columnid\":\"value\",\"substringRegexMatch\":\"^ON|on|On$\",\"substringReplace\":\"ON\"}]}}]}",
            "queryType": 12
          },
          {
            "id": "4e1813b0-d573-4b79-ae58-c74618093e0a",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIMetrics",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.value[?(@.properties.workspaceId!=null )].properties.metrics[?(@.category=='AllMetrics' && @.enabled==true)].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "c45a71df-13b4-468a-90bf-7347fa7027fb",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIPostgreSQLLogs",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLLogs')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "f153e854-2870-4873-824f-d794a2d34410",
            "version": "KqlParameterItem/1.0",
            "name": "IsQueryStoreRuntimeSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "allLogs",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "audit",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetAllEnabledCategories",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "PostgreSQLFlexQueryStoreRuntime",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "228ace36-140b-45dc-8a08-278b4909d980",
            "version": "KqlParameterItem/1.0",
            "name": "IsAllMetricsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIMetrics",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "aaa581c6-a9e0-4609-ab48-f4e71f079589",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLLogsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "allLogs",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "audit",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetAllEnabledCategories",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "PostgreSQLLogs",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "03b5d513-44ea-4d5a-99e5-8652296d8b60",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "allLogs",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "audit",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetAllEnabledCategories",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "PostgreSQLFlexSessions",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "ea3f24a4-a179-457c-ba4d-38e5354cc863",
            "version": "KqlParameterItem/1.0",
            "name": "IsMetricDataExists",
            "type": 1,
            "query": "let dt = {TimeRange:end};\r\nlet GlobalEndTime = iff(dt<now(), dt, now());\r\nlet GlobalStartTime= iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime(GlobalEndTime)-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start});\r\nlet Start_Time = todatetime(GlobalStartTime);\r\nlet End_Time = todatetime(GlobalEndTime);\r\n\r\nlet graph_grain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\n{MetricsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where MetricName == 'xact_total'\r\n| distinct Total,TimeGenerated\r\n|count\r\n| extend metricdata = iff(Count>0,'Yes','No')\r\n| project metricdata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "ed4838c4-67fa-4d97-8869-a274996d9f90",
            "version": "KqlParameterItem/1.0",
            "name": "ConnectionDurationData",
            "type": 1,
            "query": "let dt = {TimeRange:end};\r\nlet GlobalEndTime = iff(dt<now(), dt, now());\r\nlet GlobalStartTime= iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime(GlobalEndTime)-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start});\r\nlet Start_Time = todatetime(GlobalStartTime);\r\nlet End_Time = todatetime(GlobalEndTime);\r\n{PGServerLogsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Message contains \"disconnection\"\r\n| distinct TimeGenerated,Timestamp,Message\r\n| extend allmatches=extract_all(@'session.time:(.+)user=(.+)database=(.+)host=(.+).port', Message)\r\n| extend user=trim(@\" \",tostring(allmatches[0][1]) )\r\n| where  user !in ('azuresu','replication')\r\n| count\r\n| extend conndata = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project conndata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "high cpu parameter logs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### WARNING: The autovacuum process is not able to keep up with the workload for certain databases on the server.\r\n\r\nBetween the time period **{_SevenDaysAgoTimestamp}** and **{TimeRange:end}** the bloat ratio for **{IsAVCatchingUp}**  databases seems to have increased more than {AV_BLOAT_THRESHOLD}% or the bloat ratio for these databases at current time period - {TimeRange:end} is more than {AV_BLOAT_THRESHOLD}%.\r\n\r\nMonitoring statistics and dead tuples in the tables is important. Stale statistics and high number of dead tuples increase query times which contributes to higher CPU consumption.",
              "style": "warning"
            },
            "name": "high cpu av threshold"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "list",
              "links": [
                {
                  "id": "57ba7895-7e6a-40fa-ae2f-597495d440f7",
                  "cellValue": "",
                  "linkTarget": "WorkbookTemplate",
                  "linkLabel": "Autovacuum monitoring troubleshooting guide",
                  "preText": "It is recommended to monitor autovacuum metrics on the server by using the",
                  "postText": ".",
                  "style": "link",
                  "linkIsContextBlade": true,
                  "workbookContext": {
                    "componentIdSource": "workbook",
                    "resourceIdsSource": "workbook",
                    "templateIdSource": "static",
                    "templateId": "Community-Workbooks/PostgreSQL Flexible Server/Performance/Autovacuum Monitoring",
                    "typeSource": "workbook",
                    "gallerySource": "workbook",
                    "locationSource": "default",
                    "passSpecificParams": true,
                    "templateParameters": [
                      {
                        "name": "Resource",
                        "source": "parameter",
                        "value": "Resource"
                      },
                      {
                        "name": "TimeRange",
                        "source": "parameter",
                        "value": "TimeRange"
                      }
                    ]
                  }
                }
              ]
            },
            "name": "high cpu av link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "IsAVCatchingUp",
        "comparison": "isNotEqualTo",
        "value": ""
      },
      "name": "high cpu av group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "b01ad3ec-d7f4-4f48-877f-97b8e5df9dc3",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalEndTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\n\r\nlet dt = {TimeRange:end};\r\nprint iff(dt<now(), dt, now())\r\n\r\n",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "96e3b87c-aab0-4016-bffd-f08e63a3010b",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalStartTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\nprint iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime('{GlobalEndTime}')-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start})",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "0aac6a30-1f93-4b3c-9947-52f85e7bcff4",
            "version": "KqlParameterItem/1.0",
            "name": "LessThanOneHourInterval",
            "type": 1,
            "query": "let interval = 1h;\r\nprint iff({TimeRange:end} - {TimeRange:start} < interval, \"Yes\", \"No\")",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "125f3e47-3f38-492e-bf74-d9686a928b04",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrain",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "0daf8f52-1d24-456b-9d44-9ef438b843d8",
            "version": "KqlParameterItem/1.0",
            "name": "MetricsGrain",
            "type": 1,
            "query": "print case(\r\n    {TimeRange:grain}<1h, strcat(format_timespan({TimeRange:grain},'m'),' minute(s)'),\r\n    {TimeRange:grain}>=1h and {TimeRange:grain}<1d, strcat(format_timespan({TimeRange:grain},'H'),' hour(s)') ,\r\n    strcat(format_timespan({TimeRange:grain},'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "3c99b826-ed5f-47fb-91db-8ddbbe88e90c",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrainMin5",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<5m,5m, {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "cb23b5a0-28ad-4513-841f-b00e47f28b11",
            "version": "KqlParameterItem/1.0",
            "name": "IsConnectionDataExists",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where UserId != 10\r\n| where isnotempty(DatabaseId) and DatabaseName !in('template1','template0', 'azure_maintenance','azure_sys')\r\n| where State !=\"\"\r\n| limit 10\r\n| count\r\n| extend conndata = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project conndata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "1c4ad1d0-e09b-447d-8ee2-1ec5a73960cb",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLServerLogsDataExists",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Message contains \"disconnection\"\r\n| distinct TimeGenerated,Timestamp,Message\r\n| extend DisconnectTime=todatetime(Timestamp)\r\n| extend allmatches=extract_all(@'session.time:(.+)user=(.+)database=(.+)host=(.+).port', Message)\r\n| extend duration=totime(allmatches[0][0])\r\n| extend user=trim(@\" \",tostring(allmatches[0][1]) )\r\n| extend database=tostring(allmatches[0][2])\r\n| extend IP=tostring(allmatches[0][3])\r\n| where user !in ('azuresu','replication')\r\n| count\r\n| extend logsdata = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project logsdata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "7a94771a-69d8-46e4-addf-d827c156b109",
            "version": "KqlParameterItem/1.0",
            "name": "IsLogMinDurationDataExists",
            "type": 1,
            "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where TimeGenerated >= TimeStart and TimeGenerated <= TimeEnd\r\n| where Message contains \"duration:\"\r\n| extend pregmatchall=extract_all(@'duration:(.+)ms.+statement:(.+)', Message)\r\n| extend duration_ms=toreal(pregmatchall[0][0])\r\n| extend statement=trim(@' ',tostring(pregmatchall[0][1]))\r\n| distinct statement,duration_ms,TimeGenerated\r\n| where statement!=\"\"\r\n| order by duration_ms desc\r\n|limit 5\r\n| summarize count(), WindowStart=min(TimeGenerated), WindowEnd=max(TimeGenerated), meanExecTime=avg(duration_ms), minExecTime=min(duration_ms),maxExecTime=max(duration_ms) by statement\r\n| count\r\n| extend logsdata = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project logsdata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "high cpu other parameterss"
    },
    {
      "type": 1,
      "content": {
        "json": "\r\n**Long running transactions found (Transactions > {LONG_RUNNING_QUERY_SEC_DURATION_THRESHOLD} Seconds)**\r\n\r\n",
        "style": "warning"
      },
      "conditionalVisibility": {
        "parameterName": " HighCPUQueries",
        "comparison": "isEqualTo",
        "value": "Yes"
      },
      "name": "high cpu long transaction warning"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### Query Store is currently disabled\r\nThis troubleshooting guide depends on Query Store data. You need to enable it by setting the dynamic server parameter `pg_qs.query_capture_mode` to either ALL or TOP. Refer to this guide for detailed instructions: https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-query-store\r\n",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "isQueryStoreEnabled",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "high cpu qs error"
          },
          {
            "type": 1,
            "content": {
              "json": "### The Query Store data is not being transmitted to the log analytics workspace\r\nThe Query Store data is not being sent to the log analytics workspace, which is necessary to use this Troubleshooting guide. To configure the logging settings for Query Store categoy `PostgreSQL Query Store Runtime` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "No"
              }
            ],
            "name": "high cpu qs la error"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL server logs data is not being transmitted to the log analytics workspace\r\nThe PostgreSQL server logs data is not being sent to the log analytics workspace, which is necessary to use this Troubleshooting guide. To configure the logging settings for category `PostgreSQL Server Logs` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "IsPostgreSQLLogsSentToLogAnalytics",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "high cpu pglogs error"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace\r\nThe PostgreSQL Sessions logs data is not being sent to the log analytics workspace, which is necessary to use this Troubleshooting guide. To configure the logging settings for category `PostgreSQL Sessions` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "high cpu pgsessionerror"
          },
          {
            "type": 1,
            "content": {
              "json": "### The server metrics data is not being transmitted to the log analytics workspace\r\nThe server metrics data is not being sent to the log analytics workspace, which is necessary to use this troubleshooting guide. To configure the logging settings for category `AllMetrics` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "IsAllMetricsSentToLogAnalytics",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "high cpu pgmetrics Error"
          },
          {
            "type": 1,
            "content": {
              "json": "### Enhanced Metrics are currently disabled.\r\nThis Troubleshooting guide requires the use of enhanced metrics. To activate these metrics, simply enable the dynamic server parameter `metrics.collector_database_activity`.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isNotEqualTo",
              "value": "ON"
            },
            "name": "high cpu enahanced metric error"
          },
          {
            "type": 1,
            "content": {
              "json": "### Query tracking through `log_min_duration_statement` is currently disabled\r\nTo enable query tracking, you can set an appropriate threshold for the `log_min_duration_statement` parameter through the Azure portal. This dynamic parameter determines the minimum duration of a query before it's logged in the PostgreSQL server logs. \r\n",
              "style": "error"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsLogMinDurationStatementEnabled",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "No"
              }
            ],
            "name": "text - 2"
          }
        ],
        "exportParameters": true
      },
      "name": "high cpu log min error"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "tabStyle": "bigger",
        "links": [
          {
            "id": "561184d2-fedd-44f8-9fe1-5a5bca468465",
            "cellValue": "cputab",
            "linkTarget": "parameter",
            "linkLabel": "CPU Utilization",
            "subTarget": "usage",
            "style": "link"
          },
          {
            "id": "53a4d309-f616-49ac-b3f8-01f9b81c712f",
            "cellValue": "cputab",
            "linkTarget": "parameter",
            "linkLabel": "Workload Details",
            "subTarget": "workload",
            "style": "link"
          },
          {
            "id": "1cb86df9-058f-4ea3-a646-888e89b1fb39",
            "cellValue": "cputab",
            "linkTarget": "parameter",
            "linkLabel": "Transaction Trends and Counts",
            "subTarget": "transactions",
            "style": "link"
          },
          {
            "id": "065516f7-e3d8-4ff6-a120-568403493106",
            "cellValue": "cputab",
            "linkTarget": "parameter",
            "linkLabel": "Long Running Transactions",
            "subTarget": "longtransactions",
            "style": "link"
          },
          {
            "id": "c9da01bb-faab-4428-b968-8dfcf6ababbc",
            "cellValue": "cputab",
            "linkTarget": "parameter",
            "linkLabel": "Top CPU Consuming Queries",
            "subTarget": "hightimequeries",
            "style": "link"
          },
          {
            "id": "68f9ff2d-6068-4537-88f0-96c59fe3bb9a",
            "cellValue": "cputab",
            "linkTarget": "parameter",
            "linkLabel": "Total User Only Connections",
            "subTarget": "connections",
            "style": "link"
          }
        ]
      },
      "name": "high cpu tabs"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "x",
          "comparison": "isEqualTo",
          "value": "y"
        }
      ],
      "name": "high cpu cpu utiization metric time interval"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbookda363094-1a87-4922-a088-e257cf971b6c",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Saturation-cpu_percent",
            "aggregation": 3,
            "splitBy": null
          }
        ],
        "title": "Maximum Percentage of CPU in Use",
        "showCreateAlertRule": true,
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibility": {
        "parameterName": "cputab",
        "comparison": "isEqualTo",
        "value": "usage"
      },
      "name": "high cpu cpu utilization"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The Enhanced Metrics are disabled on server. To obtain additional information, please refer to the error message located at the top of the troubleshooting guide.\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isNotEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        }
      ],
      "name": "high cpu waorkload enhanced metric"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "bbd1eb36-7b53-4cf3-9eb3-b7d578ac6f69",
            "cellValue": "child-tab",
            "linkTarget": "parameter",
            "linkLabel": "Read Workload",
            "subTarget": "readworkload",
            "style": "link"
          },
          {
            "id": "8269efc0-6814-4c74-b446-b6197ce51d5b",
            "cellValue": "child-tab",
            "linkTarget": "parameter",
            "linkLabel": "Write Workload",
            "subTarget": "writeworkload",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "high cpu waorkload tab"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "x",
          "comparison": "isEqualTo",
          "value": "y"
        }
      ],
      "name": "high cpu waorkload tab time interval"
    },
    {
      "type": 1,
      "content": {
        "json": "## Read workload details\r\n\r\n**tup_fetched** and **tup_returned** are two metrics that measure the number of rows read from a table.\r\n\r\n**tup_returned** represents the number of live rows fetched by sequential scans and index entries returned by index scans in this database.\r\n\r\n**tup_fetched** measures the number of live rows fetched by index scans in this database.\r\n\r\nBy monitoring these two metrics, administrators can gain a better understanding of the performance of their PostgreSQL read workloads.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "readworkload"
        }
      ],
      "name": "high cpu waorkload read info"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook4dc9d840-2afc-4e9d-b0e6-bba4664c2631",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
            "aggregation": 1,
            "splitBy": null
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
            "aggregation": 1
          }
        ],
        "title": "Read Workload Metrics",
        "showCreateAlertRule": true,
        "filters": [
          {
            "id": "1",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "readworkload"
        }
      ],
      "name": "high cpu waorkload readworkload metric"
    },
    {
      "type": 1,
      "content": {
        "json": "**The read workload metric calculates the total number of tuples fetched and returned, but it does not include databases like `azure_sys` and `azure_maintenance`.**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "readworkload"
        }
      ],
      "name": "high cpu waorkload readworkload info"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook7a7c3cb2-9d2d-45e7-a9bf-cb0db0f38dc9",
        "version": "MetricsItem/2.0",
        "size": 1,
        "chartType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          }
        ],
        "gridFormatType": 2,
        "filters": [
          {
            "id": "1",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Subscription",
              "formatter": 5
            },
            {
              "columnMatch": "Name",
              "formatter": 5,
              "formatOptions": {
                "linkTarget": "Resource"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": ".*\\/Tuples Returned (Preview)$",
              "formatter": 1
            },
            {
              "columnMatch": ".*\\/Tuples Fetched (Preview)$",
              "formatter": 1
            }
          ],
          "rowLimit": 10000,
          "labelSettings": [
            {
              "columnId": "Segment",
              "label": "Database"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
              "label": "Tuples Fetched (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched Timeline",
              "label": "Tuples Fetched (Sum) [Timeline]"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
              "label": "Tuples Returned (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned Timeline",
              "label": "Tuples Returned (Sum) [Timeline]"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "readworkload"
        }
      ],
      "name": "high cpu workload readworkload grid"
    },
    {
      "type": 1,
      "content": {
        "json": "## Write workload details \r\nThe number of tuples that have been inserted, updated, or deleted are critical for understanding the overall performance of the database and for identifying potential inefficiencies.\r\n\r\n\r\nBy monitoring these metrics, administrators can gain insights into the performance of their PostgreSQL write workloads and make data-driven decisions to optimize the database.\r\n\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "writeworkload"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high cpu workload write info"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook4f1a52ad-86d1-4a5a-83e7-7caef0b1658b",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
            "aggregation": 1,
            "splitBy": null
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
            "aggregation": 1
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
            "aggregation": 1
          }
        ],
        "title": "Write Workload Metrics",
        "showCreateAlertRule": true,
        "filters": [
          {
            "id": "1",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "writeworkload"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high cpu workload writeworkload metric"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Write workload details are not available for replica servers.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "writeworkload"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "high cpu workload writeworkload readreplica"
    },
    {
      "type": 1,
      "content": {
        "json": "**The write workload metric calculates the total number of inserted, updated, and deleted tuples, but it does not include databases like `azure_sys` and `azure_maintenance`.**\r\n\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "writeworkload"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high cpu workload writeworkload reco."
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook840cc26a-4a5b-4641-9a39-c0186fc4b983",
        "version": "MetricsItem/2.0",
        "size": 1,
        "chartType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          }
        ],
        "title": "Tuples Inserted, Updated & Deleted by Database",
        "gridFormatType": 2,
        "filters": [
          {
            "id": "1",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Subscription",
              "formatter": 5
            },
            {
              "columnMatch": "Name",
              "formatter": 5
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            }
          ],
          "rowLimit": 10000,
          "labelSettings": [
            {
              "columnId": "Segment",
              "label": "Database"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
              "label": "Tuples Inserted (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted Timeline",
              "label": "Tuples Inserted  (Sum) [Timeline]"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
              "label": "Tuples Updated  (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated Timeline",
              "label": "Tuples Updated  (Sum) [Timeline]"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
              "label": "Tuples Deleted  (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted Timeline",
              "label": "Tuples Deleted  (Sum) [Timeline]"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "child-tab",
          "comparison": "isEqualTo",
          "value": "writeworkload"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high cpu workload writeworkload grid"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "x",
          "comparison": "isEqualTo",
          "value": "y"
        }
      ],
      "name": "high cpu workload writeworkload grid time interval"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "cb78e5e9-2ef1-4f4c-832f-6ddc98ae5c6f",
            "cellValue": "connection-tab-2",
            "linkTarget": "parameter",
            "linkLabel": "Transaction Trend ",
            "subTarget": "TT",
            "style": "link"
          },
          {
            "id": "ce889247-43cd-4b4b-affb-b0753d5173ee",
            "cellValue": "connection-tab-2",
            "linkTarget": "parameter",
            "linkLabel": "Transactions Per Second",
            "subTarget": "TPS",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "cputab",
        "comparison": "isEqualTo",
        "value": "transactions"
      },
      "name": "high cpu transaction tab"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The Enhanced Metrics are disabled on server. To obtain additional information, please refer to the error message located at the top of the troubleshooting guide.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isNotEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "connection-tab-2",
          "comparison": "isEqualTo",
          "value": "TT"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "transactions"
        }
      ],
      "name": "high cpu transaction enahanced metric"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbookb2527b03-3e5b-4b92-9042-92b7c0628157",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 86400000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-xact_commit",
            "aggregation": 1,
            "splitBy": null
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-xact_rollback",
            "aggregation": 1
          }
        ],
        "title": "The Trend of Transactions Committed (xact_commit) vs Transactions Rolled Back (xact_rollback).",
        "showCreateAlertRule": true,
        "filters": [
          {
            "id": "1",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        },
        {
          "parameterName": "connection-tab-2",
          "comparison": "isEqualTo",
          "value": "TT"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "transactions"
        }
      ],
      "name": "high cpu transaction trend metric"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The server metrics data is not being transmitted to the log analytics workspace. For further information, please refer to the error message in the troubleshooting guide.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsAllMetricsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "connection-tab-2",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "transactions"
        }
      ],
      "name": "high cpu transaction lano"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. Kindly allow 15 minutes to 30 minutes for the telemetry data to become visible.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsAllMetricsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-2",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "transactions"
        },
        {
          "parameterName": "IsMetricDataExists",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "high cpu transaction layes"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n//let graph_grain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet graph_grain={TimeRange:grain};\r\n{MetricsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where MetricName == 'xact_total'\r\n| distinct Total,TimeGenerated\r\n//| summarize tps = sum(tolong(Total))/60 by bin(TimeGenerated,1m)\r\n| summarize total_xact = sum(tolong(Total)) by bin(TimeGenerated,1m)\r\n| extend tps = total_xact /60\r\n| make-series xact_per_second = max(tps) default = 0 on TimeGenerated from Start_Time to End_Time step graph_grain \r\n| render timechart",
        "size": 0,
        "aggregation": 2,
        "title": "The Trend of Transactions Per Second",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "timechart",
        "chartSettings": {
          "yAxis": [
            "xact_per_second"
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-2",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "transactions"
        }
      ],
      "name": "high cpu transaction tps"
    },
    {
      "type": 1,
      "content": {
        "json": "### High Number Of Transactions Per Second (TPS) ##\r\n\r\nIf you notice a recent peak in the TPS graph in correlation with high CPU usage, it could indicate that the server is experiencing an increased workload. You may want to consider upgrading to a higher SKU.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsMetricDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-2",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "transactions"
        }
      ],
      "name": "high cpu transaction tps reco"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "4ca62ad2-ee86-498b-924c-86b92ba5a231",
            "version": "KqlParameterItem/1.0",
            "name": "existsLongRunningTransactionsData",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where UserId != 10 and State !='idle' and BackendType !='autovacuum worker'\r\n| where isnotempty(DatabaseId) and DatabaseName !in('azure_sys','azure_maintenance')\r\n|count\r\n|extend hasdata =iff(Count>0,'Yes','No')\r\n|project hasdata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        },
        {
          "parameterName": "x",
          "comparison": "isEqualTo",
          "value": "y"
        }
      ],
      "name": "high cpu longsessions existsdata"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. Kindly allow 15 minutes to 30 minutes for the telemetry data to become visible.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions noexists data"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The selected window does not contain any data in the telemetry. To configure logging and address this issue, please refer to the error message located at the top of the troubleshooting guide.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": ""
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions lanone"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": ""
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions layep"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTransactions",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"10\", \"label\":\"10\",\"selected\":true },\r\n  { \"value\":\"20\", \"label\":\"20\" },\r\n    { \"value\":\"30\", \"label\":\"30\" },\r\n     { \"value\":\"40\", \"label\":\"40\" },\r\n  { \"value\":\"50\", \"label\":\"50\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "Number of Top PIDs"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions toptran"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where UserId != 10 and State !='idle' and BackendType !='autovacuum worker'\r\n| where isnotempty(DatabaseId) and DatabaseName !in('azure_sys','azure_maintenance')\r\n|  distinct TimeGenerated,ProcessId,BackendStartTime,BackendType,State,CollectionTime,QueryStartTime,TransactionStartTime\r\n| extend Connection_duration_sec = datetime_diff('millisecond',CollectionTime,BackendStartTime), Query_duration_ms = datetime_diff('millisecond',CollectionTime,QueryStartTime),  Transaction_duration_ms=datetime_diff('millisecond',CollectionTime,TransactionStartTime)\r\n   | summarize Connection_duration_sec=max(Connection_duration_sec), Transaction_duration_ms=max(Transaction_duration_ms),  Query_duration_ms=max(Query_duration_ms),arg_max(TimeGenerated,lastState=State) by ProcessId,BackendStartTime, BackendType\r\n   //| where Transaction_duration_ms> {MIN_SESSION_TIME_SEC_THRESHOLD_FOR_LONG_SESSIONS}\r\n  | order by Transaction_duration_ms desc, ProcessId asc\r\n  | limit {TopTransactions}",
        "size": 1,
        "aggregation": 2,
        "title": "Top {TopTransactions} PIDs by Transaction Duration. Blue - connection duration; Yellow - query duration; Green - transaction duration. The state shown in the tile is the last state from telemetry snapshot, historically the sate could have changed multiple times",
        "noDataMessage": "No PIDs data was found for the selected time range. Select a wider time range",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "tiles",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "Backend_type_s",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "Backend_type_s",
            "sortOrder": 1
          }
        ],
        "tileSettings": {
          "titleContent": {
            "columnMatch": "ProcessId",
            "formatter": 1,
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "useGrouping": false
              }
            }
          },
          "subtitleContent": {
            "columnMatch": "lastState",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "Connection_duration_sec",
            "formatter": 3,
            "formatOptions": {
              "palette": "blue"
            },
            "numberFormat": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": false,
                "maximumFractionDigits": 2
              }
            },
            "tooltipFormat": {
              "tooltip": "{1}"
            }
          },
          "rightContent": {
            "columnMatch": "Transaction_duration_ms",
            "formatter": 3,
            "formatOptions": {
              "palette": "green"
            },
            "numberFormat": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              },
              "emptyValCustomText": "Transaction Duration"
            },
            "tooltipFormat": {
              "tooltip": "Transaction Duration"
            }
          },
          "secondaryContent": {
            "columnMatch": "BackendType",
            "formatter": 1
          },
          "showBorder": true,
          "sortCriteriaField": "Transaction_duration_ms",
          "sortOrderField": 2,
          "size": "auto"
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Session_duration",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Pid",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "showLegend": true,
          "xSettings": {
            "numberFormatSettings": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          },
          "ySettings": {
            "numberFormatSettings": {
              "unit": 24,
              "options": {
                "style": "decimal",
                "useGrouping": false
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions query"
    },
    {
      "type": 1,
      "content": {
        "json": "## Stats on long running transactions\r\n\r\n**Note: In the troubleshooting guide we consider any transaction which is running for more than {LONG_RUNNING_QUERY_SEC_DURATION_THRESHOLD} seconds as a long running transaction.** \r\n\r\nConsideration\r\n\r\n* Connection Duration **(blue)** - Duration of session or connection (collection_time-backend_start). You will notice higher value in case if you are using conneciton pool.\r\n\r\n* Transaction Duration **(green)** - Duration of transaction (collection_time-xact_start)\r\n\r\nLong running transactions is based out of pg_stat_activity view in postgresql. If you want to know more about these columns, please visit https://www.postgresql.org/docs/current/monitoring-stats.html#MONITORING-PG-STAT-ACTIVITY-VIEW\r\n\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions query reco"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "e4b37b70-1891-4de7-b916-349a7ad5ae25",
            "version": "KqlParameterItem/1.0",
            "name": "SessionPid",
            "label": "Show Snapshot of PID",
            "type": 2,
            "isRequired": true,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where UserId != 10 and State !='idle' and BackendType !='autovacuum worker'\r\n| where isnotempty(DatabaseId) and DatabaseName !in('azure_sys','azure_maintenance')\r\n|  distinct TimeGenerated,ProcessId,BackendStartTime,BackendType,State,CollectionTime,QueryStartTime,TransactionStartTime\r\n| extend Connection_duration_sec = datetime_diff('second',CollectionTime,BackendStartTime), Query_duration_ms = datetime_diff('millisecond',CollectionTime,QueryStartTime),  Transaction_duration_ms=datetime_diff('millisecond',CollectionTime,TransactionStartTime)\r\n| summarize  Connection_duration_sec=max(Connection_duration_sec), Query_duration_ms=max(Query_duration_ms),Transaction_duration_ms=max(Transaction_duration_ms)  by ProcessId,BackendStartTime\r\n| order by Transaction_duration_ms desc, ProcessId asc\r\n| limit {TopTransactions}\r\n| extend uniquePidkeys=strcat(toint(ProcessId),'-',BackendStartTime)\r\n| project uniquePidkeys,ProcessId\r\n| serialize Rank = row_number()\r\n| project value = uniquePidkeys, label = strcat('🌐 ', toint(ProcessId)), selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions  rank query"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n|  distinct TimeGenerated,ProcessId,BackendStartTime,BackendType,State,CollectionTime,QueryStartTime,TransactionStartTime,StateChangeTime,DatabaseId,DatabaseName,UserId,ClientIpAddress\r\n| extend uniquePidkeys=strcat(ProcessId,'-',BackendStartTime)\r\n| where uniquePidkeys =='{SessionPid}'\r\n| extend Connection_Duration=iff(CollectionTime-BackendStartTime<time(00:00:00.00),0, datetime_diff('millisecond',CollectionTime,BackendStartTime))\r\n| extend StateLastChanged_ms=iff(CollectionTime-StateChangeTime<time(00:00:00.00),0, datetime_diff('millisecond',CollectionTime,StateChangeTime))\r\n| extend Xact_duration_ms=iff(CollectionTime-TransactionStartTime<time(00:00:00.00), datetime_diff('millisecond',TransactionStartTime,CollectionTime), datetime_diff('millisecond',CollectionTime,TransactionStartTime))\r\n| extend Query_duration_ms=iff(CollectionTime-QueryStartTime<time(00:00:00.00),datetime_diff('millisecond',TransactionStartTime,CollectionTime), datetime_diff('millisecond',CollectionTime,QueryStartTime))\r\n| extend dummy_row=1\r\n| summarize max(Connection_Duration), max(Query_duration_ms), max(Xact_duration_ms),sum(dummy_row)  by ProcessId,BackendStartTime, DatabaseId, DatabaseName, UserId, ClientIpAddress, BackendType\r\n| project ProcessId,BackendType, DatabaseId, DatabaseName, UserId, ClientIpAddress,BackendStartTime,TotalConnectionDuration=max_Connection_Duration, LongestTransactionDuration=max_Xact_duration_ms,LongestQueryDuration=max_Query_duration_ms, SampledDatapointsCounter=sum_dummy_row",
        "size": 4,
        "title": "Summary as Of Time - {GlobalEndTime} UTC",
        "noDataMessage": "No PIDs data was found for the selected time range. Select a wider time range",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Backend_start",
              "formatter": 6
            },
            {
              "columnMatch": "TotalConnectionDuration",
              "formatter": 1,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestTransactionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestQueryDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ]
        },
        "sortBy": [],
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Pid",
            "formatter": 1
          },
          "subtitleContent": {
            "columnMatch": "Backend_start",
            "formatter": 6,
            "dateFormat": {
              "showUtcTime": null,
              "formatName": "fullDateTimePattern"
            }
          },
          "leftContent": {
            "columnMatch": "Database_name",
            "formatter": 1
          },
          "showBorder": false
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Backend_start",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Pid",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions rollup query"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where UserId != 10\r\n| where isnotempty(DatabaseId) and DatabaseName !in('azure_sys','azure_maintenance')\r\n| distinct TimeGenerated, ProcessId, BackendStartTime,State\r\n    | extend uniquePidkeys=strcat(ProcessId,'-',BackendStartTime)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n| extend workingState=iff(State in ('active','idle','idle in transaction','idle in transaction (aborted)'),State,'Other')\r\n| summarize count() by State=workingState",
        "size": 4,
        "title": "Overall State of the PID for the Period. Data is sampled each 5 minutes",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "piechart",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Backend_start",
              "formatter": 6
            },
            {
              "columnMatch": "TotalConnectionDuration",
              "formatter": 1,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestTransactionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestQueryDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ]
        },
        "sortBy": [],
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Pid",
            "formatter": 1
          },
          "subtitleContent": {
            "columnMatch": "Backend_start",
            "formatter": 6,
            "dateFormat": {
              "showUtcTime": null,
              "formatName": "fullDateTimePattern"
            }
          },
          "leftContent": {
            "columnMatch": "Database_name",
            "formatter": 1
          },
          "showBorder": false
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Backend_start",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Pid",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "customWidth": "50",
      "name": "high cpu longsessions history query"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where UserId != 10\r\n| where isnotempty(DatabaseId) and DatabaseName !in('azure_sys','azure_maintenance')\r\n| distinct TimeGenerated, ProcessId, BackendStartTime,State,WaitEventType,WaitEvent\r\n    | extend uniquePidkeys=strcat(ProcessId,'-',BackendStartTime)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n|  summarize count() by WaitEventType,WaitEvent\r\n|project iff(isempty(WaitEventType),'No Waits',strcat(WaitEventType,':',WaitEvent)),count_",
        "size": 4,
        "title": "Overall Wait Events of the PID for the Period. Data is sampled each 5 minutes",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "piechart",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Backend_start",
              "formatter": 6
            },
            {
              "columnMatch": "TotalConnectionDuration",
              "formatter": 1,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestTransactionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestQueryDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ]
        },
        "sortBy": [],
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Pid",
            "formatter": 1
          },
          "subtitleContent": {
            "columnMatch": "Backend_start",
            "formatter": 6,
            "dateFormat": {
              "showUtcTime": null,
              "formatName": "fullDateTimePattern"
            }
          },
          "leftContent": {
            "columnMatch": "Database_name",
            "formatter": 1
          },
          "showBorder": false
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Backend_start",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Pid",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "customWidth": "50",
      "name": "qhigh cpu longsessions waitevents"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where UserId != 10\r\n| where isnotempty(DatabaseId) and DatabaseName !in('azure_sys','azure_maintenance')\r\n| distinct TimeGenerated,ProcessId, CollectionTime, ApplicationName , State, WaitEventType , WaitEvent , TransactionId , OldestTransactionId,BackendStartTime,StateChangeTime,TransactionStartTime,QueryStartTime\r\n    | extend uniquePidkeys=strcat(ProcessId,'-',BackendStartTime)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n| extend Connection_Duration=iff(CollectionTime-BackendStartTime<time(00:00:00.00),datetime_diff('second',BackendStartTime,CollectionTime), datetime_diff('second',CollectionTime,BackendStartTime))\r\n| extend StateLastChanged_ms=iff(CollectionTime-StateChangeTime<time(00:00:00.00),datetime_diff('millisecond',StateChangeTime,CollectionTime), datetime_diff('millisecond',CollectionTime,StateChangeTime))\r\n| extend Xact_duration_ms=iff(CollectionTime-TransactionStartTime<time(00:00:00.00),datetime_diff('millisecond',TransactionStartTime,CollectionTime), datetime_diff('millisecond',CollectionTime,TransactionStartTime))\r\n| extend Query_duration_ms=iff(CollectionTime-QueryStartTime<time(00:00:00.00),datetime_diff('millisecond',QueryStartTime,CollectionTime), datetime_diff('millisecond',CollectionTime,QueryStartTime))\r\n| order by Connection_Duration asc \r\n| serialize \r\n| extend rn=row_number()\r\n| extend prev_Application=(prev(ApplicationName,1))\r\n| extend prev_State=(prev(State,1))\r\n| extend prev_Waitevtype=(prev(WaitEventType,1))\r\n| extend prev_Waitev=(prev(WaitEvent,1))\r\n| extend prev_xid=(prev(TransactionId,1))\r\n| extend prev_xmin=(prev(OldestTransactionId,1))\r\n| extend isApp_change=iff( rn>1 and ApplicationName != prev_Application,1,0)\r\n| extend isState_change=iff( rn>1 and State != prev_State,1,0)\r\n| extend isWaitevtype_change=iff( rn>1 and WaitEventType != prev_Waitevtype,1,0)\r\n| extend isWaitev_change=iff( rn>1 and WaitEvent != prev_Waitev,1,0)\r\n| extend isxid_change=iff( rn>1 and TransactionId != prev_xid,1,0)\r\n| extend isxmin_change=iff( rn>1 and OldestTransactionId != prev_xmin,1,0)\r\n| extend breakPoint=iff (isApp_change>0 or isState_change>0 or isWaitevtype_change>0 or isWaitev_change>0 or isxid_change>0 or isxmin_change>0, 0, rn)\r\n| project CollectionTime,ProcessId,ApplicationName,Connection_Duration, State, prev_State, WaitEvent, prev_Waitev, WaitEventType, prev_Waitevtype, rn, breakPoint,TransactionId , OldestTransactionId,Xact_duration_ms,StateLastChanged_ms\r\n| scan with_match_id=change_id declare (TheRank: long) with \r\n(\r\n    step buildRank: true => TheRank = iff(isnull(buildRank.TheRank), rn, buildRank.TheRank);\r\n    step endRank output=none: breakPoint==0;\r\n)\r\n| summarize min(Connection_Duration),max(Connection_Duration),min(CollectionTime),max(CollectionTime), SampledCounter=count(), max(Xact_duration_ms), avg(Xact_duration_ms), max(StateLastChanged_ms)  by change_id, ApplicationName, State,WaitEvent,WaitEventType,ProcessId, TransactionId , OldestTransactionId\r\n| extend WaitEvent=iff(isempty(WaitEventType),'No Waits',strcat(WaitEventType,':',WaitEvent))\r\n| project  ProcessId, FromTime=min_CollectionTime, ToTime=max_CollectionTime, \r\nFromConnectionStart=min_Connection_Duration,//, EndFromConnectionStart=max_Connection_Duration, \r\nApplicationName, State,WaitEvent,TransactionId, OldestTransactionId,MaxTransactionTime=max_Xact_duration_ms,//AvgTransactionTime=iff(isnan(avg_Xact_duration_ms ),'',tostring(toint(avg_Xact_duration_ms))),MaxLastStateChanged=max_StateLastChanged_ms\r\n SampledCounter",
        "size": 0,
        "title": "Full History of the PID for the Selected TimeRange",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "FromTime",
              "formatter": 6
            },
            {
              "columnMatch": "ToTime",
              "formatter": 6
            },
            {
              "columnMatch": "FromConnectionStart",
              "formatter": 19,
              "formatOptions": {
                "palette": "blue",
                "timelineSettings": {
                  "timelineStartColumn": "FromConnectionStart"
                }
              },
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxTransactionTime",
              "formatter": 1,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgTransactionTime",
              "formatter": 1,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "FromConnectionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "ToConnectionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Backend_start",
              "formatter": 6
            }
          ],
          "rowLimit": 10000,
          "filter": true
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions fullhistory query"
    },
    {
      "type": 1,
      "content": {
        "json": "**Recommendations**\r\n\r\n* As a long term approach consider tuning queries identified from the above PIDs using explain analyze.\r\nMore information on EXPLAIN command can be found here https://www.postgresql.org/docs/current/sql-explain.html\r\n\r\n\r\n* As a short term option you can terminate or cancel the sessions by executing below commands:\r\n\r\nFrom the PIDs retrieved above execute the below query on the server to terminate the session:\r\n\r\n\tSELECT pg_terminate_backend(<pid>);\r\n\r\nYou could also cancel the running queries by executing the below query:\r\n\r\n\tSelect pg_cancel_backend(<pid>); \r\n\r\n* Sessions that run for a prolonged period of time can use up a significant amount of CPU. Therefore, it is recommended to configure the server parameters such as `statement_timeout` (in PG14, `idle_session_timeout`) or `idle_in_transaction_session_timeout` to terminate such long running sessions. This will prevent unnecessary consumption of system resources and help maintain server performance.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "existsLongRunningTransactionsData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "longtransactions"
        }
      ],
      "name": "high cpu longsessions tuning reco"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The selected window does not contain any data in the telemetry. To configure logging and address this issue, please refer to the error message located at the top of the troubleshooting guide.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": ""
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        },
        {
          "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high cpu longsessions lana"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. Kindly allow 15 minutes to 30 minutes for the telemetry data to become visible.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": ""
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        },
        {
          "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high cpu longsessions layes"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. Kindly allow 15 minutes to 30 minutes for the telemetry data to become visible.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs layes "
    },
    {
      "type": 1,
      "content": {
        "json": "#### Query Store is not enabled on the server. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high cpu qs layes  - Copy"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTimeConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "phigh cpu qs maxcount"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs time interval"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "cb78e5e9-2ef1-4f4c-832f-6ddc98ae5c6f",
            "cellValue": "connection-tab-3",
            "linkTarget": "parameter",
            "linkLabel": "Top Slow Queries by Mean Time",
            "subTarget": "TT",
            "style": "link"
          },
          {
            "id": "ce889247-43cd-4b4b-affb-b0753d5173ee",
            "cellValue": "connection-tab-3",
            "linkTarget": "parameter",
            "linkLabel": "Top Queries by Calls ",
            "subTarget": "TPS",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs tab"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(MeanExecDurationMs) by QueryId\r\n| top {TopTimeConsumingQueries} by max_MeanExecDurationMs desc\r\n| project QueryId;\r\n{QueryStoreTable} \r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user  \r\n| where QueryId in (TopQueryIDs)\r\n |distinct EndTime,MeanExecDurationMs,QueryId\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(EndTime, 1m)\r\n//| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), graphgrain)\r\n| make-series maxiotime=max(MeanExecDurationMs) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by QueryId=strcat('QueryId ',QueryId)\r\n",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopTimeConsumingQueries} Slow Queries From Query Store. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data found during the window selected",
        "noDataMessageStyle": 4,
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TT"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs chart"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the total execution time of the server's {TopTimeConsumingQueries} slowest queries. ** \r\n\r\n\r\nNon performant queries or queries that take time to complete might be the ones which consume CPU. Details on these QueryIds are shown below. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TT"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs chart info"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Calls) by QueryId\r\n| top {TopTimeConsumingQueries} by max_Calls desc\r\n| project QueryId;\r\n{QueryStoreTable} \r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n | where QueryId in (TopQueryIDs)\r\n |distinct EndTime,Calls,QueryId\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(EndTime, graphgrain)\r\n//| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), graphgrain)\r\n| make-series maxiotime=sum(Calls) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by QueryId=strcat('QueryId ',QueryId)\r\n",
        "size": 0,
        "title": "Top {TopTimeConsumingQueries} Queries by Calls. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data found during the window selected",
        "noDataMessageStyle": 4,
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs rollup"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the top {TopTimeConsumingQueries} queries by number of calls. ** \r\n\r\n\r\nQueries with high execution counts might be the ones which consume CPU. Details on these QueryIds are shown below. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs rollup info"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByTime",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(MeanExecDurationMs) by QueryId\r\n| top {TopTimeConsumingQueries} by max_MeanExecDurationMs desc\r\n| project QueryId\r\n| serialize Rank = row_number()\r\n| project value = QueryId, label = QueryId, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TT"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs rank query"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "a6fd4d67-8fe0-4d80-a680-a7aadf93d2ed",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsbyCalls",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Calls) by QueryId \r\n    | top {TopTimeConsumingQueries} by max_Calls desc\r\n| project QueryId\r\n| serialize Rank = row_number()\r\n| project value = QueryId, label = QueryId, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs maxcalls snaphot"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| where QueryId == {QueryIdsByTime}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,RuntimeStatsEntryId \r\n| summarize MeanExecDurationMs=avg(MeanExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs), MinExecutionTime=min(MinExecDurationMs), TotalCalls=sum(Calls) by QueryId,QueryType\r\n\r\n",
        "size": 4,
        "title": "QueryID {QueryIdsByTime} Summary in Selected TimeRange",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "MeanExecDurationMs",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000,
          "labelSettings": [
            {
              "columnId": "MeanExecDurationMs",
              "label": "MeanExecutionTime"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TT"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs maxcalls rollup"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| where QueryId == {QueryIdsbyCalls}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,RuntimeStatsEntryId\r\n| summarize MeanExecutionTime=avg(MeanExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs), MinExecutionTime=min(MinExecDurationMs), TotalCalls=sum(Calls) by QueryId,QueryType\r\n",
        "size": 4,
        "title": "QueryID {QueryIdsbyCalls} Summary in Selected TimeRange",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs maxcalls sumup query"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet databasename = \r\n{SessionsTable}\r\n|distinct DatabaseName,DatabaseId;\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10   \r\n| where QueryId == {QueryIdsByTime}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,Rows,TotalExecDurationMs,StartTime,EndTime,PlanId,DatabaseId,UserId,RuntimeStatsEntryId      \r\n| summarize WindowStart=min(StartTime), WindowEnd=max(EndTime),MeanRows=sum(Rows)/sum(Calls),MeanExecutionTime=avg(MeanExecDurationMs),MinExecutionTime=min(MinExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs),TotalCalls=sum(Calls),TotalExecutionTime=sum(TotalExecDurationMs),TotalRows=sum(Rows) by bin(EndTime, graphgrain),QueryId,QueryType,PlanId,DatabaseId,UserId    \r\n| join kind=leftouter databasename on $left.DatabaseId == $right.DatabaseId\r\n| project QueryId, QueryType, PlanId,DatabaseName = iff(isempty(DatabaseName),strcat(\"oid::\",DatabaseId), DatabaseName),UserId,WindowStart, WindowEnd, MeanRows,MeanExecutionTime,MinExecutionTime,MaxExecutionTime,TotalCalls, TotalExecutionTime, TotalRows\r\n|order by WindowStart asc\r\n\r\n\r\n",
        "size": 0,
        "title": "QueryID {QueryIdsByTime} Runtime Statistics Split by Time Buckets of {ChartGrain} Each",
        "noDataMessage": "No data available during the period selected",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "EndTime",
              "formatter": 5
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "MeanRows",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Dbid",
              "formatter": 1
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Total_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "PreciseTimeStamp",
              "formatter": 6
            },
            {
              "columnMatch": "Min_time",
              "formatter": 5
            },
            {
              "columnMatch": "Max_time",
              "formatter": 5
            },
            {
              "columnMatch": "Stddev_time",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TT"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs maxcalls history"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet databasename = \r\n{SessionsTable}\r\n|distinct DatabaseName,DatabaseId;\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n|  where UserId != 10   \r\n| where QueryId == {QueryIdsbyCalls}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,Rows,TotalExecDurationMs,StartTime,EndTime,PlanId,DatabaseId,UserId,RuntimeStatsEntryId\r\n| summarize WindowStart=min(StartTime), WindowEnd=max(EndTime),MeanRows=sum(Rows)/sum(Calls),MeanExecutionTime=avg(MeanExecDurationMs),MinExecutionTime=min(MinExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs),TotalCalls=sum(Calls),TotalExecutionTime=sum(TotalExecDurationMs),TotalRows=sum(Rows) by bin(EndTime, graphgrain),QueryId,QueryType,PlanId,DatabaseId,UserId    \r\n| join kind=leftouter databasename on $left.DatabaseId == $right.DatabaseId\r\n| project QueryId, QueryType, PlanId,DatabaseName = iff(isempty(DatabaseName),strcat(\"oid::\",DatabaseId), DatabaseName),UserId,WindowStart, WindowEnd, MeanRows,MeanExecutionTime,MinExecutionTime,MaxExecutionTime,TotalCalls, TotalExecutionTime, TotalRows\r\n|order by WindowStart asc\r\n\r\n\r\n",
        "size": 0,
        "title": "QueryID {QueryIdsbyCalls} Runtime Statistics Split by Time Buckets of {ChartGrain} Each",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "EndTime",
              "formatter": 5
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "Rows",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Dbid",
              "formatter": 1
            },
            {
              "columnMatch": "Userid",
              "formatter": 1
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "Total_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "PreciseTimeStamp",
              "formatter": 6
            },
            {
              "columnMatch": "Min_time",
              "formatter": 5
            },
            {
              "columnMatch": "Max_time",
              "formatter": 5
            },
            {
              "columnMatch": "Stddev_time",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs maxcalls all query"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific QueryId?**\r\n\r\nTo retrieve the Query Text for a specific QueryId, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the QueryId.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the Query Text for a given QueryId, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs maxcalls querytext info"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(MeanExecDurationMs) by QueryId\r\n| top {TopTimeConsumingQueries} by max_MeanExecDurationMs desc\r\n| extend GetQueryText = strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",QueryId,\";\")\r\n| project GetQueryText",
        "size": 1,
        "title": "Get query_text from QueryId",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TT"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs maxcalls querytext query"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Calls) by QueryId\r\n| top {TopTimeConsumingQueries} by max_Calls desc\r\n    | extend GetQueryText = strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",QueryId,\";\")\r\n    | project GetQueryText",
        "size": 1,
        "title": "Get query_text from QueryId",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab-3",
          "comparison": "isEqualTo",
          "value": "TPS"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs maxtime query text query"
    },
    {
      "type": 1,
      "content": {
        "json": "**General Query Recommendations To Tune High CPU Consuming Queries**\r\n\r\n1) Tune queries identified above using explain analyze. More information on EXPLAIN command [can be found here](https://www.postgresql.org/docs/current/sql-explain.html). \r\n\r\n2) High bloat on the tables can also lead to considerable IO & CPU usage. As a one off case consider carrying manual vacuum analyze of the tables used in the slow running queries using the below command on the database:\r\n\r\n\tVacuum (analyze,verbose) <Table Name> \r\n\r\n3) Indexes & Joins: Consider creating indexes and reduce the joins in the query if applicable.\r\n\r\n4) Consider tuning server parameters like `max_connections`, `max_parallel_workers_per_gather`. Please make the changes with caution and testing as setting a very high value of both parameters could lead to out of CPU issues.\r\n\r\n5) Table design needs to considered\r\n\t* Large tables can be partitioned\r\n\t* Remove unneccesary constraints\r\n\t* Have indexes on foreign keys in child tables\r\n\t* If possible consider to denormalize the tables\r\n\t* Disable triggers during large dataloads as triggers on tables affect especially during writes\r\n\t  on the server",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighCPUQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs recomendation"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store's capabilities are not functioning on the replica server.\r\n#### After analysis, we have determined that this server is a replica server, which means that the query store functionality is not available. However, there are alternative methods you can use to monitor long-running sessions on the replica server.\r\n- To help pinpoint possible performance issues, a recommended solution is to adjust the `log_min_duration_statement` parameter to the desired threshold and properly configure `log_line_prefix` to include the relevant details such as **%t-%c user=%u,db=%d,app=%a,client=%h**. This will enable the logging of slow queries in the PostgreSQL logs. By doing so, you can easily access the top queries and review the slow queries that may require optimization.\r\n- Another option is to configure `pg_stat_statements`, which allows you to view information about your query performance on the replica server. However, Please keep in mind that you need to execute the `CREATE EXTENSION pg_stat_statements` command on the primary server database. For more informaiton, please visit [PostgreSQL Documentation](https://www.postgresql.org/docs/current/pgstatstatements.html).\r\n- You can also monitor the ongoing workload on the replica server by using the `pg_stat_activity` catalog view.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "hightimequeries"
        }
      ],
      "name": "high cpu qs read replica"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsConnectionDataExists",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "high cpu connections lno"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsConnectionDataExists",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "No"
              }
            ],
            "name": "high cpu connections layno replica"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let graph_grain=iff({TimeRange:grain}<5m,5m, {TimeRange:grain});\r\nlet Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('template1','template0', 'azure_maintenance','azure_sys')\r\n| where State_s !=\"\"\r\n| distinct TimeGenerated,Backend_start_t,Pid_d,State_s\r\n|summarize count_state=count() by bin(TimeGenerated,5m),State_s\r\n| make-series max_count= max(count_state) default=0 on TimeGenerated from Start_Time to End_Time step graph_grain by State_s\r\n|render timechart ",
              "size": 0,
              "aggregation": 2,
              "showAnnotations": true,
              "title": "Total Connection summary by State. Data is plotted at a granularity of {ChartGrainMin5}",
              "noDataMessage": "No data found in given time range",
              "noDataMessageStyle": 4,
              "timeBrushParameterName": "TimeRange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "timechart",
              "chartSettings": {
                "showLegend": true
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsConnectionDataExists",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "high cpu connections summary chart"
          },
          {
            "type": 1,
            "content": {
              "json": "### **Dealing with High Number of Connections**\r\n\r\nIf you are experiencing a high number of connections on your PostgreSQL database, consider following these recommendations:\r\n\r\n\r\n#### **Adjusting Server Parameters**\r\n\r\nSet the `statement_timeout`, `idle_in_transaction_session_timeout` and `idle_session_timeout`(starting from PG14) server parameters to appropriate values. These can help manage connections and prevent idle connections from consuming resources.\r\n\r\nFor more best practices on connection handling, refer to this resource: [Best Practices](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/connection-handling-best-practice-with-postgresql/ba-p/790883).\r\n\r\n#### **Consider Connection Pooling**\r\n\r\nIn situations where there are a lot of idle connections or connections that are consuming CPU resources, consider using a connection pooler like PgBouncer.\r\n\r\nFor more details on PgBouncer and how it works, check out this resource: [Connection Pooler](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/not-all-postgres-connection-pooling-is-equal/ba-p/825717).\r\n\r\n##### **Setting Up PgBouncer**\r\n\r\nIf you're using Azure Database for Flexible Server, you can take advantage of PgBouncer as a built-in connection pooling solution. For more information on how to set it up, see this resource: [PgBouncer - Azure Database for PostgreSQL Flexible Server](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-pgbouncer).\r\n\r\n##### **Recommended Settings for PgBouncer on Flexible Server**\r\n\r\n##### **Pool Mode:**\r\n- `Transaction` pool mode is generally considered to be the most suitable mode for higher TPS scenarios, as it provides a new connection for each transaction and releases the connection immediately after the transaction is complete. This approach can help reduce connection overhead and improve performance, especially for systems with a high number of short-lived transactions.\r\n- In `session` pool mode, a client is assigned a server connection for the entire duration of its connection, and the connection is returned to the pool when the client disconnects. This approach can help reduce the overhead of establishing new connections, which can be beneficial for systems with a high number of relatively long-lived connections. Also, This mode supports all PostgreSQL features.\r\n\r\n**Pool Size:** Tune the `default_pool_size` based on your workload. Note that the `default_pool_size` is per application/database.\r\n\r\n**Timeouts:** To ensure that idle connections are closed and long running queries are terminated, set the `server_idle_timeout` and `query_timeout` parameters according to your workload needs.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsConnectionDataExists",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "high cpu connections reco"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionstate"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        }
      ],
      "name": "high cpu connections conn tab"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "ce889247-43cd-4b4b-affb-b0753d5173ee",
            "cellValue": "connection-tab",
            "linkTarget": "parameter",
            "linkLabel": "Connections by State",
            "subTarget": "connectionstate",
            "style": "link"
          },
          {
            "id": "cb78e5e9-2ef1-4f4c-832f-6ddc98ae5c6f",
            "cellValue": "connection-tab",
            "linkTarget": "parameter",
            "linkLabel": "Connections by Duration",
            "subTarget": "connectionsduration",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "cputab",
        "comparison": "isEqualTo",
        "value": "connections"
      },
      "name": "high cpu connections - links"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "IsConnectionDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high cpu connections time interval"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. Kindly allow 15 minutes to 30 minutes for the telemetry data to become visible.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsConnectionDataExists",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionstate"
        }
      ],
      "name": "high cpu connections nodata"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The selected window does not contain any data in the telemetry. To configure logging and address this issue, please refer to the error message located at the top of the troubleshooting guide.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionstate"
        },
        {
          "parameterName": "IsConnectionDataExists",
          "comparison": "isEqualTo",
          "value": ""
        }
      ],
      "name": "high cpu connections connectionsno"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. Kindly allow 15 minutes to 30 minutes for the telemetry data to become visible.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionstate"
        },
        {
          "parameterName": "IsConnectionDataExists",
          "comparison": "isEqualTo",
          "value": ""
        }
      ],
      "name": "high cpu connections layes"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graph_grain=iff({TimeRange:grain}<5m,5m, {TimeRange:grain});\r\nlet Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where UserId != 10\r\n| where isnotempty(DatabaseId) and DatabaseName !in('template1','template0', 'azure_maintenance','azure_sys')\r\n| where State !=\"\"\r\n| distinct TimeGenerated,BackendStartTime,ProcessId,State\r\n|summarize count_state=count() by bin(TimeGenerated,1m),State\r\n| make-series max_count= max(count_state) default=0 on TimeGenerated from Start_Time to End_Time step graph_grain by State\r\n//|render timechart ",
        "size": 0,
        "aggregation": 2,
        "showAnnotations": true,
        "title": "Total Connection Summary by State",
        "noDataMessage": "No data found in given time range",
        "noDataMessageStyle": 4,
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "timechart",
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsConnectionDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionstate"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        }
      ],
      "name": "high cpu connections consummary by state"
    },
    {
      "type": 1,
      "content": {
        "json": "### **Dealing with High Number of Connections**\r\n\r\nIf you are experiencing a high number of connections on your PostgreSQL database, consider following these recommendations:\r\n\r\n\r\n#### **Adjusting Server Parameters**\r\n\r\nSet the `statement_timeout`, `idle_in_transaction_session_timeout` and `idle_session_timeout`(starting from PG14) server parameters to appropriate values. These can help manage connections and prevent idle connections from consuming resources.\r\n\r\nFor more best practices on connection handling, refer to this resource: [Best Practices](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/connection-handling-best-practice-with-postgresql/ba-p/790883).\r\n\r\n#### **Consider Connection Pooling**\r\n\r\nIn situations where there are a lot of idle connections or connections that are consuming CPU resources, consider using a connection pooler like PgBouncer.\r\n\r\nFor more details on PgBouncer and how it works, check out this resource: [Connection Pooler](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/not-all-postgres-connection-pooling-is-equal/ba-p/825717).\r\n\r\n##### **Setting Up PgBouncer**\r\n\r\nIf you're using Azure Database for Flexible Server, you can take advantage of PgBouncer as a built-in connection pooling solution. For more information on how to set it up, see this resource: [PgBouncer - Azure Database for PostgreSQL Flexible Server](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-pgbouncer).\r\n\r\n##### **Recommended Settings for PgBouncer on Flexible Server**\r\n\r\n##### **Pool Mode:**\r\n- `Transaction` pool mode is generally considered to be the most suitable mode for higher TPS scenarios, as it provides a new connection for each transaction and releases the connection immediately after the transaction is complete. This approach can help reduce connection overhead and improve performance, especially for systems with a high number of short-lived transactions.\r\n- In `session` pool mode, a client is assigned a server connection for the entire duration of its connection, and the connection is returned to the pool when the client disconnects. This approach can help reduce the overhead of establishing new connections, which can be beneficial for systems with a high number of relatively long-lived connections. Also, this mode supports all PostgreSQL features.\r\n\r\n**Pool Size:** Tune the `default_pool_size` based on your workload. Note that the `default_pool_size` is per application/database.\r\n\r\n**Timeouts:** To ensure that idle connections are closed and long running queries are terminated, set the `server_idle_timeout` and `query_timeout` parameters according to your workload needs.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsConnectionDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionstate"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        }
      ],
      "name": "high cpu connections conbystate reco"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. Kindly allow 15 minutes to 30 minutes for the telemetry data to become visible.\r\n\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLServerLogsDataExists",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionsduration"
        }
      ],
      "name": "high cpu connections conduration lano"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The selected window does not contain any data in the telemetry. To configure logging and address this issue, please refer to the error message located at the top of the troubleshooting guide.\r\n\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLServerLogsDataExists",
          "comparison": "isEqualTo",
          "value": ""
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionsduration"
        },
        {
          "parameterName": "IsPostgreSQLLogsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "high cpu connections conduration launknown"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server in question. Kindly allow 15 minutes to 30 minutes for the telemetry data to become visible.\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLServerLogsDataExists",
          "comparison": "isEqualTo",
          "value": ""
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionsduration"
        },
        {
          "parameterName": "IsPostgreSQLLogsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "thigh cpu connections conduration layes"
    },
    {
      "type": 1,
      "content": {
        "json": "This chart shows the count of short connections (less than 1 second), normal connections (between 1 second and 20 minutes), and long connections (greater than 20 minutes), which were calculated using disconnection messages extracted from PostgreSQL logs.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLServerLogsDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsConnectionDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionsduration"
        }
      ],
      "name": "high cpu connections conduration info"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Message contains \"disconnection\"\r\n| distinct TimeGenerated,Timestamp,Message\r\n| extend DisconnectTime=Timestamp\r\n| extend allmatches=extract_all(@'session.time:(.+)user=(.+)database=(.+)host=(.+).port', Message)\r\n| extend duration=totime(allmatches[0][0])\r\n| extend user=trim(@\" \",tostring(allmatches[0][1]) )\r\n| extend database=tostring(allmatches[0][2])\r\n| extend IP=tostring(allmatches[0][3])\r\n| where  user !in ('azuresu','replication')\r\n| extend ts = totimespan(duration)\r\n| extend DurationInSeconds = ts / 1s\r\n| extend ConnType=iff(    DurationInSeconds <= 60, 'Short-Lived Connection' ,     iff(DurationInSeconds > 60 and DurationInSeconds < 1200, 'Normal-Lived Connection','Long-Lived Connection'))\r\n| make-series Connections=count() default=0 on DisconnectTime from Start_Time to End_Time step {TimeRange:grain} by ConnType\r\n",
        "size": 0,
        "aggregation": 2,
        "title": "Connections Summary by Duration",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "timechart",
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLServerLogsDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "ConnectionDurationData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionsduration"
        }
      ],
      "name": "high cpu connections conduration query chart"
    },
    {
      "type": 1,
      "content": {
        "json": "### **Dealing with High Number of Connections**\r\n\r\nIf you are experiencing a high number of connections on your PostgreSQL database, consider following these recommendations:\r\n\r\n\r\n#### **Adjusting Server Parameters**\r\n\r\nSet the `statement_timeout`, `idle_in_transaction_session_timeout` and `idle_session_timeout`(starting from PG14) server parameters to appropriate values. These can help manage connections and prevent idle connections from consuming resources.\r\n\r\nFor more best practices on connection handling, refer to this resource: [Best Practices](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/connection-handling-best-practice-with-postgresql/ba-p/790883).\r\n\r\n#### **Consider Connection Pooling**\r\n\r\nIn situations where there are a lot of idle connections or connections that are consuming CPU resources, consider using a connection pooler like PgBouncer.\r\n\r\nFor more details on PgBouncer and how it works, check out this resource: [Connection Pooler](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/not-all-postgres-connection-pooling-is-equal/ba-p/825717).\r\n\r\n##### **Setting Up PgBouncer**\r\n\r\nIf you're using Azure Database for Flexible Server, you can take advantage of PgBouncer as a built-in connection pooling solution. For more information on how to set it up, see this resource: [PgBouncer - Azure Database for PostgreSQL Flexible Server](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-pgbouncer).\r\n\r\n##### **Recommended Settings for PgBouncer on Flexible Server**\r\n\r\n##### **Pool Mode:**\r\n- `Transaction` pool mode is generally considered to be the most suitable mode for higher TPS scenarios, as it provides a new connection for each transaction and releases the connection immediately after the transaction is complete. This approach can help reduce connection overhead and improve performance, especially for systems with a high number of short-lived transactions.\r\n- In `session` pool mode, a client is assigned a server connection for the entire duration of its connection, and the connection is returned to the pool when the client disconnects. This approach can help reduce the overhead of establishing new connections, which can be beneficial for systems with a high number of relatively long-lived connections. Also, This mode supports all PostgreSQL features.\r\n\r\n**Pool Size:** Tune the `default_pool_size` based on your workload. Note that the `default_pool_size` is per application/database.\r\n\r\n**Timeouts:** To ensure that idle connections are closed and long running queries are terminated, set the `server_idle_timeout` and `query_timeout` parameters according to your workload needs.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLServerLogsDataExists",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "cputab",
          "comparison": "isEqualTo",
          "value": "connections"
        },
        {
          "parameterName": "connection-tab",
          "comparison": "isEqualTo",
          "value": "connectionsduration"
        }
      ],
      "name": "high cpu connections conduration recofinal",
      "styleSettings": {
        "padding": "0px"
      }
    }
  ],
  "fallbackResourceIds": [],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}