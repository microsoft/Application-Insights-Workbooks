{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "9ebd8e9a-5e9c-496a-bdb1-e41b9faaf9ad",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "TimeRange (Local Time)"
          },
          {
            "id": "6573f642-b4c6-4a56-8bdd-8ef451b7bdf5",
            "version": "KqlParameterItem/1.0",
            "name": "Resource",
            "type": 5,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false,
              "componentIdOnly": true
            }
          },
          {
            "id": "09ae6e10-24ff-4eb0-964c-78c3bebf6b0b",
            "version": "KqlParameterItem/1.0",
            "name": "MIN_TIME_WINDOW_SEC",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "3600"
                }
              }
            ]
          },
          {
            "id": "089a8ccf-b6cb-4f68-adff-2bef115928ae",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics | where Category =='PostgreSQLFlexQueryStoreRuntime' | project TimeGenerated, Resource, RuntimeStatsEntryId = tolong(     iff(isnotempty(AdditionalFields.Runtime_stats_entry_id), AdditionalFields.Runtime_stats_entry_id,         column_ifexists('Runtime_stats_entry_id_d',             column_ifexists('Runtime_stats_entry_id',                 column_ifexists('Runtime_stats_entry_id_s', \"\")             )         )     ) ), UserId = toint(     iff(isnotempty(AdditionalFields.Userid), AdditionalFields.Userid,         column_ifexists('Userid_d',             column_ifexists('Userid',                 column_ifexists('Userid_s', \"\")             )         )     ) ), DatabaseId = toint(     iff(isnotempty(AdditionalFields.Dbid), AdditionalFields.Dbid,         column_ifexists('Dbid_d',             column_ifexists('Dbid',                 column_ifexists('Dbid_s', \"\")             )         )     ) ), QueryId = tolong(     iff(isnotempty(AdditionalFields.Queryid), AdditionalFields.Queryid,         column_ifexists('Queryid_d',             column_ifexists('Queryid',                 column_ifexists('Queryid_s', \"\")             )         )     ) ), PlanId = tolong(     iff(isnotempty(AdditionalFields.Plan_id), AdditionalFields.Plan_id,         column_ifexists('Plan_id_d',             column_ifexists('Plan_id_s',                 column_ifexists('Plan_id', \"\")             )         )     ) ), StartTime = todatetime(     iff(isnotempty(AdditionalFields.Start_time), AdditionalFields.Start_time,         column_ifexists('Start_time_t',             column_ifexists('Start_time',                 column_ifexists('Start_time_s', \"\")             )         )     ) ), EndTime = todatetime(     iff(isnotempty(AdditionalFields.End_time), AdditionalFields.End_time,         column_ifexists('End_time_t',             column_ifexists('End_time',                 column_ifexists('End_time_s', \"\")             )         )     ) ), Calls = tolong(     iff(isnotempty(AdditionalFields.Calls), AdditionalFields.Calls,         column_ifexists('Calls_d',             column_ifexists('Calls',                 column_ifexists('Calls_s', \"\")             )         )     ) ), TotalExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Total_time), AdditionalFields.Total_time,         column_ifexists('Total_time_d',             column_ifexists('Total_time',                 column_ifexists('Total_time_s', \"\")             )         )     ) ), MinExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Min_time), AdditionalFields.Min_time,         column_ifexists('Min_time_d',             column_ifexists('Min_time',                 column_ifexists('Min_time_s', \"\")             )         )     ) ), MaxExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Max_time), AdditionalFields.Max_time,         column_ifexists('Max_time_d',             column_ifexists('Max_time',                 column_ifexists('Max_time_s', \"\")             )         )     ) ), MeanExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Mean_time), AdditionalFields.Mean_time,         column_ifexists('Mean_time_d',             column_ifexists('Mean_time',                 column_ifexists('Mean_time_s', \"\")             )         )     ) ), StdDevExecDurationMs = todouble(     iff(isnotempty(AdditionalFields.Stddev_time), AdditionalFields.Stddev_time,         column_ifexists('Stddev_time_d',             column_ifexists('Stddev_time',                 column_ifexists('Stddev_time_s', \"\")             )         )     ) ), Rows = tolong(     iff(isnotempty(AdditionalFields.Rows), AdditionalFields.Rows,         column_ifexists('Rows_d',             column_ifexists('Rows',                 column_ifexists('Rows_s', \"\")             )         )     ) ), SharedBlksHit = tolong(     iff(isnotempty(AdditionalFields.Shared_blks_hit), AdditionalFields.Shared_blks_hit,         column_ifexists('Shared_blks_hit_d',             column_ifexists('Shared_blks_hit',                 column_ifexists('Shared_blks_hit_s', \"\")             )         )     ) ), SharedBlksRead = tolong(     iff(isnotempty(AdditionalFields.Shared_blks_read), AdditionalFields.Shared_blks_read,         column_ifexists('Shared_blks_read_d',             column_ifexists('Shared_blks_read',                 column_ifexists('Shared_blks_read_s', \"\")             )         )     ) ), SharedBlksDirtied = tolong(     iff(isnotempty(AdditionalFields.Shared_blks_dirtied), AdditionalFields.Shared_blks_dirtied,         column_ifexists('Shared_blks_dirtied_d',             column_ifexists('Shared_blks_dirtied',                 column_ifexists('Shared_blks_dirtied_s', \"\")             )         )     ) ), SharedBlksWritten = tolong(     iff(isnotempty(AdditionalFields.Shared_blks_written), AdditionalFields.Shared_blks_written,         column_ifexists('Shared_blks_written_d',             column_ifexists('Shared_blks_written',                 column_ifexists('Shared_blks_written_s', \"\")             )         )     ) ), LocalBlksHit = tolong(     iff(isnotempty(AdditionalFields.Local_blks_hit), AdditionalFields.Local_blks_hit,         column_ifexists('Local_blks_hit_d',             column_ifexists('Local_blks_hit',                 column_ifexists('Local_blks_hit_s', \"\")             )         )     ) ), LocalBlksRead = tolong(     iff(isnotempty(AdditionalFields.Local_blks_read), AdditionalFields.Local_blks_read,         column_ifexists('Local_blks_read_d',             column_ifexists('Local_blks_read',                 column_ifexists('Local_blks_read_s', \"\")             )         )     ) ), LocalBlksDirtied = tolong(     iff(isnotempty(AdditionalFields.Local_blks_dirtied), AdditionalFields.Local_blks_dirtied,         column_ifexists('Local_blks_dirtied_d',             column_ifexists('Local_blks_dirtied',                 column_ifexists('Local_blks_dirtied_s', \"\")             )         )     ) ), LocalBlksWritten = tolong(     iff(isnotempty(AdditionalFields.Local_blks_written), AdditionalFields.Local_blks_written,         column_ifexists('Local_blks_written_d',             column_ifexists('Local_blks_written',                 column_ifexists('Local_blks_written_s', \"\")             )         )     ) ), TempBlksRead = tolong(     iff(isnotempty(AdditionalFields.Temp_blks_read), AdditionalFields.Temp_blks_read,         column_ifexists('Temp_blks_read_d',             column_ifexists('Temp_blks_read',                 column_ifexists('Temp_blks_read_s', \"\")             )         )     ) ), TempBlksWritten = tolong(     iff(isnotempty(AdditionalFields.Temp_blks_written), AdditionalFields.Temp_blks_written,         column_ifexists('Temp_blks_written_d',             column_ifexists('Temp_blks_written',                 column_ifexists('Temp_blks_written_s', \"\")             )         )     ) ), BlkReadTime = todouble(     iff(isnotempty(AdditionalFields.Blk_read_time), AdditionalFields.Blk_read_time,         column_ifexists('Blk_read_time_d',             column_ifexists('Blk_read_time',                 column_ifexists('Blk_read_time_s', \"\")             )         )     ) ), BlkWriteTime = todouble(     iff(isnotempty(AdditionalFields.Blk_write_time), AdditionalFields.Blk_write_time,         column_ifexists('Blk_write_time_d',             column_ifexists('Blk_write_time',                 column_ifexists('Blk_write_time_s', \"\")             )         )     ) ), IsSystemQuery = tobool(     iff(isnotempty(AdditionalFields.Is_system_query), AdditionalFields.Is_system_query,         column_ifexists('Is_system_query_b',             column_ifexists('Is_system_query',                 column_ifexists('Is_system_query_s', \"\")             )         )     ) ), QueryType = tostring(     iff(isnotempty(AdditionalFields.Query_type), AdditionalFields.Query_type,         column_ifexists('Query_type_s',             column_ifexists('Query_type', \"\")         )     ) )"
                }
              }
            ]
          },
          {
            "id": "0c594537-ed02-4094-98a9-3ecd2395f87b",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreWaitSampling",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics | where Category =='PostgreSQLFlexQueryStoreWaitStats' | project TimeGenerated, Resource, UserId = toint(     iff(isnotempty(AdditionalFields.Userid), AdditionalFields.Userid,         column_ifexists('Userid_d',             column_ifexists('Userid',                 column_ifexists('Userid_s', \"\")             )         )     ) ), DatabaseId = toint(     iff(isnotempty(AdditionalFields.Dbid), AdditionalFields.Dbid,         column_ifexists('Dbid_d',             column_ifexists('Dbid',                 column_ifexists('Dbid_s', \"\")             )         )     ) ), QueryId = tolong(     iff(isnotempty(AdditionalFields.Queryid), AdditionalFields.Queryid,         column_ifexists('Queryid_d',             column_ifexists('Queryid',                 column_ifexists('Queryid_s', \"\")             )         )     ) ), StartTime = todatetime(     iff(isnotempty(AdditionalFields.Start_time), AdditionalFields.Start_time,         column_ifexists('Start_time_t',             column_ifexists('Start_time',                 column_ifexists('Start_time_s', \"\")             )         )     ) ), EndTime = todatetime(     iff(isnotempty(AdditionalFields.End_time), AdditionalFields.End_time,         column_ifexists('End_time_t',             column_ifexists('End_time',                 column_ifexists('End_time_s', \"\")             )         )     ) ), EventType = tostring(     iff(isnotempty(AdditionalFields.Event_type), AdditionalFields.Event_type,         column_ifexists('Event_type_s',             column_ifexists('Event_type', \"\")         )     ) ), Event = tostring(     iff(isnotempty(AdditionalFields.Event), AdditionalFields.Event,         column_ifexists('Event_s',             column_ifexists('Event', \"\")         )     ) ), Calls = tolong(     iff(isnotempty(AdditionalFields.Calls), AdditionalFields.Calls,         column_ifexists('Calls_d',             column_ifexists('Calls',                 column_ifexists('Calls_s', \"\")             )         )     ) )"
                }
              }
            ]
          },
          {
            "id": "ae27f75f-1ada-41fc-a086-6133d9d06879",
            "version": "KqlParameterItem/1.0",
            "name": "SessionsTable",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics | where Category =='PostgreSQLFlexSessions' | project TimeGenerated, Resource, DatabaseId = toint(     iff(isnotempty(AdditionalFields.Datid), AdditionalFields.Datid,         column_ifexists('Datid_d',             column_ifexists('Datid_s',                 column_ifexists('Datid', \"\")             )         )     )     ), DatabaseName = tostring(     iff(isnotempty(AdditionalFields.Database_name), AdditionalFields.Database_name,         column_ifexists('Database_name_s',            column_ifexists('Database_name', \"\")         )     ) ), ProcessId = toint(     iff(isnotempty(AdditionalFields.Pid), AdditionalFields.Pid,         column_ifexists('Pid_d',            column_ifexists('Pid', \"\")         )     ) ), UserId = toint(     iff(isnotempty(AdditionalFields.Usesysid), AdditionalFields.Usesysid,         column_ifexists('Usesysid_d',             column_ifexists('Usesysid_s',                 column_ifexists('Usesysid', \"\")             )         )     )     ), ApplicationName = tostring(     iff(isnotempty(AdditionalFields.Application_name), AdditionalFields.Application_name,         column_ifexists('Application_name_s',            column_ifexists('Application_name', \"\")         )     ) ), ClientIpAddress = tostring(     iff(isnotempty(AdditionalFields.Client_addr), AdditionalFields.Client_addr,         column_ifexists('Client_addr_s',            column_ifexists('Client_addr', \"\")         )     ) ), State = tostring(     iff(isnotempty(AdditionalFields.State), AdditionalFields.State,         column_ifexists('State_s',            column_ifexists('State', \"\")         )     ) ), WaitEventType = tostring(     iff(isnotempty(AdditionalFields.Wait_event_type), AdditionalFields.Wait_event_type,         column_ifexists('Wait_event_type_s',            column_ifexists('Wait_event_type', \"\")         )     ) ), WaitEvent = tostring(     iff(isnotempty(AdditionalFields.Wait_event), AdditionalFields.Wait_event,         column_ifexists('Wait_event_s',            column_ifexists('Wait_event', \"\")         )     ) ), BackendStartTime = todatetime(     iff(isnotempty(AdditionalFields.Backend_start), AdditionalFields.Backend_start,         column_ifexists('Backend_start_t',             column_ifexists('Backend_start',                 column_ifexists('Backend_start_s', \"\")             )         )     ) ), TransactionStartTime = todatetime(     iff(isnotempty(AdditionalFields.Xact_start), AdditionalFields.Xact_start,         column_ifexists('Xact_start_t',             column_ifexists('Xact_start_s',                 column_ifexists('Xact_start', \"\")             )         )     ) ), QueryStartTime = todatetime(     iff(isnotempty(AdditionalFields.Query_start), AdditionalFields.Query_start,         column_ifexists('Query_start_t',             column_ifexists('Query_start_s',                 column_ifexists('Query_start', \"\")             )         )     ) ), StateChangeTime = todatetime(     iff(isnotempty(AdditionalFields.State_change), AdditionalFields.State_change,         column_ifexists('State_change_t',             column_ifexists('State_change_s',                 column_ifexists('State_change', \"\")             )         )     ) ), CollectionTime = todatetime(     iff(isnotempty(AdditionalFields.Collection_time), AdditionalFields.Collection_time,         column_ifexists('Collection_time_t',             column_ifexists('Collection_time_s',                 column_ifexists('Collection_time', \"\")             )         )     ) ), TransactionId = tolong(     iff(isnotempty(AdditionalFields.Backend_xid), AdditionalFields.Backend_xid,         column_ifexists('Backend_xid_d',             column_ifexists('Backend_xid_s',                 column_ifexists('Backend_xid', \"\")             )         )     ) ), OldestTransactionId = tolong(     iff(isnotempty(AdditionalFields.Backend_xmin), AdditionalFields.Backend_xmin,         column_ifexists('Backend_xmin_d',             column_ifexists('Backend_xmin_s',                 column_ifexists('Backend_xmin', \"\")             )         )     ) ), BackendType = tostring(     iff(isnotempty(AdditionalFields.Backend_type), AdditionalFields.Backend_type,         column_ifexists('Backend_type_s',            column_ifexists('Backend_type', \"\")         )     ) )"
                }
              }
            ]
          }
        ],
        "style": "above",
        "queryType": 1,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "set initial parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "f25f8d3a-a6c6-4e4e-928a-48c2848c2377",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagnosticsGetEnabledGroups",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.value[?(@.properties.workspaceId!=null )].properties.logs[?(@.categoryGroup!=null&&@.enabled==true)]\",\"columns\":[{\"path\":\"$.categoryGroup\",\"columnid\":\"CategoryGroup\"}]}}]}",
            "queryType": 12
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagnosticsGetAllEnabledCategories",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.value[?(@.properties.workspaceId!=null )].properties.logs[?(@.category!=null&&@.enabled==true)]\",\"columns\":[{\"path\":\"$.category\",\"columnid\":\"Category\"}]}}]}",
            "queryType": 12,
            "id": "092c117e-db77-4b8f-a5b0-a7045b174fc7"
          },
          {
            "id": "b64d57a5-ed62-4b71-b735-1d8db0cd6a34",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreCheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/pg_qs.query_capture_mode?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$..value\",\"columnid\":\"value\",\"substringRegexMatch\":\"^None|NONE|none$\",\"substringReplace\":\"none\"}]}}]}",
            "queryType": 12
          },
          {
            "id": "cec8a31f-2806-4fce-83dd-3ffa45ec9803",
            "version": "KqlParameterItem/1.0",
            "name": "Waitsamplingcheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/pgms_wait_sampling.query_capture_mode?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$..value\",\"columnid\":\"value\",\"substringRegexMatch\":\"^None|NONE|none$\",\"substringReplace\":\"none\"}]}}]}",
            "queryType": 12
          },
          {
            "id": "cd125bde-ebfa-4df2-ab8c-4215bbbb5f42",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryAPI",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$..properties..replicationRole\",\"columnid\":\"value\",\"substringRegexMatch\":\"^PRIMARY|Primary|primary$\",\"substringReplace\":\"Primary\"}]}}]}",
            "queryType": 12
          },
          {
            "id": "6c30bc57-b989-491e-8ea5-4e37217a339d",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryCheck",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "IsServerPrimaryAPI",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Primary",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "0cf48c98-0af9-4809-be3b-7999ecf1fde8",
            "version": "KqlParameterItem/1.0",
            "name": "isQueryStoreEnabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "QueryStoreCheck",
                  "operator": "!=",
                  "rightValType": "static",
                  "rightVal": "none",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "e950bd84-bbb9-4cc4-a7e2-d77d8432ce0f",
            "version": "KqlParameterItem/1.0",
            "name": "isWaitsamplingenabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "Waitsamplingcheck",
                  "operator": "!=",
                  "rightValType": "static",
                  "rightVal": "none",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "b9cb29ff-a3f6-439e-8c89-92078ef449e2",
            "version": "KqlParameterItem/1.0",
            "name": "IsQueryStoreRuntimeSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "allLogs",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "audit",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetAllEnabledCategories",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "PostgreSQLFlexQueryStoreRuntime",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "735258d8-9b8e-46ab-a6ee-509e8f63e1f2",
            "version": "KqlParameterItem/1.0",
            "name": "isWaitLogsSentToLogAnalytics",
            "type": 1,
            "isRequired": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "allLogs",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "audit",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetAllEnabledCategories",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "PostgreSQLFlexQueryStoreWaitStats",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "bbda715c-0c54-4136-ba87-5956888d05d5",
            "version": "KqlParameterItem/1.0",
            "name": "TrackIOTimingCheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/track_io_timing?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"\",\"columns\":[{\"path\":\"$..value\",\"columnid\":\"value\",\"substringRegexMatch\":\"^on|ON|On|oN$\",\"substringReplace\":\"ON\"}]}}]}",
            "queryType": 12
          },
          {
            "id": "cdf37611-28fc-4dc2-ba70-44afa7fbb4ef",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "allLogs",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetEnabledGroups",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "audit",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagnosticsGetAllEnabledCategories",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "PostgreSQLFlexSessions",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "4731c4ac-553c-4b01-876e-835b880c201d",
            "version": "KqlParameterItem/1.0",
            "name": "HaveQueryIds",
            "type": 1,
            "query": "let dt = {TimeRange:end};\r\nlet GlobalEndTime = iff(dt<now(), dt, now());\r\nlet GlobalStartTime= iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime(GlobalEndTime)-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start});\r\nlet Start_Time = todatetime(GlobalStartTime);\r\nlet End_Time = todatetime(GlobalEndTime);\r\n{QueryStoreTable}\r\n| where todatetime(EndTime) >= Start_Time and todatetime(EndTime) <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n //| summarize max(Mean_time_d) by Queryid_d\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 12
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "checking for issues on the server"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "49d186a4-fc03-4206-8869-a19e1edd50e8",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalEndTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\n\r\nlet dt = {TimeRange:end};\r\nprint iff(dt<now(), dt, now())",
            "crossComponentResources": [
              "{Resource}"
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0
          },
          {
            "id": "fad35622-007d-4c11-8fca-173f8bea3fdd",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalStartTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\nprint iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime('{GlobalEndTime}')-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start})",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "6d2f4f99-cad7-46b4-9cd8-e26f71821c90",
            "version": "KqlParameterItem/1.0",
            "name": "LessThanOneHourInterval",
            "type": 1,
            "query": "let interval = 1h;\r\nprint iff({TimeRange:end} - {TimeRange:start} < interval, \"Yes\", \"No\")",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "4be70166-d500-40a1-a945-484d00dd50b9",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrain",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "2d375d89-a7a9-4b4d-8b74-026d3f776c58",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrainMin5",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<5m,5m, {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 12
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - parameter check dateTime categories"
    },
    {
      "type": 1,
      "content": {
        "json": "### Query Store is currently disabled\r\nQuery Performance Insight depends on Query Store data. You need to enable it by setting the dynamic server parameter `pg_qs.query_capture_mode` to either ALL or TOP. Refer to this guide for detailed instructions: https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-query-store",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query store being disabled"
    },
    {
      "type": 1,
      "content": {
        "json": "### Query Store Wait Sampling is currently disabled\r\nQuery Performance Insight depends on Query Store wait sampling data. You need to enable it by setting the dynamic server parameter `pgms_wait_sampling.query_capture_mode` to All. Refer to this guide for detailed instructions: https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-query-store",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "wait sampling check"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store data is not being transmitted to the log analytics workspace\r\nThe Query Store data is not being sent to the log analytics workspace, which is necessary to use Query Performance Insight. To configure the logging settings for Query Store category `PostgreSQL Query Store Runtime` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "data not going to the log analytics workspace"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store wait sampling data is not being transmitted to the log analytics workspace\r\nThe Query Store wait sampling data is not being sent to the log analytics workspace, which is necessary to use Query Performance Insight. To configure the logging settings for Query Store category `PostgreSQL Query Store Wait Statistics` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isWaitLogsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query store wait sampling data not transmitting"
    },
    {
      "type": 1,
      "content": {
        "json": "Server parameter *`track_io_timing`* is currently set to *`off`*. Enable *`track_io_timing`* to view IO consuming queries. ",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "TrackIOTimingCheck",
          "comparison": "isNotEqualTo",
          "value": "ON"
        }
      ],
      "name": "track io timing io queries"
    },
    {
      "type": 1,
      "content": {
        "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace\r\nThe PostgreSQL Sessions logs data is not being sent to the log analytics workspace. Until configured, Wait Statistics will be unable to populate the database name where applicable. To configure the logging settings for category `PostgreSQL Sessions` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.\r\n\r\n**Note:** If Session logs were recently disabled, database name will still appear in query results during the enabled window.",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "pg session logs not transmitting"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store's capabilities are not functioning on the replica server.\r\n#### After analysis, we have determined that this server is a replica server, which means that the query store functionality is not available. However, there are alternative methods you can use to monitor long-running sessions on the replica server.\r\n- To help pinpoint possible performance issues, a recommended solution is to adjust the `log_min_duration_statement` parameter to the desired threshold and properly configure `log_line_prefix` to include the relevant details such as **%t-%c user=%u,db=%d,app=%a,client=%h**. This will enable the logging of slow queries in the PostgreSQL logs. By doing so, you can easily access the top queries and review the slow queries that may require optimization.\r\n- Another option is to configure `pg_stat_statements`, which allows you to view information about your query performance on the replica server. However, Please keep in mind that you need to execute the `CREATE EXTENSION pg_stat_statements` command on the primary server database. For more informaiton, please visit [PostgreSQL Documentation](https://www.postgresql.org/docs/current/pgstatstatements.html).\r\n- You can also monitor the ongoing workload on the replica server by using the `pg_stat_activity` catalog view.",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "IsServerPrimaryCheck",
        "comparison": "isEqualTo",
        "value": "No"
      },
      "name": "replica server check"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "tabStyle": "bigger",
        "links": [
          {
            "id": "3ae74b6f-b823-4915-a31b-5dd3021d3cba",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Long Running Queries",
            "subTarget": "qs-time",
            "preText": "High Time Consuming Queries",
            "style": "link"
          },
          {
            "id": "1965bfea-aec2-45e2-963c-bf46b23f3c61",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Wait Statistics",
            "subTarget": "qs-wait",
            "style": "link"
          },
          {
            "id": "17e23a1d-3845-4275-bc98-a45babd7e411",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Top Queries by Calls ",
            "subTarget": "qs-calls",
            "style": "link"
          },
          {
            "id": "5c1c9de9-9aa9-48a7-aba8-abc9a6a11a6a",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Top Queries by Data-Usage",
            "subTarget": "qs-memory",
            "style": "link"
          },
          {
            "id": "8c8cd62f-a541-48bc-93d2-d86198f33a94",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Top Queries by IOPS",
            "subTarget": "qs-iops",
            "style": "link"
          },
          {
            "id": "1acea05d-fac2-4fe2-9e0d-a9e25a1b7ff5",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Top Queries by Temporary Files",
            "subTarget": "qs-temp",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "IsServerPrimaryCheck",
        "comparison": "isEqualTo",
        "value": "Yes"
      },
      "name": "parents links"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "750e436e-5970-4d36-9f0f-917ea9523724",
            "version": "KqlParameterItem/1.0",
            "name": "HighTimeQueries",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 \r\n| where MeanExecDurationMs > 0\r\n| limit 10\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "check if we have queryids lrq"
    },
    {
      "type": 1,
      "content": {
        "json": "#### There is no data available in the telemetry for the chosen window or you may have recently configured logging for the server. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HaveQueryIds",
          "comparison": "isEqualTo",
          "value": ""
        },
        {
          "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "no data lrq"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The selected window does not contain any data in the telemetry. To configure logging and address this issue, please refer to the error message located at the top of the troubleshooting guide.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text for window not having telemtry"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The selected window does not contain any data in the telemetry. To configure logging and address this issue, please refer to the error message located at the top of the troubleshooting guide.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": ""
        }
      ],
      "name": "text - 85 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Query Store is not enabled on the server. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query store lrq"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Loading...",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isNotEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isNotEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveQueryIds",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "loading icon so no confuse"
    },
    {
      "type": 1,
      "content": {
        "json": "#### No time consuming queries found in selected TimeRange. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "no time queries found"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTimeConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "select time queries number"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "less than one hour time consuming queries again"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10  \r\n| summarize max(MeanExecDurationMs) by QueryId\r\n| top {TopTimeConsumingQueries} by max_MeanExecDurationMs desc\r\n| project QueryId;\r\n{QueryStoreTable} \r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10             \r\n | where QueryId in (TopQueryIDs)\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(EndTime), 1m)\r\n| make-series maxiotime=max(MeanExecDurationMs) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId: ',tolong(QueryId))\r\n",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopTimeConsumingQueries} Slow Queries from Query Store. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data found during the window selected",
        "noDataMessageStyle": 4,
        "timeBrushParameterName": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "visualize time consuming queries"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the total execution time of the server's {TopTimeConsumingQueries} slowest queries. ** \r\n\r\n\r\nNon performant queries or queries that take time to complete might be the ones which consume CPU. Details on these QueryIds are shown below. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "see details on time consuming queries title"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByTime",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}  \r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10  \r\n| summarize max(MeanExecDurationMs) by QueryId\r\n| top {TopTimeConsumingQueries} by max_MeanExecDurationMs desc\r\n| project QueryId\r\n| serialize Rank = row_number()\r\n| project value = QueryId, label = QueryId, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "show time consuming queries specifics"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable} \r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10       \r\n| where QueryId == {QueryIdsByTime}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,RuntimeStatsEntryId\r\n| summarize MeanExecutionTime=avg(MeanExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs), MinExecutionTime=min(MinExecDurationMs), TotalCalls=sum(Calls) by QueryId,QueryType",
        "size": 4,
        "title": "QueryId {QueryIdsByTime} Summary in Selected TimeRange",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "further time consuming q details"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet databasename = \r\n{SessionsTable}\r\n|distinct DatabaseName,DatabaseId;\r\n{QueryStoreTable} \r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10     \r\n| where QueryId == {QueryIdsByTime}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,Rows,TotalExecDurationMs,StartTime,EndTime,PlanId,DatabaseId,UserId,RuntimeStatsEntryId\r\n| summarize WindowStart=min(StartTime), WindowEnd=max(EndTime),MeanRows=sum(Rows)/sum(Calls),MeanExecutionTime=avg(MeanExecDurationMs),MinExecutionTime=min(MinExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs),TotalCalls=sum(Calls),TotalExecutionTime=sum(TotalExecDurationMs),TotalRows=sum(Rows) by bin(todatetime(EndTime), graphgrain), QueryId,QueryType,PlanId,DatabaseId,UserId\r\n| join kind = leftouter databasename on $left.DatabaseId == $right.DatabaseId\r\n| project QueryId, QueryType, PlanId, DatabaseName = iff(isempty(DatabaseName),strcat(\"oid::\",DatabaseId), DatabaseName),  UserId, WindowStart,WindowEnd,MeanRows, MeanExecutionTime, MinExecutionTime, MaxExecutionTime, TotalCalls, TotalExecutionTime, TotalRows\r\n|order by WindowStart asc",
        "size": 0,
        "title": "QueryId {QueryIdsByTime} Runtime Statistics Split by Time Buckets of {ChartGrain} Each",
        "noDataMessage": "No data available during the period selected",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "EndTime",
              "formatter": 5,
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "MeanRows",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Dbid",
              "formatter": 1
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Total_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "PreciseTimeStamp",
              "formatter": 6
            },
            {
              "columnMatch": "Min_time",
              "formatter": 5
            },
            {
              "columnMatch": "Max_time",
              "formatter": 5
            },
            {
              "columnMatch": "Stddev_time",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "WindowStart",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "WindowStart",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "detailed single time consuming queries"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific QueryId?**\r\n\r\nTo retrieve the Query Text for a specific QueryId, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the QueryId.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the Query Text for a given QueryId, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "get text query time consuming"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10    \r\n| summarize max(MeanExecDurationMs) by QueryId\r\n| top {TopTimeConsumingQueries} by max_MeanExecDurationMs desc\r\n| extend SQL= strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(QueryId),\";\")\r\n| project SQL",
        "size": 1,
        "title": "Get Query Text from QueryId",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "rowLimit": 10000
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "time consuming project sql"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "ff1b8a4d-9705-436c-936a-9c72150f0ce2",
            "version": "KqlParameterItem/1.0",
            "name": "HighMemoryQueries",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n| where SharedBlksHit + SharedBlksDirtied > 0\r\n| limit 10\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "high memory project have queries"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Query Store is not enabled on the server.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query store high mem"
    },
    {
      "type": 1,
      "content": {
        "json": "#### No high data-usage queries found in selected TimeRange.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "no data high mem"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTimeConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "label high mem"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "too small interval high mem"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n |extend Mean_memory_blks=(SharedBlksHit + SharedBlksDirtied)/Calls\r\n| summarize Max_blks = max(Mean_memory_blks) by QueryId, Resource \r\n| where Max_blks>0\r\n| top {TopTimeConsumingQueries} by Max_blks desc\r\n| project QueryId;\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user             \r\n| where QueryId in (TopQueryIDs)\r\n |extend Mean_memory_blks=(SharedBlksHit + SharedBlksDirtied)/Calls\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(EndTime, 1m)\r\n| make-series maxmemorytime=max(Mean_memory_blks*8) default=0 on EVENT_TIME_GRAPHGRAIN from Start_Time to End_Time step graphgrain by Queryid_d=strcat('QueryId: ',tolong(QueryId))",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopTimeConsumingQueries} Queries by Data-Usage. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data found in given time range",
        "noDataMessageStyle": 4,
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 3,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "visualize high mem"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the top {TopTimeConsumingQueries} queries by data-usage for the selected TimeRange. ** \r\n\r\nThese queries have the largest sum of shared_blks_hit and shared_blks_dirtied in the selected TimeRange\r\n\r\n*The counter indicates how many blocks were pinned through the execution process, it could be that a page from the memory was pinned multiple times, hence the total data processed by the given query can be multiple times higher than the shared_buffers or total memory.*",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "explain what high mem signifies"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByTime",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n |extend Mean_memory_blks=(SharedBlksHit + SharedBlksDirtied)/Calls\r\n| summarize Max_blks = max(Mean_memory_blks) by QueryId, Resource \r\n| where Max_blks>0\r\n| top {TopTimeConsumingQueries} by Max_blks desc\r\n| serialize Rank = row_number()\r\n| project value = QueryId, label = QueryId, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "get individual ids for high mem qs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| where QueryId == {QueryIdsByTime}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,Rows,TotalExecDurationMs,StartTime,EndTime,PlanId,DatabaseId,UserId,SharedBlksHit,SharedBlksDirtied,RuntimeStatsEntryId\r\n| extend Total_Memory_blks_hit=(SharedBlksHit + SharedBlksDirtied)*8\r\n| extend Mean_Memory_blks_hit=Total_Memory_blks_hit/Calls         \r\n| summarize MeanExecutionTime=avg(MeanExecDurationMs),MeanDataUsage=avg(Mean_Memory_blks_hit),MaxExecutionTime=max(MaxExecDurationMs),MaxDataUsage=max(Mean_Memory_blks_hit), TotalCalls=sum(Calls),TotalDataUsage=sum(Total_Memory_blks_hit) by QueryId,QueryType\r\n",
        "size": 4,
        "title": "QueryId {QueryIdsByTime} Summary in Selected TimeRange",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataUsage",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxDataUsage",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            },
            {
              "columnMatch": "TotalDataUsage",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "Is_system_query_b",
              "formatter": 5
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "detail high mem"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet databasename = \r\n{SessionsTable}\r\n|distinct DatabaseName,DatabaseId;\r\n{QueryStoreTable}\r\n    | where EndTime >= TimeStart and EndTime <= TimeEnd\r\n    | where UserId != 10  \r\n    | where QueryId == {QueryIdsByTime}\r\n    | distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,Rows,TotalExecDurationMs,StartTime,EndTime,PlanId,DatabaseId,UserId,SharedBlksHit,SharedBlksDirtied,RuntimeStatsEntryId\r\n    | extend Total_Memory_blks_hit=(SharedBlksHit + SharedBlksDirtied)*8\r\n    | extend Mean_Memory_blks_hit=Total_Memory_blks_hit/Calls         \r\n    | summarize WindowStart=min(StartTime), WindowEnd=max(EndTime),MeanRows=sum(Rows)/sum(Calls), MeanDataUsage=avg(Mean_Memory_blks_hit), MeanExecutionTime=avg(MeanExecDurationMs), MinDataUsage=min(Mean_Memory_blks_hit),MaxDataUsage=max(Mean_Memory_blks_hit), TotalCalls=sum(Calls),TotalDataUsage=sum(Total_Memory_blks_hit), TotalRows=sum(Rows),MinExecutionTime=min(MinExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs),TotalExecutionTime=sum(TotalExecDurationMs) by bin(todatetime(EndTime), graphgrain), QueryId, QueryType, PlanId,DatabaseId,UserId\r\n| join kind = leftouter databasename on $left.DatabaseId == $right.DatabaseId\r\n| project QueryId, QueryType, PlanId, DatabaseName = iff(isempty(DatabaseName),strcat(\"oid::\",DatabaseId), DatabaseName), DatabaseId, UserId, WindowStart,WindowEnd,MeanRows, MeanDataUsage, MeanExecutionTime, MinDataUsage, MaxDataUsage, TotalCalls, TotalDataUsage, TotalRows, MinExecutionTime, MaxExecutionTime, TotalExecutionTime\r\n |order by WindowStart asc",
        "size": 0,
        "title": "QueryId {QueryIdsByTime} Runtime Statistics Split by Time Buckets of {ChartGrain} Each",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "DatabaseId",
              "formatter": 5
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "Rows",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanDataUsage",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinDataUsage",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxDataUsage",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalDataUsage",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanMemory",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinMemory",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxMemory",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalMemory",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "EndTime",
              "formatter": 5
            },
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Dbid",
              "formatter": 1
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "Shared_blks_dirtied",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Shared_blks_hit",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Memory_blks_hit",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "PreciseTimeStamp",
              "formatter": 6
            },
            {
              "columnMatch": "memory_blks_hit",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_consumed_memory",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_blks",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max_blks",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "$gen_heatmap_MeanDataUsage_9",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "$gen_heatmap_MeanDataUsage_9",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "high mem single id show details"
    },
    {
      "type": 1,
      "content": {
        "json": "** Shown above data-usage for the given QueryId and TimeRange. **\r\n\r\n**MeanDataUsage**: The mean (average) data processed by the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MinDataUsage**: The minimum data processed by the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MaxDataUsage**: The maximum data processed by the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalDataUsage**: Total data processed by the QueryId for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MeanRows**: The mean (average) rows retrieved or affected by the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalRows**: Total rows retrieved or affected by the QueryId for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MeanExecutionTime**: The mean (average) execution time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MinExecutionTime**: The minimum execution time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n**MaxExecutionTime**: The maximum execution time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n**TotalExecutionTime**: The total execution time of the QueryId for all the calls in the time bucket defined between WindowStart and WindowEnd <br>",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "explain interpretation for high mem query id"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific QueryId?**\r\n\r\nTo retrieve the Query Text for a specific QueryId, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the QueryId.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the Query Text for a given QueryId, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "high mem how view text"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where UserId != 10 // exclude azure super user \r\n |extend Mean_memory_blks=(SharedBlksHit + SharedBlksDirtied)/Calls\r\n| summarize Max_blks = max(Mean_memory_blks) by QueryId, Resource \r\n| where Max_blks>0\r\n| top {TopTimeConsumingQueries} by Max_blks desc\r\n| extend GetQueryText = strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",QueryId,\";\")\r\n| project GetQueryText \r\n    ",
        "size": 1,
        "title": "Get Query Text from QueryId",
        "noDataMessage": "No data found in given time range",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "high mem view queries sql"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "55658415-126e-4ef7-ad32-8cf7f90827e7",
            "version": "KqlParameterItem/1.0",
            "name": "HighTempQueries",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= Start_Time and EndTime <= End_Time\r\n| where TempBlksWritten >0\r\n| where UserId!= 10\r\n| limit 10\r\n| count \r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "high temp intro"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Query Store is not enabled on the server. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "high temp have query store enabled"
    },
    {
      "type": 1,
      "content": {
        "json": "#### No high temporary file generating queries found in selected TimeRange.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "no high temp"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTempConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "select number of high temp"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "high temp too small interval"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10\r\n|where TempBlksWritten >0\r\n| extend Mean_temp_blks = TempBlksWritten / Calls\r\n| summarize Max_blks = max(Mean_temp_blks) by QueryId\r\n| top {TopTempConsumingQueries} by Max_blks desc\r\n| project QueryId;\r\n{QueryStoreTable}\r\n| where QueryId in (TopQueryIDs)\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10\r\n| extend Mean_temp_blks = TempBlksWritten * 8 / Calls\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(EndTime, 1m)\r\n| make-series Max_blks = max(Mean_temp_blks) default = 0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId: ', tolong(QueryId))",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopTempConsumingQueries} Temporary File Consuming Queries. Data is plotted at a granularity of {ChartGrain}",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 37,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "visualize high temp"
    },
    {
      "type": 1,
      "content": {
        "json": "**The chart above depicts the top {TopTempConsumingQueries} queries responsible for creating the largest combined size of temporary files, which could be a result of either numerous small files or one or several massive ones.**\r\n\r\n\r\nDetails on these QueryIds are shown below. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "describe high temp what is being shown"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByTemp",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10\r\n|where TempBlksWritten >0\r\n| extend Mean_temp_blks = TempBlksWritten / Calls\r\n| summarize Max_blks = max(Mean_temp_blks) by QueryId\r\n| top {TopTempConsumingQueries} by Max_blks desc\r\n| serialize Rank = row_number()\r\n| project label = QueryId, value =  QueryId, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "specifics for high temp"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where UserId != 10\r\n| where QueryId == '{QueryIdsByTemp}'\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,TempBlksRead,TempBlksWritten,RuntimeStatsEntryId\r\n| extend Mean_Temp_blks_written = TempBlksWritten* 8 / Calls\r\n| extend kb_Temp_blks_written = TempBlksWritten * 8\r\n| summarize MeanTempBlksWritten = avg(Mean_Temp_blks_written), MeanExecutionTime=avg(MeanExecDurationMs), MaxTempBlksWritten = max(Mean_Temp_blks_written), MaxExecutionTime=max(MaxExecDurationMs), TotalCalls=sum(Calls), TotalTempBlksWritten=sum(kb_Temp_blks_written), MinTempBlksWritten=min(Mean_Temp_blks_written), MinExecutionTime=min(MinExecDurationMs) by QueryId,QueryType",
        "size": 4,
        "title": "QueryId {QueryIdsByTemp} Summary in Selected TimeRange",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "MeanTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgReadWriteIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxReadWriteIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinReadWriteIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "End_time",
              "formatter": 6
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_query_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_blk_rw_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_dataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_dataWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_blk_rw_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_dataRead",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_dataWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Min_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "dataRead",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "dataWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "give details for high temp query id"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet databasename = \r\n{SessionsTable}\r\n| distinct DatabaseName,DatabaseId;\r\n{QueryStoreTable}\r\n| where UserId != 10   \r\n| where QueryId == {QueryIdsByTemp}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,Rows,TotalExecDurationMs,StartTime,EndTime,PlanId,DatabaseId,UserId,TempBlksWritten,TempBlksRead, RuntimeStatsEntryId \r\n| where todatetime(EndTime) >= TimeStart and todatetime(EndTime) <= TimeEnd\r\n| extend total_Temp_blks_written = TempBlksWritten*8\r\n| extend total_Temp_blks_read = TempBlksRead*8\r\n| extend Mean_Temp_blks_written=TempBlksWritten*8/Calls\r\n| extend Mean_Temp_blks_read=TempBlksRead*8/Calls\r\n| summarize WindowStart=min(StartTime), WindowEnd=max(EndTime), MeanTempBlksWritten=avg(Mean_Temp_blks_written),MeanTempBlksRead=avg(Mean_Temp_blks_read),MinTempBlksWritten=min(Mean_Temp_blks_written), MaxTempBlksWritten=max(Mean_Temp_blks_written),MeanRows=sum(Rows)/sum(Calls),TotalRows=sum(Rows),TotalCalls=sum(Calls), MeanExecutionTime=avg(MeanExecDurationMs),MinExecutionTime=min(MinExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs),TotalExecutionTime=sum(TotalExecDurationMs),TotalTempBlksWritten=sum(total_Temp_blks_written) by bin(todatetime(EndTime), graphgrain), QueryId,QueryType,PlanId,DatabaseId,UserId\r\n| join kind=leftouter databasename on $left.DatabaseId == $right.DatabaseId\r\n| project QueryId,QueryType,PlanId,DatabaseName = iff(isempty(DatabaseName),strcat(\"oid::\",DatabaseId), DatabaseName), UserId, WindowStart, WindowEnd,MeanRows, MeanTempBlksWritten, MeanTempBlksRead,MeanExecutionTime, TotalRows,TotalTempBlksWritten, TotalCalls, TotalExecutionTime, MinTempBlksWritten, MaxTempBlksWritten, MinExecutionTime, MaxExecutionTime\r\n|order by WindowStart asc",
        "size": 0,
        "title": "QueryId {QueryIdsByTemp} Runtime Statistics Split by Time Buckets of {ChartGrain} Each",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "MeanTempBlksWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanTempBlksRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalTempBlksWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalCalls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "EndTime",
              "formatter": 5
            },
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "TemporaryBlocksWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TemporaryBlocksRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanTemporaryBlockWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanTemporaryBlockRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataWrite",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanReadIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanWriteIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_query_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_blk_rw_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_dataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_dataWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_blk_rw_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_dataRead",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_dataWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Min_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "dataRead",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "dataWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "$gen_heatmap_MeanTempBlksRead_9",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "$gen_heatmap_MeanTempBlksRead_9",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "show info regarding the high temp id"
    },
    {
      "type": 1,
      "content": {
        "json": "**Details of columns from above grid:**\r\n\r\n**MeanTempBlksWritten**: The mean (average) temporary blocks written by the QueryId  in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MeanTempBlksRead**: The mean (average) temporary blocks read by the QueryId  in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MinTempBlksWritten**:The minimum temporary blocks written by the QueryId  in a single call  across the time bucket defined between WindowStart and WindowEnd\r\n\r\n**MaxTempBlksWritten**:The maximum temporary blocks written by the QueryId  in a single call  across the time bucket defined between WindowStart and WindowEnd\r\n\r\n**MeanRows**: The mean (average) rows retrieved or affected by the QueryId  in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**TotalCalls**: Total calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**TotalRows**: Total rows retrieved or affected by the QueryId  for all the calls in the time bucket defined between WindowStart and WindowEnd\r\n\r\n**MeanExecutionTime**: The mean (average) execution time of the QueryId  in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MinExecutionTime**: The minimum execution time of the QueryId  in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**MaxExecutionTime**: The maximum execution time of the QueryId  in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**TotalExecutionTime**: The total execution time of the QueryId  for all the calls in the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n\r\n\r\nQueries that generated too many temorrary files or temporary bytes may be ones which are contributing to storage spikes on the server. They are good candidates to further analyze and tune.\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "how interpret high temp id"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific QueryId?**\r\n\r\nTo retrieve the Query Text for a specific QueryId, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the QueryId.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the Query Text for a given QueryId, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "get high temp id how"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable} \r\n    | where TempBlksWritten+TempBlksRead > 0\r\n    | where UserId != 10\r\n    | where EndTime >= TimeStart and EndTime <= TimeEnd\r\n    | extend blk_rw_time=TempBlksWritten / Calls\r\n    | summarize max(blk_rw_time) by QueryId\r\n    | top {TopTempConsumingQueries} by max_blk_rw_time desc\r\n    | extend SQL= strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",QueryId,\";\")\r\n    | project SQL",
        "size": 1,
        "title": "Get Query Text from QueryId",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "get sql for the high temp id"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "d75b7012-0b6a-4b73-a739-6c56544a2853",
            "version": "KqlParameterItem/1.0",
            "name": "GetWaitSamplingData",
            "type": 1,
            "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreWaitSampling}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId !in (0, 10) // exclude azure super user  and system calls\r\n| where QueryId !=0\r\n| limit 10\r\n| project UserId\r\n| count\r\n| extend HaveData = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveData",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "wait sampling intro"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "97b4aa31-d728-4067-b476-2dc80096b1b1",
            "version": "KqlParameterItem/1.0",
            "name": "MaxCount",
            "label": "Number Of Wait Events",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"15\" }\r\n]"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "wait sampling how many"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Query Store wait sampling is not enabled on the server. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "query store wait sampling"
    },
    {
      "type": 1,
      "content": {
        "json": "#### No wait statistics found in selected TimeRange.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "no wait stats for wait sampling"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "less than one hour time consuming queries"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nlet graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\n//let graphgrain=15m;\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet Topwaits = \r\n{QueryStoreWaitSampling}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId !in(0,10) // exclude azure super user  and system calls\r\n| where QueryId !=0\r\n| extend WaitEvent = iff(isempty(EventType), 'No Waits', strcat(EventType, \":\", Event))\r\n| summarize max_calls = max(Calls) by WaitEvent\r\n| where max_calls > 0\r\n| top {MaxCount} by max_calls desc\r\n| project WaitEvent;\r\n{QueryStoreWaitSampling}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId !in(0,10) // exclude azure super user  and system calls\r\n| where QueryId !=0\r\n| extend Events = iff(isempty(EventType), 'No Waits', strcat(EventType, \":\", Event))\r\n| distinct StartTime, EndTime, UserId, DatabaseId, QueryId, Calls, EventType, Event, Events\r\n| where Events in (Topwaits)\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(EndTime,1m)\r\n| make-series max(Calls) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Events\r\n\r\n",
        "size": 0,
        "aggregation": 2,
        "title": "Top Sampled Wait Events. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data in selected Interval",
        "timeBrushParameterName": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "EVENT_TIME_GRAPHGRAIN",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "EVENT_TIME_GRAPHGRAIN",
            "sortOrder": 1
          }
        ],
        "tileSettings": {
          "showBorder": false
        },
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "visualize wait stats"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "dc0ae0d2-1e59-4c0c-aea0-aed0c504a846",
            "version": "KqlParameterItem/1.0",
            "name": "GroupWaitSampling",
            "label": "Group Wait Events",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"no\", \"label\":\"No Grouping\",\"selected\":true },\r\n  { \"value\":\"UserId\", \"label\":\"by UserId\" },\r\n    { \"value\":\"DatabaseName\", \"label\":\"by Database\" }\r\n]",
            "value": "UserId"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "filter wait stats by user or db"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\n//let graphgrain=15m;\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n\r\nlet Topwaits = \r\n{QueryStoreWaitSampling}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId !in (0, 10) // exclude azure super user  and system calls\r\n| where QueryId !=0\r\n| extend WaitEvent = iff(isempty(EventType), 'No Waits', strcat(EventType, \":\", Event))\r\n| summarize max_calls = max(Calls) by WaitEvent\r\n| where max_calls > 0\r\n| top {MaxCount} by max_calls desc\r\n| project WaitEvent;\r\n{QueryStoreWaitSampling}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId !in (0, 10) // exclude azure super user  and system calls\r\n| where QueryId !=0\r\n| extend WaitEvent = iff(isempty(EventType), 'No Waits', strcat(EventType, \":\", Event))\r\n| where WaitEvent in (Topwaits)\r\n| distinct StartTime, EndTime, UserId, DatabaseId, QueryId, Calls, EventType, Event, WaitEvent\r\n| summarize waiteventsamplecount=sum(Calls) by  WaitEvent\r\n| project WaitEvent,waiteventsamplecount\r\n| order by waiteventsamplecount desc\r\n| as Tbl\r\n| extend Percentage = round (100.0 * waiteventsamplecount / toscalar (Tbl | summarize sum(waiteventsamplecount)),2)\r\n| order by waiteventsamplecount desc",
        "size": 0,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "waiteventsamplecount",
              "formatter": 0,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "EVENTTYPE : EVENTNAME",
              "formatter": 1
            },
            {
              "columnMatch": "End_time_t",
              "formatter": 6
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "sum_Calls_d",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "$gen_number_waiteventsamplecount_1",
              "sortOrder": 2
            }
          ],
          "labelSettings": [
            {
              "columnId": "waiteventsamplecount",
              "label": "Wait Event Sample Count"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "$gen_number_waiteventsamplecount_1",
            "sortOrder": 2
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GroupWaitSampling",
          "comparison": "isEqualTo",
          "value": "no"
        }
      ],
      "name": "get specifics for wait stats in tabular format"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n\r\nlet databasename = \r\n{SessionsTable}\r\n|distinct DatabaseName,DatabaseId;\r\n\r\nlet Topwaits = \r\n{QueryStoreWaitSampling}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId !in (0, 10) // exclude azure super user  and system calls\r\n| where QueryId !=0\r\n| extend WaitEvent = iff(isempty(EventType), 'No Waits', strcat(EventType, \":\", Event))\r\n| summarize max_calls = max(Calls) by WaitEvent\r\n| where max_calls > 0\r\n| top {MaxCount} by max_calls desc\r\n| project WaitEvent;\r\n{QueryStoreWaitSampling}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId !in (0, 10) // exclude azure super user  and system calls\r\n| where QueryId !=0\r\n| extend WaitEvent = iff(isempty(EventType), 'No Waits', strcat(EventType, \":\", Event))\r\n| where WaitEvent in (Topwaits)\r\n| distinct StartTime, EndTime, UserId, DatabaseId, QueryId, Calls, EventType, Event, WaitEvent\r\n| summarize waiteventsamplecount=sum(Calls) by  WaitEvent, DatabaseId,UserId\r\n| join kind=leftouter databasename on $left.DatabaseId == $right.DatabaseId\r\n| project WaitEvent,waiteventsamplecount,DatabaseName = iff(isempty(DatabaseName),strcat(\"oid::\",DatabaseId), DatabaseName),UserId\r\n| summarize waiteventsamplecount=sum(waiteventsamplecount) by WaitEvent, {GroupWaitSampling}\r\n| order by waiteventsamplecount desc\r\n| as Tbl\r\n| extend Percentage = round (100.0 * waiteventsamplecount / toscalar (Tbl | summarize sum(waiteventsamplecount)),2)",
        "size": 0,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "waiteventsamplecount",
              "formatter": 0,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "EVENTTYPE : EVENTNAME",
              "formatter": 1
            },
            {
              "columnMatch": "End_time_t",
              "formatter": 6
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "sum_Calls_d",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "waiteventsamplecount",
              "label": "Wait Event Sample Count"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GroupWaitSampling",
          "comparison": "isNotEqualTo",
          "value": "no"
        }
      ],
      "name": "WaitSampling with Grouping"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "d135ed65-b24a-48aa-85bc-0810a3cb8f38",
            "version": "KqlParameterItem/1.0",
            "name": "HaveHighIOConsumingQueries",
            "label": "HighIOQueries",
            "type": 1,
            "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where BlkReadTime+BlkWriteTime > 0\r\n| where UserId != 10 // exclude azure super user \r\n| limit 10\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "io queries intro"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Query Store is not enabled on the server. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "io queries not showing query store"
    },
    {
      "type": 1,
      "content": {
        "json": "#### No IO consuming queries found in selected TimeRange.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "TrackIOTimingCheck",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "no io queries found"
    },
    {
      "type": 1,
      "content": {
        "json": "#### No IO consuming queries found in selected TimeRange. Server parameter `track_io_timing` is disabled. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "TrackIOTimingCheck",
          "comparison": "isNotEqualTo",
          "value": "ON"
        }
      ],
      "name": "no io queries found - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "**NOTE:**  When using query store please make sure to enable server parameter  *`track_io_timing`* . <br>The parameter helps in populating columns *`blk_read_time`*  and *`blk_write_time`* in query store which helps in identifying high IO consuming queries. \r\n\r\n*`blk_read_time`*: Total time the statement spent reading data file blocks, in milliseconds <br>\r\n*`blk_write_time`*: Total time the statement spent writing data file blocks, in milliseconds <br>\r\n\r\nThe metric below identifies the top IO-Consuming queries, order by sum of *`blk_read_time`* and *`blk_write_time`* . <br>",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "track io description for io queries"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopIOConsumingQueries",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "Max Count"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "how many io queries to show"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "io queries too small interval"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where BlkReadTime+BlkWriteTime > 0\r\n| extend Mean_blk_rw_time=(BlkReadTime+BlkWriteTime)/Calls\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by QueryId\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| project QueryId;\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10\r\n| where QueryId in (TopQueryIDs)\r\n| extend Mean_blk_rw_time=(BlkReadTime+BlkWriteTime)/Calls\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(EndTime, 1m)\r\n| make-series maxiotime=max(Mean_blk_rw_time) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid=strcat('QueryId: ',QueryId)",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopIOConsumingQueries} IOPS Consuming Queries. Data is plotted at a granularity of {ChartGrain}",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "get io queries and see if there are any"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByIO",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where UserId != 10\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where BlkReadTime+BlkWriteTime > 0\r\n| extend Mean_blk_rw_time=(BlkReadTime+BlkWriteTime)/Calls\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by QueryId\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| serialize Rank = row_number()\r\n| project label = QueryId, value =  QueryId, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "get high io queries"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| where QueryId == {QueryIdsByIO}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,BlkReadTime,BlkWriteTime,RuntimeStatsEntryId\r\n| extend blk_rw_time=BlkReadTime+BlkWriteTime\r\n| extend Mean_blk_rw_time=blk_rw_time/Calls\r\n| summarize MeanIOtime=avg(Mean_blk_rw_time),MeanExecutionTime=avg(MeanExecDurationMs),MaxIOtime=max(blk_rw_time),MaxExecutionTime=max(MaxExecDurationMs),TotalCalls=sum(Calls),MinIOtime=min(blk_rw_time), MinExecutionTime=min(MinExecDurationMs) by QueryId,QueryType\r\n",
        "size": 4,
        "title": "QueryId {QueryIdsByIO} Summary in Selected TimeRange",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "MeanIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "visualize high io consuming queries"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet databasename = \r\n{SessionsTable}\r\n|distinct DatabaseName,DatabaseId;\r\n{QueryStoreTable}\r\n    | where EndTime >= TimeStart and EndTime <= TimeEnd\r\n    | where UserId != 10  \r\n    | where QueryId == {QueryIdsByIO}\r\n    | distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,Rows,TotalExecDurationMs,StartTime,EndTime,PlanId,DatabaseId,UserId,BlkReadTime,BlkWriteTime,SharedBlksRead,SharedBlksDirtied,RuntimeStatsEntryId\r\n    | extend blk_rw_time=BlkReadTime+BlkWriteTime\r\n    | extend mean_Blk_read_time=BlkReadTime/Calls\r\n    | extend mean_Blk_write_time=BlkWriteTime/Calls\r\n    | extend mean_blk_rw_time=blk_rw_time/Calls\r\n    | extend Mean_data_read_kb=SharedBlksRead*8/Calls, Mean_data_write_kb=SharedBlksDirtied*8/Calls\r\n| summarize WindowStart=min(StartTime), WindowEnd=max(EndTime),MeanIOtime=avg(mean_blk_rw_time),MeanExecutionTime=avg(MeanExecDurationMs), MeanReadIOtime=avg(mean_Blk_read_time),MeanDataRead=avg(Mean_data_read_kb),MeanWriteIOtime=avg(mean_Blk_write_time),MeanDataWrite=avg(Mean_data_write_kb),\r\nMeanRows=sum(Rows)/sum(Calls),MinIOtime=min(mean_blk_rw_time),MinExecutionTime=min(MinExecDurationMs),MaxIOtime=max(mean_blk_rw_time),MaxExecutionTime=max(MaxExecDurationMs),TotalCalls=sum(Calls),TotalExecutionTime=sum(TotalExecDurationMs),TotalRows=sum(Rows),TotalIOtime=sum(blk_rw_time) by bin(todatetime(EndTime), graphgrain), QueryId,PlanId,DatabaseId,UserId\r\n//excluded MeanReadIOtime and MeanWriteIOtime, because most of the time write io time will be less. Writes are on bgwriter \r\n| join kind=leftouter databasename on $left.DatabaseId == $right.DatabaseId\r\n| project QueryId,PlanId,DatabaseName = iff(isempty(DatabaseName),strcat(\"oid::\",DatabaseId), DatabaseName),UserId,WindowStart, WindowEnd, MeanIOtime,MeanExecutionTime,MeanDataRead,MeanDataWrite,MeanRows,TotalCalls,TotalRows,TotalIOtime,TotalExecutionTime,MinIOtime,MinExecutionTime,MaxIOtime,MaxExecutionTime\r\n|order by WindowStart asc\r\n\r\n   \r\n",
        "size": 0,
        "title": "QueryId {QueryIdsByIO} Runtime Statistics Split by Time Buckets of {ChartGrain} Each",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "MeanIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataWrite",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "chart for high io consumig queries"
    },
    {
      "type": 1,
      "content": {
        "json": "** Shown above IO time is deducted by the total blk_read_time plus blk_write_time for the given QueryId and TimeRange. **\r\n\r\n**MeanIOtime**: The mean (average) IO time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanExecutionTime**: The mean (average) execution time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanDataRead**: The mean (average) size of the blocks the QueryId read from disk in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanDataRead**: The mean (average) size of the blocks the QueryId modified in the shared buffers in a single call across the time bucket defined between WindowStart and WindowEnd. The dirtied blocks will be further written to disk by the background process<br>\r\n**MeanRows**: The mean (average) rows retrieved or affected by the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**TotalCalls**: Total calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MinIOtime**: The minimum IO time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MinExecutionTime**: The minimum execution time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**MaxIOtime**: The maximum IO time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MaxExecutionTime**: The maximum execution time of the QueryId in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**TotalRows**: Total rows retrieved or affected by the QueryId for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalIOtime**: Total IO time of the QueryId for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalExecutionTime**: The total execution time of the QueryId for all the calls in the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n\r\nNon performant queries or queries that spent too much IO time may be ones which are contributing to High IO on the server. They are good candidates to  further analyze and tune.\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "interpret high io queries graph"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific QueryId?**\r\n\r\nTo retrieve the Query Text for a specific QueryId, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the QueryId.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the Query Text for a given QueryId, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "get query text for io queries"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where BlkReadTime+BlkWriteTime > 0\r\n| extend Mean_blk_rw_time=(BlkReadTime+BlkWriteTime)/Calls\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by QueryId\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| extend SQL= strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",QueryId,\";\")\r\n| project SQL",
        "size": 1,
        "title": "Get Query Text from QueryId",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "generate io queries sql code"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTimeConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "by time intro"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Query Store is not enabled on the server. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "query store by time not enabled"
    },
    {
      "type": 1,
      "content": {
        "json": "#### No time consuming queries found in selected TimeRange.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "none found by time"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected end time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "too small interval by time"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Calls) by QueryId\r\n| top {TopTimeConsumingQueries} by max_Calls desc\r\n| project QueryId;\r\n{QueryStoreTable} \r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user            \r\n | where QueryId in (TopQueryIDs)\r\n |distinct EndTime,Calls,QueryId\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(EndTime, graphgrain)\r\n//| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), graphgrain)\r\n| make-series maxiotime=sum(Calls) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId: ',QueryId)\r\n",
        "size": 0,
        "title": "Top {TopTimeConsumingQueries} Queries by Calls. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data found during the window selected",
        "noDataMessageStyle": 4,
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "Queryid_d",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "Queryid_d",
            "sortOrder": 1
          }
        ],
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "top by time chart show queries"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the top {TopTimeConsumingQueries} queries by number of calls. ** \r\n\r\n\r\nQueries with high execution counts might be the ones which consume CPU. Details on these QueryIds are shown below. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "describe by time graph"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "a6fd4d67-8fe0-4d80-a680-a7aadf93d2ed",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsbyCalls",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Calls) by QueryId\r\n| top {TopTimeConsumingQueries} by max_Calls desc\r\n| project QueryId\r\n| serialize Rank = row_number()\r\n| project value = QueryId, label = QueryId, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "give specifics for by time query ids"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| where QueryId == {QueryIdsbyCalls}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,RuntimeStatsEntryId\r\n| summarize MeanExecutionTime=avg(MeanExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs), MinExecutionTime=min(MinExecDurationMs), TotalCalls=sum(Calls) by QueryId,QueryType\r\n",
        "size": 4,
        "title": "QueryId {QueryIdsbyCalls} Summary in selected TimeRange",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "further by time query details"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet databasename = \r\n{SessionsTable}\r\n|distinct DatabaseName,DatabaseId;\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10   \r\n| where QueryId == {QueryIdsbyCalls}\r\n| distinct MeanExecDurationMs,MaxExecDurationMs,MinExecDurationMs,Calls,QueryId,QueryType,Rows,TotalExecDurationMs,StartTime,EndTime,PlanId,DatabaseId,UserId,RuntimeStatsEntryId\r\n| summarize WindowStart=min(StartTime), WindowEnd=max(EndTime),MeanRows=sum(Rows)/sum(Calls),MeanExecutionTime=avg(MeanExecDurationMs),MinExecutionTime=min(MinExecDurationMs),MaxExecutionTime=max(MaxExecDurationMs),TotalCalls=sum(Calls),TotalExecutionTime=sum(TotalExecDurationMs),TotalRows=sum(Rows) by bin(todatetime(EndTime), graphgrain),QueryId,PlanId,DatabaseId,UserId\r\n| join kind=leftouter databasename on $left.DatabaseId == $right.DatabaseId\r\n| project QueryId,PlanId,DatabaseName = iff(isempty(DatabaseName),strcat(\"oid::\",DatabaseId), DatabaseName),UserId,WindowStart, WindowEnd, MeanRows,MeanExecutionTime,MinExecutionTime,MaxExecutionTime,TotalCalls,TotalExecutionTime, TotalRows    \r\n|order by WindowStart asc\r\n\r\n\r\n\r\n\r\n",
        "size": 0,
        "title": "QueryId {QueryIdsbyCalls} Runtime Statistics Split by Time Buckets of {ChartGrain} Each",
        "noDataMessage": "No data available during the period selected",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "EndTime",
              "formatter": 5
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "Rows",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Dbid",
              "formatter": 1
            },
            {
              "columnMatch": "Userid",
              "formatter": 1
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "Total_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "PreciseTimeStamp",
              "formatter": 6
            },
            {
              "columnMatch": "Min_time",
              "formatter": 5
            },
            {
              "columnMatch": "Max_time",
              "formatter": 5
            },
            {
              "columnMatch": "Stddev_time",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "specifics on by time query ids"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific QueryId?**\r\n\r\nTo retrieve the Query Text for a specific QueryId, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the QueryId.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the Query Text for a given QueryId, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "by time generate text"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where EndTime >= TimeStart and EndTime <= TimeEnd\r\n| where UserId != 10 // exclude azure super user \r\n| summarize max(Calls) by QueryId\r\n| top {TopTimeConsumingQueries} by max_Calls desc\r\n    | extend GetQueryText = strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",QueryId,\";\")\r\n    | project GetQueryText",
        "size": 1,
        "title": "Get Query Text from QueryId",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "rowLimit": 10000
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "by time queries generate sql"
    }
  ],
  "fallbackResourceIds": [],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}