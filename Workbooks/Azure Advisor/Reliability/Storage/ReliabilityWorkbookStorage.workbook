{
    "version": "Notebook/1.0",
    "items": [
      {
        "type": 9,
        "content": {
            "version": "KqlParameterItem/1.0",
            "parameters": [
            {
                "id": "aa0176d8-14ff-4dc5-9ae7-b8029f565674",
                "version": "KqlParameterItem/1.0",
                "name": "Subscriptions",
                "type": 6,
                "isRequired": true,
                "multiSelect": true,
                "quote": "'",
                "delimiter": ",",
                "typeSettings": {
                "additionalResourceOptions": [
                    "value::all"
                ],
                "includeAll": false,
                "showDefault": false
                },
                "defaultValue": "value::all"
            },
            {
                "id": "91aa9ba3-ed60-4472-8dd9-1c2cb6255757",
                "version": "KqlParameterItem/1.0",
                "name": "ResourceGroup",
                "label": "Resource Group",
                "type": 2,
                "isRequired": true,
                "multiSelect": true,
                "quote": "'",
                "delimiter": ",",
                "query": "resources\r\n| distinct resourceGroup",
                "crossComponentResources": [
                "{Subscriptions}"
                ],
                "typeSettings": {
                "additionalResourceOptions": [
                    "value::all"
                ],
                "showDefault": false
                },
                "defaultValue": "value::all",
                "queryType": 1,
                "resourceType": "microsoft.resourcegraph/resources"
            },
            {
                "id": "5a4f6d34-9f89-4ef8-b4ee-fb0580ec016d",
                "version": "KqlParameterItem/1.0",
                "name": "Environment",
                "type": 2,
                "multiSelect": true,
                "quote": "'",
                "delimiter": ",",
                "query": "resources\r\n| extend Environment = case(\r\ntags.Environment <> \"\", tags.Environment,\r\ntags.environment <> \"\", tags.environment,\r\ntags.Env <> \"\", tags.Env,\r\ntags.env <> \"\", tags.env,\r\ntolower(name) contains \"prod\", \"Production\",\r\ntolower(name) contains \"dev\", \"Development\",\r\ntolower(name) contains \"qa\", \"QA\",\r\ntolower(name) contains \"uat\", \"UAT\",\r\ntolower(name) contains \"sit\", \"SIT\",\r\ntolower(name) contains \"test\", \"Test\",\r\n\"Undefined\")\r\n| distinct Environment",
                "crossComponentResources": [
                "{Subscriptions}"
                ],
                "typeSettings": {
                "additionalResourceOptions": [
                    "value::all"
                ]
                },
                "defaultValue": "value::all",
                "queryType": 1,
                "resourceType": "microsoft.resourcegraph/resources"
            },
            {
                "id": "9d6afcdc-172c-4bef-8bab-dc372c5d3bb4",
                "version": "KqlParameterItem/1.0",
                "name": "TagName",
                "label": "Tag Name",
                "type": 2,
                "query": "Resources\r\n| where tags != '' and tags != '[]'\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| distinct tagName\r\n| sort by tagName asc",
                "crossComponentResources": [
                "{Subscriptions}"
                ],
                "typeSettings": {
                "additionalResourceOptions": []
                },
                "queryType": 1,
                "resourceType": "microsoft.resourcegraph/resources",
                "value": null
            },
            {
                "id": "95781001-338b-4ed3-81dc-ce16f2a98bf0",
                "version": "KqlParameterItem/1.0",
                "name": "TagValue",
                "label": "Tag Value",
                "type": 2,
                "query": "Resources\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| extend tagValue = tostring(tags[tagName])\r\n| where tags != '' and tags != '[]' and tostring(bag_keys(tags)[0]) == '{TagName}'\r\n| distinct tagValue\r\n| sort by tagValue asc",
                "crossComponentResources": [
                "{Subscriptions}"
                ],
                "typeSettings": {
                "additionalResourceOptions": []
                },
                "queryType": 1,
                "resourceType": "microsoft.resourcegraph/resources",
                "value": null
            },
            {
                "id": "e929bc01-08ec-45fe-bc6a-4e0267460dfa",
                "version": "KqlParameterItem/1.0",
                "name": "SLA",
                "label": "Show SLA",
                "type": 10,
                "description": "This will show the SLA information for the focus area",
                "isRequired": true,
                "typeSettings": {
                "additionalResourceOptions": [],
                "showDefault": false
                },
                "jsonData": "[{ \"value\": \"Yes\", \"label\": \"Yes\", \"selected\":true},\r\n {\"value\": \"No\", \"label\": \"No\"}]"
            },
            {
                "id": "9581cbc6-0f0f-42be-8ae8-6fe94de00ab8",
                "version": "KqlParameterItem/1.0",
                "name": "Help",
                "label": "Show Help",
                "type": 10,
                "isRequired": true,
                "typeSettings": {
                "additionalResourceOptions": []
                },
                "jsonData": "[{\"value\": \"Yes\", \"label\": \"Yes\", \"selected\":true },\r\n {\"value\": \"No\", \"label\": \"No\"}]"
            }
            ],
            "style": "pills",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "name": "parameters - 13"
      },
      {
        "type": 1,
        "content": {
          "json": "[SLA for Storage Accounts](https://azure.microsoft.com/support/legal/sla/storage/)\r\n* We guarantee that at least 99.99% (99.9% for Cool Access Tier) of the time, we will successfully process requests to read data from Read Access-Geo Redundant Storage (RA-GRS) Accounts, provided that failed attempts to read data from the primary region are retried on the secondary region.\r\n* We guarantee that at least 99.9% (99% for Cool Access Tier) of the time, we will successfully process requests to read data from Locally Redundant Storage (LRS), Zone Redundant Storage (ZRS), and Geo Redundant Storage (GRS) Accounts.\r\n* We guarantee that at least 99.9% (99% for Cool Access Tier) of the time, we will successfully process requests to write data to Locally Redundant Storage (LRS), Zone Redundant Storage (ZRS), and Geo Redundant Storage (GRS) Accounts and Read Access-Geo Redundant Storage (RA-GRS) Accounts.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/storage/)",
          "style": "upsell"
        },
        "conditionalVisibility": {
          "parameterName": "SLA",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        "name": "text - 2 - Copy - Copy"
      },
      {
        "type": 1,
        "content": {
          "json": "> * For application data, use read-access geo-redundant storage (RA-GRS). RA-GRS storage replicates the data to a secondary region, and provides read-only access from the secondary region. If there is a storage outage in the primary region, the application can read the data from the secondary region.\r\n* For VM disks, use managed disks. Managed disks provide better reliability for VMs in an availability set, because the disks are sufficiently isolated from each other to avoid single points of failure. Also, managed disks aren't subject to the IOPS limits of VHDs created in a storage account.\r\n* For Queue storage, create a backup queue in another region. For Queue storage, a read-only replica has limited use, because you can't queue or dequeue items. Instead, create a backup queue in a storage account in another region. If there is a storage outage, the application can use the backup queue, until the primary region becomes available again. That way, the application can still process new requests",
          "style": "info"
        },
        "conditionalVisibility": {
          "parameterName": "Help",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        "name": "text - 3 - Copy - Copy"
      },
      {
        "type": 3,
        "content": {
          "version": "KqlItem/1.0",
          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| extend environment = case(\r\n    tags.Environment \u003c\u003e \"\", tags.Environment,\r\n    tags.environment \u003c\u003e \"\", tags.environment,\r\n    tags.Env \u003c\u003e \"\", tags.Env,\r\n    tags.env \u003c\u003e \"\", tags.env,\r\n    tolower(name) contains \"prod\", \"Production\",\r\n    tolower(name) contains \"dev\", \"Development\",\r\n    tolower(name) contains \"qa\", \"QA\",\r\n    tolower(name) contains \"uat\", \"UAT\",\r\n    tolower(name) contains \"sit\", \"SIT\",\r\n    tolower(name) contains \"test\", \"Test\",\r\n    \"Undefined\")\r\n| where environment in ({Environment})\r\n| join kind = innerunique(\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    | distinct id\r\n    )\r\n    on id\r\n| where \r\n    (type == 'microsoft.compute/virtualmachines') or \r\n    (type == 'microsoft.classiccompute/virtualmachines') or \r\n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\r\n    (type == 'microsoft.web/sites') or \r\n    (type == 'microsoft.web/serverfarms') or\r\n    (type == \"microsoft.containerservice/managedclusters\") or \r\n    (type == 'microsoft.sql/servers/databases') or \r\n    (type == 'microsoft.documentdb/databaseaccounts') or \r\n    (type == 'microsoft.dbformysql/servers') or \r\n    (type == 'microsoft.dbformysql/flexibleservers') or \r\n    (type == 'microsoft.cache/redis') or\r\n    (type == \"microsoft.apimanagement/service\") or \r\n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \r\n    (type == \"microsoft.network/azurefirewalls\") or \r\n    (type == \"microsoft.network/frontdoors\") or\r\n    (type == \"microsoft.cdn/profiles\") or\r\n    (type == \"microsoft.network/applicationgateways\") or \r\n    (type == \"microsoft.network/loadbalancers\") or \r\n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \r\n    (type == \"microsoft.network/virtualnetworkgateways\") or \r\n    (type == \"microsoft.recoveryservices/vaults\")\r\n| join kind=leftouter (\r\n    resources \r\n    | where type == \"microsoft.containerservice/managedclusters\"\r\n    // Expand per node pool to get using zone for all node pool\r\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\r\n    | extend AvZones = agentPoolProfiles.availabilityZones\r\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\r\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\r\n    | extend useAvZone = case(\r\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\r\n    )\r\n    | join kind=leftouter(\r\n        resources\r\n            | where type == 'microsoft.compute/virtualmachinescalesets'\r\n            | extend resourceGroup = tolower(tostring(resourceGroup))\r\n            | extend VmssCapacity = sku.capacity\r\n            | extend vmssStorageAccountType = iff(\r\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\r\n            )\r\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\r\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\r\n    | extend AksNodePoolStorageAccountType = iff(\r\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\r\n    )\r\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \r\n    // If even one node pool is not using a zone, it will be \"Not Configured\".\r\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\r\n) on id\r\n// Start - Azure Load Balancer additional logic\r\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\r\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\r\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\r\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\r\n//| extend properties = todynamic(properties), sku = todynamic(sku), \r\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\r\n// End - Azure Load Balancer additional logic\r\n| extend state = case(\r\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\r\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\r\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\r\n    type == 'microsoft.web/sites', tostring(properties.state),\r\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\r\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\r\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\r\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\r\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\r\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\r\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\r\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\r\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\r\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\r\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\r\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\r\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\r\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\r\n    type contains \"publicip\", tostring(properties.provisioningState),\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\r\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\r\n    \"Undefined\"\r\n    )\r\n| extend skuName = case(\r\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\r\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\r\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\r\n    type == 'microsoft.web/sites', tostring(properties.sku),\r\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\r\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\r\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\r\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\r\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\r\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\r\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\r\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\r\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\r\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\r\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\r\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\r\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\r\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\r\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\r\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\r\n    \"Undefined\"\r\n    )\r\n| extend avZones = case(\r\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\r\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\r\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\r\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\r\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\r\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\r\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\r\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), case( //SQL AZ SKU \u0026 region availability filter\r\n    sku.name == 'Basic' or sku.name == 'Standard' or sku.name == 'System', 'Not Applicable',\r\n    sku.name == 'GeneralPurpose' and location !in~ ('westeurope', 'northeurope', 'westus2', 'francecentral', 'eastus', 'eastus2', 'southeastasia', 'qatarcentral', 'australiaeast', 'japaneast', 'uksouth'), 'Not Applicable',\r\n    properties.zoneRedundant == 'true', 'Configured',\r\n    'Not Configured'\r\n    ),\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\r\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \r\n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\r\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\r\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\r\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\r\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\r\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\r\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\r\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\r\n    (type == \"microsoft.network/loadbalancers\"), case( \r\n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\r\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\r\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\r\n    tostring(LbAvZones)\r\n    ),\r\n    (type contains \"publicip\"), case( \r\n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\r\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\r\n    ),\r\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\r\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend avSets = case(\r\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\r\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\r\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\r\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\r\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\r\n    type == 'microsoft.web/sites', 'Not Applicable',\r\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\r\n    type == 'microsoft.containerservice/managedclusters', case(\r\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\r\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\r\n    \"Scale Sets Not Configured\"\r\n    ),\r\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\r\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\r\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\r\n    type == 'microsoft.cache/redis', \"Not Applicable\",\r\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\r\n    type contains \"storageaccounts\", \"Not Applicable\",\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend Capacity = case(\r\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\r\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\r\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\r\n    type == 'microsoft.web/sites', \"ASP Config\",\r\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\r\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\r\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\r\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\r\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\r\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\r\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\r\n    type contains \"storageaccounts\", \"Not Applicable\", \r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend FaultDomain = case(\r\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\r\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\r\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\r\n    type == 'microsoft.web/sites', \"Not Applicable\",\r\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\r\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\r\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\r\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\r\n    type == 'microsoft.cache/redis', 'Not Applicable',\r\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\r\n    type contains \"storageaccounts\", \"Not Applicable\",\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", \"Not Applicable\",\r\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend osDisk = case(\r\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\r\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\r\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\r\n    type == 'microsoft.web/sites', 'Not Applicable',\r\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\r\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\r\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\r\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\r\n    type == 'microsoft.cache/redis', 'Not Applicable',\r\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\r\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\r\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\r\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    'Not Applicable'\r\n    )\r\n| extend OSDisk = case(\r\n    isnotempty(osDisk), osDisk,\r\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\r\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\r\n    \"Unknown\")\r\n| extend ReadReplica = case (\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\r\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\r\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\r\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\r\n    type == 'microsoft.cache/redis', 'Not Applicable',\r\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\r\n    type contains \"storageaccounts\", case(\r\n        location in~ ('qatarcentral'), 'Not Applicable',\r\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\r\n        \"Not Configured\"\r\n        ),\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", \"Not Applicable\",\r\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend AutomaticFailover = case(\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\r\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\r\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\r\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\r\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\r\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\r\n    type == 'microsoft.cache/redis', 'Not Applicable',\r\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\r\n    type contains \"storageaccounts\", \"Not Applicable\",\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", \"Not Applicable\",\r\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend MultipleWriteLocations = case(\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\r\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\r\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\r\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\r\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\r\n    (type contains \"storageaccounts\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\r\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\r\n    (type contains \"publicip\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend StorageAutogrow = case(\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\r\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\r\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\r\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\r\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\r\n    (type contains \"storageaccounts\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\r\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\r\n    (type contains \"publicip\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend ReplicationRole = case(\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\r\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\r\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\r\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\r\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\r\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\r\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\r\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\r\n    (type contains \"publicip\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| project \r\n    Type = tolower(type),\r\n    SkuName = tolower(skuName),\r\n    Kind = tolower(kind),\r\n    SubscriptionId = subscriptionId,\r\n    Name = tolower(tostring(id)),\r\n    State = tolower(state),\r\n    Location = tolower(location),\r\n    ResourceGroup = resourceGroup,\r\n    Zones = tolower(tostring(zones)),\r\n    AvailabilityZone = tolower(avZones),\r\n    AvailabilitySet = tolower(avSets),\r\n    Capacity = tolower(Capacity),\r\n    FaultDomain = tolower(FaultDomain),\r\n    OSDisk = tolower(OSDisk),\r\n    ReadReplica = tolower(ReadReplica), \r\n    AutomaticFailover = tolower(AutomaticFailover),\r\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\r\n    StorageAutogrow = tolower(StorageAutogrow),\r\n    ReplicationRole = tolower(ReplicationRole),\r\n    Environment = environment,\r\n    properties\r\n| join kind = leftouter (\r\n    recoveryservicesresources\r\n    | where name startswith \"VM;\"\r\n    | project Name = tolower(tostring(properties.dataSourceInfo.resourceID)), Backup = tostring(properties.protectionStatus)\r\n    )\r\n    on Name\r\n| extend Backup = case(\r\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\r\n    \"Unknown\")\r\n| extend Backup = case(\r\n    (Type == 'microsoft.compute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\r\n    (Type == 'microsoft.classiccompute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\r\n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \r\n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\r\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \r\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\r\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\r\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\r\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\r\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Unknown\"\r\n    )\r\n| extend AvailabilitySet = case(\r\n    AvailabilitySet == '-', 'None',\r\n    isnotempty(AvailabilitySet), AvailabilitySet,\r\n    \"Unknown\")\r\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\r\n| where Type =~ \"microsoft.storage/storageaccounts\" or Type =~ \"microsoft.classicstorage/storageaccounts\"\r\n| summarize ResourceTotal=count(Name), Storagev1=dcountif(Name, Kind == \"storage\"), NoReplica=dcountif(Name, ReadReplica == \"not configured\")",
          "size": 3,
          "title": "Storage Account - Recommendations Summary",
          "showExportToExcel": true,
          "queryType": 1,
          "resourceType": "microsoft.resourcegraph/resources",
          "crossComponentResources": [
            "{Subscriptions}"
          ],
          "gridSettings": {
            "rowLimit": 10000,
            "labelSettings": [
              {
                "columnId": "ResourceTotal",
                "label": "Resource Total"
              },
              {
                "columnId": "Storagev1",
                "label": "Storage V1"
              },
              {
                "columnId": "NoReplica",
                "label": "Replication Not Enabled"
              }
            ]
          }
        },
        "name": "kql_storage_account_resources_details_summary"
      },
      {
        "type": 3,
        "content": {
          "version": "KqlItem/1.0",
          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| extend environment = case(\r\n    tags.Environment \u003c\u003e \"\", tags.Environment,\r\n    tags.environment \u003c\u003e \"\", tags.environment,\r\n    tags.Env \u003c\u003e \"\", tags.Env,\r\n    tags.env \u003c\u003e \"\", tags.env,\r\n    tolower(name) contains \"prod\", \"Production\",\r\n    tolower(name) contains \"dev\", \"Development\",\r\n    tolower(name) contains \"qa\", \"QA\",\r\n    tolower(name) contains \"uat\", \"UAT\",\r\n    tolower(name) contains \"sit\", \"SIT\",\r\n    tolower(name) contains \"test\", \"Test\",\r\n    \"Undefined\")\r\n| where environment in ({Environment})\r\n| join kind = innerunique(\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    | distinct id\r\n    )\r\n    on id\r\n| where \r\n    (type == 'microsoft.compute/virtualmachines') or \r\n    (type == 'microsoft.classiccompute/virtualmachines') or \r\n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\r\n    (type == 'microsoft.web/sites') or \r\n    (type == 'microsoft.web/serverfarms') or\r\n    (type == \"microsoft.containerservice/managedclusters\") or \r\n    (type == 'microsoft.sql/servers/databases') or \r\n    (type == 'microsoft.documentdb/databaseaccounts') or \r\n    (type == 'microsoft.dbformysql/servers') or \r\n    (type == 'microsoft.dbformysql/flexibleservers') or \r\n    (type == 'microsoft.cache/redis') or\r\n    (type == \"microsoft.apimanagement/service\") or \r\n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \r\n    (type == \"microsoft.network/azurefirewalls\") or \r\n    (type == \"microsoft.network/frontdoors\") or\r\n    (type == \"microsoft.cdn/profiles\") or\r\n    (type == \"microsoft.network/applicationgateways\") or \r\n    (type == \"microsoft.network/loadbalancers\") or \r\n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \r\n    (type == \"microsoft.network/virtualnetworkgateways\") or \r\n    (type == \"microsoft.recoveryservices/vaults\")\r\n| join kind=leftouter (\r\n    resources \r\n    | where type == \"microsoft.containerservice/managedclusters\"\r\n    // Expand per node pool to get using zone for all node pool\r\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\r\n    | extend AvZones = agentPoolProfiles.availabilityZones\r\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\r\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\r\n    | extend useAvZone = case(\r\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\r\n    )\r\n    | join kind=leftouter(\r\n        resources\r\n            | where type == 'microsoft.compute/virtualmachinescalesets'\r\n            | extend resourceGroup = tolower(tostring(resourceGroup))\r\n            | extend VmssCapacity = sku.capacity\r\n            | extend vmssStorageAccountType = iff(\r\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\r\n            )\r\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\r\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\r\n    | extend AksNodePoolStorageAccountType = iff(\r\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\r\n    )\r\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \r\n    // If even one node pool is not using a zone, it will be \"Not Configured\".\r\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\r\n) on id\r\n// Start - Azure Load Balancer additional logic\r\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\r\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\r\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\r\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\r\n//| extend properties = todynamic(properties), sku = todynamic(sku), \r\n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\r\n// End - Azure Load Balancer additional logic\r\n| extend state = case(\r\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\r\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\r\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\r\n    type == 'microsoft.web/sites', tostring(properties.state),\r\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\r\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\r\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\r\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\r\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\r\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\r\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\r\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\r\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\r\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\r\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\r\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\r\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\r\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\r\n    type contains \"publicip\", tostring(properties.provisioningState),\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\r\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\r\n    \"Undefined\"\r\n    )\r\n| extend skuName = case(\r\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\r\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\r\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\r\n    type == 'microsoft.web/sites', tostring(properties.sku),\r\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\r\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\r\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\r\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\r\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\r\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\r\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\r\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\r\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\r\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\r\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\r\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\r\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\r\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\r\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\r\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\r\n    \"Undefined\"\r\n    )\r\n| extend avZones = case(\r\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\r\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\r\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\r\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\r\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\r\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\r\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\r\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), case( //SQL AZ SKU \u0026 region availability filter\r\n    sku.name == 'Basic' or sku.name == 'Standard' or sku.name == 'System', 'Not Applicable',\r\n    sku.name == 'GeneralPurpose' and location !in~ ('westeurope', 'northeurope', 'westus2', 'francecentral', 'eastus', 'eastus2', 'southeastasia', 'qatarcentral', 'australiaeast', 'japaneast', 'uksouth'), 'Not Applicable',\r\n    properties.zoneRedundant == 'true', 'Configured',\r\n    'Not Configured'\r\n    ),\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\r\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \r\n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\r\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\r\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\r\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\r\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\r\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\r\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\r\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\r\n    (type == \"microsoft.network/loadbalancers\"), case( \r\n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\r\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\r\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\r\n    tostring(LbAvZones)\r\n    ),\r\n    (type contains \"publicip\"), case( \r\n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\r\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\r\n    ),\r\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\r\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend avSets = case(\r\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\r\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\r\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\r\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\r\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\r\n    type == 'microsoft.web/sites', 'Not Applicable',\r\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\r\n    type == 'microsoft.containerservice/managedclusters', case(\r\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\r\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\r\n    \"Scale Sets Not Configured\"\r\n    ),\r\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\r\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\r\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\r\n    type == 'microsoft.cache/redis', \"Not Applicable\",\r\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\r\n    type contains \"storageaccounts\", \"Not Applicable\",\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend Capacity = case(\r\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\r\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\r\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\r\n    type == 'microsoft.web/sites', \"ASP Config\",\r\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\r\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\r\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\r\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\r\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\r\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\r\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\r\n    type contains \"storageaccounts\", \"Not Applicable\", \r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend FaultDomain = case(\r\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\r\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\r\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\r\n    type == 'microsoft.web/sites', \"Not Applicable\",\r\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\r\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\r\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\r\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\r\n    type == 'microsoft.cache/redis', 'Not Applicable',\r\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\r\n    type contains \"storageaccounts\", \"Not Applicable\",\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", \"Not Applicable\",\r\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend osDisk = case(\r\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\r\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\r\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\r\n    type == 'microsoft.web/sites', 'Not Applicable',\r\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\r\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\r\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\r\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\r\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\r\n    type == 'microsoft.cache/redis', 'Not Applicable',\r\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\r\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\r\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\r\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\r\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    'Not Applicable'\r\n    )\r\n| extend OSDisk = case(\r\n    isnotempty(osDisk), osDisk,\r\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\r\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\r\n    \"Unknown\")\r\n| extend ReadReplica = case (\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\r\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\r\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\r\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\r\n    type == 'microsoft.cache/redis', 'Not Applicable',\r\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\r\n    type contains \"storageaccounts\", case(\r\n        location in~ ('qatarcentral'), 'Not Applicable',\r\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\r\n        \"Not Configured\"\r\n        ),\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", \"Not Applicable\",\r\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend AutomaticFailover = case(\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\r\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\r\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\r\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\r\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\r\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\r\n    type == 'microsoft.cache/redis', 'Not Applicable',\r\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\r\n    type contains \"storageaccounts\", \"Not Applicable\",\r\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\r\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\r\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\r\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\r\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\r\n    type contains \"publicip\", \"Not Applicable\",\r\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\r\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend MultipleWriteLocations = case(\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\r\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\r\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\r\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\r\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\r\n    (type contains \"storageaccounts\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\r\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\r\n    (type contains \"publicip\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend StorageAutogrow = case(\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\r\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\r\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\r\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\r\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\r\n    (type contains \"storageaccounts\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\r\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\r\n    (type contains \"publicip\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| extend ReplicationRole = case(\r\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\r\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\r\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\r\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\r\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\r\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\r\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\r\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\r\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\r\n    (type contains \"publicip\"), \"Not Applicable\",\r\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\r\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Undefined\"\r\n    )\r\n| project \r\n    Type = tolower(type),\r\n    SkuName = tolower(skuName),\r\n    Kind = tolower(kind),\r\n    SubscriptionId = subscriptionId,\r\n    Name = tolower(tostring(id)),\r\n    State = tolower(state),\r\n    Location = tolower(location),\r\n    ResourceGroup = resourceGroup,\r\n    Zones = tolower(tostring(zones)),\r\n    AvailabilityZone = tolower(avZones),\r\n    AvailabilitySet = tolower(avSets),\r\n    Capacity = tolower(Capacity),\r\n    FaultDomain = tolower(FaultDomain),\r\n    OSDisk = tolower(OSDisk),\r\n    ReadReplica = tolower(ReadReplica), \r\n    AutomaticFailover = tolower(AutomaticFailover),\r\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\r\n    StorageAutogrow = tolower(StorageAutogrow),\r\n    ReplicationRole = tolower(ReplicationRole),\r\n    Environment = environment,\r\n    properties\r\n| join kind = leftouter (\r\n    recoveryservicesresources\r\n    | where name startswith \"VM;\"\r\n    | project Name = tolower(tostring(properties.dataSourceInfo.resourceID)), Backup = tostring(properties.protectionStatus)\r\n    )\r\n    on Name\r\n| extend Backup = case(\r\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\r\n    \"Unknown\")\r\n| extend Backup = case(\r\n    (Type == 'microsoft.compute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\r\n    (Type == 'microsoft.classiccompute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\r\n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \r\n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\r\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \r\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\r\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\r\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\r\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\r\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\r\n    \"Unknown\"\r\n    )\r\n| extend AvailabilitySet = case(\r\n    AvailabilitySet == '-', 'None',\r\n    isnotempty(AvailabilitySet), AvailabilitySet,\r\n    \"Unknown\")\r\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\r\n| where Type =~ \"microsoft.storage/storageaccounts\" or Type =~ \"microsoft.classicstorage/storageaccounts\"",
          "size": 3,
          "showExportToExcel": true,
          "queryType": 1,
          "resourceType": "microsoft.resourcegraph/resources",
          "crossComponentResources": [
            "{Subscriptions}"
          ],
          "gridSettings": {
            "formatters": [
              {
                "columnMatch": "$gen_group",
                "formatter": 13,
                "formatOptions": {
                  "linkTarget": "Resource",
                  "showIcon": true
                }
              },
              {
                "columnMatch": "Type",
                "formatter": 5
              },
              {
                "columnMatch": "Name",
                "formatter": 5
              },
              {
                "columnMatch": "Kind",
                "formatter": 18,
                "formatOptions": {
                  "thresholdsOptions": "icons",
                  "thresholdsGrid": [
                    {
                      "operator": "contains",
                      "thresholdValue": "v2",
                      "representation": "success",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "2",
                      "text": "{0}{1}"
                    }
                  ]
                }
              },
              {
                "columnMatch": "SubscriptionId",
                "formatter": 5
              },
              {
                "columnMatch": "Location",
                "formatter": 17
              },
              {
                "columnMatch": "Zones",
                "formatter": 5
              },
              {
                "columnMatch": "AvailabilityZone",
                "formatter": 5
              },
              {
                "columnMatch": "AvailabilitySet",
                "formatter": 5
              },
              {
                "columnMatch": "Capacity",
                "formatter": 5
              },
              {
                "columnMatch": "FaultDomain",
                "formatter": 5
              },
              {
                "columnMatch": "OSDisk",
                "formatter": 5
              },
              {
                "columnMatch": "ReadReplica",
                "formatter": 18,
                "formatOptions": {
                  "thresholdsOptions": "icons",
                  "thresholdsGrid": [
                    {
                      "operator": "==",
                      "thresholdValue": "configured",
                      "representation": "success",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "not configured",
                      "representation": "2",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "not applicable",
                      "representation": "more",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "unknown",
                      "text": "{0}{1}"
                    }
                  ]
                }
              },
              {
                "columnMatch": "AutomaticFailover",
                "formatter": 5
              },
              {
                "columnMatch": "MultipleWriteLocations",
                "formatter": 5
              },
              {
                "columnMatch": "StorageAutogrow",
                "formatter": 5
              },
              {
                "columnMatch": "Backup",
                "formatter": 5
              },
              {
                "columnMatch": "Environment",
                "formatter": 18,
                "formatOptions": {
                  "thresholdsOptions": "colors",
                  "thresholdsGrid": [
                    {
                      "operator": "contains",
                      "thresholdValue": "Prod",
                      "representation": "redBright",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "contains",
                      "thresholdValue": "prod",
                      "representation": "redBright",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "text": "{0}{1}"
                    }
                  ]
                }
              },
              {
                "columnMatch": "SubscriptionName",
                "formatter": 5
              },
              {
                "columnMatch": "SecondaryLocation",
                "formatter": 18,
                "formatOptions": {
                  "thresholdsOptions": "icons",
                  "thresholdsGrid": [
                    {
                      "operator": "==",
                      "thresholdValue": "-",
                      "representation": "2",
                      "text": "Warning"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "success",
                      "text": "{0}{1}"
                    }
                  ]
                }
              },
              {
                "columnMatch": "SecondaryStatus",
                "formatter": 18,
                "formatOptions": {
                  "thresholdsOptions": "icons",
                  "thresholdsGrid": [
                    {
                      "operator": "==",
                      "thresholdValue": "Available",
                      "representation": "success",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "2",
                      "text": "Warning"
                    }
                  ]
                }
              },
              {
                "columnMatch": "AccessTier",
                "formatter": 18,
                "formatOptions": {
                  "thresholdsOptions": "icons",
                  "thresholdsGrid": [
                    {
                      "operator": "==",
                      "thresholdValue": "Hot",
                      "representation": "success",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "2",
                      "text": "Warning"
                    }
                  ]
                }
              },
              {
                "columnMatch": "ReplicationType",
                "formatter": 18,
                "formatOptions": {
                  "thresholdsOptions": "icons",
                  "thresholdsGrid": [
                    {
                      "operator": "contains",
                      "thresholdValue": "RA-GRS",
                      "representation": "success",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "contains",
                      "thresholdValue": "GRS",
                      "representation": "2",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "contains",
                      "thresholdValue": "ZRS",
                      "representation": "2",
                      "text": "{0}{1}"
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "2",
                      "text": "{0}{1}"
                    }
                  ]
                }
              },
              {
                "columnMatch": "type",
                "formatter": 5
              }
            ],
            "rowLimit": 10000,
            "hierarchySettings": {
              "treeType": 1,
              "groupBy": [
                "SubscriptionId"
              ],
              "expandTopLevel": false,
              "finalBy": "Name"
            },
            "labelSettings": [
              {
                "columnId": "SkuName",
                "label": "Sku Name"
              },
              {
                "columnId": "SubscriptionId",
                "label": "Subscription"
              },
              {
                "columnId": "ResourceGroup",
                "label": "Resource Group"
              },
              {
                "columnId": "ReadReplica",
                "label": "Read Replication"
              },
              {
                "columnId": "ReplicationRole",
                "label": "Replication Type"
              }
            ]
          }
        },
        "name": "kql_storage_account_resources_details"
      }
    
    ]
}