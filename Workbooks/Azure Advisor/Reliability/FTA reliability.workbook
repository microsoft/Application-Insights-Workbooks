{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "08a55cf7-d48e-4ad0-9976-cdf193bab582",
            "version": "KqlParameterItem/1.0",
            "name": "Cloud",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"AzureCloud\", \"label\":\"Azure\", \"selected\":true },\r\n    { \"value\":\"GovernmentCloud\", \"label\":\"Azure Government\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "aa0176d8-14ff-4dc5-9ae7-b8029f565674",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": true,
              "showDefault": false
            },
            "defaultValue": "value::all",
            "value": [
              "value::all"
            ]
    },
    {
            "id": "91aa9ba3-ed60-4472-8dd9-1c2cb6255757",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceGroup",
            "label": "Resource Group",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| distinct resourceGroup",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "5a4f6d34-9f89-4ef8-b4ee-fb0580ec016d",
            "version": "KqlParameterItem/1.0",
            "name": "Environment",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| extend Environment = case(\r\ntags.Environment <> \"\", tags.Environment,\r\ntags.environment <> \"\", tags.environment,\r\ntags.Env <> \"\", tags.Env,\r\ntags.env <> \"\", tags.env,\r\ntolower(name) contains \"prod\", \"Production\",\r\ntolower(name) contains \"dev\", \"Development\",\r\ntolower(name) contains \"qa\", \"QA\",\r\ntolower(name) contains \"uat\", \"UAT\",\r\ntolower(name) contains \"sit\", \"SIT\",\r\ntolower(name) contains \"test\", \"Test\",\r\n\"Undefined\")\r\n| distinct Environment",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "9d6afcdc-172c-4bef-8bab-dc372c5d3bb4",
            "version": "KqlParameterItem/1.0",
            "name": "TagName",
            "label": "Tag Name",
            "type": 2,
            "query": "Resources\r\n| where tags != '' and tags != '[]'\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| distinct tagName\r\n| sort by tagName asc",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null
          },
          {
            "id": "95781001-338b-4ed3-81dc-ce16f2a98bf0",
            "version": "KqlParameterItem/1.0",
            "name": "TagValue",
            "label": "Tag Value",
            "type": 2,
            "query": "Resources\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| extend tagValue = tostring(tags[tagName])\r\n| where tags != '' and tags != '[]' and tostring(bag_keys(tags)[0]) == '{TagName}'\r\n| distinct tagValue\r\n| sort by tagValue asc",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null
          },
          {
            "id": "e929bc01-08ec-45fe-bc6a-4e0267460dfa",
            "version": "KqlParameterItem/1.0",
            "name": "SLA",
            "label": "Show SLA",
            "type": 10,
            "description": "This will show the SLA information for the focus area",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"Yes\", \"label\": \"Yes\", \"selected\":true},\r\n {\"value\": \"No\", \"label\": \"No\"}]"
          },
          {
            "id": "9581cbc6-0f0f-42be-8ae8-6fe94de00ab8",
            "version": "KqlParameterItem/1.0",
            "name": "Help",
            "label": "Show Help",
            "type": 10,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[{\"value\": \"Yes\", \"label\": \"Yes\", \"selected\":true },\r\n {\"value\": \"No\", \"label\": \"No\"}]"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 13"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "090bef23-a5f0-4572-bde1-5caf26d2d989",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "OV",
            "style": "link"
          },
          {
            "id": "d6656d8e-acfc-4d7d-853d-a8c628907ba6",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Summary",
            "subTarget": "Summary2",
            "style": "link"
          },
          {
            "id": "d983c7c7-b5a0-4245-86fa-52ac1266fb13",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Azure Advisor",
            "subTarget": "Advisor",
            "style": "link"
          },
          {
            "id": "88c013ec-1149-411f-8b35-02e737237a91",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Azure Site Recovery",
            "subTarget": "Backup",
            "style": "link"
          },
          {
            "id": "9b8f2619-143e-47eb-a821-aadcf29c095d",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Compute",
            "subTarget": "Compute",
            "style": "link"
          },
          {
            "id": "ea4f305b-6689-4706-9627-8b4de5a8c098",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Containers",
            "subTarget": "Containers",
            "style": "link"
          },
          {
            "id": "9a24ddec-d921-4956-bdfd-b43f8a4a1dae",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Databases",
            "subTarget": "Databases",
            "style": "link"
          },
          {
            "id": "647b5890-5962-42e9-acdd-6a6392ce74c1",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Integration",
            "subTarget": "Integration",
            "style": "link"
          },
          {
            "id": "346cd3cc-65ff-49dd-ae87-fc907b52dc37",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Networking",
            "subTarget": "Networking",
            "style": "link"
          },
          {
            "id": "946b8b66-9891-4017-b5dd-f6527f28cee4",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Storage",
            "subTarget": "Storage",
            "style": "link"
          },
          {
            "id": "8e297f94-65ab-4c53-9513-29204af07f80",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Web",
            "subTarget": "Web",
            "style": "link"
          },
          {
            "id": "0f548bfa-f959-4a25-a9ac-7c986be6d33b",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Export",
            "subTarget": "Export",
            "style": "link"
          }
        ]
      },
      "name": "links - 5"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "> Azure Advisor analyzes your configurations and usage telemetry and offers personalized, actionable recommendations to help you optimize your Azure resources for reliability, security, operational excellence, performance, and cost.\r\n\r\n* Azure Advisor is available automatically without any configuration.\r\n* The table in this workbook specifically relate to any reliability recommendations that may apply to the selected subscription(s).\r\n* Filter advisor recommendations using the subscriptions parameter as required.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "Help",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "Advisor Help"
          },
          {
            "type": 1,
            "content": {
              "json": "> Azure Advisor recommendations are not yet available for Azure Government cloud",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "Help",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "Cloud",
                "comparison": "isEqualTo",
                "value": "GovernmentCloud"
              }
            ],
            "name": "Advisor Help - Gov"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "advisorresources\n| extend Category = tostring(properties.category)\n| extend Description = tostring(properties.shortDescription.problem)\n| extend ImpactedField = tostring(properties.impactedField)\n| extend ImpactedValue = tostring(properties.resourceMetadata.resourceId)\n| extend Impact = tostring(properties.impact)\n| extend LastUpdated = tostring(properties.lastUpdated)\n| project Impact, ImpactedField, ImpactedValue, Description, resourceGroup, subscriptionId, Category, LastUpdated\n| where Category == \"HighAvailability\"\n| where resourceGroup in ({ResourceGroup})",
              "size": 3,
              "title": "Advisor - Reliability",
              "showExportToExcel": true,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscriptions}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                      "formatter": 13,
                    "formatOptions": {
                        "linkTarget": "Resource",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Impact",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "High",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Medium",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Low",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "gray",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "ImpactedField",
                    "formatter": 16,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "ImpactedValue",
                      "formatter": 5
                  },
                  {
                    "columnMatch": "Description",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "orange",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "resourceGroup",
                    "formatter": 14,
                    "formatOptions": {
                      "linkTarget": null,
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Category",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "LastUpdated",
                    "formatter": 6
                  }
                ],
                "rowLimit": 10000,
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "subscriptionId",
                    "Impact",
                    "Description"
                    ],
                    "finalBy": "ImpactedValue"
                },
                "labelSettings": [
                  {
                    "columnId": "ImpactedField",
                    "label": "Resource Type"
                  },
                  {
                    "columnId": "ImpactedValue",
                    "label": "Resource"
                  },
                  {
                    "columnId": "resourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "LastUpdated",
                    "label": "Last Updated"
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibility": {
              "parameterName": "Cloud",
              "comparison": "isEqualTo",
              "value": "AzureCloud"
            },
            "name": "query - 0"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Advisor"
      },
      "name": "Advisor"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## Reliability Workbook\r\n\r\nThe objective of this workbook is to provide an overview of the configured state of deployment options that affect the resilience and/or availability SLA for common Azure resource types. The workbook is to be used as guidance only, and does not represent a guarantee for a service level.\r\n\r\n* Building a reliable application in the cloud is different from traditional application development. While historically you may have purchased levels of redundant higher-end hardware to minimize the chance of an entire application platform failing, in the cloud, we acknowledge up front that failures will happen. Instead of trying to prevent failures altogether, the goal is to minimize the effects of a single failing component.\r\n* To assess your workload using the tenets found in the Microsoft Azure Well-Architected Framework, see the [Microsoft Azure Well-Architected Review](https://learn.microsoft.com/assessments/?id=azure-architecture-review&mode=pre-assessment).\r\n* Reliable applications are:\r\n\t* Resilient and recover gracefully from failures, and they continue to function with minimal downtime and data loss before full recovery.\r\n\t* Highly available (HA) and run as designed in a healthy state with no significant downtime.\r\n* Understanding how these elements work together — and how they affect cost — is essential to building a reliable application. It can help you determine how much downtime is acceptable, the potential cost to your business, and which functions are necessary during a recovery.\r\n* Reliability considerations for individual Azure services are provided in the [Resiliency checklist for specific Azure services](https://learn.microsoft.com/azure/architecture/checklist/resiliency-per-service).\r\n\r\n> Reference: [Microsoft Azure Well-Architected Framework - Reliability Pillar](https://learn.microsoft.com/azure/architecture/framework/resiliency/overview)"
            },
            "name": "text - 0"
          },
          {
            "type": 1,
            "content": {
              "json": "Indicates an implemented feature that can result in a more resilient implementation, a higher SLA, and/or increased ability to restore a service.",
              "style": "success"
            },
            "customWidth": "50",
            "name": "text - 1",
            "styleSettings": {
              "margin": "10px",
              "showBorder": true
            }
          },
          {
            "type": 1,
            "content": {
              "json": "Indicates a feature that has not been implemented, and therefore can result in a less resilient implementation, a reduced SLA, and/or reduced ability to restore a service.",
              "style": "warning"
            },
            "customWidth": "50",
            "name": "text - 2",
            "styleSettings": {
              "margin": "10px",
              "showBorder": true
            }
          },
          {
            "type": 1,
            "content": {
              "json": "* This workbook source is maintained publicly as OpenSource in [GitHub Repository](https://github.com/Azure/reliability-workbook). There is no Service Level guarantees or warranties associated with the usage of this workbook. Refer [license](https://github.com/Azure/reliability-workbook/blob/main/LICENSE) for more details.\r\n\r\n> If there are any bugs or suggestions for improvements, feel free to raise an issue in the above GitHub repository. In case you want to reach out to maintainers, please email to [FTA Reliability vTeam](mailto:fta-reliability-team@microsoft.com)",
              "style": "info"
            },
            "name": "text - 3"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "OV"
      },
      "name": "Overview"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Advisor - Reliability",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "advisorresources\n| extend Category = tostring(properties.category)\n| extend Description = tostring(properties.shortDescription.problem)\n| extend ImpactedField = tostring(properties.impactedField)\n| extend ImpactedValue = tostring(properties.resourceMetadata.resourceId)\n| extend Impact = tostring(properties.impact)\n| extend LastUpdated = tostring(properties.lastUpdated)\n| project Impact, ImpactedField, ImpactedValue, Description, resourceGroup, subscriptionId, Category, LastUpdated\n| where Category == \"HighAvailability\"\n| where resourceGroup in ({ResourceGroup})\n| summarize count() by Description",
                    "size": 3,
                    "title": "By Recommendation",
                    "showExportToExcel": true,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "visualization": "piechart"
                  },
                  "customWidth": "50",
                  "name": "advisorbyrecstep",
                  "styleSettings": {
                    "margin": "5px"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "advisorresources\n| extend Category = tostring(properties.category)\n| extend Description = tostring(properties.shortDescription.problem)\n| extend ImpactedField = tostring(properties.impactedField)\n| extend ImpactedValue = tostring(properties.resourceMetadata.resourceId)\n| extend Impact = tostring(properties.impact)\n| extend LastUpdated = tostring(properties.lastUpdated)\n| project Impact, ImpactedField, ImpactedValue, Description, resourceGroup, subscriptionId, Category, LastUpdated\n| where Category == \"HighAvailability\"\n| where resourceGroup in ({ResourceGroup})\n| summarize count() by ImpactedField",
                    "size": 3,
                    "title": "By Resource Type",
                    "showExportToExcel": true,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "visualization": "piechart"
                  },
                  "customWidth": "50",
                  "name": "advisorbyresourcestep",
                  "styleSettings": {
                    "margin": "5px"
                  }
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "Cloud",
              "comparison": "isEqualTo",
              "value": "AzureCloud"
            },
            "name": "advisor group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "💡 \r\n_The Reliability Score given in this workbook represents an indication of the number of configurable reliability options that have been implemented. For instance Availability Zones, Availability Set, Sku, Backup, Site Recovery, etc._\r\n\r\n_The Reliability Score does not include a number for the 'default' reliability for any given resource type. For instance, the current lowest default SLA for any Single Instance Virtual Machine using Standard HDD Managed Disks for Operating System Disks and Data Disks, have an SLA of at least 95%._ \r\n\r\n_The Reliability Score in this workbook will be 0% for such a Virtual Machine. The intention of the workbook is to provide visibility of the configurable options that can increase reliability._\r\n<br />"
                  },
                  "name": "text - 1"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "Summary2"
            },
            "name": "Reliability Score Message"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| summarize \n    ResourceTotal=count(Name),\n    OtherSku=dcountif(Name, ((SkuName !contains \"shared\") and (SkuName !contains \"free\") and (SkuName !contains \"basic\") and (SkuName !contains \"develop\") and (SkuName !contains \"dynamic\"))),\n    DevelopmentSkuCount=dcountif(Name, SkuName contains \"develop\"), \n    SharedSkuCount=dcountif(Name, SkuName contains \"shared\"),\n    FreeSkuCount=dcountif(Name, SkuName contains \"free\"),\n    BasicSkuCount=dcountif(Name, SkuName contains \"basic\"), \n    PremiumSkuCount=dcountif(Name, SkuName contains \"premium\"), \n    EnterpriseSkuCount=dcountif(Name, SkuName contains \"enterprise\"), \n    SqlPremiumOrBusinessCriticalOrDwh=dcountif(Name, Type == 'microsoft.sql/servers/databases' and (SkuName contains \"premium\" or SkuName contains \"businesscritical\" or SkuName contains \"datawarehouse\")), \n    VMDeallocatedStateCount=dcountif(Name, State contains \"vm deallocated\"),\n    NoAvZoneCount=dcountif(Name, (AvailabilityZone contains \"not configured\")),\n    NAAvZoneCount=dcountif(Name, (AvailabilityZone contains \"not applicable\") or (AvailabilityZone contains \"az config\")),\n    AvZoneCount=dcountif(Name, (AvailabilityZone in ('1', '2', '3', 'configured'))),\n    NoAvSetCount=dcountif(Name, (AvailabilitySet contains \"none\") or (AvailabilitySet contains \"not configured\")),\n    NAAvSetCount=dcountif(Name, AvailabilitySet contains \"not applicable\"),\n    AvSetCount=dcountif(Name, (AvailabilitySet !contains \"none\") and (AvailabilitySet !contains \"not applicable\") and (AvailabilitySet !contains \"not configured\")),\n    NACapacityCount=dcountif(Name, (Capacity contains \"not applicable\")),\n    ZeroCapacityCount=dcountif(Name, (Capacity contains \"0\")),\n    Gt1CapacityCount=dcountif(Name, (Capacity !contains \"not applicable\") and (Capacity !contains \"0\") and (Capacity !contains \"1\") and (Capacity !contains \"undefined\")),\n    NAFaultDomainCount=dcountif(Name, (FaultDomain contains \"not applicable\")),\n    ZeroFaultDomainCount=dcountif(Name, (FaultDomain contains \"0\")),\n    Gt0FaultDomainCount=dcountif(Name, (FaultDomain !contains \"not applicable\") and (FaultDomain !contains \"0\") and (FaultDomain !contains \"undefined\")),\n    NAOSDiskCount=dcountif(Name, (OSDisk contains \"not applicable\")),\n    UnknownOSDiskCount=dcountif(Name, (OSDisk contains \"Unknown\")),\n    OtherOSDiskCount=dcountif(Name, (OSDisk !contains \"premium\") and (OSDisk !contains \"ultra\") and (OSDisk !contains \"ephemeral\") and (OSDisk !contains \"not applicable\")),\n    PremorUltOSDiskCount=dcountif(Name, (OSDisk contains \"premium\") or (OSDisk contains \"ultra\") or (OSDisk contains \"ephemeral\")),\n    NABackupCount=dcountif(Name, (Backup contains \"not applicable\")),\n    UnknownBackupCount=dcountif(Name, (Backup contains \"Unknown\")),\n    HealthyBackupCount=dcountif(Name, (Backup == \"healthy\")),\n    UnhealthyBackupCount=dcountif(Name, (Backup == \"unhealthy\")),\n    RunningState=dcountif(Name, State contains \"running\" or State contains \"ready\"),\n    DBOnlineStateCount=dcountif(Name, State contains \"online\" or State contains \"ready\"), // online - SQL, Ready - MySQL\n    DBPausedStateCount=dcountif(Name, State contains \"paused\"),\n    DBGeoStorage=dcountif(Name, OSDisk == \"grs\"),\n    DBLrsStorage=dcountif(Name, OSDisk == \"lrs\"),\n    Gt0DbReplica=dcountif(Name, (ReadReplica !contains \"not applicable\") and (ReadReplica !contains \"0\") and (ReadReplica !contains \"undefined\")),\n    Lt1DbReplica=dcountif(Name, ReadReplica contains \"0\"),\n    NotEnabledDbMultiWrite=dcountif(Name, MultipleWriteLocations contains \"not enabled\"),\n    NADbMultiWrite=dcountif(Name, MultipleWriteLocations contains \"not applicable\"),\n    EnabledDbMultiWrite=dcountif(Name, MultipleWriteLocations == \"enabled\"),\n    NotConfiguredAutomaticFailover=dcountif(Name, AutomaticFailover == \"not configured\"),\n    ConfiguredAutomaticFailover=dcountif(Name, AutomaticFailover == \"configured\"),\n    NAAutomaticFailover=dcountif(Name, AutomaticFailover == \"not applicable\"),\n    EnabledStorageAutogrow=dcountif(Name, StorageAutogrow == \"enabled\"),\n    NotEnabledStorageAutogrow=dcountif(Name, StorageAutogrow != \"enabled\" and Type != \"microsoft.dbformysql/flexibleservers\"),\n    ReplicationEnabled=dcountif(Name, ReplicationRole == \"master\" or ReplicationRole == \"replica\"),\n    NAReplicationEnabled=dcountif(Name, ReplicationRole == \"none\" and AvailabilityZone != \"enabled\" and Type == \"microsoft.dbformysql/flexibleservers\"),\n    NoReplicationEnabled=dcountif(Name, ReplicationRole == \"none\" and AvailabilityZone != \"enabled\"),\n    RAStorageEnabled=dcountif(Name, ReadReplica == \"configured\" and Type contains 'storageaccounts'),\n    NoRAStorageEnabled=dcountif(Name, ReadReplica == \"not configured\" and Type contains 'storageaccounts'),\n    NARAStorageEnabled=dcountif(Name, ReadReplica == \"not applicable\" and Type contains 'storageaccounts'),\n    V2StorageEnabled=dcountif(Name, Kind == \"StorageV2\" and Type contains 'storageaccounts'),\n    NoV2StorageEnabled=dcountif(Name, Kind != \"StorageV2\" and Type contains 'storageaccounts'),\n    AFDEnabledStateCount=dcountif(Name, State == \"enabled\" and Type == 'microsoft.network/frontdoors'),\n    NoAFDEnabledStateCount=dcountif(Name, State != \"enabled\" and Type == 'microsoft.network/frontdoors'),\n    CDNEnabledStateCount=dcountif(Name, State == \"active\" and Type == 'microsoft.cdn/profiles'),\n    NoCDNEnabledStateCount=dcountif(Name, State != \"active\" and Type == 'microsoft.cdn/profiles'),\n    SmallAppGwSkuCount=dcountif(Name, SkuName contains \"small\" and Type == 'microsoft.network/applicationgateways'), \n    OtherAppGwSkuCount=dcountif(Name, SkuName !contains \"small\" and Type == 'microsoft.network/applicationgateways'),\n    AutoScaleAppGwCount=dcountif(Name, AutomaticFailover == \"configured\" and Type == 'microsoft.network/applicationgateways'),\n    NoAutoScaleAppGwCount=dcountif(Name, AutomaticFailover == \"not configured\" and Type == 'microsoft.network/applicationgateways'),\n    AsrSucceededState=dcountif(Name, State == \"succeeded\" and Type == 'microsoft.recoveryservices/vaults'),\n    NoAsrSucceededState=dcountif(Name, State != \"succeeded\" and Type == 'microsoft.recoveryservices/vaults'),\n    AzFWSucceededStateCount=dcountif(Name, State == \"succeeded\" and Type == 'microsoft.network/azurefirewalls'),\n    NoAzFWSucceededStateCount=dcountif(Name, State != \"succeeded\" and Type == 'microsoft.network/azurefirewalls'),\n    SucceededStateCount=dcountif(Name, State == \"succeeded\"),\n    NoSucceededStateCount=dcountif(Name, State != \"succeeded\"),\n    AzVnetGwSkuCount=dcountif(Name, SkuName contains \"az\" and Type == 'microsoft.network/virtualnetworkgateways'), \n    NoAzVnetGwSkuCount=dcountif(Name, SkuName !contains \"az\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    RouteVnetGwVpnTypeCount=dcountif(Name, (FaultDomain == \"routebased\" or FaultDomain == \"erpolicybased\") and Type == 'microsoft.network/virtualnetworkgateways'),\n    Gen2VnetGwCount=dcountif(Name, OSDisk == \"generation2\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    NAGen2VnetGwCount=dcountif(Name, OSDisk == \"none\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    ActiveActiveVnetGwCount=dcountif(Name, ReadReplica == \"true\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    NAActiveActiveVnetGwCount=dcountif(Name, ReadReplica == \"not applicable\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    Stv2ApimCount=dcountif(Name, OSDisk == \"stv2\" and Type == 'microsoft.apimanagement/service')\n    by Type, Environment\n| extend ReliabilityScore = case(\n    // VM - 4 checks // score = (\"AZ + AS + Disk + Backup\") * 100 / (3 * ResourceTotal) // AZ or AS is mutually exclusive, so VM should have either one\n    Type == 'microsoft.compute/virtualmachines', (AvZoneCount + AvSetCount + PremorUltOSDiskCount + HealthyBackupCount) * 100 / (3 * ResourceTotal), \n    // Classic VM // score = 0 / ResourceTotal\n    Type == 'microsoft.classiccompute/virtualmachines', 0,\n    // VMSS - 3 checks  // score = (Capacity + Fault Domains + managed disk type) * 100 / (3 * ResourceTotal) //********* Future - Overprovision, Fault Domain State\n    Type == 'microsoft.compute/virtualmachinescalesets', (Gt1CapacityCount + Gt0FaultDomainCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),\n    // AppService \u0026 Function App - 2 checks // score = (\"non dev/shared/free/ basic sku\" + AppServiceRunningState) * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.web/sites', (OtherSku + RunningState) * 100 / (2 * ResourceTotal),\n    // AppService Plan - 4 checks // score = (\"non dev/shared/free/dynamic/basic sku\" + AspReadyState + AZ + capacity) * 100 / (4 * ResourceTotal)\n    Type == 'microsoft.web/serverfarms', (OtherSku + RunningState + AvZoneCount + NAAvZoneCount + Gt1CapacityCount) * 100 / (4 * ResourceTotal),\n    // AKS - 4 checks // score = (\"AZ\" + \"AS\" + \"Capacity\" + \"Disk\") * 100 / (4 * ResourceTotal)  //********* Future - LB SKU // AZ or AS is mutually exclusive, so VM should have either one\n    Type == 'microsoft.containerservice/managedclusters', (AvZoneCount + AvSetCount + Gt1CapacityCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),\n    // SQLDB - 4 checks  // score = (\"status\" + \"tier\" + \"storage acct. type\"  + \"AZ\")* 100 / (5 * ResourceTotal)  //********* Future - \"read replica count\"\n    Type == 'microsoft.sql/servers/databases', (DBOnlineStateCount + SqlPremiumOrBusinessCriticalOrDwh + DBGeoStorage + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),\n    // CosmosDB - 4 checks // score = ( \"readreplicacount\" + \"AZ\" + \"multiWrite\" + \"AutoFailover\") * 100 / (4 * ResourceTotal) // included NA items to show compliance\n    Type == 'microsoft.documentdb/databaseaccounts', (Gt0DbReplica + AvZoneCount + NAAvZoneCount + EnabledDbMultiWrite + NADbMultiWrite + ConfiguredAutomaticFailover + NAAutomaticFailover) * 100 / (4 * ResourceTotal),\n    // MySQL - 5 checks // score = (\"status\" + \"sku\" + \"grsbackup\" + \"storageautogrow\" + \"replication\") * 100 / (5 * ResourceTotal) //********* Future - \"Sku family Gen5\", read replica\n    Type == 'microsoft.dbformysql/servers', (DBOnlineStateCount + OtherSku + HealthyBackupCount + EnabledStorageAutogrow + ReplicationEnabled) * 100 / (5 * ResourceTotal),\n    // MySQL Flexible - 4 checks  // score = (\"status\" + \"sku\"  + \"replication\" + \"HaEnabled\") * 100 / (4 * ResourceTotal)    // included NA items to show compliance  //********* Future - \"read replica\", \"automatic failover\", \"backup\"\n    Type == 'microsoft.dbformysql/flexibleservers', (DBOnlineStateCount + OtherSku + ReplicationEnabled + NAReplicationEnabled + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),\n    // Redis - 4 checks // score = (state + sku + AZ + capacity) * 100 / (4 * ResourceTotal)\n    Type == 'microsoft.cache/redis', (SucceededStateCount + PremiumSkuCount + EnterpriseSkuCount + AvZoneCount + NAAvZoneCount + Gt1CapacityCount) * 100 / (4 * ResourceTotal),\n    // APIM - 5 checks // score = (\"Tier\" + state + \"capacity\" + AZ + stv2platform) * 100 / (5 * ResourceTotal) \n    Type == 'microsoft.apimanagement/service', (OtherSku + SucceededStateCount + Gt1CapacityCount + AvZoneCount + Stv2ApimCount) * 100 / (5 * ResourceTotal),\n    // Storage - 2 checks // score = ( \"kind\" + \"replication type\") * 100 / (2 * ResourceTotal)    //********* Future - \"access tier hot\"\n    Type == 'microsoft.storage/storageaccounts' or Type == 'microsoft.classicstorage/storageaccounts', (V2StorageEnabled + RAStorageEnabled + NARAStorageEnabled) * 100 / (2 * ResourceTotal),\n    // AzureFirewall - 1 check // score = (State + AZ) * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.network/azurefirewalls', (AzFWSucceededStateCount + AvZoneCount + NAAvZoneCount)* 100 / (2 * ResourceTotal),\n    // AFD and CDN - 1 check // score = state  * 100 / (1 * ResourceTotal)\n    Type == 'microsoft.cdn/profiles' or Type == 'microsoft.network/frontdoors', (CDNEnabledStateCount + AFDEnabledStateCount) * 100 / ResourceTotal,\n    // AppGW - 5 checks    // score = (state + AZ + Tier + autoscaling + capacity) * 100 / (5 * ResourceTotal)\n    Type == 'microsoft.network/applicationgateways', (RunningState + AvZoneCount + NAAvZoneCount + OtherAppGwSkuCount + AutoScaleAppGwCount + Gt1CapacityCount) * 100 / (5 * ResourceTotal),\n    // LB - 3 checks  // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/loadbalancers', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // Public IP - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/publicipaddresses', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // Public IP Prefix - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/publicipprefixes', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // VNET Gateway - 6 checks // score = (SKU + state + capacity + vpntype + generation + active-active) * 100 / (6 * ResourceTotal)\n    Type == 'microsoft.network/virtualnetworkgateways', (AzVnetGwSkuCount + SucceededStateCount + Gt1CapacityCount + NACapacityCount + RouteVnetGwVpnTypeCount + Gen2VnetGwCount + NAGen2VnetGwCount + ActiveActiveVnetGwCount + NAActiveActiveVnetGwCount) * 100 / (6 * ResourceTotal),\n    // ASR - 1 check  // score = status * 100 / (1 * ResourceTotal)\n    Type == 'microsoft.recoveryservices/vaults', (AsrSucceededState) * 100 / (1 * ResourceTotal),\n    0)\n    | project Type, Environment, ResourceTotal, score=toint(ReliabilityScore)\n    | summarize WorkbookScore=round(avg(score),1) | project WorkbookScore",
              "size": 3,
              "title": "Workbook Reliability Score",
              "exportToExcelOptions": "all",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscriptions}"
              ],
              "visualization": "tiles",
              "gridSettings": {
                "rowLimit": 10000,
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "Type"
                  ],
                  "expandTopLevel": false
                }
              },
              "sortBy": [],
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "WorkbookScore",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "redGreen"
                  },
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal"
                    },
                    "emptyValCustomText": "-"
                  }
                },
                "showBorder": false
              },
              "textSettings": {
                "style": "bignumber"
              }
            },
            "name": "kql_summary_workbook_reliability_score",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| summarize \n    ResourceTotal=count(Name),\n    OtherSku=dcountif(Name, ((SkuName !contains \"shared\") and (SkuName !contains \"free\") and (SkuName !contains \"basic\") and (SkuName !contains \"develop\") and (SkuName !contains \"dynamic\"))),\n    DevelopmentSkuCount=dcountif(Name, SkuName contains \"develop\"), \n    SharedSkuCount=dcountif(Name, SkuName contains \"shared\"),\n    FreeSkuCount=dcountif(Name, SkuName contains \"free\"),\n    BasicSkuCount=dcountif(Name, SkuName contains \"basic\"), \n    PremiumSkuCount=dcountif(Name, SkuName contains \"premium\"), \n    EnterpriseSkuCount=dcountif(Name, SkuName contains \"enterprise\"), \n    SqlPremiumOrBusinessCriticalOrDwh=dcountif(Name, Type == 'microsoft.sql/servers/databases' and (SkuName contains \"premium\" or SkuName contains \"businesscritical\" or SkuName contains \"datawarehouse\")), \n    VMDeallocatedStateCount=dcountif(Name, State contains \"vm deallocated\"),\n    NoAvZoneCount=dcountif(Name, (AvailabilityZone contains \"not configured\")),\n    NAAvZoneCount=dcountif(Name, (AvailabilityZone contains \"not applicable\") or (AvailabilityZone contains \"az config\")),\n    AvZoneCount=dcountif(Name, (AvailabilityZone in ('1', '2', '3', 'configured'))),\n    NoAvSetCount=dcountif(Name, (AvailabilitySet contains \"none\") or (AvailabilitySet contains \"not configured\")),\n    NAAvSetCount=dcountif(Name, AvailabilitySet contains \"not applicable\"),\n    AvSetCount=dcountif(Name, (AvailabilitySet !contains \"none\") and (AvailabilitySet !contains \"not applicable\") and (AvailabilitySet !contains \"not configured\")),\n    NACapacityCount=dcountif(Name, (Capacity contains \"not applicable\")),\n    ZeroCapacityCount=dcountif(Name, (Capacity contains \"0\")),\n    Gt1CapacityCount=dcountif(Name, (Capacity !contains \"not applicable\") and (Capacity !contains \"0\") and (Capacity !contains \"1\") and (Capacity !contains \"undefined\")),\n    NAFaultDomainCount=dcountif(Name, (FaultDomain contains \"not applicable\")),\n    ZeroFaultDomainCount=dcountif(Name, (FaultDomain contains \"0\")),\n    Gt0FaultDomainCount=dcountif(Name, (FaultDomain !contains \"not applicable\") and (FaultDomain !contains \"0\") and (FaultDomain !contains \"undefined\")),\n    NAOSDiskCount=dcountif(Name, (OSDisk contains \"not applicable\")),\n    UnknownOSDiskCount=dcountif(Name, (OSDisk contains \"Unknown\")),\n    OtherOSDiskCount=dcountif(Name, (OSDisk !contains \"premium\") and (OSDisk !contains \"ultra\") and (OSDisk !contains \"ephemeral\") and (OSDisk !contains \"not applicable\")),\n    PremorUltOSDiskCount=dcountif(Name, (OSDisk contains \"premium\") or (OSDisk contains \"ultra\") or (OSDisk contains \"ephemeral\")),\n    NABackupCount=dcountif(Name, (Backup contains \"not applicable\")),\n    UnknownBackupCount=dcountif(Name, (Backup contains \"Unknown\")),\n    HealthyBackupCount=dcountif(Name, (Backup == \"healthy\")),\n    UnhealthyBackupCount=dcountif(Name, (Backup == \"unhealthy\")),\n    RunningState=dcountif(Name, State contains \"running\" or State contains \"ready\"),\n    DBOnlineStateCount=dcountif(Name, State contains \"online\" or State contains \"ready\"), // online - SQL, Ready - MySQL\n    DBPausedStateCount=dcountif(Name, State contains \"paused\"),\n    DBGeoStorage=dcountif(Name, OSDisk == \"grs\"),\n    DBLrsStorage=dcountif(Name, OSDisk == \"lrs\"),\n    Gt0DbReplica=dcountif(Name, (ReadReplica !contains \"not applicable\") and (ReadReplica !contains \"0\") and (ReadReplica !contains \"undefined\")),\n    Lt1DbReplica=dcountif(Name, ReadReplica contains \"0\"),\n    NotEnabledDbMultiWrite=dcountif(Name, MultipleWriteLocations contains \"not enabled\"),\n    NADbMultiWrite=dcountif(Name, MultipleWriteLocations contains \"not applicable\"),\n    EnabledDbMultiWrite=dcountif(Name, MultipleWriteLocations == \"enabled\"),\n    NotConfiguredAutomaticFailover=dcountif(Name, AutomaticFailover == \"not configured\"),\n    ConfiguredAutomaticFailover=dcountif(Name, AutomaticFailover == \"configured\"),\n    NAAutomaticFailover=dcountif(Name, AutomaticFailover == \"not applicable\"),\n    EnabledStorageAutogrow=dcountif(Name, StorageAutogrow == \"enabled\"),\n    NotEnabledStorageAutogrow=dcountif(Name, StorageAutogrow != \"enabled\" and Type != \"microsoft.dbformysql/flexibleservers\"),\n    ReplicationEnabled=dcountif(Name, ReplicationRole == \"master\" or ReplicationRole == \"replica\"),\n    NAReplicationEnabled=dcountif(Name, ReplicationRole == \"none\" and AvailabilityZone != \"enabled\" and Type == \"microsoft.dbformysql/flexibleservers\"),\n    NoReplicationEnabled=dcountif(Name, ReplicationRole == \"none\" and AvailabilityZone != \"enabled\"),\n    RAStorageEnabled=dcountif(Name, ReadReplica == \"configured\" and Type contains 'storageaccounts'),\n    NoRAStorageEnabled=dcountif(Name, ReadReplica == \"not configured\" and Type contains 'storageaccounts'),\n    NARAStorageEnabled=dcountif(Name, ReadReplica == \"not applicable\" and Type contains 'storageaccounts'),\n    V2StorageEnabled=dcountif(Name, Kind == \"StorageV2\" and Type contains 'storageaccounts'),\n    NoV2StorageEnabled=dcountif(Name, Kind != \"StorageV2\" and Type contains 'storageaccounts'),\n    AFDEnabledStateCount=dcountif(Name, State == \"enabled\" and Type == 'microsoft.network/frontdoors'),\n    NoAFDEnabledStateCount=dcountif(Name, State != \"enabled\" and Type == 'microsoft.network/frontdoors'),\n    CDNEnabledStateCount=dcountif(Name, State == \"active\" and Type == 'microsoft.cdn/profiles'),\n    NoCDNEnabledStateCount=dcountif(Name, State != \"active\" and Type == 'microsoft.cdn/profiles'),\n    SmallAppGwSkuCount=dcountif(Name, SkuName contains \"small\" and Type == 'microsoft.network/applicationgateways'), \n    OtherAppGwSkuCount=dcountif(Name, SkuName !contains \"small\" and Type == 'microsoft.network/applicationgateways'),\n    AutoScaleAppGwCount=dcountif(Name, AutomaticFailover == \"configured\" and Type == 'microsoft.network/applicationgateways'),\n    NoAutoScaleAppGwCount=dcountif(Name, AutomaticFailover == \"not configured\" and Type == 'microsoft.network/applicationgateways'),\n    AsrSucceededState=dcountif(Name, State == \"succeeded\" and Type == 'microsoft.recoveryservices/vaults'),\n    NoAsrSucceededState=dcountif(Name, State != \"succeeded\" and Type == 'microsoft.recoveryservices/vaults'),\n    AzFWSucceededStateCount=dcountif(Name, State == \"succeeded\" and Type == 'microsoft.network/azurefirewalls'),\n    NoAzFWSucceededStateCount=dcountif(Name, State != \"succeeded\" and Type == 'microsoft.network/azurefirewalls'),\n    SucceededStateCount=dcountif(Name, State == \"succeeded\"),\n    NoSucceededStateCount=dcountif(Name, State != \"succeeded\"),\n    AzVnetGwSkuCount=dcountif(Name, SkuName contains \"az\" and Type == 'microsoft.network/virtualnetworkgateways'), \n    NoAzVnetGwSkuCount=dcountif(Name, SkuName !contains \"az\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    RouteVnetGwVpnTypeCount=dcountif(Name, (FaultDomain == \"routebased\" or FaultDomain == \"erpolicybased\") and Type == 'microsoft.network/virtualnetworkgateways'),\n    Gen2VnetGwCount=dcountif(Name, OSDisk == \"generation2\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    NAGen2VnetGwCount=dcountif(Name, OSDisk == \"none\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    ActiveActiveVnetGwCount=dcountif(Name, ReadReplica == \"true\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    NAActiveActiveVnetGwCount=dcountif(Name, ReadReplica == \"not applicable\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    Stv2ApimCount=dcountif(Name, OSDisk == \"stv2\" and Type == 'microsoft.apimanagement/service')\n    by Name, Type, Environment\n| extend ReliabilityScore = case(\n    // VM - 4 checks // score = (\"AZ + AS + Disk + Backup\") * 100 / (3 * ResourceTotal) // AZ or AS is mutually exclusive, so VM should have either one\n    Type == 'microsoft.compute/virtualmachines', (AvZoneCount + AvSetCount + PremorUltOSDiskCount + HealthyBackupCount) * 100 / (3 * ResourceTotal), \n    // Classic VM // score = 0 / ResourceTotal\n    Type == 'microsoft.classiccompute/virtualmachines', 0,\n    // VMSS - 3 checks  // score = (Capacity + Fault Domains + managed disk type) * 100 / (3 * ResourceTotal) //********* Future - Overprovision, Fault Domain State\n    Type == 'microsoft.compute/virtualmachinescalesets', (Gt1CapacityCount + Gt0FaultDomainCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),\n    // AppService \u0026 Function App - 2 checks // score = (\"non dev/shared/free/ basic sku\" + AppServiceRunningState) * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.web/sites', (OtherSku + RunningState) * 100 / (2 * ResourceTotal),\n    // AppService Plan - 4 checks // score = (\"non dev/shared/free/dynamic/basic sku\" + AspReadyState + AZ + capacity) * 100 / (4 * ResourceTotal)\n    Type == 'microsoft.web/serverfarms', (OtherSku + RunningState + AvZoneCount + NAAvZoneCount + Gt1CapacityCount) * 100 / (4 * ResourceTotal),\n    // AKS - 4 checks // score = (\"AZ\" + \"AS\" + \"Capacity\" + \"Disk\") * 100 / (4 * ResourceTotal)  //********* Future - LB SKU // AZ or AS is mutually exclusive, so VM should have either one\n    Type == 'microsoft.containerservice/managedclusters', (AvZoneCount + AvSetCount + Gt1CapacityCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),\n    // SQLDB - 4 checks  // score = (\"status\" + \"tier\" + \"storage acct. type\"  + \"AZ\")* 100 / (5 * ResourceTotal)  //********* Future - \"read replica count\"\n    Type == 'microsoft.sql/servers/databases', (DBOnlineStateCount + SqlPremiumOrBusinessCriticalOrDwh + DBGeoStorage + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),\n    // CosmosDB - 4 checks // score = ( \"readreplicacount\" + \"AZ\" + \"multiWrite\" + \"AutoFailover\") * 100 / (4 * ResourceTotal) // included NA items to show compliance\n    Type == 'microsoft.documentdb/databaseaccounts', (Gt0DbReplica + AvZoneCount + NAAvZoneCount + EnabledDbMultiWrite + NADbMultiWrite + ConfiguredAutomaticFailover + NAAutomaticFailover) * 100 / (4 * ResourceTotal),\n    // MySQL - 5 checks // score = (\"status\" + \"sku\" + \"grsbackup\" + \"storageautogrow\" + \"replication\") * 100 / (5 * ResourceTotal) //********* Future - \"Sku family Gen5\", read replica\n    Type == 'microsoft.dbformysql/servers', (DBOnlineStateCount + OtherSku + HealthyBackupCount + EnabledStorageAutogrow + ReplicationEnabled) * 100 / (5 * ResourceTotal),\n    // MySQL Flexible - 4 checks  // score = (\"status\" + \"sku\"  + \"replication\" + \"HaEnabled\") * 100 / (4 * ResourceTotal)    // included NA items to show compliance  //********* Future - \"read replica\", \"automatic failover\", \"backup\"\n    Type == 'microsoft.dbformysql/flexibleservers', (DBOnlineStateCount + OtherSku + ReplicationEnabled + NAReplicationEnabled + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),\n    // Redis - 4 checks // score = (state + sku + AZ + capacity) * 100 / (4 * ResourceTotal)\n    Type == 'microsoft.cache/redis', (SucceededStateCount + PremiumSkuCount + EnterpriseSkuCount + AvZoneCount + NAAvZoneCount + Gt1CapacityCount) * 100 / (4 * ResourceTotal),\n    // APIM - 5 checks // score = (\"Tier\" + state + \"capacity\" + AZ + stv2platform) * 100 / (5 * ResourceTotal) \n    Type == 'microsoft.apimanagement/service', (OtherSku + SucceededStateCount + Gt1CapacityCount + AvZoneCount + Stv2ApimCount) * 100 / (5 * ResourceTotal),\n    // Storage - 2 checks // score = ( \"kind\" + \"replication type\") * 100 / (2 * ResourceTotal)    //********* Future - \"access tier hot\"\n    Type == 'microsoft.storage/storageaccounts' or Type == 'microsoft.classicstorage/storageaccounts', (V2StorageEnabled + RAStorageEnabled + NARAStorageEnabled) * 100 / (2 * ResourceTotal),\n    // AzureFirewall - 1 check // score = (State + AZ) * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.network/azurefirewalls', (AzFWSucceededStateCount + AvZoneCount + NAAvZoneCount)* 100 / (2 * ResourceTotal),\n    // AFD and CDN - 1 check // score = state  * 100 / (1 * ResourceTotal)\n    Type == 'microsoft.cdn/profiles' or Type == 'microsoft.network/frontdoors', (CDNEnabledStateCount + AFDEnabledStateCount) * 100 / ResourceTotal,\n    // AppGW - 5 checks    // score = (state + AZ + Tier + autoscaling + capacity) * 100 / (5 * ResourceTotal)\n    Type == 'microsoft.network/applicationgateways', (RunningState + AvZoneCount + NAAvZoneCount + OtherAppGwSkuCount + AutoScaleAppGwCount + Gt1CapacityCount) * 100 / (5 * ResourceTotal),\n    // LB - 3 checks  // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/loadbalancers', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // Public IP - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/publicipaddresses', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // Public IP Prefix - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/publicipprefixes', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // VNET Gateway - 6 checks // score = (SKU + state + capacity + vpntype + generation + active-active) * 100 / (6 * ResourceTotal)\n    Type == 'microsoft.network/virtualnetworkgateways', (AzVnetGwSkuCount + SucceededStateCount + Gt1CapacityCount + NACapacityCount + RouteVnetGwVpnTypeCount + Gen2VnetGwCount + NAGen2VnetGwCount + ActiveActiveVnetGwCount + NAActiveActiveVnetGwCount) * 100 / (6 * ResourceTotal),\n    // ASR - 1 check  // score = status * 100 / (1 * ResourceTotal)\n    Type == 'microsoft.recoveryservices/vaults', (AsrSucceededState) * 100 / (1 * ResourceTotal),\n    0)\n| project Name, Type, Environment, tostring(ReliabilityScore)\n| sort by Type",
              "size": 3,
                "title": "Reliability Score by Resource Type, Environment and Resource",
              "showExportToExcel": true,
              "exportToExcelOptions": "all",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscriptions}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                    "formatter": 16,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Type",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Environment",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "Prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "ReliabilityScore",
                    "formatter": 3,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                        "palette": "redGreen",
                        "aggregation": "Average"
                    },
                    "numberFormat": {
                      "unit": 1,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "ResourceTotal",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "blue",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ],
                "rowLimit": 10000,
                "filter": true,
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                      "Type",
                      "Environment"
                  ],
                  "expandTopLevel": false
                },
                "labelSettings": [
                  {
                    "columnId": "ReliabilityScore",
                    "label": "Reliability Score"
                  }
                ]
              },
              "sortBy": []
            },
            "name": "kql_summary_reliability_score_by_resource_environment",
            "styleSettings": {
              "showBorder": true
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Summary2"
      },
      "name": "summary group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| sort by Type\n| summarize \n    ResourceTotal=count(Name),\n    OtherSku=dcountif(Name, ((SkuName !contains \"shared\") and (SkuName !contains \"free\") and (SkuName !contains \"basic\") and (SkuName !contains \"develop\") and (SkuName !contains \"dynamic\"))),\n    DevelopmentSkuCount=dcountif(Name, SkuName contains \"develop\"), \n    SharedSkuCount=dcountif(Name, SkuName contains \"shared\"),\n    FreeSkuCount=dcountif(Name, SkuName contains \"free\"),\n    BasicSkuCount=dcountif(Name, SkuName contains \"basic\"), \n    PremiumSkuCount=dcountif(Name, SkuName contains \"premium\"), \n    EnterpriseSkuCount=dcountif(Name, SkuName contains \"enterprise\"), \n    SqlPremiumOrBusinessCriticalOrDwh=dcountif(Name, Type == 'microsoft.sql/servers/databases' and (SkuName contains \"premium\" or SkuName contains \"businesscritical\" or SkuName contains \"datawarehouse\")), \n    VMDeallocatedStateCount=dcountif(Name, State contains \"vm deallocated\"),\n    NoAvZoneCount=dcountif(Name, (AvailabilityZone contains \"not configured\")),\n    NAAvZoneCount=dcountif(Name, (AvailabilityZone contains \"not applicable\") or (AvailabilityZone contains \"az config\")),\n    AvZoneCount=dcountif(Name, (AvailabilityZone in ('1', '2', '3', 'configured'))),\n    NoAvSetCount=dcountif(Name, (AvailabilitySet contains \"none\") or (AvailabilitySet contains \"not configured\")),\n    NAAvSetCount=dcountif(Name, AvailabilitySet contains \"not applicable\"),\n    AvSetCount=dcountif(Name, (AvailabilitySet !contains \"none\") and (AvailabilitySet !contains \"not applicable\") and (AvailabilitySet !contains \"not configured\")),\n    NACapacityCount=dcountif(Name, (Capacity contains \"not applicable\")),\n    ZeroCapacityCount=dcountif(Name, (Capacity contains \"0\")),\n    Gt1CapacityCount=dcountif(Name, (Capacity !contains \"not applicable\") and (Capacity !contains \"0\") and (Capacity !contains \"1\") and (Capacity !contains \"undefined\")),\n    NAFaultDomainCount=dcountif(Name, (FaultDomain contains \"not applicable\")),\n    ZeroFaultDomainCount=dcountif(Name, (FaultDomain contains \"0\")),\n    Gt0FaultDomainCount=dcountif(Name, (FaultDomain !contains \"not applicable\") and (FaultDomain !contains \"0\") and (FaultDomain !contains \"undefined\")),\n    NAOSDiskCount=dcountif(Name, (OSDisk contains \"not applicable\")),\n    UnknownOSDiskCount=dcountif(Name, (OSDisk contains \"Unknown\")),\n    OtherOSDiskCount=dcountif(Name, (OSDisk !contains \"premium\") and (OSDisk !contains \"ultra\") and (OSDisk !contains \"ephemeral\") and (OSDisk !contains \"not applicable\")),\n    PremorUltOSDiskCount=dcountif(Name, (OSDisk contains \"premium\") or (OSDisk contains \"ultra\") or (OSDisk contains \"ephemeral\")),\n    NABackupCount=dcountif(Name, (Backup contains \"not applicable\")),\n    UnknownBackupCount=dcountif(Name, (Backup contains \"Unknown\")),\n    HealthyBackupCount=dcountif(Name, (Backup == \"healthy\")),\n    UnhealthyBackupCount=dcountif(Name, (Backup == \"unhealthy\")),\n    RunningState=dcountif(Name, State contains \"running\" or State contains \"ready\"),\n    DBOnlineStateCount=dcountif(Name, State contains \"online\" or State contains \"ready\"), // online - SQL, Ready - MySQL\n    DBPausedStateCount=dcountif(Name, State contains \"paused\"),\n    DBGeoStorage=dcountif(Name, OSDisk == \"grs\"),\n    DBLrsStorage=dcountif(Name, OSDisk == \"lrs\"),\n    Gt0DbReplica=dcountif(Name, (ReadReplica !contains \"not applicable\") and (ReadReplica !contains \"0\") and (ReadReplica !contains \"undefined\")),\n    Lt1DbReplica=dcountif(Name, ReadReplica contains \"0\"),\n    NotEnabledDbMultiWrite=dcountif(Name, MultipleWriteLocations contains \"not enabled\"),\n    NADbMultiWrite=dcountif(Name, MultipleWriteLocations contains \"not applicable\"),\n    EnabledDbMultiWrite=dcountif(Name, MultipleWriteLocations == \"enabled\"),\n    NotConfiguredAutomaticFailover=dcountif(Name, AutomaticFailover == \"not configured\"),\n    ConfiguredAutomaticFailover=dcountif(Name, AutomaticFailover == \"configured\"),\n    NAAutomaticFailover=dcountif(Name, AutomaticFailover == \"not applicable\"),\n    EnabledStorageAutogrow=dcountif(Name, StorageAutogrow == \"enabled\"),\n    NotEnabledStorageAutogrow=dcountif(Name, StorageAutogrow != \"enabled\" and Type != \"microsoft.dbformysql/flexibleservers\"),\n    ReplicationEnabled=dcountif(Name, ReplicationRole == \"master\" or ReplicationRole == \"replica\"),\n    NAReplicationEnabled=dcountif(Name, ReplicationRole == \"none\" and AvailabilityZone != \"enabled\" and Type == \"microsoft.dbformysql/flexibleservers\"),\n    NoReplicationEnabled=dcountif(Name, ReplicationRole == \"none\" and AvailabilityZone != \"enabled\"),\n    RAStorageEnabled=dcountif(Name, ReadReplica == \"configured\" and Type contains 'storageaccounts'),\n    NoRAStorageEnabled=dcountif(Name, ReadReplica == \"not configured\" and Type contains 'storageaccounts'),\n    NARAStorageEnabled=dcountif(Name, ReadReplica == \"not applicable\" and Type contains 'storageaccounts'),\n    V2StorageEnabled=dcountif(Name, Kind == \"StorageV2\" and Type contains 'storageaccounts'),\n    NoV2StorageEnabled=dcountif(Name, Kind != \"StorageV2\" and Type contains 'storageaccounts'),\n    AFDEnabledStateCount=dcountif(Name, State == \"enabled\" and Type == 'microsoft.network/frontdoors'),\n    NoAFDEnabledStateCount=dcountif(Name, State != \"enabled\" and Type == 'microsoft.network/frontdoors'),\n    CDNEnabledStateCount=dcountif(Name, State == \"active\" and Type == 'microsoft.cdn/profiles'),\n    NoCDNEnabledStateCount=dcountif(Name, State != \"active\" and Type == 'microsoft.cdn/profiles'),\n    SmallAppGwSkuCount=dcountif(Name, SkuName contains \"small\" and Type == 'microsoft.network/applicationgateways'), \n    OtherAppGwSkuCount=dcountif(Name, SkuName !contains \"small\" and Type == 'microsoft.network/applicationgateways'),\n    AutoScaleAppGwCount=dcountif(Name, AutomaticFailover == \"configured\" and Type == 'microsoft.network/applicationgateways'),\n    NoAutoScaleAppGwCount=dcountif(Name, AutomaticFailover == \"not configured\" and Type == 'microsoft.network/applicationgateways'),\n    AsrSucceededState=dcountif(Name, State == \"succeeded\" and Type == 'microsoft.recoveryservices/vaults'),\n    NoAsrSucceededState=dcountif(Name, State != \"succeeded\" and Type == 'microsoft.recoveryservices/vaults'),\n    AzFWSucceededStateCount=dcountif(Name, State == \"succeeded\" and Type == 'microsoft.network/azurefirewalls'),\n    NoAzFWSucceededStateCount=dcountif(Name, State != \"succeeded\" and Type == 'microsoft.network/azurefirewalls'),\n    SucceededStateCount=dcountif(Name, State == \"succeeded\"),\n    NoSucceededStateCount=dcountif(Name, State != \"succeeded\"),\n    AzVnetGwSkuCount=dcountif(Name, SkuName contains \"az\" and Type == 'microsoft.network/virtualnetworkgateways'), \n    NoAzVnetGwSkuCount=dcountif(Name, SkuName !contains \"az\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    RouteVnetGwVpnTypeCount=dcountif(Name, (FaultDomain == \"routebased\" or FaultDomain == \"erpolicybased\") and Type == 'microsoft.network/virtualnetworkgateways'),\n    Gen2VnetGwCount=dcountif(Name, OSDisk == \"generation2\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    NAGen2VnetGwCount=dcountif(Name, OSDisk == \"none\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    ActiveActiveVnetGwCount=dcountif(Name, ReadReplica == \"true\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    NAActiveActiveVnetGwCount=dcountif(Name, ReadReplica == \"not applicable\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    Stv2ApimCount=dcountif(Name, OSDisk == \"stv2\" and Type == 'microsoft.apimanagement/service')\n    by SubscriptionId, Name, Type, Environment   // SubscriptionId for export  // for individual resources in summary table\n//  ReliabilityScore: 5 checks across 5 machines = 25 total (i.e. 100%), thus 24 scored is 24/25 * 100 = 96 %\n| extend ReliabilityScore = case(\n    // VM - 4 checks // score = (\"AZ + AS + Disk + Backup\") * 100 / (3 * ResourceTotal) // AZ or AS is mutually exclusive, so VM should have either one\n    Type == 'microsoft.compute/virtualmachines', (AvZoneCount + AvSetCount + PremorUltOSDiskCount + HealthyBackupCount) * 100 / (3 * ResourceTotal), \n    // Classic VM // score = 0 / ResourceTotal\n    Type == 'microsoft.classiccompute/virtualmachines', 0,\n    // VMSS - 3 checks  // score = (Capacity + Fault Domains + managed disk type) * 100 / (3 * ResourceTotal) //********* Future - Overprovision, Fault Domain State\n    Type == 'microsoft.compute/virtualmachinescalesets', (Gt1CapacityCount + Gt0FaultDomainCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),\n    // AppService \u0026 Function App - 2 checks // score = (\"non dev/shared/free/ basic sku\" + AppServiceRunningState) * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.web/sites', (OtherSku + RunningState) * 100 / (2 * ResourceTotal),\n    // AppService Plan - 4 checks // score = (\"non dev/shared/free/dynamic/basic sku\" + AspReadyState + AZ + capacity) * 100 / (4 * ResourceTotal)\n    Type == 'microsoft.web/serverfarms', (OtherSku + RunningState + AvZoneCount + NAAvZoneCount + Gt1CapacityCount) * 100 / (4 * ResourceTotal),\n    // AKS - 4 checks // score = (\"AZ\" + \"AS\" + \"Capacity\" + \"Disk\") * 100 / (4 * ResourceTotal)  //********* Future - LB SKU // AZ or AS is mutually exclusive, so VM should have either one\n    Type == 'microsoft.containerservice/managedclusters', (AvZoneCount + AvSetCount + Gt1CapacityCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),\n    // SQLDB - 4 checks  // score = (\"status\" + \"tier\" + \"storage acct. type\"  + \"AZ\")* 100 / (5 * ResourceTotal)  //********* Future - \"read replica count\"\n    Type == 'microsoft.sql/servers/databases', (DBOnlineStateCount + SqlPremiumOrBusinessCriticalOrDwh + DBGeoStorage + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),\n    // CosmosDB - 4 checks // score = ( \"readreplicacount\" + \"AZ\" + \"multiWrite\" + \"AutoFailover\") * 100 / (4 * ResourceTotal) // included NA items to show compliance\n    Type == 'microsoft.documentdb/databaseaccounts', (Gt0DbReplica + AvZoneCount + NAAvZoneCount + EnabledDbMultiWrite + NADbMultiWrite + ConfiguredAutomaticFailover + NAAutomaticFailover) * 100 / (4 * ResourceTotal),\n    // MySQL - 5 checks // score = (\"status\" + \"sku\" + \"grsbackup\" + \"storageautogrow\" + \"replication\") * 100 / (5 * ResourceTotal) //********* Future - \"Sku family Gen5\", read replica\n    Type == 'microsoft.dbformysql/servers', (DBOnlineStateCount + OtherSku + HealthyBackupCount + EnabledStorageAutogrow + ReplicationEnabled) * 100 / (5 * ResourceTotal),\n    // MySQL Flexible - 4 checks  // score = (\"status\" + \"sku\"  + \"replication\" + \"HaEnabled\") * 100 / (4 * ResourceTotal)    // included NA items to show compliance  //********* Future - \"read replica\", \"automatic failover\", \"backup\"\n    Type == 'microsoft.dbformysql/flexibleservers', (DBOnlineStateCount + OtherSku + ReplicationEnabled + NAReplicationEnabled + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),\n    // Redis - 4 checks // score = (state + sku + AZ + capacity) * 100 / (4 * ResourceTotal)\n    Type == 'microsoft.cache/redis', (SucceededStateCount + PremiumSkuCount + EnterpriseSkuCount + AvZoneCount + NAAvZoneCount + Gt1CapacityCount) * 100 / (4 * ResourceTotal),\n    // APIM - 5 checks // score = (\"Tier\" + state + \"capacity\" + AZ + stv2platform) * 100 / (5 * ResourceTotal) \n    Type == 'microsoft.apimanagement/service', (OtherSku + SucceededStateCount + Gt1CapacityCount + AvZoneCount + Stv2ApimCount) * 100 / (5 * ResourceTotal),\n    // Storage - 2 checks // score = ( \"kind\" + \"replication type\") * 100 / (2 * ResourceTotal)    //********* Future - \"access tier hot\"\n    Type == 'microsoft.storage/storageaccounts' or Type == 'microsoft.classicstorage/storageaccounts', (V2StorageEnabled + RAStorageEnabled + NARAStorageEnabled) * 100 / (2 * ResourceTotal),\n    // AzureFirewall - 1 check // score = (State + AZ) * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.network/azurefirewalls', (AzFWSucceededStateCount + AvZoneCount + NAAvZoneCount)* 100 / (2 * ResourceTotal),\n    // AFD and CDN - 1 check // score = state  * 100 / (1 * ResourceTotal)\n    Type == 'microsoft.cdn/profiles' or Type == 'microsoft.network/frontdoors', (CDNEnabledStateCount + AFDEnabledStateCount) * 100 / ResourceTotal,\n    // AppGW - 5 checks    // score = (state + AZ + Tier + autoscaling + capacity) * 100 / (5 * ResourceTotal)\n    Type == 'microsoft.network/applicationgateways', (RunningState + AvZoneCount + NAAvZoneCount + OtherAppGwSkuCount + AutoScaleAppGwCount + Gt1CapacityCount) * 100 / (5 * ResourceTotal),\n    // LB - 3 checks  // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/loadbalancers', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // Public IP - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/publicipaddresses', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // Public IP Prefix - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/publicipprefixes', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // VNET Gateway - 6 checks // score = (SKU + state + capacity + vpntype + generation + active-active) * 100 / (6 * ResourceTotal)\n    Type == 'microsoft.network/virtualnetworkgateways', (AzVnetGwSkuCount + SucceededStateCount + Gt1CapacityCount + NACapacityCount + RouteVnetGwVpnTypeCount + Gen2VnetGwCount + NAGen2VnetGwCount + ActiveActiveVnetGwCount + NAActiveActiveVnetGwCount) * 100 / (6 * ResourceTotal),\n    // ASR - 1 check  // score = status * 100 / (1 * ResourceTotal)\n    Type == 'microsoft.recoveryservices/vaults', (AsrSucceededState) * 100 / (1 * ResourceTotal),\n    0)\n    | extend ReliabilityScore = tostring(ReliabilityScore)\n    | sort by SubscriptionId, Type  // SubscriptionId for export",
                    "size": 3,
                      "title": "Reliability Score by Resource Type, Environment and Resource",
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                            "formatter": 13,
                          "formatOptions": {
                              "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                            "columnMatch": "Name",
                            "formatter": 5
                          },
                          {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                          },
                          {
                            "columnMatch": "ReliabilityScore",
                            "formatter": 0,
                            "formatOptions": {
                              "aggregation": "Average"
                            }
                        }
                      ],
                      "rowLimit": 10000,
                      "filter": true,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId",
                            "Type",
                            "Environment"
                        ],
                          "expandTopLevel": false,
                          "finalBy": "Name"
                      },
                      "sortBy": [
                        {
                          "itemKey": "ResourceTotal",
                          "sortOrder": 2
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Type",
                          "label": "Service"
                        },
                        {
                          "columnId": "ResourceTotal",
                          "label": "Resource Total"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "ResourceTotal",
                        "sortOrder": 2
                      }
                    ]
                  },
                  "name": "kql_export_summary_by_resource_environment",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment",
                    "size": 0,
                    "title": "Resources Details",
                    "showExportToExcel": true,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                            "formatter": 13,
                          "formatOptions": {
                              "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                          },
                          {
                            "columnMatch": "Name",
                            "formatter": 5
                        }
                      ],
                      "rowLimit": 10000,
                      "filter": true,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                          ],
                          "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        }
                      ]
                    }
                  },
                  "name": "kql_export_resources_details"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "advisorresources\n| extend Category = tostring(properties.category)\n| extend Description = tostring(properties.shortDescription.problem)\n| extend ImpactedField = tostring(properties.impactedField)\n| extend ImpactedValue = tostring(properties.resourceMetadata.resourceId)\n| extend Impact = tostring(properties.impact)\n| extend LastUpdated = tostring(properties.lastUpdated)\n| project Impact, ImpactedField, ImpactedValue, Description, resourceGroup, subscriptionId, Category, LastUpdated\n| where Category == \"HighAvailability\"\n| where resourceGroup in ({ResourceGroup})",
                    "size": 0,
                    "title": "Advisor Recommendations by Impact",
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                            "formatter": 13,
                          "formatOptions": {
                              "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                            "columnMatch": "ImpactedValue",
                            "formatter": 5
                          },
                          {
                          "columnMatch": "subscriptionId",
                          "formatter": 5
                        }
                      ],
                      "rowLimit": 10000,
                      "filter": true,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "subscriptionId",
                          "Impact",
                          "Description"
                          ],
                          "finalBy": "ImpactedValue"
                      },
                      "labelSettings": [
                        {
                            "columnId": "ImpactedValue",
                            "label": "Name"
                          },
                          {
                          "columnId": "subscriptionId",
                          "label": "Subscription"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "Cloud",
                    "comparison": "isEqualTo",
                    "value": "AzureCloud"
                  },
                  "name": "query - 2"
                }
              ]
            },
            "name": "arg consolidated group"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Export"
      },
      "name": "ExportStep"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "111d0db9-8c81-413d-9d93-bca6541aa953",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Azure Firewall",
                  "subTarget": "AF",
                  "style": "link"
                },
                {
                  "id": "c7031524-3e4c-417b-8675-f49985b0e4a9",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Azure Front Door and CDN",
                  "subTarget": "AFD",
                  "style": "link"
                },
                {
                  "id": "15e12511-eaa3-457d-9de5-aad6fc445c2d",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Application Gateway",
                  "subTarget": "AG",
                  "style": "link"
                },
                {
                  "id": "ff60a2f0-1c78-4a47-8f21-aaee8675cc1c",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Load Balancer",
                  "subTarget": "LB",
                  "style": "link"
                },
                {
                  "id": "9b2af52f-ffd5-43d7-9055-9a76f56ca89a",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Public IP",
                  "subTarget": "PIP",
                  "style": "link"
                },
                {
                  "id": "947f178c-58f8-43ac-ac0a-7eddf884c712",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "VPN and ExpressRoute Gateway",
                  "subTarget": "VNETGW",
                  "style": "link"
                }
              ]
            },
            "name": "links - 5"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Load Balancer](https://azure.microsoft.com/support/legal/sla/load-balancer/)\r\n* We guarantee that a Load Balanced Endpoint using Azure Standard Load Balancer, serving two or more Healthy Virtual Machine Instances, will be available 99.99% of the time.\r\n* Basic Load Balancer is excluded from this SLA.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/load-balancer/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 2 - Copy - Copy"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* With Standard Load Balancer, you can scale your applications and create highly available services. Load balancer supports both inbound and outbound scenarios. Load balancer provides low latency and high throughput, and scales up to millions of flows for all TCP and UDP applications.\r\n* Increase availability by distributing resources within and across zones.\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 3 - Copy - Copy - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.network/loadbalancers'",
                    "size": 3,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "standard",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "basic",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "gateway",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "global",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Kind",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "succeeded",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "succeeded",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "not configured"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "public ip az config",
                                "representation": "Normal",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ZoneRedundantRecommend",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Not Configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "NA",
                                "representation": "Blank",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "rowLimit": 1000,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SkuName",
                          "label": "Sku Name"
                        },
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "OSDisk",
                          "label": "IP Type"
                        }
                      ]
                    }
                  },
                  "name": "kql_networking_lb_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "LB"
            },
            "name": "LB"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "* Public IP addresses allow Internet resources to communicate inbound to Azure resources. More details in [Public IP address docs](https://learn.microsoft.com/azure/virtual-network/ip-services/public-ip-addresses)\r\n* A public IP address prefix is a reserved range of public IP addresses in Azure. More details in [Public IP address prefix docs](https://learn.microsoft.com/azure/virtual-network/ip-services/public-ip-address-prefix)\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 1"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.network/publicipaddresses' or Type == 'microsoft.network/publicipprefixes'",
                    "size": 0,
                    "title": "Public IP addresses and IP Prefixes",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "$gen_group",
                            "formatter": 13,
                            "formatOptions": {
                              "linkTarget": "Resource",
                              "showIcon": true
                            }
                          },
                          {
                            "columnMatch": "Type",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "SkuName",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "basic",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "standard",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "global",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "unknown",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "Kind",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "SubscriptionId",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Name",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "State",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "succeeded",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "unknown",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                            "columnMatch": "Zones",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AvailabilityZone",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "not applicable",
                                  "representation": "more",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "not configured",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "3",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "1",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "unknown",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                          "columnMatch": "Capacity",
                          "formatter": 5
                        },
                        {
                            "columnMatch": "FaultDomain",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "ReadReplica",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AutomaticFailover",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "MultipleWriteLocations",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "StorageAutogrow",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "ReplicationRole",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Backup",
                            "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                          }
                        ],
                        "rowLimit": 9999,
                        "hierarchySettings": {
                          "treeType": 1,
                          "groupBy": [
                          "SubscriptionId",
                          "Capacity"
                          ],
                          "finalBy": "Name"
                        },
                        "labelSettings": [
                          {
                            "columnId": "SkuName",
                            "label": "SKU"
                          },
                          {
                            "columnId": "SubscriptionId",
                            "label": "Subscription"
                          },
                          {
                            "columnId": "ResourceGroup",
                            "label": "Resource Group"
                          },
                          {
                            "columnId": "AvailabilitySet",
                            "label": "IP Version"
                          },
                          {
                            "columnId": "Capacity",
                            "label": "IP Type"
                          },
                          {
                            "columnId": "OSDisk",
                            "label": "IP Allocation"
                          }
                        ]
                    }
                  },
                  "name": "Public IP addresses and IP Prefixes"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "PIP"
            },
            "name": "PIP"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Application Gateway](https://azure.microsoft.com/support/legal/sla/application-gateway/)\r\n* We guarantee that each Application Gateway Cloud Service having two or more medium or larger instances, or deployments capable of supporting autoscale or zone redundancy, will be available at least 99.95% of the time.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/application-gateway/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 2 - Copy - Copy"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Web Application Firewall](https://azure.microsoft.com/support/legal/sla/web-application-firewall/)\r\n* Web Application Firewall availability guarantees are included in the SLA of the deployment option chosen, Application Gateway or Azure Front Door. Please see the [Application Gateway SLA](https://azure.microsoft.com/support/legal/sla/application-gateway/), and [Azure Front Door SLA](https://azure.microsoft.com/support/legal/sla/frontdoor/) for more details.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/web-application-firewall/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "WAF SLA"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* Deploy Application Gateway with at least two instances. A single instance is a single point of failure. Use two or more instances for redundancy and scalability. In order to qualify for the SLA, you must provision two or more medium or larger instances.\r\n* Capacity specifies the number of instances of an application gateway.\r\n* An Application Gateway can scale based on customer demand and span multiple availability zones for optimal availability.\r\n* Two autoscaling configuration types are supported:\r\n\t* Fixed capacity mode. In this mode, the application gateway does not autoscale and operates at a fixed Scale Unit capacity.\r\n\t* Autoscaling mode. In this mode, the application gateway autoscales based on the application traffic pattern.\r\n\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 3 - Copy - Copy - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.network/applicationgateways'",
                    "size": 3,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "small",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "v2",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "orange",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Kind",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "running",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "orange",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "not configured"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "1",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SkuName",
                          "label": "Sku Name"
                        },
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "AutomaticFailover",
                          "label": "Autoscaling"
                        }
                      ]
                    }
                  },
                  "name": "kql_networking_appgw_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "AG"
            },
            "name": "AG"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Azure Firewall](https://azure.microsoft.com/support/legal/sla/azure-firewall/)\r\n* Azure Firewall offers fully stateful native firewall capabilities for Virtual Network resources, with built-in high availability and the ability to scale automatically.\r\n* We guarantee that Azure Firewall will be available at least 99.95% of the time, when deployed within a single Availability Zone.\r\n* We guarantee that Azure Firewall will be available at least 99.99% of the time, when deployed within two or more Availability Zones in the same Azure region.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/azure-firewall/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "AF SLA"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* Azure Firewall can be configured during deployment to span multiple Availability Zones for increased availability.\r\n* Refer to [Deploy an Azure Firewall with Availability Zones](https://learn.microsoft.com/azure/firewall/deploy-availability-zone-powershell) for more information.\r\n\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 3 - Copy - Copy - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.network/azurefirewalls'",
                    "size": 0,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Kind",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "succeeded",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "succeeded",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "not configured"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SkuName",
                          "label": "Sku Name"
                        },
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        }
                      ]
                    }
                  },
                  "name": "kql_networking_azfw_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "AF"
            },
            "name": "AF"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Azure Front Door and Azure Front Door (classic)](https://azure.microsoft.com/support/legal/sla/frontdoor/)\r\n* We guarantee that at least 99.99% of the time Azure Front Door and Azure Front Door (classic) will respond to client requests and deliver the requested content without error. We will review and accept data from any commercially reasonable independent measurement system that you choose to monitor your content. You must select a set of agents from the measurement system's list of standard agents that are generally available and represent at least five geographically diverse locations in major worldwide metropolitan areas (excluding PR of China).\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/frontdoor/)\r\n\r\n[SLA for Content Delivery Network](https://azure.microsoft.com/support/legal/sla/cdn/)\r\n* We guarantee that at least 99.9% of the time CDN will respond to client requests and deliver the requested content without error. We will review and accept data from any commercially reasonable independent measurement system that you choose to monitor your content. You must select a set of agents from the measurement system’s list of standard agents that are generally available and represent at least five geographically diverse locations in major worldwide metropolitan areas (excluding PR of China).\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/cdn/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "AFD SLA"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.network/frontdoors' or Type == 'microsoft.cdn/profiles'",
                    "size": 3,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "regex",
                                "thresholdValue": "(classic|standard_microsoft)",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "green",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Kind",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "regex",
                                "thresholdValue": "(enabled|active)",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "regex",
                                "thresholdValue": "(?!(enabled|active))",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ResourceState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "warning",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        }
                      ]
                    }
                  },
                  "name": "kql_networking_afd_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "AFD"
            },
            "name": "AFD"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for VNET Gateway](https://azure.microsoft.com/support/legal/sla/vpn-gateway/)\r\n* We guarantee 99.9% availability for each Basic Gateway for VPN or Basic Gateway for ExpressRoute.\r\n* We guarantee 99.95% availability for all Gateway for VPN SKUs excluding Basic.\r\n* We guarantee 99.95% availability for all Gateway for ExpressRoute SKUs excluding Basic.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/vpn-gateway/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 0"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* Azure recommends to use latest generation VPN gateways which supports zones. Active-Active connection guidance in [VPN HA docs](https://learn.microsoft.com/azure/vpn-gateway/vpn-gateway-highlyavailable)\r\n* [Zone Redundant Gateways](https://learn.microsoft.com/azure/vpn-gateway/about-zone-redundant-vnet-gateways) are recommended to ensure gateway redundancy\r\n* Design Express Route with [HA Design](https://learn.microsoft.com/azure/expressroute/designing-for-high-availability-with-expressroute)\r\n* Increase availability by distributing resources within and across zones.\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 1"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.network/virtualnetworkgateways'",
                    "size": 0,
                    "title": "VPN and ExpressRoute Gateway",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                            "formatter": 13,
                          "formatOptions": {
                              "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "basic",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "standard",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "high performance",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "ultra performance",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "regex",
                                "thresholdValue": "(vpn|er)gw([1-3])az",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "regex",
                                "thresholdValue": "(vpn|er)gw([1-3])",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Kind",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                            "columnMatch": "Name",
                            "formatter": 5
                          },
                          {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "succeeded",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "warning",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "routebased",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "erpolicybased",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "policybased",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "generation1",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "generation2",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "none",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "rowLimit": 9999,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId",
                          "AvailabilitySet"
                          ],
                          "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SkuName",
                          "label": "SKU"
                        },
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "AvailabilitySet",
                          "label": "Gateway Type"
                        },
                        {
                          "columnId": "FaultDomain",
                          "label": "VPN Type"
                        },
                        {
                          "columnId": "OSDisk",
                          "label": "Gateway Generation"
                        },
                        {
                          "columnId": "ReadReplica",
                          "label": "Active-Active"
                        }
                      ]
                    }
                  },
                  "name": "query - 2"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "VNETGW"
            },
            "name": "VPN and ER GW"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Networking"
      },
      "name": "Networking"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "bec50763-3978-4739-8e39-ffc849278745",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Virtual Machines",
                  "subTarget": "cVM",
                  "style": "link"
                },
                {
                  "id": "db54cc9d-e67e-4687-b9e6-e73aefb9638c",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Virtual Machine Scale Sets",
                  "subTarget": "cVMSS",
                  "style": "link"
                }
              ]
            },
            "name": "links - 5"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Virtual Machines](https://azure.microsoft.com/support/legal/sla/virtual-machines/)\r\n* For all Virtual Machines that have two or more instances deployed across two or more Availability Zones in the same Azure region, we guarantee you will have Virtual Machine Connectivity to at least one instance at least 99.99% of the time.\r\n* For all Virtual Machines that have two or more instances deployed in the same Availability Set or in the same Dedicated Host Group, we guarantee you will have Virtual Machine Connectivity to at least one instance at least 99.95% of the time.\r\n* For any Single Instance Virtual Machine using Premium SSD or Ultra Disk for all Operating System Disks and Data Disks, we guarantee you will have Virtual Machine Connectivity of at least 99.9%.\r\n* For any Single Instance Virtual Machine using Standard SSD Managed Disks for Operating System Disk and Data Disks, we guarantee you will have Virtual Machine Connectivity of at least 99.5%.\r\n* For any Single Instance Virtual Machine using Standard HDD Managed Disks for Operating System Disks and Data Disks, we guarantee you will have Virtual Machine Connectivity of at least 95%.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/virtual-machines/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 2"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "> [Virtual machine resilliency checklist](https://learn.microsoft.com/azure/architecture/checklist/resiliency-per-service#virtual-machines)\r\n* Avoid running a production workload on a single VM. A single VM deployment is not resilient to planned or unplanned maintenance. Instead, put multiple VMs in an availability set or virtual machine scale set, with a load balancer in front.\r\n* Specify an availability set when you provision the VM. Currently, there is no way to add a VM to an availability set after the VM is provisioned. When you add a new VM to an existing availability set, make sure to create a NIC for the VM, and add the NIC to the back-end address pool on the load balancer. Otherwise, the load balancer won't route network traffic to that VM.\r\n* Put each application tier into a separate Availability Set. In an N-tier application, don't put VMs from different tiers into the same availability set. VMs in an availability set are placed across fault domains (FDs) and update domains (UD). However, to get the redundancy benefit of FDs and UDs, every VM in the availability set must be able to handle the same client requests.\r\n* Replicate VMs using Azure Site Recovery. When you replicate Azure VMs using Site Recovery, all the VM disks are continuously replicated to the target region asynchronously. The recovery points are created every few minutes. This gives you a Recovery Point Objective (RPO) in the order of minutes. You can conduct disaster recovery drills as many times as you want, without affecting the production application or the ongoing replication.\r\n* Choose the right VM size based on performance requirements. When moving an existing workload to Azure, start with the VM size that's the closest match to your on-premises servers. Then measure the performance of your actual workload with respect to CPU, memory, and disk IOPS, and adjust the size if needed. This helps to ensure the application behaves as expected in a cloud environment. Also, if you need multiple NICs, be aware of the NIC limit for each size.\r\n* Use managed disks for VHDs. Managed disks provide better reliability for VMs in an availability set, because the disks are sufficiently isolated from each other to avoid single points of failure. Also, managed disks aren't subject to the IOPS limits of VHDs created in a storage account.\r\n* Install applications on a data disk, not the OS disk. Otherwise, you may reach the disk size limit.\r\n* Use Azure Backup to back up VMs. Backups protect against accidental data loss.\r\n* Enable diagnostic logs. Include basic health metrics, infrastructure logs, and boot diagnostics. Boot diagnostics can help you diagnose a boot failure if your VM gets into a nonbootable state.\r\n* Configure Azure Monitor. Collect and analyze monitoring data from Azure virtual machines including the guest operating system and the workloads that run in it.\r\n\r\n* Azure Security Center with Azure Defender is required for VM backup information.\r\n* VMs have to be running for disk information to be available.\r\n* VM SLAs apply to both operating system and data disks - only operating system disks are represented in this workbook.\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 3"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.compute/virtualmachines'",
                    "size": 3,
                    "title": "Virtual Machines",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "vm running",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "vm deallocated",
                                "representation": "gray",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "undefined",
                                "representation": "unknown",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "undefined",
                                "representation": "unknown",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "premium",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "ultra",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "ephemeral",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "standard",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "unmanaged",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "healthy",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "unhealthy",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk_UltraorPremium",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk_Type",
                          "formatter": 5
                        }
                      ],
                      "rowLimit": 10000,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      }
                    },
                    "sortBy": []
                  },
                  "name": "kql_compute_vm_resources_details"
                },
                {
                    "type": 1,
                    "content": {
                      "json": "* Classic Virtual Machines are in path of retirement. Please migrate to Resource Manager based VMs immediately\r\n\r\n> Retirement announcement in the [docs](https://learn.microsoft.com/azure/virtual-machines/classic-vm-deprecation)",
                      "style": "warning"
                    },
                    "name": "classic-vm-retirement"
                  },
                  {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.classiccompute/virtualmachines'",
                    "size": 1,
                    "title": "Classic Virtual Machines",
                    "noDataMessage": "No classic VMs found",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                            "formatter": 13,
                          "formatOptions": {
                              "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                            "columnMatch": "Type",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Kind",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "SubscriptionId",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Name",
                            "formatter": 5
                          },
                          {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                            "columnMatch": "Zones",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AvailabilityZone",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Capacity",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "FaultDomain",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "ReadReplica",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AutomaticFailover",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "MultipleWriteLocations",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "StorageAutogrow",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "ReplicationRole",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Environment",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "colors",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "prod",
                                  "representation": "redBright",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "Prod",
                                  "representation": "redBright",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                          "columnMatch": "subscriptionId",
                          "formatter": 5
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                            "SubscriptionId"
                          ],
                          "finalBy": "Name"
                        },
                        "labelSettings": [
                          {
                            "columnId": "SubscriptionId",
                            "label": "Subscription"
                      }
                        ]
                    }
                  },
                  "name": "Classic VM"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "cVM"
            },
            "name": "cVMsGroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Virtual Machine Scale Sets](https://azure.microsoft.com/support/legal/sla/virtual-machine-scale-sets/)\r\n* Virtual Machine Scale Sets is a free service, therefore, it does not have a financially backed SLA itself. However, if the Virtual Machine Scale Sets includes Virtual Machines in at least 2 Fault Domains, the availability of the underlying Virtual Machines SLA for two or more instances applies.\r\n* If the scale set contains a single Virtual Machine, the availability for a Single Instance Virtual Machine applies. See the [Virtual Machines SLA](https://azure.microsoft.com/support/legal/sla/virtual-machines/) for more details.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/virtual-machine-scale-sets/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 2"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "[Virtual machine scale set resiliency checklist](https://learn.microsoft.com/azure/architecture/checklist/resiliency-per-service#virtual-machines)\r\n\r\n* Avoid running a production workload on a single VM in a Scale set. A single VM deployment is not resilient to planned or unplanned maintenance. Instead, put multiple VMs in a virtual machine scale set, with a load balancer in front.\r\n* Put each application tier into a separate Scale Set. In an N-tier application, don't put VMs from different tiers into the same scale set. \r\n* Make sure to select multiple fault domains for the scale set to achieve resiliency during failures.\r\n* Always enable Zone redundancy for VMs in scale sets whenever the region support zone redundancy\r\n* Enable Overprovision settings to create multiple VMs during scaling and remove failure VMs. This increases chances of successful provision during scaling event.\r\n* Choose the right VM size based on performance requirements. When moving an existing workload to Azure, start with the VM size that's the closest match to your on-premises servers. Then measure the performance of your actual workload with respect to CPU, memory, and disk IOPS, and adjust the size if needed. This helps to ensure the application behaves as expected in a cloud environment. Also, if you need multiple NICs, be aware of the NIC limit for each size.\r\n* Use managed disks for VHDs. Managed disks provide better reliability for VMs in an availability set, because the disks are sufficiently isolated from each other to avoid single points of failure. Also, managed disks aren't subject to the IOPS limits of VHDs created in a storage account.\r\n* Configure Azure Monitor. Collect and analyze monitoring data from Azure virtual machines including the guest operating system and the workloads that run in it.\r\n* VMs have to be running for disk information to be available.\r\n* VM SLAs apply to both operating system and data disks - only operating system disks are represented in this workbook.\r\n* Capacity specifies the number of virtual machines in the scale set.\r\n\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 3"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.compute/virtualmachinescalesets'",
                    "size": 3,
                    "title": "Virtual Machine Scale Sets",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "succeeded",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "succeeded",
                                "representation": "gray",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "undefined",
                                "representation": "unknown",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "warning",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "5",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "undefined",
                                "representation": "unknown",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "premium",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "ultra",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "ephemeral",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "standard",
                                "representation": "warning",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "unmanaged",
                                "representation": "warning",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ZonesCount",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "cCapacity",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomainCount",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "2",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "<",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "cFaultDomainCount",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ManagedDiskType",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "Premium",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Standard",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Overprovision",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Not Enabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "OSDisk_UltraorPremium",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "OSDisk_Type",
                          "formatter": 5
                        }
                      ],
                      "rowLimit": 10000,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "AvailabilityZone",
                          "label": "Availability Zone Count"
                        },
                        {
                          "columnId": "FaultDomain",
                          "label": "Fault Domain Count"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "name": "kql_compute_vmss_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "cVMSS"
            },
            "name": "cVMSSGroup"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Compute"
      },
      "name": "Compute"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "01f0cca4-531d-40e1-ab7f-c04ee0440e5b",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Azure SQL Database",
                  "subTarget": "AzSQL",
                  "style": "link"
                },
                {
                  "id": "0df521d5-8d1b-44f0-ba5e-c133d89deb09",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Azure Synapse Analytics",
                  "subTarget": "AzSynapse",
                  "style": "link"
                },
                {
                  "id": "14da2544-7eb4-418c-9ce3-082cf39e4b81",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Cosmos DB",
                  "subTarget": "Cosmos",
                  "style": "link"
                },
                {
                  "id": "15e4ed4e-8927-482e-a09a-c70d1ef43b32",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "MySQL",
                  "subTarget": "MySQL",
                  "style": "link"
                },
                {
                  "id": "fe5d57cb-c0e8-4661-b932-953cdb6e5e49",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Redis",
                  "subTarget": "Redis",
                  "style": "link"
                }
              ]
            },
            "name": "links - 7"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Azure SQL Database](https://azure.microsoft.com/support/legal/sla/sql-database/)\r\n* Azure SQL Database Business Critical or Premium tiers configured as Zone Redundant Deployments have an availability guarantee of at least 99.995%.\r\n* Azure SQL Database Business Critical or Premium tiers not configured for Zone Redundant Deployments, General Purpose, Standard, or Basic tiers, or Hyperscale tier with two or more replicas have an availability guarantee of at least 99.99%.\r\n* Azure SQL Database Hyperscale tier with one replica has an availability guarantee of at least 99.95% and 99.9% for zero replicas.\r\n* Azure SQL Database Business Critical tier configured with geo-replication has a guarantee of Recovery point objective (RPO) of 5 sec for 100% of deployed hours.\r\n* Azure SQL Database Business Critical tier configured with geo-replication has a guarantee of Recovery time objective (RTO) of 30 sec for 100% of deployed hours.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/sql-database/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 2 - Copy"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* Standard and Premium tiers provide a longer point-in-time restore period (35 days).\r\n* Enable SQL Database auditing. Auditing can be used to diagnose malicious attacks or human error.\r\n* Use Active Geo-Replication to create a readable secondary in a different region. If your primary database fails, or simply needs to be taken offline, perform a manual failover to the secondary database. Until you fail over, the secondary database remains read-only.\r\n* Consider using sharding to partition the database horizontally. Sharding can provide fault isolation.\r\n* Use point-in-time restore to recover from human error.\r\n* Use geo-restore to recover from a service outage. Geo-restore restores a database from a geo-redundant backup.\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 3 - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.sql/servers/databases' and SkuName !contains \"datawarehouse\" and SkuName != \"system\"",
                    "size": 3,
                    "title": "Azure SQL Database",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "basic",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "system",
                                "representation": "gray",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "gp",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "premium",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "standard",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "businesscritical",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "bc",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "hs",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "elastic",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "online",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "paused",
                                "representation": "gray",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "undefined",
                                "representation": "unknown",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "grs",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "lrs",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "zrs",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Online",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "gray",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Tier",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Premium",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "BusinessCritical",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "DataWarehouse",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "2",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "StorageAccountType",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "GRS",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReadReplicaCount",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": ">",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ZoneRedundant",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": ">",
                                "thresholdValue": "true",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Endpoint",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "maxSizeGB",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 5,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "Details",
                          "formatter": 5
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "OSDisk",
                          "label": "Storage Type"
                        }
                      ]
                    }
                  },
                  "name": "kql_database_sqldb_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "AzSQL"
            },
            "name": "AzSQL"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Azure Synapse Analytics (formerly Azure SQL Data Warehouse)](https://azure.microsoft.com/support/legal/sla/synapse-analytics/)\r\n* We guarantee that, at least 99.9% of the time client operations executed on a Synapse Analytics database will succeed.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/synapse-analytics/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 2 - Copy - Copy"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* It is recommended to keep the geo-backup feature enabled. By default, Synapse Analytics takes a full backup of your data every 24 hours for disaster recovery.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 3 - Copy - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.sql/servers/databases' and SkuName contains \"datawarehouse\"",
                    "size": 3,
                    "title": "Dedicated SQL pool (formerly SQL DW)",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                            "formatter": 13,
                          "formatOptions": {
                              "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "paused",
                                "representation": "gray",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "online",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                            "columnMatch": "Location",
                            "formatter": 17
                          },
                          {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "grs",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "lrs",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "lrs",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Online",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "gray",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Tier",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Premium",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "BusinessCritical",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "DataWarehouse",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "2",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "StorageAccountType",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "GRS",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReadReplicaCount",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": ">",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ZoneRedundant",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "false",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": ">",
                                "thresholdValue": "true",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Endpoint",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "maxSizeGB",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 5,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "Details",
                          "formatter": 5
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "OSDisk",
                          "label": "Storage Type"
                        }
                      ]
                    }
                  },
                  "name": "kql_database_synapse_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "AzSynapse"
            },
            "name": "AzSynapse"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Azure Cosmos DB](https://azure.microsoft.com/support/legal/sla/cosmos-db/)\r\n* The service offers comprehensive 99.99% SLAs which covers the guarantees for throughput, consistency, availability and latency for the Azure Cosmos DB Database Accounts scoped to a single Azure region configured with any of the five Consistency Levels or Database Accounts spanning multiple Azure regions, configured with any of the four relaxed Consistency Levels\r\n* Azure Cosmos DB allows configuring multiple Azure regions as writable endpoints for a Database Account. In this configuration, Azure Cosmos DB offers 99.999% SLA for both read and write availability\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/cosmos-db/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 0"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* It is recommended to replicate the database across regions.\r\n* Leverage Availability Zones whenever the region supports Availability Zones. Availability Zone region support for Cosmos DB can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region)\r\n* To ensure high write and read availability, configure your Azure Cosmos account to span at least two regions with multiple-write regions. This configuration will provide the highest availability, lowest latency, and best scalability for both reads and writes backed by SLAs.\r\n* For multi-region Azure Cosmos accounts that are configured with a single-write region, [enable automatic-failover by using Azure CLI or Azure portal](https://learn.microsoft.com/azure/cosmos-db/how-to-manage-database-account#automatic-failover). After you enable automatic failover, whenever there is a regional disaster, Cosmos DB will automatically failover your account.\r\n\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 1"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.documentdb/databaseaccounts'",
                    "size": 3,
                    "title": "Cosmos DB",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "succeeded",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "succeeded",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "gray",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "orange",
                                "text": "not configured"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "warning",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "not Configured",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "gray",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not enabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "healthy",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "unhealthy",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FreeTier",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplicaCount",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "<",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": ">=",
                                "thresholdValue": "2",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ZoneRedundant",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Not Configured",
                                "representation": "warning",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "NA",
                                "representation": "Blank",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Endpoint",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "PublicNetworkAccess",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "VnetFilterEnabled",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "DatabaseAccountOfferType",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Details",
                          "formatter": 5
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "AutomaticFailover",
                          "label": "Automatic Failover"
                        },
                        {
                          "columnId": "MultipleWriteLocations",
                          "label": "Multiple Write Locations"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "name": "kql_database_cosmosdb_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "Cosmos"
            },
            "name": "Cosmos"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Azure Database for MySQL server](https://azure.microsoft.com/support/legal/sla/mysql/)\r\n* Single Server: We guarantee at least 99.99% of the time customers will have connectivity between their Microsoft Azure Database for MySQL Server and our Internet gateway\r\n* Flexible Server:\r\n\t- We guarantee at least 99.99% of the time customers will have connectivity to their Microsoft Azure Database for MySQL – Flexible server configured with Zone Redundant High Availability.\r\n\t- We guarantee at least 99.95% of the time customers will have connectivity to their Microsoft Azure Database for MySQL – Flexible server configured with Same Zone High Availability.\r\n\t- We guarantee at least 99.9% of the time customers will have connectivity to their Microsoft Azure Database for MySQL – Flexible server configured without any redundancy.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/mysql/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 0"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* It is recommended to create cross region read replicas in another region\r\n* Enable Availability Zone in Flexible server if the region supports Availability Zones\r\n* Enable backup storage redundancy as GRS instead of LRS\r\n* Validate and configure backup retention period\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\r\n",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 1"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "Important\r\n\r\n* Azure Database for MySQL - Single Server is on the retirement path. We strongly recommend for you to upgrade to Azure Database for MySQL - Flexible Server. \r\n\r\n> For more information about migrating to Azure Database for MySQL - Flexible Server, see [What's happening to Azure Database for MySQL Single Server](https://learn.microsoft.com/azure/mysql/single-server/whats-happening-to-mysql-single-server)?",
                    "style": "warning"
                  },
                  "name": "mysql-single-retirement"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.dbformysql/servers'",
                    "size": 3,
                    "title": "MySQL - Single",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "basic",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "memoryoptimized",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "generalpurpose",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Kind",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "ready",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "ready",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "1",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "disabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "none",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "master",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "replica",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "healthy",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "unhealthy",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Ready",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Tier",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Basic",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "GeneralPurpose",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "MemoryOptimized",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SkuFamily",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Gen5",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "Gen5",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "GeoRedundantBackup",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Disabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "InfrastructureEncryption",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TlsEnforcement",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SslEnforcement",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Endpoint",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Details",
                          "formatter": 5
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SkuName",
                          "label": "Sku Name"
                        },
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "StorageAutogrow",
                          "label": "Storage Autogrow"
                        },
                        {
                          "columnId": "ReplicationRole",
                          "label": "Replication Role"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "name": "kql_database_mysqlsingle_resources_details"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.dbformysql/flexibleservers'",
                    "size": 3,
                    "title": "MySQL - Flexible",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "generalpurpose",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "memoryoptimized",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "basic",
                                "representation": "orange",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Kind",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "ready",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "ready",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "none",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "master",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "replica",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Tier",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Basic",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "GeneralPurpose",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "MemoryOptimized",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SslEnforcement",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Disabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "HaState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Healthy",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "Healthy",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "HaEnabled",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Disabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ReplicationConfiguration",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Not Configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "NA",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Endpoint",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Details",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Ready",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SkuFamily",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Gen5",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "Gen5",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "GeoRedundantBackup",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Disabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "InfrastructureEncryption",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Enabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Disabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "TlsEnforcement",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "TLSEnforcementDisabled",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "TLSEnforcementEnabled",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": false,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SkuName",
                          "label": "Sku Name"
                        },
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "State",
                          "label": "Status"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "StorageAutogrow",
                          "label": "Storage Autogrow"
                        },
                        {
                          "columnId": "ReplicationRole",
                          "label": "Replication Role"
                        }
                      ]
                    }
                  },
                  "name": "kql_database_mysqlflexible_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "MySQL"
            },
            "name": "MySQL"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Azure Cache for Redis](https://azure.microsoft.com/support/legal/sla/cache/)\r\n\r\n* For any Standard, Premium, Enterprise, and Enterprise Flash tier Cache, we guarantee that you will have connectivity to the Cache Endpoint at least 99.9% of the time.\r\n* For any Enterprise and Enterprise Flash tier Cache deployed to three or more Availability Zones in the same Azure region, we guarantee that you will have connectivity to the Cache Endpoint at least 99.99% of the time.\r\n* For any Enterprise and Enterprise Flash tier Cache deployed (1) to at least three Azure regions and three or more Availability Zones in each region and (2) with active geo-replication enabled for all Cache instances, we guarantee that you will have connectivity to one regional Cache Endpoint at least 99.999% of the time.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/cache/)",
                    "style": "upsell"
                  },
                  "name": "text - 0"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "[Redis best practices](https://learn.microsoft.com/azure/architecture/framework/services/data/azure-cache-redis/reliability)\r\n\r\n* It is recommended to choose premium or enterprise tiers for better HA capability\r\n* Enable Availability Zone if the region supports Availability Zones\r\n* Maintain higher capacity and replica count greater than 1 for HA within a region\r\n* Geo replication is preferred for DR across regions (active geo replication in case of enterprise tier). In this case replicas greater than 1 is not supported.\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.\r\n",
                    "style": "info"
                  },
                  "name": "text - 1"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.cache/redis'",
                    "size": 1,
                    "title": "Azure Cache for Redis",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                      ],
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "$gen_group",
                            "formatter": 13,
                            "formatOptions": {
                              "linkTarget": "Resource",
                              "showIcon": true
                            }
                          },
                          {
                            "columnMatch": "Type",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "SkuName",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "premium",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "enterprise",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "basic",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "standard",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "unknown",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "Kind",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "SubscriptionId",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Name",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "State",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "succeeded",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "warning",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                            "columnMatch": "Zones",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AvailabilityZone",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "not applicable",
                                  "representation": "more",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "not configured",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "regex",
                                  "thresholdValue": "(1|2|3)",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "unknown",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "AvailabilitySet",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Capacity",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "regex",
                                  "thresholdValue": "(0|1)",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "success",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "FaultDomain",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "OSDisk",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "ReadReplica",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AutomaticFailover",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "MultipleWriteLocations",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "StorageAutogrow",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "ReplicationRole",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Backup",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Environment",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "colors",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "prod",
                                  "representation": "redBright",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "Prod",
                                  "representation": "redBright",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          }
                        ],
                        "hierarchySettings": {
                          "treeType": 1,
                          "groupBy": [
                            "SubscriptionId"
                          ],
                          "finalBy": "Name"
                  },
                        "labelSettings": [
                          {
                            "columnId": "SkuName",
                            "label": "SKU"
                          },
                          {
                            "columnId": "SubscriptionId",
                            "label": "Subscription"
                          },
                          {
                            "columnId": "ResourceGroup",
                            "label": "Resource Group"
                          }
                        ]
                      }
                    },
                  "name": "Azure Cache for Redis"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "Redis"
            },
            "name": "Redis"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Databases"
      },
      "name": "Databases"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "[SLA for Azure Kubernetes Service (AKS)](https://azure.microsoft.com/support/legal/sla/kubernetes-service/)\r\n* For customers who have purchased an Azure Kubernetes Service (AKS) Uptime SLA, we guarantee uptime of 99.95% for the Kubernetes API Server for AKS Clusters that use Azure Availability Zone and 99.9% for AKS Clusters that do not use Azure Availability Zone.\r\n* The availability of the agent nodes in your AKS Cluster is covered by the Virtual Machines SLA. Please see the [Virtual Machines SLA](https://azure.microsoft.com/support/legal/sla/virtual-machines/) for more details.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/kubernetes-service/)",
              "style": "upsell"
            },
            "conditionalVisibility": {
              "parameterName": "SLA",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "text - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "* An Azure Kubernetes Service (AKS) cluster distributes resources such as nodes and storage across logical sections of underlying Azure infrastructure. This deployment model when using availability zones, ensures nodes in a given availability zone are physically separated from those defined in another availability zone. AKS clusters deployed with multiple availability zones configured across a cluster provide a higher level of availability to protect against a hardware failure or a planned maintenance event.\r\n* By defining node pools in a cluster to span multiple zones, nodes in a given node pool are able to continue operating even if a single zone has gone down. Your applications can continue to be available even if there is a physical failure in a single datacenter if orchestrated to tolerate failure of a subset of nodes.\r\n* You can only define availability zones when the cluster or node pool is created.\r\nAvailability zone settings can't be updated after the cluster is created. You also can't update an existing, non-availability zone cluster to use availability zones.\r\n* The chosen node size (VM SKU) selected must be available across all availability zones selected.\r\n* Clusters with availability zones enabled require use of Azure Standard Load Balancers for distribution across zones. This load balancer type can only be defined at cluster create time.\r\n* Clusters with Availability Sets are recommended to move to VM Scale Sets for node pools. Availability Sets limits the management of nodepool capability such as upgrading Kubernetes versions for individual node pools and adding or removing node pools. Re-creation of cluster is required to move from Availability sets to scale sets.\r\n\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "Help",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "Help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.containerservice/managedclusters'",
              "size": 0,
              "title": "Azure Kubernetes Service (AKS)",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscriptions}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                    "formatter": 13,
                    "formatOptions": {
                      "linkTarget": "Resource",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Type",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Kind",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "SubscriptionId",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "State",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "!=",
                          "thresholdValue": "succeeded",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "succeeded",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "gray",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Location",
                    "formatter": 17
                  },
                  {
                    "columnMatch": "Zones",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AvailabilityZone",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "not configured",
                          "representation": "warning",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "1",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "2",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "3",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "not applicable",
                          "representation": "more",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "configured",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "undefined",
                          "representation": "unknown",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AvailabilitySet",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "placement groups",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "not configured",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "not applicable",
                          "representation": "more",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "undefined",
                          "representation": "unknown",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Capacity",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "2",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "1",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "0",
                          "representation": "warning",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "FaultDomain",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "OSDisk",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "premium",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "ultra",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "ephemeral",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "standard",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "unmanaged",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "gray",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "ReadReplica",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AutomaticFailover",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "MultipleWriteLocations",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "StorageAutogrow",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ReplicationRole",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Backup",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Environment",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "Prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "SubscriptionName",
                    "formatter": 5,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "",
                        "columnSettings": []
                      }
                    }
                  },
                  {
                    "columnMatch": "Plan",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AvZones",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "3",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "0",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Undefined",
                          "representation": "unknown",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AvSets",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Scale Sets Not Configured",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "A regional (non-zonal) scale set uses placement groups",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "ManagedDiskType",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "Premium",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "Standard",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "LoadBalancerSku",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Basic",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Standard",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Status",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Running",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "gray",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AvailabilityZones",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "is Empty",
                          "representation": "2",
                          "text": "Warning"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "Configured"
                        }
                      ]
                    }
                  }
                ],
                "rowLimit": 10000,
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "SubscriptionId"
                  ],
                  "expandTopLevel": false,
                  "finalBy": "Name"
                },
                "labelSettings": [
                  {
                    "columnId": "SubscriptionId",
                    "label": "Subscription"
                  }
                ]
              }
            },
            "name": "kql_container_aks_resources_details"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Containers"
      },
      "name": "Containers"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "[SLA for Storage Accounts](https://azure.microsoft.com/support/legal/sla/storage/)\r\n* We guarantee that at least 99.99% (99.9% for Cool Access Tier) of the time, we will successfully process requests to read data from Read Access-Geo Redundant Storage (RA-GRS) Accounts, provided that failed attempts to read data from the primary region are retried on the secondary region.\r\n* We guarantee that at least 99.9% (99% for Cool Access Tier) of the time, we will successfully process requests to read data from Locally Redundant Storage (LRS), Zone Redundant Storage (ZRS), and Geo Redundant Storage (GRS) Accounts.\r\n* We guarantee that at least 99.9% (99% for Cool Access Tier) of the time, we will successfully process requests to write data to Locally Redundant Storage (LRS), Zone Redundant Storage (ZRS), and Geo Redundant Storage (GRS) Accounts and Read Access-Geo Redundant Storage (RA-GRS) Accounts.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/storage/)",
              "style": "upsell"
            },
            "conditionalVisibility": {
              "parameterName": "SLA",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "text - 2 - Copy - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "> * For application data, use read-access geo-redundant storage (RA-GRS). RA-GRS storage replicates the data to a secondary region, and provides read-only access from the secondary region. If there is a storage outage in the primary region, the application can read the data from the secondary region.\r\n* For VM disks, use managed disks. Managed disks provide better reliability for VMs in an availability set, because the disks are sufficiently isolated from each other to avoid single points of failure. Also, managed disks aren't subject to the IOPS limits of VHDs created in a storage account.\r\n* For Queue storage, create a backup queue in another region. For Queue storage, a read-only replica has limited use, because you can't queue or dequeue items. Instead, create a backup queue in a storage account in another region. If there is a storage outage, the application can use the backup queue, until the primary region becomes available again. That way, the application can still process new requests",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "Help",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "text - 3 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type =~ \"microsoft.storage/storageaccounts\" or Type =~ \"microsoft.classicstorage/storageaccounts\"",
              "size": 3,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscriptions}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                    "formatter": 13,
                    "formatOptions": {
                      "linkTarget": "Resource",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Type",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Kind",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "v2",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "2",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "SubscriptionId",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Location",
                    "formatter": 17
                  },
                  {
                    "columnMatch": "Zones",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AvailabilityZone",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AvailabilitySet",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Capacity",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "FaultDomain",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "OSDisk",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ReadReplica",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "configured",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "not configured",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "not applicable",
                          "representation": "more",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AutomaticFailover",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "MultipleWriteLocations",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "StorageAutogrow",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Backup",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Environment",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "Prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "SubscriptionName",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "SecondaryLocation",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "-",
                          "representation": "2",
                          "text": "Warning"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "SecondaryStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Available",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "2",
                          "text": "Warning"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AccessTier",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Hot",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "2",
                          "text": "Warning"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "ReplicationType",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "RA-GRS",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "GRS",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "ZRS",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "2",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "type",
                    "formatter": 5
                  }
                ],
                "rowLimit": 10000,
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "SubscriptionId"
                  ],
                  "expandTopLevel": false,
                  "finalBy": "Name"
                },
                "labelSettings": [
                  {
                    "columnId": "SkuName",
                    "label": "Sku Name"
                  },
                  {
                    "columnId": "SubscriptionId",
                    "label": "Subscription"
                  },
                  {
                    "columnId": "ResourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "ReadReplica",
                    "label": "Read Replication"
                  },
                  {
                    "columnId": "ReplicationRole",
                    "label": "Replication Type"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "Storage"
            },
            "name": "kql_storage_account_resources_details"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Storage"
      },
      "name": "Storage"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "111d0db9-8c81-413d-9d93-bca6541aa953",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "App Service Plan",
                  "subTarget": "ASP",
                  "style": "link"
                },
                {
                  "id": "9b2af52f-ffd5-43d7-9055-9a76f56ca89a",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "App Service",
                  "subTarget": "AS",
                  "style": "link"
                  },
                  {
                    "id": "e59db88a-717c-4985-bcd6-fad4defbda76",
                    "cellValue": "selectedTab",
                    "linkTarget": "parameter",
                    "linkLabel": "Function App",
                    "subTarget": "FA",
                    "style": "link"
                }
              ]
            },
            "name": "links - 5"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "SLA for App Service Plan\r\n* There is no specific SLA tied to App service plan itself. The SLAs are applicable for the services running on the App Service plans.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/app-service/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "asp-sla"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "* Use isolated or Premium tier. These tiers support staging slots and automated backups.\r\n* Avoid scaling up or down. Instead, select a tier and instance size that meet your performance requirements under typical load, and then scale out the instances to handle changes in traffic volume. Scaling up and down may trigger an application restart.\r\n* Store configuration as app settings. Use app settings to hold configuration settings as app settings. Define the settings in your Resource Manager templates, or using PowerShell, so that you can apply them as part of an automated deployment / update process, which is more reliable.\r\n* Create separate App Service plans for production and test. Don't use slots on your production deployment for testing. All apps within the same App Service plan share the same VM instances. If you put production and test deployments in the same plan, it can negatively affect the production deployment. For example, load tests might degrade the live production site. By putting test deployments into a separate plan, you isolate them from the production version.\r\n* Separate web apps from web APIs. If your solution has both a web front end and a web API, consider decomposing them into separate App Service apps. This design makes it easier to decompose the solution by workload. You can run the web app and the API in separate App Service plans, so they can be scaled independently. If you don't need that level of scalability at first, you can deploy the apps into the same plan, and move them into separate plans later, if needed.\r\n* Create auto scaling configuration as part of App service plan.\r\n* Deploy App Service Plan in [availability zones](https://learn.microsoft.com/azure/reliability/migrate-app-service)\r\n\r\n> Azure generally recommends to leverage [Availability Zone](https://learn.microsoft.com/azure/availability-zones/az-overview) for better High Availability within the region by leveraging multiple zones inside region. By architecting your solutions to use replicated services in zones, you can protect your apps and data from the loss of a datacenter. \r\n\r\n> At this point, not all Azure regions and services support Availability Zones, the support matrix can be found [here](https://learn.microsoft.com/azure/availability-zones/az-region). Whenerver there is a Zonal recommendation for a particular service from this workbook, please note that that is applicable only for the regions supporting Availability Zones from the earlier list.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "asp-help"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.web/serverfarms'",
                    "size": 0,
                    "title": "App Service Plan",
                    "noDataMessage": "No App Service plans found",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                            "formatter": 13,
                          "formatOptions": {
                              "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "isolated",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "premium",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "regex",
                                "thresholdValue": "(free|shared|basic|standard|dynamic)",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                            "columnMatch": "Name",
                            "formatter": 5
                          },
                          {
                          "columnMatch": "State",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "ready",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "!=",
                                "thresholdValue": "ready",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "configured",
                                "representation": "success",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not configured",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "not applicable",
                                "representation": "more",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "regex",
                                "thresholdValue": "(0|1)",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Environment",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "contains",
                                "thresholdValue": "prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "contains",
                                "thresholdValue": "Prod",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "rowLimit": 9999,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                          ],
                          "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SkuName",
                          "label": "SKU"
                        },
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "ResourceGroup",
                          "label": "Resource Group"
                        },
                        {
                          "columnId": "AvailabilityZone",
                          "label": "Availability Zone"
                        }
                      ]
                    }
                  },
                  "name": "AppServicePlan query"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "ASP"
            },
            "name": "App Service Plan"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
            "type": 1,
            "content": {
              "json": "[SLA for App Service](https://azure.microsoft.com/support/legal/sla/app-service/)\r\n* We guarantee that Apps running in a customer subscription will be available 99.95% of the time. \r\n* No SLA is provided for Apps under either the Free or Shared tiers.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/app-service/)",
              "style": "upsell"
            },
            "conditionalVisibility": {
              "parameterName": "SLA",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "text - 2 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "> * Use Standard or Premium tier. These tiers support staging slots and automated backups.\r\n* Avoid scaling up or down. Instead, select a tier and instance size that meet your performance requirements under typical load, and then scale out the instances to handle changes in traffic volume. Scaling up and down may trigger an application restart.\r\n* Store configuration as app settings. Use app settings to hold configuration settings as app settings. Define the settings in your Resource Manager templates, or using PowerShell, so that you can apply them as part of an automated deployment / update process, which is more reliable.\r\n* Create separate App Service plans for production and test. Don't use slots on your production deployment for testing. All apps within the same App Service plan share the same VM instances. If you put production and test deployments in the same plan, it can negatively affect the production deployment. For example, load tests might degrade the live production site. By putting test deployments into a separate plan, you isolate them from the production version.\r\n* Separate web apps from web APIs. If your solution has both a web front end and a web API, consider decomposing them into separate App Service apps. This design makes it easier to decompose the solution by workload. You can run the web app and the API in separate App Service plans, so they can be scaled independently. If you don't need that level of scalability at first, you can deploy the apps into the same plan, and move them into separate plans later, if needed.\r\n* Avoid using the App Service backup feature to back up Azure SQL databases. Instead, use SQL Database automated backups. App Service backup exports the database to a SQL BACPAC file, which costs DTUs.\r\n* Deploy to a staging slot. Create a deployment slot for staging. Deploy application updates to the staging slot, and verify the deployment before swapping it into production. This reduces the chance of a bad update in production. It also ensures that all instances are warmed up before being swapped into production. Many applications have a significant warmup and cold-start time.\r\n* Create a deployment slot to hold the last-known-good (LKG) deployment. When you deploy an update to production, move the previous production deployment into the LKG slot. This makes it easier to roll back a bad deployment. If you discover a problem later, you can quickly revert to the LKG version.\r\n* Enable diagnostics logging, including application logging and web server logging. Logging is important for monitoring and diagnostics.\r\n* Log to blob storage. This makes it easier to collect and analyze the data.\r\n* Create a separate storage account for logs. Don't use the same storage account for logs and application data. This helps to prevent logging from reducing application performance.\r\n* Monitor performance. Use a performance monitoring service such as Application Insights to monitor application performance and behavior under load. Performance monitoring gives you real-time insight into the application. It enables you to diagnose issues and perform root-cause analysis of failures.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "Help",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "text - 3 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.web/sites' and Kind !contains 'functionapp' and Kind !contains 'workflowapp'",
              "size": 3,
              "title": "App Service - Web App",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscriptions}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                          "formatter": 13,
                    "formatOptions": {
                            "linkTarget": "Resource",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Type",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "SkuName",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "shared",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "free",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "basic",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "develop",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "standard",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "premium",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "SubscriptionId",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "State",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "running",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "stopped",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                    "columnMatch": "Zones",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AvailabilitySet",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Capacity",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "FaultDomain",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "OSDisk",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ReadReplica",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AutomaticFailover",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "MultipleWriteLocations",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "StorageAutogrow",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ReplicationRole",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Backup",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Environment",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "Prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "SubscriptionName",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Status",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Running",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Stopped",
                          "representation": "gray",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Tier",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Free",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Shared",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AppType",
                    "formatter": 5
                  }
                ],
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "SubscriptionId"
                  ],
                  "expandTopLevel": false,
                  "finalBy": "Name"
                },
                "labelSettings": [
                  {
                    "columnId": "SubscriptionId",
                    "label": "Subscription"
                  },
                  {
                    "columnId": "ResourceGroup",
                    "label": "Resource Group"
                  }
                ]
              }
            },
            "name": "kql_webapp_appsvc_resources_details"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "AS"
            },
            "name": "App Service"
            },
            {
              "type": 12,
              "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "items": [
                  {
                    "type": 1,
                    "content": {
                      "json": "[SLA for App Service](https://azure.microsoft.com/support/legal/sla/app-service/)\r\n* We guarantee that Apps running in a customer subscription will be available 99.95% of the time. \r\n* No SLA is provided for Apps under either the Free or Shared tiers.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/app-service/)",
                      "style": "upsell"
                    },
                    "conditionalVisibility": {
                      "parameterName": "SLA",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    "name": "text - 2 - Copy - Copy"
                  },
                  {
                    "type": 1,
                    "content": {
                      "json": "* This section lists Function Apps running on an App Service Plan.\r\n* Filter using the subscriptions parameter as required.",
                      "style": "info"
                    },
                    "conditionalVisibility": {
                      "parameterName": "Help",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    "name": "text - 3 - Copy - Copy"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.web/sites' and Kind contains 'functionapp' and Kind !contains 'workflowapp'",
                      "size": 3,
                      "title": "App Service - Function App",
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources",
                      "crossComponentResources": [
                        "{Subscriptions}"
                      ],
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "$gen_group",
                          "formatter": 13,
                            "formatOptions": {
                            "linkTarget": "Resource",
                              "showIcon": true
                            }
                          },
                          {
                            "columnMatch": "Type",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "SkuName",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "dynamic",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "free",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "shared",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "basic",
                                  "representation": "warning",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "develop",
                                  "representation": "warning",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "premium",
                                  "representation": "success",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "unknown",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "Kind",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "SubscriptionId",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Name",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "State",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "colors",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "running",
                                  "representation": "green",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "!=",
                                  "thresholdValue": "running",
                                  "representation": "orange",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                          "columnMatch": "Location",
                          "formatter": 17
                        },
                        {
                            "columnMatch": "Zones",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AvailabilityZone",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AvailabilitySet",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Capacity",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "FaultDomain",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "OSDisk",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "ReadReplica",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "AutomaticFailover",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "MultipleWriteLocations",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "StorageAutogrow",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "ReplicationRole",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Backup",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "unknown",
                                  "representation": "unknown",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": null,
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "Environment",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "colors",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "prod",
                                  "representation": "redBright",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "Prod",
                                  "representation": "redBright",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "SubscriptionName",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Status",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "colors",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "Running",
                                  "representation": "green",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "Stopped",
                                  "representation": "gray",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "Tier",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "Free",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "Shared",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "success",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "AppType",
                            "formatter": 5
                          }
                        ],
                        "rowLimit": 10000,
                        "hierarchySettings": {
                          "treeType": 1,
                          "groupBy": [
                            "SubscriptionId"
                          ],
                          "expandTopLevel": false,
                          "finalBy": "Name"
                        },
                        "labelSettings": [
                          {
                            "columnId": "SubscriptionId",
                            "label": "Subscription"
                          },
                          {
                            "columnId": "ResourceGroup",
                            "label": "Resource Group"
                          }
                        ]
                      }
                    },
                    "name": "kql_webapp_appservice_funcapp_resources_details"
                  }
                ]
              },
              "conditionalVisibility": {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "FA"
              },
              "name": "function app"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Web"
      },
      "name": "Web"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "[SLA for API Management](https://azure.microsoft.com/support/legal/sla/api-management/)\r\n* We guarantee that API Management Service instances running in the Consumption Tier, Basic Tier, Standard Tier, and Premium Tier deployments scaled within a single region will respond to requests to perform operations at least 99.95% of the time.\r\n* We guarantee that API Management Service instances running in the Premium Tier with deployments scaled across two or more regions will respond to requests to perform operations at least 99.99% of the time.\r\n* No SLA is provided for the following:​\r\n * Developer tier of the API Management Service.\r\n * Any self-hosted API Management components.​\r\n \r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/api-management/)",
              "style": "upsell"
            },
            "conditionalVisibility": {
              "parameterName": "SLA",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "text - 2 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "* Please note the Developer tier is for non-production use cases and evaluations. It does not offer an SLA.\r\n* API Management instances deleted using 2020-01-01-preview and later API versions will be soft-deleted and recoverable. APIM instances deleted using previous API versions will continue to be hard-deleted. Azure PowerShell and Azure CLI currently do not use the 2020-06-01-preview version and will also result in hard-delete behavior. Refer to [API Management soft-delete (preview)](https://learn.microsoft.com/azure/api-management/soft-delete) for more information.\r\n\r\n",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "Help",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "text - 3 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.apimanagement/service'",
              "size": 0,
              "title": "API Management",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscriptions}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                    "formatter": 13,
                    "formatOptions": {
                      "linkTarget": "Resource",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Type",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "SkuName",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "developer",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "basic",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "standard",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "premium",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "isolated",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Kind",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "SubscriptionId",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "State",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "succeeded",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "!=",
                          "thresholdValue": "succeeded",
                          "representation": "orange",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Location",
                    "formatter": 17
                  },
                  {
                    "columnMatch": "Zones",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AvailabilityZone",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "not applicable",
                          "representation": "more",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "not configured",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "1",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "2",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "3",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "configured",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AvailabilitySet",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Capacity",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "1",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "0",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "!=",
                          "thresholdValue": "1",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "FaultDomain",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "OSDisk",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "stv2",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "stv1",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "ReadReplica",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AutomaticFailover",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "MultipleWriteLocations",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "StorageAutogrow",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ReplicationRole",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Backup",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Environment",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "contains",
                          "thresholdValue": "prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "contains",
                          "thresholdValue": "Prod",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "SubscriptionName",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Tier",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Premium",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "2",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ],
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "SubscriptionId"
                  ],
                  "expandTopLevel": false,
                  "finalBy": "Name"
                },
                "labelSettings": [
                  {
                    "columnId": "SkuName",
                    "label": "SKU"
                  },
                  {
                    "columnId": "SubscriptionId",
                    "label": "Subscription"
                  },
                  {
                    "columnId": "ResourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "OSDisk",
                    "label": "Platform Version"
                  }
                ]
              },
              "sortBy": []
            },
            "name": "kql_integration_apim_resources_details"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Integration"
      },
      "name": "Integration"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "[SLA for Azure Site Recovery](https://azure.microsoft.com/support/legal/sla/site-recovery/)\r\n* For each Protected Instance configured for On-Premises-to-On-Premises Failover, we guarantee at least 99.9% availability of the Site Recovery service. Availability is calculated over a monthly billing cycle.\r\n* For each Protected Instance configured for On-Premises-to-Azure planned and unplanned Failover, we guarantee a two-hour Recovery Time Objective.\r\n* For each Protected Instance configured for Azure-to-Azure Failover, we guarantee a two-hour Recovery Time Objective.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/site-recovery/)",
              "style": "upsell"
            },
            "conditionalVisibility": {
              "parameterName": "SLA",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "Backup SLA"
          },
          {
            "type": 1,
            "content": {
              "json": "> Azure Site Recovery can help your business to keep doing business during major IT outages. Azure Site Recovery offers ease of deployment, cost effectiveness, and dependability. <br>Deploy replication, failover, and recovery processes through Site Recovery to help keep your applications running during planned and unplanned outages.\r\n\r\n* Where configured, Azure Site Recovery protected Virtual Machines will be listed in a table. \r\n* Ensure that each of the following parameters are selected from the drop down lists:\r\n\t* Subscription\r\n\t* Vault\r\n\t* Resource Group",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "Help",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "Backup Help"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == \"false\", 'Not Configured', 'Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Configured', 'Not Configured'),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', tostring(properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.storageAccountType,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == \"Enabled\", 'Not Applicable', tostring(properties.replicationRole)),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    securityresources\n    | where properties.displayName contains \"Azure Backup should\"\n    | extend Backup = tostring(properties.status.code)\n    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup\n    )\n    on Name\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines') and (Backup == \"Healthy\" or Backup == \"Unhealthy\"), Backup, \n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\", \n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| where Type == 'microsoft.recoveryservices/vaults'",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscriptions}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                    "formatter": 13,
                    "formatOptions": {
                      "linkTarget": "Resource",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Type",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Kind",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "SubscriptionId",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "State",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "succeeded",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "!=",
                          "thresholdValue": "succeeded",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Location",
                    "formatter": 17
                  },
                  {
                    "columnMatch": "Zones",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AvailabilityZone",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AvailabilitySet",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Capacity",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "FaultDomain",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "OSDisk",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ReadReplica",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AutomaticFailover",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "MultipleWriteLocations",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "StorageAutogrow",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "ReplicationRole",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Backup",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "SubscriptionName",
                    "formatter": 5
                  }
                ],
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "SubscriptionId"
                  ],
                  "finalBy": "Name"
                },
                "labelSettings": [
                  {
                    "columnId": "SubscriptionId",
                    "label": "Subscription"
                  }
                ]
              }
            },
            "name": "kql_azuresiterecovery_resources_details"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Backup"
      },
      "name": "Backup"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}