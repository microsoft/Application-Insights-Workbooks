{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "aa0176d8-14ff-4dc5-9ae7-b8029f565674",
                  "version": "KqlParameterItem/1.0",
                  "name": "Subscriptions",
                  "label": "Subscriptions",
                  "type": 6,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "includeAll": false,
                    "showDefault": false
                  },
                  "defaultValue": "value::all"
                },
                {
                  "id": "91aa9ba3-ed60-4472-8dd9-1c2cb6255757",
                  "version": "KqlParameterItem/1.0",
                  "name": "ResourceGroup",
                  "label": "Resource Group",
                  "type": 2,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "resources\r\n| distinct resourceGroup",
                  "crossComponentResources": [
                    "{Subscriptions}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources"
                },
                {
                  "id": "5a4f6d34-9f89-4ef8-b4ee-fb0580ec016d",
                  "version": "KqlParameterItem/1.0",
                  "name": "Environment",
                  "type": 2,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "resources\r\n| extend Environment = case(\r\ntags.Environment <> \"\", tags.Environment,\r\ntags.environment <> \"\", tags.environment,\r\ntags.Env <> \"\", tags.Env,\r\ntags.env <> \"\", tags.env,\r\ntolower(name) contains \"prod\", \"Production\",\r\ntolower(name) contains \"dev\", \"Development\",\r\ntolower(name) contains \"qa\", \"QA\",\r\ntolower(name) contains \"uat\", \"UAT\",\r\ntolower(name) contains \"sit\", \"SIT\",\r\ntolower(name) contains \"test\", \"Test\",\r\n\"Undefined\")\r\n| distinct Environment",
                  "crossComponentResources": [
                    "{Subscriptions}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources"
                },
                {
                  "id": "9d6afcdc-172c-4bef-8bab-dc372c5d3bb4",
                  "version": "KqlParameterItem/1.0",
                  "name": "TagName",
                  "label": "Tag Name",
                  "type": 2,
                  "query": "Resources\r\n| where tags != '' and tags != '[]'\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| distinct tagName\r\n| sort by tagName asc",
                  "crossComponentResources": [
                    "{Subscriptions}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "value": null
                },
                {
                  "id": "95781001-338b-4ed3-81dc-ce16f2a98bf0",
                  "version": "KqlParameterItem/1.0",
                  "name": "TagValue",
                  "label": "Tag Value",
                  "type": 2,
                  "query": "Resources\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| extend tagValue = tostring(tags[tagName])\r\n| where tags != '' and tags != '[]' and tostring(bag_keys(tags)[0]) == '{TagName}'\r\n| distinct tagValue\r\n| sort by tagValue asc",
                  "crossComponentResources": [
                    "{Subscriptions}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "value": null
                },
                {
                  "id": "e929bc01-08ec-45fe-bc6a-4e0267460dfa",
                  "version": "KqlParameterItem/1.0",
                  "name": "SLA",
                  "label": "Show SLA",
                  "type": 10,
                  "description": "This will show the SLA information for the focus area",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{ \"value\": \"Yes\", \"label\": \"Yes\", \"selected\":true},\r\n {\"value\": \"No\", \"label\": \"No\"}]"
                },
                {
                  "id": "9581cbc6-0f0f-42be-8ae8-6fe94de00ab8",
                  "version": "KqlParameterItem/1.0",
                  "name": "Help",
                  "label": "Show Help",
                  "type": 10,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "jsonData": "[{\"value\": \"Yes\", \"label\": \"Yes\", \"selected\":true },\r\n {\"value\": \"No\", \"label\": \"No\"}]"
                }
              ],
              "style": "pills",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            "name": "parameters - 13"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "[SLA for Azure Site Recovery](https://azure.microsoft.com/support/legal/sla/site-recovery/)\r\n* For each Protected Instance configured for On-Premises-to-On-Premises Failover, we guarantee at least 99.9% availability of the Site Recovery service. Availability is calculated over a monthly billing cycle.\r\n* For each Protected Instance configured for On-Premises-to-Azure planned and unplanned Failover, we guarantee a two-hour Recovery Time Objective.\r\n* For each Protected Instance configured for Azure-to-Azure Failover, we guarantee a two-hour Recovery Time Objective.\r\n\r\n> SLA accurate at time of release. Latest information is available [here](https://azure.microsoft.com/support/legal/sla/site-recovery/)",
                    "style": "upsell"
                  },
                  "conditionalVisibility": {
                    "parameterName": "SLA",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "Backup SLA"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "> Azure Site Recovery can help your business to keep doing business during major IT outages. Azure Site Recovery offers ease of deployment, cost effectiveness, and dependability. <br>Deploy replication, failover, and recovery processes through Site Recovery to help keep your applications running during planned and unplanned outages.\r\n\r\n* Where configured, Azure Site Recovery protected Virtual Machines will be listed in a table. \r\n* Ensure that each of the following parameters are selected from the drop down lists:\r\n\t* Subscription\r\n\t* Vault\r\n\t* Resource Group",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "Help",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "Backup Help"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or\n    (type == 'microsoft.dbforpostgresql/servers') or \n    (type == 'microsoft.dbforpostgresql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.dbforpostgresql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.dbforpostgresql/servers', tostring(sku.tier),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), case( //SQL AZ SKU \u0026 region availability filter\n    sku.name == 'Basic' or sku.name == 'Standard' or sku.name == 'System', 'Not Applicable',\n    sku.name == 'GeneralPurpose' and location !in~ ('westeurope', 'northeurope', 'westus2', 'francecentral', 'eastus', 'eastus2', 'southeastasia', 'qatarcentral', 'australiaeast', 'japaneast', 'uksouth'), 'Not Applicable',\n    properties.zoneRedundant == 'true', 'Configured',\n    'Not Configured'\n    ),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'),case(\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        'Not Configured'\n    ),\n    (type == 'microsoft.dbforpostgresql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbforpostgresql/flexibleservers'),case(\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        'Not Configured'\n    ),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.dbforpostgresql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/servers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.currentBackupStorageRedundancy,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/servers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(\n        properties.highAvailability.mode == \"Disabled\" and properties.replicationRole != \"Replica\" , \"Not Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Zone Redundant\",\n        properties.highAvailability.mode == \"SameZone\", \"Same Zone\",\n        properties.highAvailability.mode\n    ),\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', case(    \n    properties.highAvailability.mode == \"Disabled\" and properties.replicationRole !contains \"AsyncReplica\", \"Not Configured\",\n        properties.replicationRole == \"GeoAsyncReplica\", \"Not Applicable\",\n        properties.replicationRole == \"AsyncReplica\", \"Not Applicable\",\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Zone Redundant\",\n        properties.highAvailability.mode == \"SameZone\", \"Same Zone\",\n        properties.highAvailability.mode\n    ),\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers', 'microsoft.dbforpostgresql/servers', 'microsoft.dbforpostgresql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.dbforpostgresql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbforpostgresql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbforpostgresql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbforpostgresql/flexibleservers'), tostring(properties.replicationRole),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    recoveryservicesresources\n    | extend vmId = case(\n        properties.backupManagementType == \"AzureIaasVM\", tolower(tostring(properties.dataSourceInfo.resourceID)),\n        type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", tolower(tostring(properties.providerSpecificDetails.dataSourceInfo.resourceId)),\n        ''\n    )\n    | extend asrId = iff(type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", tolower(tostring(strcat_array(array_slice(split(properties.recoveryFabricId, '/'), 0, 8), '/'))), '')\n    | extend resourceId = case(\n        properties.backupManagementType == \"AzureIaasVM\", vmId,\n        type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", asrId,\n        ''\n    )\n    | extend Backup = tostring(properties.protectionStatus)\n    | extend replicationHealth = properties.replicationHealth\n    | extend failoverHealth = properties.failoverHealth\n    | extend protectionStateDescription = properties.protectionStateDescription\n    | extend isReplicationAgentUpdateRequired = properties.providerSpecificDetails.isReplicationAgentUpdateRequired\n    | project resourceId, vmId, asrId, Backup, replicationHealth, failoverHealth, protectionStateDescription, isReplicationAgentUpdateRequired\n  )\n  on $left.Name == $right.resourceId\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\n    (Type == 'microsoft.classiccompute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.type!=\"Continuous\",iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Geo\", \"Not Geo\"),\"Continuous\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/flexibleservers'), properties.backup.geoRedundantBackup,\n    (Type == 'microsoft.dbforpostgresql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbforpostgresql/flexibleservers'), case(\n        properties.backup.geoRedundantBackup == \"Disabled\" and properties.replicationRole !contains \"AsyncReplica\", \"Disabled\",\n        properties.replicationRole == \"GeoAsyncReplica\", \"Not Applicable\",\n        properties.replicationRole == \"AsyncReplica\", \"Not Applicable\",\n        properties.backup.geoRedundantBackup\n    ),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n\n| summarize asrProtectedTotalItemCounts = count(asrId != \"\"), asrUnprotectedItemCounts = countif(protectionStateDescription != \"Protected\"), asrRelicationUnHealthyItemCounts = countif(replicationHealth != \"Normal\"), asrFailoverUnHealthyItemCounts = countif(failoverHealth != \"Normal\"), asrIsReplicationAgentUpdateRequiredItemCounts = countif(isReplicationAgentUpdateRequired == true) by Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup, Environment\n| where asrProtectedTotalItemCounts != 0\n| project Name, Type, SkuName, Kind, SubscriptionId, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), asrProtectedTotalItemCounts,asrUnprotectedItemCounts, asrRelicationUnHealthyItemCounts, asrFailoverUnHealthyItemCounts, asrIsReplicationAgentUpdateRequiredItemCounts, Environment\n| where Type == 'microsoft.recoveryservices/vaults'\n| summarize ResourceTotal=count(Name), FailedStatus=dcountif(Name, State !in~ (\"succeeded\")), UnprotectedStatus=sum(asrUnprotectedItemCounts), UnHealthyStatus=sum(asrRelicationUnHealthyItemCounts), UnHealthyFailover=sum(asrFailoverUnHealthyItemCounts),IsReplicationAgentUpdateRequired=sum(asrIsReplicationAgentUpdateRequiredItemCounts)\n",
                    "size": 3,
                    "title": "Azure Site Recovery resources - Recommendation Summary",
                    "exportedParameters": [
                      {
                        "fieldName": "Name",
                        "parameterName": "SiteRecoveryResourceId",
                        "parameterType": 5,
                        "defaultValue": ""
                      }
                    ],
                    "showExportToExcel": true,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ResourceTotal",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": [
                                {
                                  "columnName": "FailedStatus",
                                  "color": "yellow"
                                },
                                {
                                  "columnName": "StateNotSucceeded",
                                  "color": "lightBlue"
                                },
                                {
                                  "columnName": "UnprotectedStatus",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "UnHealthyStatus",
                                  "color": "purple"
                                },
                                {
                                  "columnName": "UnHealthyFailover",
                                  "color": "red"
                                },
                                {
                                  "columnName": "IsReplicationAgentUpdateRequired",
                                  "color": "green"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "rowLimit": 10000,
                      "labelSettings": [
                        {
                          "columnId": "ResourceTotal",
                          "label": "Resource Total"
                        },
                        {
                          "columnId": "FailedStatus",
                          "label": "Failed Status"
                        },
                        {
                          "columnId": "UnprotectedStatus",
                          "label": "Unprotected Status"
                        },
                        {
                          "columnId": "UnHealthyStatus",
                          "label": "Unhealthy Replication Status"
                        },
                        {
                          "columnId": "UnHealthyFailover",
                          "label": "Unhealthy Failover Status"
                        },
                        {
                          "columnId": "IsReplicationAgentUpdateRequired",
                          "label": "Replication Agent update required"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "name": "kql_azuresiterecovery_resources_details_summary"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = innerunique(\n    resources\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\n    | extend replaced_tags = parse_json(replaced_tags)\n    | mv-expand replaced_tags\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\n    | extend tagValue = tostring(replaced_tags['{TagName}'])\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\n    | distinct id\n    )\n    on id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or\n    (type == 'microsoft.dbforpostgresql/servers') or \n    (type == 'microsoft.dbforpostgresql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.dbforpostgresql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.dbforpostgresql/servers', tostring(sku.tier),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), case( //SQL AZ SKU \u0026 region availability filter\n    sku.name == 'Basic' or sku.name == 'Standard' or sku.name == 'System', 'Not Applicable',\n    sku.name == 'GeneralPurpose' and location !in~ ('westeurope', 'northeurope', 'westus2', 'francecentral', 'eastus', 'eastus2', 'southeastasia', 'qatarcentral', 'australiaeast', 'japaneast', 'uksouth'), 'Not Applicable',\n    properties.zoneRedundant == 'true', 'Configured',\n    'Not Configured'\n    ),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'),case(\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        'Not Configured'\n    ),\n    (type == 'microsoft.dbforpostgresql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbforpostgresql/flexibleservers'),case(\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        'Not Configured'\n    ),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.dbforpostgresql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/servers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.currentBackupStorageRedundancy,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/servers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        location in~ ('qatarcentral'), 'Not Applicable',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(\n        properties.highAvailability.mode == \"Disabled\" and properties.replicationRole != \"Replica\" , \"Not Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Zone Redundant\",\n        properties.highAvailability.mode == \"SameZone\", \"Same Zone\",\n        properties.highAvailability.mode\n    ),\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', case(    \n    properties.highAvailability.mode == \"Disabled\" and properties.replicationRole !contains \"AsyncReplica\", \"Not Configured\",\n        properties.replicationRole == \"GeoAsyncReplica\", \"Not Applicable\",\n        properties.replicationRole == \"AsyncReplica\", \"Not Applicable\",\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Zone Redundant\",\n        properties.highAvailability.mode == \"SameZone\", \"Same Zone\",\n        properties.highAvailability.mode\n    ),\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers', 'microsoft.dbforpostgresql/servers', 'microsoft.dbforpostgresql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.dbforpostgresql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbforpostgresql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbforpostgresql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbforpostgresql/flexibleservers'), tostring(properties.replicationRole),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    recoveryservicesresources\n    | extend vmId = case(\n        properties.backupManagementType == \"AzureIaasVM\", tolower(tostring(properties.dataSourceInfo.resourceID)),\n        type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", tolower(tostring(properties.providerSpecificDetails.dataSourceInfo.resourceId)),\n        ''\n    )\n    | extend asrId = iff(type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", tolower(tostring(strcat_array(array_slice(split(properties.recoveryFabricId, '/'), 0, 8), '/'))), '')\n    | extend resourceId = case(\n        properties.backupManagementType == \"AzureIaasVM\", vmId,\n        type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", asrId,\n        ''\n    )\n    | extend Backup = tostring(properties.protectionStatus)\n    | extend replicationHealth = properties.replicationHealth\n    | extend failoverHealth = properties.failoverHealth\n    | extend protectionStateDescription = properties.protectionStateDescription\n    | extend isReplicationAgentUpdateRequired = properties.providerSpecificDetails.isReplicationAgentUpdateRequired\n    | project resourceId, vmId, asrId, Backup, replicationHealth, failoverHealth, protectionStateDescription, isReplicationAgentUpdateRequired\n  )\n  on $left.Name == $right.resourceId\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\n    (Type == 'microsoft.classiccompute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.type!=\"Continuous\",iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Geo\", \"Not Geo\"),\"Continuous\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/flexibleservers'), properties.backup.geoRedundantBackup,\n    (Type == 'microsoft.dbforpostgresql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbforpostgresql/flexibleservers'), case(\n        properties.backup.geoRedundantBackup == \"Disabled\" and properties.replicationRole !contains \"AsyncReplica\", \"Disabled\",\n        properties.replicationRole == \"GeoAsyncReplica\", \"Not Applicable\",\n        properties.replicationRole == \"AsyncReplica\", \"Not Applicable\",\n        properties.backup.geoRedundantBackup\n    ),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n\n| summarize asrProtectedTotalItemCounts = count(asrId != \"\"), asrUnprotectedItemCounts = countif(protectionStateDescription != \"Protected\"), asrRelicationUnHealthyItemCounts = countif(replicationHealth != \"Normal\"), asrFailoverUnHealthyItemCounts = countif(failoverHealth != \"Normal\"), asrIsReplicationAgentUpdateRequiredItemCounts = countif(isReplicationAgentUpdateRequired == true) by Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup, Environment\n| where asrProtectedTotalItemCounts != 0\n| project Name, Type, SkuName, Kind, SubscriptionId, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), asrProtectedTotalItemCounts,asrUnprotectedItemCounts, asrRelicationUnHealthyItemCounts, asrFailoverUnHealthyItemCounts, asrIsReplicationAgentUpdateRequiredItemCounts, Environment\n| where Type == 'microsoft.recoveryservices/vaults'\n",
                    "size": 3,
                    "title": "List of Azure Site Recovery resources",
                    "exportedParameters": [
                      {
                        "fieldName": "Name",
                        "parameterName": "SiteRecoveryResourceId",
                        "parameterType": 5,
                        "defaultValue": ""
                      }
                    ],
                    "showExportToExcel": true,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "$gen_group",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Subscription",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Type",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SkuName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Kind",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "SubscriptionId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Group",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Zones",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilityZone",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailabilitySet",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Capacity",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "FaultDomain",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "OSDisk",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReadReplica",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AutomaticFailover",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MultipleWriteLocations",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StorageAutogrow",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ReplicationRole",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Backup",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "asrProtectedTotalItemCounts",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "asrUnprotectedItemCounts",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "1",
                                "representation": "3",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ],
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": [
                                {
                                  "columnName": "asrFailoverUnHealthyItemCounts",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "asrRelicationUnHealthyItemCounts",
                                  "color": "greenDarkDark"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "asrRelicationUnHealthyItemCounts",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "1",
                                "representation": "3",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "asrFailoverUnHealthyItemCounts",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "1",
                                "representation": "3",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "asrIsReplicationAgentUpdateRequiredItemCounts",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "1",
                                "representation": "3",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "rowLimit": 10000,
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SubscriptionId"
                        ],
                        "expandTopLevel": true,
                        "finalBy": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "SubscriptionId",
                          "label": "Subscription"
                        },
                        {
                          "columnId": "asrProtectedTotalItemCounts",
                          "label": "Protected Items"
                        },
                        {
                          "columnId": "asrUnprotectedItemCounts",
                          "label": "Unprotected Status"
                        },
                        {
                          "columnId": "asrRelicationUnHealthyItemCounts",
                          "label": "Unhealthy Replication"
                        },
                        {
                          "columnId": "asrFailoverUnHealthyItemCounts",
                          "label": "Unhealthy Failover"
                        },
                        {
                          "columnId": "asrIsReplicationAgentUpdateRequiredItemCounts",
                          "label": "Is needed Agent Update"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "name": "kql_azuresiterecovery_resources_details"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "recoveryservicesresources\n| where type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\"\n| extend asrId = tolower(tostring(strcat_array(array_slice(split(id, '/'), 0, 8), '/')))\n| where asrId == '{SiteRecoveryResourceId}'\n| extend vmId = tolower(tostring(properties.providerSpecificDetails.fabricObjectId))\n| extend replicationHealth = properties.replicationHealth\n| extend failoverHealth = properties.failoverHealth\n| extend protectionStateDescription = properties.protectionStateDescription\n| extend testFailoverState = properties.testFailoverState\n| extend initialRecoveryFabricLocation = properties.providerSpecificDetails.initialRecoveryFabricLocation\n| extend initialPrimaryFabricLocation = tostring(properties.providerSpecificDetails.initialPrimaryFabricLocation)\n| extend primaryFabricLocation = tostring(properties.providerSpecificDetails.primaryFabricLocation)\n| extend recoveryFabricLocation = properties.providerSpecificDetails.recoveryFabricLocation\n| extend lastHeartbeat = properties.providerSpecificDetails.lastHeartbeat\n| extend agentVersion = properties.providerSpecificDetails.agentVersion\n| extend rpoInSeconds = properties.providerSpecificDetails.rpoInSeconds\n| extend lastSuccessfulTestFailoverTime = properties.lastSuccessfulTestFailoverTime\n| extend isReplicationAgentUpdateRequired = tostring(properties.providerSpecificDetails.isReplicationAgentUpdateRequired)\n| extend diffNowAndlastSuccessfulTestFailoverTime = datetime_diff('day', now(), todatetime(lastSuccessfulTestFailoverTime))\n| extend activeLocation = tostring(properties.activeLocation)\n| extend currentVmLocation = iff(activeLocation == \"Recovery\", recoveryFabricLocation, primaryFabricLocation)\n| extend statusOfFailoverorFailback = case(\n    activeLocation == \"Recovery\" and primaryFabricLocation == initialPrimaryFabricLocation, \"Failover\",\n    activeLocation == \"Recovery\" and primaryFabricLocation != initialPrimaryFabricLocation, \"Failback\",\n    activeLocation == \"Primary\" and primaryFabricLocation == initialPrimaryFabricLocation, \"Original\",\n    activeLocation == \"Primary\" and primaryFabricLocation != initialPrimaryFabricLocation, \"Failover\",\n    protectionStateDescription\n)\n| join kind = leftouter(\n    resources\n    | where type =~ \"microsoft.compute/virtualmachines\"\n    | extend realVmId = tolower(tostring(id))\n) on $left.vmId == $right.realVmId\n| project vmId, realVmId, currentVmLocation, statusOfFailoverorFailback, replicationHealth, failoverHealth, protectionStateDescription, testFailoverState, activeLocation, primaryFabricLocation, recoveryFabricLocation, initialPrimaryFabricLocation, initialRecoveryFabricLocation, lastHeartbeat, agentVersion, rpoInSeconds, diffNowAndlastSuccessfulTestFailoverTime, isReplicationAgentUpdateRequired\n| order by tostring(vmId)\n",
                    "size": 3,
                    "title": "List of protected items (Please select the Site Recovery resource row in the above pane)",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscriptions}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "vmId",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true,
                            "customColumnWidthSetting": "26.4286ch"
                          }
                        },
                        {
                          "columnMatch": "realVmId",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "is Empty",
                                "representation": "3",
                                "text": "VM not found"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": ""
                              }
                            ],
                            "customColumnWidthSetting": "16.5714ch"
                          }
                        },
                        {
                          "columnMatch": "currentVmLocation",
                          "formatter": 17,
                          "formatOptions": {
                            "customColumnWidthSetting": "110px"
                          }
                        },
                        {
                          "columnMatch": "replicationHealth",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "4",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Error",
                                "representation": "3",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "failoverHealth",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Error",
                                "representation": "3",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "4",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "protectionStateDescription",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "!=",
                                "thresholdValue": "Protected",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "testFailoverState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "!=",
                                "thresholdValue": "MarkedForDeletion",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "activeLocation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "primaryFabricLocation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "recoveryFabricLocation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "initialPrimaryFabricLocation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "initialRecoveryFabricLocation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "lastHeartbeat",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "rpoInSeconds",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": ">=",
                                "thresholdValue": "1800",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "is Empty",
                                "representation": "unknown",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          },
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        {
                          "columnMatch": "diffNowAndlastSuccessfulTestFailoverTime",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "is Empty",
                                "thresholdValue": "-1",
                                "representation": "2",
                                "text": "Test failover has not been performed"
                              },
                              {
                                "operator": ">",
                                "thresholdValue": "180",
                                "representation": "2",
                                "text": "{0} {1}"
                              },
                              {
                                "operator": "<=",
                                "thresholdValue": "180",
                                "representation": "success",
                                "text": "{0} {1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          },
                          "numberFormat": {
                            "unit": 27,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "isReplicationAgentUpdateRequired",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "true",
                                "representation": "4",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "vmLocation",
                          "formatter": 17,
                          "formatOptions": {
                            "customColumnWidthSetting": "108px"
                          }
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "$gen_link_vmId_0",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "vmId",
                          "label": "Target VM"
                        },
                        {
                          "columnId": "realVmId",
                          "label": "VM existence"
                        },
                        {
                          "columnId": "currentVmLocation",
                          "label": "VM location"
                        },
                        {
                          "columnId": "statusOfFailoverorFailback",
                          "label": "Status of Failover"
                        },
                        {
                          "columnId": "replicationHealth",
                          "label": "Replication Health"
                        },
                        {
                          "columnId": "failoverHealth",
                          "label": "Failover Health"
                        },
                        {
                          "columnId": "protectionStateDescription",
                          "label": "Protection status"
                        },
                        {
                          "columnId": "testFailoverState",
                          "label": "Test failover status"
                        },
                        {
                          "columnId": "initialPrimaryFabricLocation",
                          "label": "Primary location"
                        },
                        {
                          "columnId": "initialRecoveryFabricLocation",
                          "label": "Recovery location"
                        },
                        {
                          "columnId": "lastHeartbeat",
                          "label": "Last heartbeat"
                        },
                        {
                          "columnId": "agentVersion",
                          "label": "Agent version"
                        },
                        {
                          "columnId": "rpoInSeconds",
                          "label": "RPO"
                        },
                        {
                          "columnId": "diffNowAndlastSuccessfulTestFailoverTime",
                          "label": "Failover elapsed days"
                        },
                        {
                          "columnId": "isReplicationAgentUpdateRequired",
                          "label": "Agent update required"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "$gen_link_vmId_0",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "name": "kql_azuresiterecovery_resources_protectedItem_details"
                }
              ]
            },
            "name": "Backup"
          }
        ]
      },
      "name": "summary group"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
