{
    "version": "Notebook/1.0",
    "items": [
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "parameters": [
            {
              "id": "ce6849b1-b791-4bdd-af72-b0889069f4e9",
              "version": "KqlParameterItem/1.0",
              "name": "param_sizedatasource",
              "type": 1,
              "description": "global variable for the data source",
              "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n  {\\r\\n\\t\\t\\\"datasource\\\": \\\"SapHana_size01_CL\\\"\\r\\n\\t}\\r\\n]\",\"transformers\":null}",
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 8
            },
            {
              "id": "0b622165-0204-442c-adaa-175f2150b501",
              "version": "KqlParameterItem/1.0",
              "name": "param_diskdatasource",
              "type": 1,
              "description": "global variable for the data source",
              "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n  {\\r\\n\\t\\t\\\"datasource\\\": \\\"SapHana_Disks_CL\\\"\\r\\n\\t}\\r\\n]\",\"transformers\":null}",
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 8
            },
            {
              "id": "0ed3a9d9-ba12-4405-a6f4-30784a8378b1",
              "version": "KqlParameterItem/1.0",
              "name": "param_loadsource",
              "type": 1,
              "description": "global variable for the data source",
              "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n  {\\r\\n\\t\\t\\\"loadsouce\\\": \\\"SapHana_LoadHistory_CL\\\"\\r\\n\\t}\\r\\n]\",\"transformers\":null}",
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 8
            }
          ],
          "style": "above",
          "queryType": 8
        },
        "conditionalVisibility": {
          "parameterName": "param_nevershow",
          "comparison": "isEqualTo",
          "value": "99999"
        },
        "name": "parameters - 7"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "parameters": [
            {
              "id": "6dde42bb-29e2-47d6-b27f-84bbbe368b12",
              "version": "KqlParameterItem/1.0",
              "name": "param_host_selected",
              "type": 1,
              "value": "",
              "isHiddenWhenLocked": true
            },
            {
              "id": "bda7f049-cc56-490b-92ae-312186700540",
              "version": "KqlParameterItem/1.0",
              "name": "param_tab_main",
              "type": 1,
              "value": "1",
              "isHiddenWhenLocked": true
            },
            {
              "id": "731f3dea-e655-4c54-8db1-79e6d4691709",
              "version": "KqlParameterItem/1.0",
              "name": "param_check_error",
              "type": 1,
              "query": "// 0 = no error\n// 1 = table does not exist (need to add provider)\n// 2 = table exists, but column v1 does not (need to wait)\n// 3 = table exists, column v1 too, but not column v2 (need to upgrade)\n// 4 = table exists, column v1 and column v2 as well, but no records (need to wait)\nlet t = \"SapHana_LoadHistory_CL\";\nlet c1 = \"HOST_s\";\nlet c2 = \"PROVIDER_INSTANCE_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, columnV2 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n      | extend columnV2 = column_ifexists(c2, dummy)\n    )\n  | project miss, columnV1, columnV2\n  | limit 2\n | top 1 by miss asc\n;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != \"1\");\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet columnV2Exists = toscalar(checkColumnExists | summarize max(columnV2) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(columnV2Exists, iif(tableRecords > 0, \"0\", \"2\"), \"3\"), \"2\"), \"1\");\nprint toscalar(x)\n//print tableExists, columnV1Exists, columnV2Exists, tableRecords\n",
              "isHiddenWhenLocked": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "90198a7b-268a-4cd1-99a7-639c1446a43a",
              "version": "KqlParameterItem/1.0",
              "name": "param_sid",
              "type": 1,
              "value": "*",
              "isHiddenWhenLocked": true
            },
            {
              "id": "9bb6ef85-604b-4f6b-a924-387ff17cc06a",
              "version": "KqlParameterItem/1.0",
              "name": "param_ams_resource",
              "type": 5,
              "typeSettings": {
                "resourceTypeFilter": {
                  "microsoft.hanaonazure/sapmonitors": true
                },
                "additionalResourceOptions": [
                  "value::1"
                ]
              },
              "defaultValue": "value::1"
            },
            {
              "id": "b863a1f6-91bf-4dfd-937e-6157ec103e81",
              "version": "KqlParameterItem/1.0",
              "name": "param_providers",
              "type": 1,
              "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{param_ams_resource}/providerInstances/\",\"urlParams\":[{\"key\":\"api-version\",\"value\":\"2020-02-07-preview\"},{\"key\":\"pageLimit\",\"value\":\"1000\"}],\"batchDisabled\":false,\"transformers\":null}",
              "queryType": 12
            },
            {
              "id": "356d1f32-4ffb-42c9-8e55-75a544dbcc7a",
              "version": "KqlParameterItem/1.0",
              "name": "alertparameter",
              "type": 1,
              "value": "[\r\n\t{\r\n\t\t\"name\": \"SAP HANA high CPU usage percent\",\r\n\t\t\"description\": \"Fired when a SAP HANA database CPU utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-cpu-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_LoadHistory_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | summarize AggregatedValue = percentile(CPU_d,95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"90\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"3\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"10\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA high memory usage percent\",\r\n\t\t\"description\": \"Fired when a SAP HANA database memory utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-memory-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_LoadHistory_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend memoryPercent=MEMORY_USED_d/MEMORY_SIZE_d*100 | summarize AggregatedValue = percentile(memoryPercent,95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"90\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"3\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"10\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA health base on CPU and Memory\",\r\n\t\t\"description\": \"Fired when a SAP HANA database is unhealth based on CPU and memory. Looks at the 95th percentile value over 5 minutes, and if both CPU and memory exceeds 80 percent, the SAP HANA database is considered unhealthy.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-cpu-memory-health\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_LoadHistory_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | where HOST_s == '{Aggregate}' | extend memoryPercent=MEMORY_USED_d/MEMORY_SIZE_d*100 | summarize AggregatedCPU = percentile(CPU_d,95), AggregatedMemory = percentile(memoryPercent,95) by bin(TimeGenerated, 5m), HOST_s| extend AggregatedValue = iff(AggregatedCPU > 80 and AggregatedMemory > 80, 0, 1)\",\r\n\t\t\t\"aggregateName\": \"host\",\r\n\t\t\t\"aggregateDropDownQuery\": \"SapHana_LoadHistory_CL | distinct HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"LessThan\",\r\n\t\t\t\"defaultThreshold\": \"1\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"3\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"10\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n    {\r\n\t\t\"name\": \"SAP HANA data volume disk usage\",\r\n\t\t\"description\": \"Fired when a SAP HANA database data volume disk utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-datavolume-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_Disks_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and USAGE_TYPE_s == 'DATA' | summarize AggregatedValue = percentile((USED_SIZE_d/TOTAL_SIZE_d*100),95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"70\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"30\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"300\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n    {\r\n\t\t\"name\": \"SAP HANA log volume disk usage\",\r\n\t\t\"description\": \"Fired when a SAP HANA database log volume disk utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-logvolume-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_Disks_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and USAGE_TYPE_s == 'LOG' | summarize AggregatedValue = percentile((USED_SIZE_d/TOTAL_SIZE_d*100),95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"70\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"30\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"300\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n    {\r\n\t\t\"name\": \"SAP HANA trace volume disk usage\",\r\n\t\t\"description\": \"Fired when a SAP HANA trace volume (hana-shared) disk utilization percentage exceeds the specified threshold. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-tracevolume-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_Disks_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and USAGE_TYPE_s == 'TRACE' | summarize AggregatedValue = percentile((USED_SIZE_d/TOTAL_SIZE_d*100),95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"70\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"30\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"300\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n    {\r\n\t\t\"name\": \"SAP HANA log backup volume disk usage\",\r\n\t\t\"description\": \"Fired when a SAP HANA database log backup volume disk utilization percentage exceeds the specified threshold. This alert is only applicable when log backup is performed to disk. Looks at the 95th percentile value over 5 minutes, and if it exceeds the threshold over 3 consecutive time periods the alert is triggered.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-logbackupvolume-utilization-percent\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\"query\": \"SapHana_Disks_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and USAGE_TYPE_s contains 'LOG_BACKUP' | summarize AggregatedValue = percentile((USED_SIZE_d/TOTAL_SIZE_d*100),95) by bin(TimeGenerated, 5m), HOST_s\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"70\",\r\n\t\t\t\"alertUnit\": \"percent\",\r\n\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"metricColumn\": \"HOST_s\",\r\n\t\t\t\t\"frequencyInMinutes\": \"30\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"300\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA failed data backups\",\r\n\t\t\"description\": \"Fired when a SAP HANA database reported a failed data backup. This includes tenant DBs and SYSTEMDB failed backup.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-failed-databackup\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_BackupCatalog_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and ENTRY_TYPE_NAME_s contains 'data' | extend AggregateValue = iff(STATE_NAME_s == 'failed', 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThanOrEqual\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"15\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"60\"\r\n\t\t\t}\r\n\t\t}\r\n    },\r\n\t{\r\n\t\t\"name\": \"SAP HANA failed log backups\",\r\n\t\t\"description\": \"Fired when a SAP HANA database reported a failed log backup. This includes tenant DBs and SYSTEMDB failed backup.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-failed-logbackup\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_BackupCatalog_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and ENTRY_TYPE_NAME_s == 'log backup' | extend AggregateValue = iff(STATE_NAME_s == 'failed', 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"10\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA system replication error\",\r\n\t\t\"description\": \"Fired when a SAP HANA database service reported an error on system replication. This includes tenant DBs and SYSTEMDB services.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-errornous-systemreplication\",\r\n\t\t\"severity\": \"2\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"SapHana_SystemReplication_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend AggregateValue = iff(SERVICE_REPLICATION_STATUS_s == 'ERROR', 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"EqualTo\",\r\n\t\t\t\t\"threshold\": \"1\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"5\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t\"name\": \"SAP HANA system availability\",\r\n\t\t\"description\": \"Fired when a SAP HANA system hasn't reported a PING alive for the last 20 mins.\",\r\n\t\t\"author\": \"Microsoft\",\r\n\t\t\"templateId\": \"saphana-availability-reponse\",\r\n\t\t\"severity\": \"1\",\r\n\t\t\"alertTemplate\": {\r\n\t\t\t\"query\": \"let StartTime=now(); SapHana_SystemAvailability_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | where EVENT_NAME_s == 'PING' |top 1 by TimeGenerated desc | extend AggregateValue = iff(StartTime - TimeGenerated > 20min, 1, 0) | summarize AggregatedValue = max(AggregateValue) by bin(TimeGenerated, 5m)\",\r\n\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\"defaultThreshold\": \"0\",\r\n\t\t\t\t\"metricMeasurement\": {\r\n\t\t\t\t\"thresholdOperator\": \"GreaterThan\",\r\n\t\t\t\t\"threshold\": \"0\",\r\n\t\t\t\t\"metricTriggerType\": \"Consecutive\",\r\n\t\t\t\t\"frequencyInMinutes\": \"5\",\r\n\t\t\t\t\"timeWindowInMinutes\": \"45\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n]\r\n",
              "typeSettings": {
                "multiLineText": true,
                "editorLanguage": "text"
              }
            },
            {
              "id": "18ebf86a-5606-42fe-bda9-a780cf632328",
              "version": "KqlParameterItem/1.0",
              "name": "param_providers_type",
              "type": 1,
              "value": "SapHana"
            }
          ],
          "style": "pills",
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "conditionalVisibility": {
          "parameterName": "dummy_neverset",
          "comparison": "isNotEqualTo"
        },
        "name": "section_params"
      },
      {
        "type": 12,
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 1,
              "content": {
                "json": "Before you can use this workbook, you need to add an SAP HANA Provider.",
                "style": "warning"
              },
              "conditionalVisibility": {
                "parameterName": "param_check_error",
                "comparison": "isEqualTo",
                "value": "1"
              },
              "name": "text_error1"
            },
            {
              "type": 1,
              "content": {
                "json": "Initial ingestion in progress: After adding an SAP HANA Provider, it may take a few minutes for metrics to show up.",
                "style": "warning"
              },
              "conditionalVisibility": {
                "parameterName": "param_check_error",
                "comparison": "isEqualTo",
                "value": "2"
              },
              "name": "text_error2"
            },
            {
              "type": 1,
              "content": {
                "json": "This workbook requires a newer version of SAP Monitor. Please consider upgrading by deleting and re-creating this SAP Monitor.",
                "style": "upsell"
              },
              "conditionalVisibility": {
                "parameterName": "param_check_error",
                "comparison": "isEqualTo",
                "value": "3"
              },
              "name": "text_error3"
            }
          ]
        },
        "conditionalVisibility": {
          "parameterName": "param_check_error",
          "comparison": "isNotEqualTo"
        },
        "name": "group_error"
      },
      {
        "type": 3,
        "content": {
          "version": "KqlItem/1.0",
          "query": "let allHanaProvidersfromSrc =\nprint allProviders=parse_json(tostring(\"{param_providers:escapejson}\")).value\n| mv-expand allProviders\n| extend type=parse_json(allProviders.properties).type\n| extend state=parse_json(allProviders.properties).provisioningState\n| where type==\"SapHana\"\n| where state!=\"Failed\"\n| extend hostname=parse_json(tostring(parse_json(allProviders.properties).properties)).hanaHostname\n| extend db=parse_json(tostring(parse_json(allProviders.properties).properties)).hanaDbName\n| project allProviders.name,hostname,type,state,db,sysdbprovider=iff(db==\"SYSTEMDB\",0,1)\n;\n\nlet allHanaProviders = \nallHanaProvidersfromSrc\n| project-rename provider=allProviders_name,hostname,type\n;\nlet latestProvider = SapHana_SystemOverview_CL\n| summarize arg_max(TimeGenerated, *) by PROVIDER_INSTANCE_s\n;\nlet retrievedProviders =\nlatestProvider\n| join (SapHana_SystemOverview_CL | where NAME_s == \"Instance ID\" | extend sid = VALUE_s)\n    on PROVIDER_INSTANCE_s\n| summarize count() by sid, PROVIDER_INSTANCE_s\n| join (SapHana_SystemOverview_CL | where NAME_s == \"Instance Number\" | extend num = VALUE_s)\n    on PROVIDER_INSTANCE_s\n| summarize count() by sid, num, PROVIDER_INSTANCE_s\n| join (SapHana_SystemOverview_CL | where NAME_s == \"Version\" | extend version_raw = VALUE_s, \".\")\n    on PROVIDER_INSTANCE_s\n| summarize count() by sid, num, version_raw, PROVIDER_INSTANCE_s\n| join (SapHana_SystemOverview_CL | where NAME_s == \"Distributed\" | extend distributed = iff(VALUE_s == \"No\", \"Single-node\", replace(@'Yes (.*)', @'Multi-node \\1', VALUE_s)))\n    on PROVIDER_INSTANCE_s\n| summarize count() by sid, num, version_raw, distributed, PROVIDER_INSTANCE_s\n| extend provider = PROVIDER_INSTANCE_s\n| extend version_split = split(version_raw, \".\")\n| extend version = strcat(\"SAP HANA \", version_split[0], \".\", version_split[1], \".\", version_split[2])\n| project provider, sid, num, version, distributed\n;\n\nallHanaProviders\n|extend provider=tostring(provider)\n| join kind=leftouter (retrievedProviders) on provider\n| extend sid=iif(isempty(sid),\"--\",sid)\n| extend num=iif(isempty(num),\"--\",num)\n| extend sid_num = strcat(sid, \" / \", num)\n| extend version=iif(isempty(version),\"--\",version)\n| project provider, sid, num, sid_num, version, distributed,db, sysdbprovider\n| sort by sid, sysdbprovider asc\n| summarize providers=make_list(provider), tenants=make_list(db) by sid, sid_num, version, distributed \n| extend provider=providers[0],db=tenants[0]\n| extend providername = strcat(\"Sys Provider\", \": \", provider)\n\n",
          "size": 3,
          "title": "Monitored SAP HANA instances",
          "noDataMessage": "There are currently no SAP HANA providers configured.",
          "exportedParameters": [
            {
              "fieldName": "sid",
              "parameterName": "param_sid",
              "defaultValue": "*"
            },
            {
              "fieldName": "provider",
              "parameterName": "param_provider",
              "parameterType": 1
            },
            {
              "parameterType": 1
            }
          ],
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces",
          "visualization": "tiles",
          "sortBy": [],
          "tileSettings": {
            "titleContent": {
              "columnMatch": "sid_num",
              "formatter": 1
            },
            "subtitleContent": {
              "columnMatch": "providername",
              "formatter": 1
            },
            "secondaryContent": {
              "columnMatch": "distributed",
              "formatter": 2
            },
            "showBorder": true,
            "sortCriteriaField": "sid_num",
            "sortOrderField": 1
          }
        },
        "conditionalVisibility": {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        "customWidth": "50",
        "name": "query_sid"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "parameters": [
            {
              "id": "b103e4d6-3acc-48d1-b048-c02743bcc29d",
              "version": "KqlParameterItem/1.0",
              "name": "parambag_providersanddbs",
              "type": 1,
              "query": "let daysago=90d;\r\n{param_sizedatasource}\r\n| where TimeGenerated > ago(daysago)\r\n| where SYSTEM_ID_s == \"{param_sid}\"\r\n| summarize arg_max(TimeGenerated, *) by Providers=PROVIDER_INSTANCE_s, DB_Tennants=DATABASE_NAME_s\r\n| summarize provs=make_list(Providers), tenants=make_list(DB_Tennants) \r\n| project pack_all()",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "version": "KqlParameterItem/1.0",
              "name": "param_providers",
              "type": 1,
              "query": "// bring in the calculated values from parambag_providersanddbs\r\nlet myparambag=parse_json('{parambag_providersanddbs:escapejson}');\r\n\r\nprint providers=strcat_array(myparambag.provs, \", \")",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "id": "e028fdd1-54b1-47d7-873c-19428185229c"
            },
            {
              "version": "KqlParameterItem/1.0",
              "name": "param_dbs",
              "type": 1,
              "query": "// bring in the calculated values from parambag_providersanddbs\r\nlet myparambag=parse_json('{parambag_providersanddbs:escapejson}');\r\n\r\nprint tenants=strcat_array(myparambag.tenants, \", \")",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "id": "ccddf91b-b397-42e2-abf5-6b4245ed046c"
            }
          ],
          "style": "above",
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "conditionalVisibility": {
          "parameterName": "param_neverset",
          "comparison": "isEqualTo",
          "value": "999"
        },
        "name": "Infobox_params"
      },
      {
        "type": 1,
        "content": {
          "json": "\n### Selection details ##\nYou have selected instance           :      <b style=\"color:DodgerBlue;\"> {param_sid}</b><br>\n{param_sid} is monitored by the AMS providers : <b style=\"color:DodgerBlue;\"> {param_providers} </b> <br>\nData is collected for the Databases:<b style=\"color:DodgerBlue;\"> {param_dbs}</b><br>"
        },
        "conditionalVisibility": {
          "parameterName": "param_sid",
          "comparison": "isNotEqualTo"
        },
        "customWidth": "50",
        "name": "selected_instances_detail",
        "styleSettings": {
          "margin": "0px",
          "padding": "10px",
          "showBorder": true
        }
      },
      {
        "type": 1,
        "content": {
          "json": "\n\n---\n<b style=\"color:DodgerBlue;\">You selected host (param_host_selected):</b> {param_host_selected}<br>\n<b style=\"color:DodgerBlue;\">You selected instance (param_sid):</b> {param_sid}<br>\n<b style=\"color:DodgerBlue;\">You selected provider (param_provider):</b> {param_provider}"
        },
        "conditionalVisibility": {
          "parameterName": "dummy_neverset",
          "comparison": "isNotEqualTo"
        },
        "name": "text_overview"
      },
      {
        "type": 1,
        "content": {
          "json": "Please select an SAP HANA instance from above to see more details.",
          "style": "info"
        },
        "conditionalVisibilities": [
          {
            "parameterName": "param_sid",
            "comparison": "isEqualTo",
            "value": "*"
          },
          {
            "parameterName": "param_check_error",
            "comparison": "isEqualTo",
            "value": "0"
          }
        ],
        "name": "text_selectsid"
      },
      {
        "type": 11,
        "content": {
          "version": "LinkItem/1.0",
          "style": "nav",
          "links": [
            {
              "id": "990307c5-35e3-4028-9e54-a96f7aba6269",
              "linkTarget": "WorkbookTemplate",
              "linkLabel": "Alerts",
              "style": "primary",
              "linkIsContextBlade": true,
              "workbookContext": {
                "componentIdSource": "workbook",
                "resourceIdsSource": "workbook",
                "templateIdSource": "static",
                "templateId": "Community-Workbooks/SapMonitor/Alerts/Alerts",
                "typeSource": "workbook",
                "gallerySource": "workbook",
                "locationSource": "default",
                "passSpecificParams": true,
                "templateParameters": [
                  {
                    "name": "AlertTemplates",
                    "source": "parameter",
                    "value": "alertparameter"
                  },
                  {
                    "name": "ProviderType",
                    "source": "parameter",
                    "value": "param_providers_type"
                  }
                ]
              }
            }
          ]
        },
        "conditionalVisibility": {
          "parameterName": "dummy_neverset",
          "comparison": "isNotEqualTo"
        },
        "name": "links - 7"
      },
      {
        "type": 12,
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 11,
              "content": {
                "version": "LinkItem/1.0",
                "style": "tabs",
                "links": [
                  {
                    "id": "fef3090d-335d-4d9f-a2a1-b8d23da2613d",
                    "cellValue": "param_tab_main",
                    "linkTarget": "parameter",
                    "linkLabel": "Overview",
                    "subTarget": "1",
                    "style": "link"
                  },
                  {
                    "id": "08589593-29a6-40e7-b140-6b6aba1902ed",
                    "cellValue": "param_tab_main",
                    "linkTarget": "parameter",
                    "linkLabel": "Utilization",
                    "subTarget": "2",
                    "style": "link"
                  },
                  {
                    "id": "f425221b-993a-416e-bf92-164aca2fa62e",
                    "cellValue": "param_tab_main",
                    "linkTarget": "parameter",
                    "linkLabel": "Backup",
                    "subTarget": "3",
                    "style": "link"
                  },
                  {
                    "id": "29869640-96cc-4e86-b3ce-d5ca40391aed",
                    "cellValue": "param_tab_main",
                    "linkTarget": "parameter",
                    "linkLabel": "Replication",
                    "subTarget": "4",
                    "style": "link"
                  },
                  {
                    "id": "f465d59f-b933-4b8c-9c87-ac9a4284c77f",
                    "cellValue": "param_tab_main",
                    "linkTarget": "parameter",
                    "linkLabel": "Data Size",
                    "subTarget": "5",
                    "style": "link"
                  }
                ]
              },
              "name": "tabs_main"
            },
            {
              "type": 12,
              "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "items": [
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "2718717f-e363-4010-8feb-1aadda6387c3",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_timeframe",
                          "label": "Timeframe",
                          "type": 4,
                          "isRequired": true,
                          "value": {
                            "durationMs": 172800000
                          },
                          "typeSettings": {
                            "selectableValues": [
                              {
                                "durationMs": 300000
                              },
                              {
                                "durationMs": 900000
                              },
                              {
                                "durationMs": 1800000
                              },
                              {
                                "durationMs": 3600000
                              },
                              {
                                "durationMs": 14400000
                              },
                              {
                                "durationMs": 43200000
                              },
                              {
                                "durationMs": 86400000
                              },
                              {
                                "durationMs": 172800000
                              }
                            ]
                          }
                        }
                      ],
                      "style": "pills",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    "name": "section_timeframe"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nlet table_hostconfig = SapHana_HostConfig_CL\n| where TimeGenerated > ago(24h)\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend timestamp_hostconfig = TimeGenerated\n| extend host = tostring(HOST_s)\n| extend role = tolower(INDEXSERVER_ACTUAL_ROLE_s)\n| extend active = tolower(HOST_ACTIVE_s)\n| summarize arg_max(timestamp_hostconfig, *) by provider, host\n| sort by host asc\n| project timestamp_hostconfig, host, role, active\n;\nlet table_load_host = SapHana_LoadHistory_CL\n| extend timestamp_load = TimeGenerated\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend host = HOST_s\n| extend cpu = CPU_d\n| extend memory = MEMORY_USED_d / MEMORY_SIZE_d * 100\n| extend nw_in = NETWORK_IN_d\n| extend nw_out = NETWORK_OUT_d\n| join kind=inner (table_hostconfig | where active == \"yes\") on host\n| where timestamp_load {param_timeframe}\n;\nlet table_highest_cpu = table_load_host\n| make-series avg(cpu) default=0 on timestamp_load step {param_timeframe:grain} by host\n| extend value = todouble(series_stats_dynamic(avg_cpu)['avg'])\n| extend timeseries = avg_cpu\n| sort by value desc\n| extend type = \"Highest CPU\"\n| project host, value, timeseries, type\n| take 1\n;\nlet table_highest_memory = table_load_host\n| make-series avg(memory) default=0 on timestamp_load step {param_timeframe:grain} by host\n| extend value = todouble(series_stats_dynamic(avg_memory)['avg'])\n| extend timeseries = avg_memory\n| sort by value desc\n| extend type = \"Highest Memory\"\n| project host, value, timeseries, type\n| take 1\n;\ntable_highest_cpu\n| union table_highest_memory\n| sort by type asc",
                      "size": 3,
                      "title": "Servers with most load",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "tiles",
                      "tileSettings": {
                        "titleContent": {
                          "columnMatch": "type",
                          "formatter": 1
                        },
                        "subtitleContent": {
                          "columnMatch": "host",
                          "formatter": 1
                        },
                        "leftContent": {
                          "columnMatch": "value",
                          "formatter": 12,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        "secondaryContent": {
                          "columnMatch": "timeseries",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blue"
                          }
                        },
                        "showBorder": false
                      }
                    },
                    "showPin": false,
                    "name": "query_busiest"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nlet table_hostconfig = SapHana_HostConfig_CL\n| where TimeGenerated > ago(24h)\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend timestamp_hostconfig = TimeGenerated\n| extend host = tostring(HOST_s)\n| extend role = tolower(INDEXSERVER_ACTUAL_ROLE_s)\n| extend active = tolower(HOST_ACTIVE_s)\n| summarize arg_max(timestamp_hostconfig, *) by provider, host\n| sort by host asc\n| project timestamp_hostconfig, host, role, active\n;\nlet table_load_host = SapHana_LoadHistory_CL\n| extend timestamp_load = TimeGenerated\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend host = HOST_s\n| extend cpu = CPU_d\n| extend memory = MEMORY_USED_d / MEMORY_SIZE_d * 100\n| extend nw_in = NETWORK_IN_d\n| extend nw_out = NETWORK_OUT_d\n| join kind=inner (table_hostconfig | where active == \"yes\") on host\n| where timestamp_load {param_timeframe} //>= timestamp_hostconfig - 5m\n| project cpu, memory, nw_in, nw_out, provider, host\n| summarize cpu=avg(cpu), memory=avg(memory), nw_in=avg(nw_in), nw_out=avg(nw_out) by provider, host\n;\nlet table_systemavailability = SapHana_SystemAvailability_CL\n| where TimeGenerated > ago(365d)\n| extend timestamp_systemavailability = TimeGenerated\n| extend provider = PROVIDER_INSTANCE_s\n| extend host = HOST_s\n| extend database = DATABASE_NAME_s\n| extend service = SERVICE_NAME_s\n| extend port = PORT_d\n| extend event = tostring(EVENT_NAME_s)\n| extend active = tolower(SERVICE_ACTIVE_s)\n| join kind=leftouter (table_systemoverview) on provider\n| join kind=rightouter (table_hostconfig | where active == \"yes\") on host\n| where sid != \"\" and port != 0\n| summarize arg_max(timestamp_systemavailability, *) by sid, host, database, service\n| project sid, host, database, service, event, port, active\n;\nlet table_disks = SapHana_Disks_CL\n| extend timestamp_disks = TimeGenerated\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| extend host = HOST_s\n| extend type = USAGE_TYPE_s\n| extend disk_usage = USED_SIZE_d / TOTAL_SIZE_d * 100\n| where type in (\"DATA\", \"LOG\")\n| join kind=inner (table_hostconfig | where active == \"yes\") on host\n| where timestamp_disks {param_timeframe} //>= timestamp_hostconfig - 10m\n| summarize disk_usage=avg(disk_usage) by provider, host, type\n;\ntable_hostconfig\n| extend name = host\n| extend id = host\n| extend type = \"Host\", parentid = \"\"\n| join kind=leftouter (table_load_host | project host, cpu, memory, nw_in, nw_out) on host \n| join kind=leftouter (table_disks | project host, disk_usage, type | where type == \"DATA\" | extend disk_data = disk_usage) on host\n| join kind=leftouter (table_disks | project host, disk_usage, type | where type == \"LOG\" | extend disk_log = disk_usage) on host\n| union (table_systemavailability\n| project sid, port, host, service, database, active, event\n| where sid == param_sid\n| summarize by host, service, database, port, active, event\n| extend type = \"Service\"\n| extend name = strcat(service, \" (:\", tostring(toint(port)), \")\")\n| extend parentid = host, id = strcat(host, \"_\", service)\n)\n| order by host asc, database asc\n| project name, host, type, database, role, active, event, cpu, memory, disk_data, disk_log, nw_in, nw_out, id, parentid",
                      "size": 3,
                      "title": "Instance overview",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "host",
                            "formatter": 5,
                            "formatOptions": {}
                          },
                          {
                            "columnMatch": "active",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "yes",
                                  "representation": "success",
                                  "text": ""
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "no",
                                  "representation": "4",
                                  "text": ""
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "pending",
                                  "text": ""
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "event",
                            "formatter": 5,
                            "formatOptions": {}
                          },
                          {
                            "columnMatch": "cpu",
                            "formatter": 4,
                            "formatOptions": {
                              "min": 0,
                              "max": 100,
                              "palette": "greenRed"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "memory",
                            "formatter": 4,
                            "formatOptions": {
                              "min": 0,
                              "max": 100,
                              "palette": "greenRed"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "disk_data",
                            "formatter": 4,
                            "formatOptions": {
                              "min": 0,
                              "max": 100,
                              "palette": "greenRed"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "disk_log",
                            "formatter": 4,
                            "formatOptions": {
                              "min": 0,
                              "max": 100,
                              "palette": "greenRed"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "nw_in",
                            "formatter": 4,
                            "formatOptions": {
                              "min": 0,
                              "max": 1000,
                              "palette": "greenRed"
                            },
                            "numberFormat": {
                              "unit": 47,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "nw_out",
                            "formatter": 4,
                            "formatOptions": {
                              "min": 0,
                              "max": 1000,
                              "palette": "greenRed"
                            },
                            "numberFormat": {
                              "unit": 47,
                              "options": {
                                "style": "decimal",
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "id",
                            "formatter": 5,
                            "formatOptions": {}
                          },
                          {
                            "columnMatch": "parentid",
                            "formatter": 5,
                            "formatOptions": {}
                          }
                        ],
                        "filter": true,
                        "hierarchySettings": {
                          "idColumn": "id",
                          "parentColumn": "parentid",
                          "treeType": 0,
                          "expanderColumn": "name",
                          "expandTopLevel": false
                        },
                        "labelSettings": [
                          {
                            "columnId": "name",
                            "label": ""
                          },
                          {
                            "columnId": "host"
                          },
                          {
                            "columnId": "type",
                            "label": "Kind"
                          },
                          {
                            "columnId": "database",
                            "label": "Database"
                          },
                          {
                            "columnId": "role",
                            "label": "Role"
                          },
                          {
                            "columnId": "active",
                            "label": "Status"
                          },
                          {
                            "columnId": "event"
                          },
                          {
                            "columnId": "cpu",
                            "label": "CPU"
                          },
                          {
                            "columnId": "memory",
                            "label": "Memory"
                          },
                          {
                            "columnId": "disk_data",
                            "label": "Disk (Data)"
                          },
                          {
                            "columnId": "disk_log",
                            "label": "Disk (Log)"
                          },
                          {
                            "columnId": "nw_in",
                            "label": "NW (In)"
                          },
                          {
                            "columnId": "nw_out",
                            "label": "NW (Out)"
                          },
                          {
                            "columnId": "id"
                          },
                          {
                            "columnId": "parentid"
                          }
                        ]
                      }
                    },
                    "name": "query_overview"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let table_hostconfig = SapHana_HostConfig_CL\n| where TimeGenerated > ago(24h)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| extend host = tostring(HOST_s)\n| extend role = tolower(INDEXSERVER_ACTUAL_ROLE_s)\n| extend status = tolower(HOST_ACTIVE_s)\n| extend timestamp_hostconfig = TimeGenerated\n| summarize arg_max(timestamp_hostconfig, *) by provider, host\n| sort by timestamp_hostconfig, host asc\n| project timestamp_hostconfig, provider, host, role, status;\nlet table_services = SapHana_SystemAvailability_CL\n| extend database = DATABASE_NAME_s\n| extend provider = PROVIDER_INSTANCE_s\n| extend host = HOST_s\n| extend service = SERVICE_NAME_s\n| summarize arg_max(TimeGenerated, *) by provider, host, service;\nlet table_system = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(7d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider;\nlet table_load_current = SapHana_LoadHistory_CL\n| where TimeGenerated > ago(12h)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| extend host = tostring(HOST_s)\n| extend cpu = CPU_d\n| extend memory_used = MEMORY_USED_d\n| summarize arg_max(TimeGenerated, *) by provider, host\n| join kind=inner (table_hostconfig | where status == \"yes\" | where provider == provider) on host\n| sort by TimeGenerated\n| project provider, host, cpu, memory_used;\nlet table_cpu_5m = SapHana_LoadHistory_CL\n| where TimeGenerated > ago(24h)\n| extend timestamp_load = TimeGenerated\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| extend host = tostring(HOST_s)\n| extend cpu_5m = CPU_d\n| join kind=inner (table_hostconfig | where status == \"yes\" | where provider == provider) on host\n| where timestamp_load >= timestamp_hostconfig - 5m\n| project cpu_5m, provider, host\n| summarize avg(cpu_5m) by provider, host;\nlet table_cpu_15m = SapHana_LoadHistory_CL\n| where TimeGenerated > ago(24h)\n| extend timestamp_load = TimeGenerated\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| extend host = tostring(HOST_s)\n| extend cpu_15m = CPU_d\n| join kind=inner (table_hostconfig | where status == \"yes\" | where provider == provider) on host\n| where timestamp_load >= timestamp_hostconfig - 15m\n| project cpu_15m, provider, host\n| summarize avg(cpu_15m) by provider, host;\nlet table_memory_trend = SapHana_LoadHistory_CL\n| where TimeGenerated > ago(24h)\n| extend memory_used = MEMORY_USED_d / MEMORY_SIZE_d\n| extend provider = PROVIDER_INSTANCE_s\n| extend host = HOST_s\n| make-series avg(memory_used) default=0 on TimeGenerated from ago(24h) to now() step 30m by provider, host;\nlet table_cpu_trend = SapHana_LoadHistory_CL\n//| where TimeGenerated > ago(24h)\n| extend cpu = CPU_d\n| extend provider = PROVIDER_INSTANCE_s\n| extend host = HOST_s\n| make-series avg(cpu) default=0 on TimeGenerated from ago(24h) to now() step 30m by provider, host;\ntable_hostconfig\n| join kind=inner (table_system) on provider\n| join kind=leftouter (table_load_current | where provider == provider) on host\n| join kind=leftouter (table_cpu_trend | where provider == provider) on host\n| join kind=leftouter (table_memory_trend | where provider == provider) on host\n| extend instance = strcat(sid, \" (\", provider, \")\")\n| join kind=leftouter (table_cpu_5m | where provider == provider) on host\n| join kind=leftouter (table_cpu_15m | where provider == provider) on host\n//| join kind=inner (table_services | where provider == provider) on host \n| extend cpu_5m = avg_cpu_5m\n| extend cpu_15m = avg_cpu_15m\n| extend cpu_trend = avg_cpu\n| extend memory_current = memory_used\n| extend memory_trend = avg_memory_used\n| extend spacer = \"\"\n| sort by host asc\n| project instance, provider, host, role, status, cpu_5m, cpu_15m, cpu_trend, spacer, memory_current, memory_trend",
                      "size": 3,
                      "title": "Databases tenants and their hosts",
                      "noDataMessageStyle": 4,
                      "exportedParameters": [
                        {
                          "fieldName": "host",
                          "parameterName": "host_selected",
                          "parameterType": 1
                        },
                        {
                          "fieldName": "",
                          "parameterName": "param_tab_main",
                          "parameterType": 1,
                          "defaultValue": "2"
                        }
                      ],
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "table",
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "instance",
                            "formatter": 5,
                            "formatOptions": {}
                          },
                          {
                            "columnMatch": "provider",
                            "formatter": 5,
                            "formatOptions": {}
                          },
                          {
                            "columnMatch": "host",
                            "formatter": 5,
                            "formatOptions": {}
                          },
                          {
                            "columnMatch": "role",
                            "formatter": 1,
                            "formatOptions": {}
                          },
                          {
                            "columnMatch": "status",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "==",
                                  "thresholdValue": "yes",
                                  "representation": "success",
                                  "text": ""
                                },
                                {
                                  "operator": "==",
                                  "thresholdValue": "no",
                                  "representation": "4",
                                  "text": ""
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "Blank",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "cpu_5m",
                            "formatter": 8,
                            "formatOptions": {
                              "min": 0,
                              "max": 200,
                              "palette": "redBright"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "cpu_15m",
                            "formatter": 8,
                            "formatOptions": {
                              "min": 0,
                              "max": 200,
                              "palette": "redBright"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "cpu_trend",
                            "formatter": 10,
                            "formatOptions": {
                              "min": 0,
                              "max": 100,
                              "palette": "turquoise",
                              "aggregation": "Average"
                            },
                            "tooltipFormat": {
                              "tooltip": "CPU (trend)"
                            }
                          },
                          {
                            "columnMatch": "memory_current",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "purple",
                              "aggregation": "Sum"
                            },
                            "numberFormat": {
                              "unit": 38,
                              "options": {
                                "style": "decimal",
                                "useGrouping": true,
                                "minimumFractionDigits": 2,
                                "maximumFractionDigits": 2
                              }
                            },
                            "tooltipFormat": {
                              "tooltip": "Memory (current)"
                            }
                          },
                          {
                            "columnMatch": "memory_trend",
                            "formatter": 10,
                            "formatOptions": {
                              "min": 0,
                              "max": 1,
                              "palette": "purple",
                              "aggregation": "Average"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false
                              }
                            },
                            "tooltipFormat": {
                              "tooltip": "Memory (trend)"
                            }
                          },
                          {
                            "columnMatch": "cpu_1m",
                            "formatter": 8,
                            "formatOptions": {
                              "min": 0,
                              "max": 200,
                              "palette": "redBright"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "cpu_current",
                            "formatter": 4,
                            "formatOptions": {
                              "min": 0,
                              "max": 100,
                              "palette": "turquoise",
                              "aggregation": "Average"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "minimumFractionDigits": 1,
                                "maximumFractionDigits": 1
                              }
                            },
                            "tooltipFormat": {
                              "tooltip": "CPU (current)"
                            }
                          }
                        ],
                        "hierarchySettings": {
                          "treeType": 1,
                          "groupBy": [
                            "instance"
                          ],
                          "expandTopLevel": true,
                          "finalBy": "host"
                        },
                        "sortBy": [
                          {
                            "itemKey": "$gen_group",
                            "sortOrder": 1
                          }
                        ],
                        "labelSettings": [
                          {
                            "columnId": "instance",
                            "label": "Host"
                          },
                          {
                            "columnId": "provider"
                          },
                          {
                            "columnId": "host"
                          },
                          {
                            "columnId": "role",
                            "label": "Role"
                          },
                          {
                            "columnId": "status",
                            "label": "Status"
                          },
                          {
                            "columnId": "cpu_5m",
                            "label": "CPU (5 minutes)",
                            "comment": "Shows the rolling CPU average over the last 5 minutes"
                          },
                          {
                            "columnId": "cpu_15m",
                            "label": "CPU (15 minutes)",
                            "comment": "Shows the rolling CPU average over the last 15 minutes"
                          },
                          {
                            "columnId": "cpu_trend",
                            "label": "CPU (trend)"
                          },
                          {
                            "columnId": "spacer",
                            "label": " "
                          },
                          {
                            "columnId": "memory_current",
                            "label": "Memory"
                          },
                          {
                            "columnId": "memory_trend",
                            "label": " Memory (trend)"
                          }
                        ]
                      },
                      "sortBy": [
                        {
                          "itemKey": "$gen_group",
                          "sortOrder": 1
                        }
                      ]
                    },
                    "conditionalVisibility": {
                      "parameterName": "param_tab_main",
                      "comparison": "isEqualTo",
                      "value": "99"
                    },
                    "showPin": true,
                    "name": "section_tree_overview",
                    "styleSettings": {
                      "progressStyle": "squares"
                    }
                  }
                ]
              },
              "conditionalVisibilities": [
                {
                  "parameterName": "param_tab_main",
                  "comparison": "isEqualTo",
                  "value": "1"
                },
                {
                  "parameterName": "param_sid",
                  "comparison": "isNotEqualTo",
                  "value": "*"
                }
              ],
              "name": "group_overview"
            },
            {
              "type": 12,
              "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "items": [
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "cdc7ccf5-61a5-4ae4-8397-b35bdfa2a4da",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_utilization_timerange",
                          "label": "Time range",
                          "type": 4,
                          "isRequired": true,
                          "value": {
                            "durationMs": 259200000
                          },
                          "typeSettings": {
                            "selectableValues": [
                              {
                                "durationMs": 86400000
                              },
                              {
                                "durationMs": 172800000
                              },
                              {
                                "durationMs": 259200000
                              },
                              {
                                "durationMs": 604800000
                              },
                              {
                                "durationMs": 1209600000
                              },
                              {
                                "durationMs": 2592000000
                              }
                            ],
                            "allowCustom": true
                          }
                        },
                        {
                          "id": "378b2e15-9934-4755-b5ae-d7d0bfd26861",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_utilization_type",
                          "label": "Type",
                          "type": 10,
                          "isRequired": true,
                          "typeSettings": {
                            "additionalResourceOptions": []
                          },
                          "jsonData": "[\n    { \"value\":\"cpu\", \"label\":\"CPU\", \"selected\":true },\n    { \"value\":\"memory\", \"label\":\"Memory\" }\n]"
                        }
                      ],
                      "style": "pills",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    "name": "options_utilization_type",
                    "styleSettings": {
                      "padding": "10px"
                    }
                  },
                  {
                    "type": 12,
                    "content": {
                      "version": "NotebookGroup/1.0",
                      "groupType": "editable",
                      "items": [
                        {
                          "type": 3,
                          "content": {
                            "version": "KqlItem/1.0",
                            "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nSapHana_LoadHistory_CL\n| where TimeGenerated {param_utilization_timerange}\n| extend cpu = CPU_d\n| extend host = HOST_s\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| project TimeGenerated, host, cpu\n| summarize avg(cpu) by host, bin(TimeGenerated, {param_utilization_timerange:grain})\n",
                            "size": 4,
                            "aggregation": 2,
                            "showAnnotations": true,
                            "title": "CPU timeline",
                            "noDataMessage": "Please select valid filter criteria.",
                            "timeBrushParameterName": "param_utilization_timebrush",
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces",
                            "visualization": "timechart",
                            "tileSettings": {
                              "showBorder": false,
                              "titleContent": {
                                "columnMatch": "HOST_s",
                                "formatter": 1
                              },
                              "leftContent": {
                                "columnMatch": "avg_CPU_d",
                                "formatter": 12,
                                "formatOptions": {
                                  "palette": "auto"
                                },
                                "numberFormat": {
                                  "unit": 17,
                                  "options": {
                                    "maximumSignificantDigits": 3,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              }
                            },
                            "chartSettings": {
                              "xAxis": "TimeGenerated",
                              "showMetrics": false,
                              "ySettings": {
                                "numberFormatSettings": {
                                  "unit": 1,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": true,
                                    "maximumFractionDigits": 2
                                  }
                                },
                                "min": 0,
                                "max": 100
                              }
                            }
                          },
                          "name": "query_small_cpu"
                        },
                        {
                          "type": 3,
                          "content": {
                            "version": "KqlItem/1.0",
                            "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nSapHana_LoadHistory_CL\n| where TimeGenerated {param_utilization_timebrush}\n| extend cpu = CPU_d\n| extend host = HOST_s\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| project TimeGenerated, host, cpu\n| summarize avg(cpu) by host, bin(TimeGenerated, {param_utilization_timebrush:grain})",
                            "size": 3,
                            "aggregation": 2,
                            "title": "CPU detail",
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces",
                            "visualization": "linechart",
                            "chartSettings": {
                              "xAxis": "TimeGenerated",
                              "group": "host",
                              "createOtherGroup": null,
                              "showLegend": true,
                              "ySettings": {
                                "numberFormatSettings": {
                                  "unit": 1,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": true,
                                    "maximumFractionDigits": 2
                                  }
                                },
                                "min": 0,
                                "max": 100
                              }
                            }
                          },
                          "name": "query_large_cpu"
                        }
                      ]
                    },
                    "conditionalVisibility": {
                      "parameterName": "param_utilization_type",
                      "comparison": "isEqualTo",
                      "value": "cpu"
                    },
                    "name": "group_utilization_cpu"
                  },
                  {
                    "type": 12,
                    "content": {
                      "version": "NotebookGroup/1.0",
                      "groupType": "editable",
                      "items": [
                        {
                          "type": 3,
                          "content": {
                            "version": "KqlItem/1.0",
                            "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nSapHana_LoadHistory_CL\n| where TimeGenerated {param_utilization_timerange}\n| extend memory_used = MEMORY_USED_d\n| extend memory_size = MEMORY_SIZE_d\n| extend host = HOST_s\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| project TimeGenerated, host, memory_used, memory_size\n| summarize avg(memory_used / memory_size * 100) by host, bin(TimeGenerated, {param_utilization_timerange:grain})\n",
                            "size": 4,
                            "aggregation": 2,
                            "showAnnotations": true,
                            "title": "Memory timeline",
                            "noDataMessage": "Please select valid filter criteria.",
                            "timeBrushParameterName": "param_utilization_memory_timebrush",
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces",
                            "visualization": "linechart",
                            "tileSettings": {
                              "showBorder": false,
                              "titleContent": {
                                "columnMatch": "HOST_s",
                                "formatter": 1
                              },
                              "leftContent": {
                                "columnMatch": "avg_CPU_d",
                                "formatter": 12,
                                "formatOptions": {
                                  "palette": "auto"
                                },
                                "numberFormat": {
                                  "unit": 17,
                                  "options": {
                                    "maximumSignificantDigits": 3,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              }
                            },
                            "chartSettings": {
                              "xAxis": "TimeGenerated",
                              "showMetrics": false,
                              "showLegend": true,
                              "ySettings": {
                                "numberFormatSettings": {
                                  "unit": 1,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": true,
                                    "maximumFractionDigits": 2
                                  }
                                },
                                "min": 0,
                                "max": 100
                              }
                            }
                          },
                          "name": "query_small_cpu"
                        },
                        {
                          "type": 3,
                          "content": {
                            "version": "KqlItem/1.0",
                            "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemoverview = SapHana_SystemOverview_CL \n| where TimeGenerated > ago(30d)\n| extend sid = tostring(VALUE_s)\n| extend provider = tostring(PROVIDER_INSTANCE_s)\n| where NAME_s == \"Instance ID\"\n| summarize arg_max(TimeGenerated, *) by sid\n| sort by TimeGenerated\n| project sid, provider\n;\nSapHana_LoadHistory_CL\n| where TimeGenerated {param_utilization_memory_timebrush}\n| extend memory_used = MEMORY_USED_d\n| extend memory_size = MEMORY_SIZE_d\n| extend host = HOST_s\n| extend provider = PROVIDER_INSTANCE_s\n| join kind=leftouter (table_systemoverview) on provider\n| where sid == param_sid\n| project TimeGenerated, host, memory_used, memory_size\n| summarize avg(memory_used) by host, bin(TimeGenerated, {param_utilization_memory_timebrush:grain})",
                            "size": 3,
                            "aggregation": 2,
                            "title": "Memory detail",
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces",
                            "visualization": "linechart",
                            "chartSettings": {
                              "xAxis": "TimeGenerated",
                              "showLegend": true,
                              "ySettings": {
                                "numberFormatSettings": {
                                  "unit": 38,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": true,
                                    "maximumFractionDigits": 2
                                  }
                                },
                                "min": 0
                              }
                            }
                          },
                          "name": "query_large_cpu"
                        }
                      ]
                    },
                    "conditionalVisibility": {
                      "parameterName": "param_utilization_type",
                      "comparison": "isEqualTo",
                      "value": "memory"
                    },
                    "name": "group_utilization_memory"
                  }
                ]
              },
              "conditionalVisibility": {
                "parameterName": "param_tab_main",
                "comparison": "isEqualTo",
                "value": "2"
              },
              "name": "group_utilization"
            },
            {
              "type": 12,
              "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "loadType": "always",
                "items": [
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "2718717f-e363-4010-8feb-1aadda6387c3",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_timeframe",
                          "label": "Timeframe",
                          "type": 4,
                          "isRequired": true,
                          "value": {
                            "durationMs": 3600000
                          },
                          "typeSettings": {
                            "selectableValues": [
                              {
                                "durationMs": 300000
                              },
                              {
                                "durationMs": 900000
                              },
                              {
                                "durationMs": 1800000
                              },
                              {
                                "durationMs": 3600000
                              },
                              {
                                "durationMs": 14400000
                              },
                              {
                                "durationMs": 43200000
                              },
                              {
                                "durationMs": 86400000
                              },
                              {
                                "durationMs": 172800000
                              },
                              {
                                "durationMs": 259200000
                              },
                              {
                                "durationMs": 604800000
                              },
                              {
                                "durationMs": 1209600000
                              },
                              {
                                "durationMs": 2419200000
                              },
                              {
                                "durationMs": 2592000000
                              },
                              {
                                "durationMs": 5184000000
                              },
                              {
                                "durationMs": 7776000000
                              }
                            ],
                            "allowCustom": true
                          }
                        }
                      ],
                      "style": "pills",
                      "queryType": 8
                    },
                    "name": "section_timeframe"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let param_sid = \"{param_sid}\"\n;\nlet table_databases = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| extend backup_item = DATABASE_NAME_s\n| project backup_item\n| distinct backup_item\n| order by backup_item asc\n;\nlet table_lastbackup = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where ENTRY_TYPE_NAME_s <> \"log backup\"\n| summarize backup_id = max(BACKUP_ID_d) by parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.backup_id == $right.BACKUP_ID_d\n| extend state_name = STATE_NAME_s,\n         backup_time = UTC_START_TIME_t\n| project parent_database,\n          backup_id,\n          state_name,\n          backup_time\n;\nlet table_lastlogbackup = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where ENTRY_TYPE_NAME_s == \"log backup\"\n| summarize backup_id = max(BACKUP_ID_d) by parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.backup_id == $right.BACKUP_ID_d\n| extend last_log_backup_state_name = STATE_NAME_s,\n         last_log_backup_time = UTC_START_TIME_t\n| project parent_database,\n          backup_id,\n          last_log_backup_state_name,\n          last_log_backup_time\n;\nlet table_lastsuccessfulbackup = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| where ENTRY_TYPE_NAME_s <> \"log backup\"\n| summarize last_successful_backup_id = max(BACKUP_ID_d) by parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.last_successful_backup_id == $right.BACKUP_ID_d\n| extend last_successful_backup_time = UTC_START_TIME_t\n| project parent_database,\n          last_successful_backup_id,\n          last_successful_backup_time\n;\nlet table_lastsuccessfullogbackup = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| where ENTRY_TYPE_NAME_s == \"log backup\"\n| summarize last_successful_log_backup_id = max(BACKUP_ID_d) by parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.last_successful_log_backup_id == $right.BACKUP_ID_d\n| extend last_successful_log_backup_time = UTC_START_TIME_t\n| project parent_database,\n          last_successful_log_backup_id,\n          last_successful_log_backup_time\n;\nlet table_lastsuccessfulbackuptypestatus = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| summarize last_successful_backup_id = max(BACKUP_ID_d) by state_name = STATE_NAME_s, backup_item = ENTRY_TYPE_NAME_s, parent_database = DATABASE_NAME_s\n| join (SapHana_BackupCatalog_CL)\n    on $left.last_successful_backup_id == $right.BACKUP_ID_d\n| extend last_successful_backup_time = UTC_START_TIME_t,\n         parent_database = DATABASE_NAME_s\n| project parent_database,\n          last_successful_backup_id,\n          last_successful_backup_time,\n          backup_item\n;\nlet table_lastbackupbytypestatus = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| summarize backup_time = max(UTC_START_TIME_t), backup_id = max(BACKUP_ID_d) by backup_item = ENTRY_TYPE_NAME_s, state_name = STATE_NAME_s, parent_database = DATABASE_NAME_s\n;\nlet table_lastbackupbytype = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| summarize backup_id = max(BACKUP_ID_d) by backup_item = ENTRY_TYPE_NAME_s, parent_database = DATABASE_NAME_s\n;\nlet table_lastbackupbystatus = table_lastbackupbytype\n| join (table_lastbackupbytypestatus)\n    on $left.backup_id == $right.backup_id\n    and $left.parent_database == $right.parent_database\n;\nlet table_numberfailedbackupssummary = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| summarize Success = count(), Fail = 0, last_successful_backup_time = max(UTC_START_TIME_t) by parent_database = DATABASE_NAME_s\n| union (SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"fail\"\n| summarize Fail = count(), last_failed_backup_time = max(UTC_START_TIME_t) by parent_database = DATABASE_NAME_s)\n| summarize Success = coalesce(max(Success), 0), Fail = max(Fail), last_successful_backup_time = max(last_successful_backup_time), last_failed_backup_time = max(last_failed_backup_time) by parent_database\n| extend percentage_successful_backups = (todouble(Success) / todouble(Success + Fail)) * 100\n| extend number_failed_backups_text = strcat(Fail, ' out of ', toint(Success + Fail))\n;\nlet table_numberfailedbackupsbytype = SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"success\"\n| summarize Success = count(), Fail = 0, last_successful_backup_time = max(UTC_START_TIME_t) by backup_type = ENTRY_TYPE_NAME_s, parent_database = DATABASE_NAME_s\n| union (SapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where STATE_NAME_s contains \"fail\"\n| summarize Fail = count(), last_failed_backup_time = max(UTC_START_TIME_t) by backup_type = ENTRY_TYPE_NAME_s, parent_database = DATABASE_NAME_s)\n| summarize Success = coalesce(max(Success), 0), Fail = max(Fail), last_successful_backup_time = max(last_successful_backup_time), last_failed_backup_time = max(last_failed_backup_time) by backup_type, parent_database\n| extend percentage_successful_backups = (todouble(Success) / todouble(Success + Fail)) * 100\n| extend number_failed_backups_text = strcat(Fail, ' out of ', toint(Success + Fail))\n;\nlet table_databasesummary = table_databases\n| join kind=leftouter (table_lastbackup)\n    on $left.backup_item == $right.parent_database\n| join kind=leftouter (table_lastlogbackup)\n    on $left.backup_item == $right.parent_database\n| join kind=leftouter (table_lastsuccessfulbackup)\n    on $left.backup_item == $right.parent_database\n| join kind=leftouter (table_lastsuccessfullogbackup)\n    on $left.backup_item == $right.parent_database\n| join (table_numberfailedbackupssummary)\n    on $left.backup_item == $right.parent_database\n| extend Id = backup_item,\n         last_status = coalesce(state_name, last_log_backup_state_name),\n         parent_database = '',\n         item_type = strcat(\"'*'\"),\n         database = backup_item,\n         no_filter = ''\n| project backup_item,\n          Id,\n          last_status,\n          number_failed_backups_text,\n          parent_database,\n          item_type,\n          database,\n          no_filter\n| order by parent_database desc\n;\nlet table_backupsummary = table_lastbackupbytypestatus\n| join (table_lastbackupbytype)\n    on $left.parent_database == $right.parent_database\n    and $left.backup_item == $right.backup_item\n    and $left.backup_id == $right.backup_id\n| join kind=leftouter (table_lastsuccessfulbackuptypestatus)\n    on $left.parent_database == $right.parent_database\n    and $left.backup_item == $right.backup_item\n| join (table_numberfailedbackupsbytype)\n    on $left.parent_database == $right.parent_database\n    and $left.backup_item == $right.backup_type\n| extend backup_item,\n         Id = strcat(parent_database, \"-\", tostring(backup_id)),\n         last_status = state_name,\n         last_status_time_minutes = toint((now() - backup_time) / 1m),\n         last_successful_backup_time_minutes = toint((now() - last_successful_backup_time) / 1m),\n         item_type = strcat(\"'\", backup_item, \"'\"),\n         database = parent_database,\n         no_filter = 'where BACKUP_ID_d > 0 //'\n| project backup_item,\n          Id,\n          last_status,\n          last_status_time_minutes,\n          last_successful_backup_time_minutes,\n          parent_database,\n          number_failed_backups_text,\n          item_type,\n          database,\n          no_filter\n| order by parent_database desc\n;\ntable_backupsummary\n| union table_databasesummary\n| order by backup_item asc\n",
                      "size": 3,
                      "title": "Backup Summary",
                      "timeContext": {
                        "durationMs": 3600000
                      },
                      "timeContextFromParameter": "param_timeframe",
                      "exportedParameters": [
                        {
                          "fieldName": "database",
                          "parameterName": "param_tenant",
                          "parameterType": 1
                        },
                        {
                          "fieldName": "item_type",
                          "parameterName": "param_backuptype",
                          "parameterType": 1,
                          "defaultValue": ""
                        },
                        {
                          "fieldName": "no_filter",
                          "parameterName": "param_nologfilter",
                          "parameterType": 1
                        }
                      ],
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "Id",
                            "formatter": 5,
                            "numberFormat": {
                              "unit": 0,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false
                              }
                            }
                          },
                          {
                            "columnMatch": "last_status",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "fail",
                                  "representation": "failed",
                                  "text": ""
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "success",
                                  "text": ""
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "last_status_time_minutes",
                            "formatter": 1,
                            "numberFormat": {
                              "unit": 25,
                              "options": {
                                "style": "decimal",
                                "minimumIntegerDigits": 1,
                                "minimumFractionDigits": 0,
                                "maximumFractionDigits": 0
                              }
                            }
                          },
                          {
                            "columnMatch": "last_successful_backup_time_minutes",
                            "formatter": 1,
                            "numberFormat": {
                              "unit": 25,
                              "options": {
                                "style": "decimal",
                                "minimumIntegerDigits": 1,
                                "minimumFractionDigits": 0,
                                "maximumFractionDigits": 0
                              }
                            }
                          },
                          {
                            "columnMatch": "parent_database",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "number_failed_backups_text",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "startsWith",
                                  "thresholdValue": "0",
                                  "representation": "Blank",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "info",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "item_type",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "database",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "no_filter",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "LastStatus",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "fail",
                                  "representation": "failed",
                                  "text": ""
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "success",
                                  "text": ""
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "AgeOfStatus",
                            "formatter": 1,
                            "numberFormat": {
                              "unit": 25,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "minimumIntegerDigits": 1,
                                "minimumFractionDigits": 0,
                                "maximumFractionDigits": 0
                              }
                            },
                            "dateFormat": {
                              "formatName": "fullDateTimePattern"
                            }
                          },
                          {
                            "columnMatch": "AgeOfSuccessBackupTime",
                            "formatter": 1,
                            "numberFormat": {
                              "unit": 25,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "minimumIntegerDigits": 1,
                                "minimumFractionDigits": 0,
                                "maximumFractionDigits": 0
                              }
                            }
                          },
                          {
                            "columnMatch": "ParentDatabase",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "NumberFailedBackups",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "startsWith",
                                  "thresholdValue": "0",
                                  "representation": "Blank",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "1",
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "ItemType",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Database",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "NoFilter",
                            "formatter": 5
                          }
                        ],
                        "hierarchySettings": {
                          "idColumn": "Id",
                          "parentColumn": "parent_database",
                          "treeType": 0,
                          "expanderColumn": "backup_item"
                        },
                        "labelSettings": [
                          {
                            "columnId": "backup_item",
                            "label": "Backup item"
                          },
                          {
                            "columnId": "Id"
                          },
                          {
                            "columnId": "last_status",
                            "label": "Backup status"
                          },
                          {
                            "columnId": "last_status_time_minutes",
                            "label": "Backup age"
                          },
                          {
                            "columnId": "last_successful_backup_time_minutes",
                            "label": "Age of previous successful backup"
                          },
                          {
                            "columnId": "parent_database"
                          },
                          {
                            "columnId": "number_failed_backups_text",
                            "label": "Number of failed backups"
                          },
                          {
                            "columnId": "item_type"
                          },
                          {
                            "columnId": "database"
                          },
                          {
                            "columnId": "no_filter"
                          }
                        ]
                      }
                    },
                    "name": "query_backup_summary"
                  },
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "566206fe-4f80-495c-b48b-45b345a89862",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_backuptype_filter",
                          "label": "Show Log Backups",
                          "type": 10,
                          "isRequired": true,
                          "multiSelect": true,
                          "quote": "'",
                          "delimiter": ",",
                          "typeSettings": {
                            "additionalResourceOptions": []
                          },
                          "jsonData": "[\n    { \"value\": \"where ENTRY_TYPE_NAME_s <> \\\"\\\"\", \"label\": \"True\", \"selected\": true },\n    { \"value\": \"where ENTRY_TYPE_NAME_s <> \\\"log backup\\\"\", \"label\":\"False\" }\n]",
                          "timeContext": {
                            "durationMs": 43200000
                          },
                          "timeContextFromParameter": "param_timeframe"
                        }
                      ],
                      "style": "pills",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    "customWidth": "0",
                    "conditionalVisibilities": [
                      {
                        "parameterName": "param_tenant",
                        "comparison": "isNotEqualTo"
                      },
                      {
                        "parameterName": "param_backuptype",
                        "comparison": "isEqualTo",
                        "value": "'*'"
                      }
                    ],
                    "name": "catalog_filter_params_logs"
                  },
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "cf986647-1e6f-4863-8f66-d5b64889bcdd",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_backupstate",
                          "label": "Backup State",
                          "type": 10,
                          "isRequired": true,
                          "query": "{\"version\":\"1.0.0\",\"content\":\"[\\n    { \\\"value\\\": \\\"'success','fail','successful','failed'\\\", \\\"label\\\": \\\"All\\\", \\\"selected\\\": true },\\n    { \\\"value\\\": \\\"'success','successful'\\\", \\\"label\\\":\\\"Successful\\\" },\\n    { \\\"value\\\": \\\"'fail','failed'\\\", \\\"label\\\":\\\"Failed\\\" }\\n]\",\"transformers\":null}",
                          "typeSettings": {
                            "additionalResourceOptions": []
                          },
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 8
                        }
                      ],
                      "style": "pills",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    "customWidth": "0",
                    "conditionalVisibility": {
                      "parameterName": "param_tenant",
                      "comparison": "isNotEqualTo"
                    },
                    "name": "catalog_filter_params_state"
                  },
                  {
                    "type": 1,
                    "content": {
                      "json": ""
                    },
                    "name": "buffer"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet nodata = datatable(end_time_utc:datetime,backup_type:string,database:string,backup_size_bytes:real,backup_duration_seconds:real,backup_id:real)\n[\n'1970-01-01 00:00:00',\"N\\\\A\",\"N\\\\A\",0,0,0,\n];\nSapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where DATABASE_NAME_s == param_tenant\n| where ENTRY_TYPE_NAME_s in ({param_backuptype}) or '*' in ({param_backuptype})\n| {param_nologfilter} {param_backuptype_filter}\n| where STATE_NAME_s in ({param_backupstate}) or '*' in ({param_backupstate})\n| extend end_time_utc = UTC_END_TIME_t,\n         backup_type = ENTRY_TYPE_NAME_s,\n         database = DATABASE_NAME_s,\n         backup_size_bytes = BACKUP_SIZE_BYTES_d,\n         backup_duration_seconds = TIME_ELAPSED_SECONDS_d,\n         backup_id = BACKUP_ID_d\n| project end_time_utc, backup_type, database, backup_size_bytes, backup_duration_seconds, backup_id\n| distinct *\n| union isfuzzy=true nodata | where database <> \"N\\\\A\"",
                      "size": 0,
                      "title": "Backup Size",
                      "timeContext": {
                        "durationMs": 3600000
                      },
                      "timeContextFromParameter": "param_timeframe",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "categoricalbar",
                      "chartSettings": {
                        "xAxis": "end_time_utc",
                        "yAxis": [
                          "backup_size_bytes"
                        ],
                        "group": "backup_type",
                        "createOtherGroup": null,
                        "seriesLabelSettings": [
                          {
                            "seriesName": "log backup",
                            "color": "blue"
                          }
                        ],
                        "ySettings": {
                          "numberFormatSettings": {
                            "unit": 36,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true,
                              "maximumFractionDigits": 2
                            }
                          }
                        }
                      }
                    },
                    "customWidth": "50",
                    "conditionalVisibilities": [
                      {
                        "parameterName": "param_tenant",
                        "comparison": "isNotEqualTo"
                      },
                      {
                        "parameterName": "param_backuptype",
                        "comparison": "isNotEqualTo",
                        "value": "'data snapshot'"
                      }
                    ],
                    "showPin": false,
                    "name": "query_backup_size",
                    "styleSettings": {
                      "margin": "2%"
                    }
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet nodata = datatable(end_time_utc:datetime,backup_type:string,database:string,backup_size_bytes:real,backup_duration_seconds:real,backup_id:real)\n[\n'1970-01-01 00:00:00',\"N\\\\A\",\"N\\\\A\",0,0,0,\n];\nSapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid\n| where DATABASE_NAME_s == param_tenant\n| where ENTRY_TYPE_NAME_s in ({param_backuptype}) or '*' in ({param_backuptype})\n| {param_nologfilter} {param_backuptype_filter}\n| where STATE_NAME_s in ({param_backupstate}) or '*' in ({param_backupstate})\n| extend end_time_utc = UTC_END_TIME_t,\n         backup_type = ENTRY_TYPE_NAME_s,\n         database = DATABASE_NAME_s,\n         backup_size_bytes = BACKUP_SIZE_BYTES_d,\n         backup_duration_seconds = TIME_ELAPSED_SECONDS_d,\n         backup_id = BACKUP_ID_d\n| project end_time_utc, backup_type, database, backup_size_bytes, backup_duration_seconds, backup_id\n| distinct *\n| union isfuzzy=true nodata | where database <> \"N\\\\A\"",
                      "size": 0,
                      "aggregation": 3,
                      "title": "Backup Duration",
                      "timeContext": {
                        "durationMs": 3600000
                      },
                      "timeContextFromParameter": "param_timeframe",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "categoricalbar",
                      "chartSettings": {
                        "xAxis": "end_time_utc",
                        "yAxis": [
                          "backup_duration_seconds"
                        ],
                        "group": "backup_type",
                        "createOtherGroup": null,
                        "ySettings": {
                          "numberFormatSettings": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true,
                              "maximumFractionDigits": 2
                            }
                          }
                        }
                      }
                    },
                    "customWidth": "50",
                    "conditionalVisibility": {
                      "parameterName": "param_tenant",
                      "comparison": "isNotEqualTo"
                    },
                    "showPin": false,
                    "name": "query_backup_duration",
                    "styleSettings": {
                      "margin": "2%"
                    }
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nSapHana_BackupCatalog_CL\n| where SYSTEM_ID_s == param_sid \n| where UTC_END_TIME_t {param_timeframe}\n| where DATABASE_NAME_s == param_tenant\n| where STATE_NAME_s in ({param_backupstate}) or '*' in ({param_backupstate})\n| where ENTRY_TYPE_NAME_s in ({param_backuptype}) or '*' in ({param_backuptype})\n| {param_nologfilter} {param_backuptype_filter}\n| extend\n  status = case(STATE_NAME_s == \"successful\", \"success\", STATE_NAME_s == \"failed\", \"fail\", STATE_NAME_s),\n  backup_type=ENTRY_TYPE_NAME_s,\n  database=DATABASE_NAME_s,\n  start_time_utc=UTC_START_TIME_t,\n  end_time_utc=UTC_END_TIME_t,\n  duration_hms = format_timespan(TIME_ELAPSED_SECONDS_d * 1s,'hh:mm:ss'),\n  backup_size_bytes = BACKUP_SIZE_BYTES_d,\n  backup_rate_kbps = BACKUP_RATE_KBYTES_PER_SECOND_d,\n  message = Message,\n  backup_id = BACKUP_ID_d,\n  number_of_files = NUMBER_OF_FILES_d\n| project status, backup_type, database, start_time_utc, end_time_utc, duration_hms, backup_size_bytes, backup_rate_kbps, message, backup_id, number_of_files\n| distinct *\n| order by end_time_utc desc",
                      "size": 0,
                      "title": "Backup Catalog",
                      "timeContext": {
                        "durationMs": 3600000
                      },
                      "timeContextFromParameter": "param_timeframe",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "table",
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "status",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "fail",
                                  "representation": "failed",
                                  "text": "Fail"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "success",
                                  "text": "Success"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "backup_type",
                            "formatter": 1,
                            "formatOptions": {
                              "linkTarget": "GenericDetails",
                              "linkIsContextBlade": true
                            }
                          },
                          {
                            "columnMatch": "database",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "start_time_utc",
                            "formatter": 6,
                            "dateFormat": {
                              "showUtcTime": null,
                              "formatName": "shortDateTimePattern"
                            }
                          },
                          {
                            "columnMatch": "end_time_utc",
                            "formatter": 6,
                            "dateFormat": {
                              "showUtcTime": null,
                              "formatName": "shortDateTimePattern"
                            }
                          },
                          {
                            "columnMatch": "duration_hms",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "blue"
                            }
                          },
                          {
                            "columnMatch": "backup_size_bytes",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "blue"
                            },
                            "numberFormat": {
                              "unit": 36,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "maximumFractionDigits": 2
                              },
                              "emptyValCustomText": "No data for this backup type"
                            }
                          },
                          {
                            "columnMatch": "backup_rate_kbps",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "blue"
                            },
                            "numberFormat": {
                              "unit": 46,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 2
                              },
                              "emptyValCustomText": "No data for this backup type"
                            }
                          },
                          {
                            "columnMatch": "message",
                            "formatter": 1
                          },
                          {
                            "columnMatch": "backup_id",
                            "formatter": 1,
                            "formatOptions": {
                              "linkTarget": "GenericDetails",
                              "linkIsContextBlade": true
                            }
                          },
                          {
                            "columnMatch": "number_of_files",
                            "formatter": 1,
                            "numberFormat": {
                              "unit": 0,
                              "options": {
                                "style": "decimal"
                              }
                            }
                          },
                          {
                            "columnMatch": "Status",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "fail",
                                  "representation": "failed",
                                  "text": "Fail"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "success",
                                  "text": "Success"
                                }
                              ]
                            }
                          },
                          {
                            "columnMatch": "ENTRY_TYPE_NAME_s",
                            "formatter": 1,
                            "formatOptions": {
                              "linkTarget": "GenericDetails",
                              "linkIsContextBlade": true
                            }
                          },
                          {
                            "columnMatch": "UTC_START_TIME_t",
                            "formatter": 6,
                            "dateFormat": {
                              "showUtcTime": null,
                              "formatName": "shortDateTimePattern"
                            }
                          },
                          {
                            "columnMatch": "UTC_END_TIME_t",
                            "formatter": 6,
                            "dateFormat": {
                              "showUtcTime": null,
                              "formatName": "shortDateTimePattern"
                            }
                          },
                          {
                            "columnMatch": "Duration",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "blue"
                            }
                          },
                          {
                            "columnMatch": "BACKUP_SIZE_BYTES_d",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "blue"
                            },
                            "numberFormat": {
                              "unit": 2,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false
                              }
                            }
                          },
                          {
                            "columnMatch": "BACKUP_RATE_KBYTES_PER_SECOND_d",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "gray"
                            },
                            "numberFormat": {
                              "unit": 12,
                              "options": {
                                "style": "decimal"
                              }
                            }
                          },
                          {
                            "columnMatch": "BACKUP_ID_d",
                            "formatter": 1,
                            "formatOptions": {
                              "linkTarget": "GenericDetails",
                              "linkIsContextBlade": true
                            },
                            "numberFormat": {
                              "unit": 0,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false
                              }
                            }
                          },
                          {
                            "columnMatch": "TIME_ELAPSED_SECONDS_d",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "blue"
                            },
                            "numberFormat": {
                              "unit": 24,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false
                              }
                            }
                          }
                        ],
                        "rowLimit": 2500,
                        "labelSettings": [
                          {
                            "columnId": "status",
                            "label": "Status"
                          },
                          {
                            "columnId": "backup_type",
                            "label": "Backup type"
                          },
                          {
                            "columnId": "database",
                            "label": "Database"
                          },
                          {
                            "columnId": "start_time_utc",
                            "label": "Start time"
                          },
                          {
                            "columnId": "end_time_utc",
                            "label": "End time"
                          },
                          {
                            "columnId": "duration_hms",
                            "label": "Duration"
                          },
                          {
                            "columnId": "backup_size_bytes",
                            "label": "Backup size"
                          },
                          {
                            "columnId": "backup_rate_kbps",
                            "label": "Rate"
                          },
                          {
                            "columnId": "message",
                            "label": "Message"
                          },
                          {
                            "columnId": "backup_id",
                            "label": "Backup ID"
                          },
                          {
                            "columnId": "number_of_files",
                            "label": "Number of files"
                          }
                        ]
                      },
                      "sortBy": [],
                      "tileSettings": {
                        "titleContent": {
                          "columnMatch": "type",
                          "formatter": 1,
                          "formatOptions": {}
                        },
                        "subtitleContent": {
                          "columnMatch": "host",
                          "formatter": 1,
                          "formatOptions": {}
                        },
                        "leftContent": {
                          "columnMatch": "value",
                          "formatter": 12,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "minimumFractionDigits": 1,
                              "maximumFractionDigits": 1
                            }
                          }
                        },
                        "secondaryContent": {
                          "columnMatch": "timeseries",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blue"
                          }
                        },
                        "showBorder": true
                      }
                    },
                    "conditionalVisibility": {
                      "parameterName": "param_tenant",
                      "comparison": "isNotEqualTo"
                    },
                    "showPin": false,
                    "name": "query_backup_catalog"
                  }
                ]
              },
              "conditionalVisibilities": [
                {
                  "parameterName": "param_tab_main",
                  "comparison": "isEqualTo",
                  "value": "3"
                },
                {
                  "parameterName": "param_sid",
                  "comparison": "isNotEqualTo",
                  "value": "*"
                }
              ],
              "name": "group_backup"
            },
            {
              "type": 12,
              "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "items": [
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "4a9b43cc-8ed8-4551-8112-658b341acf5b",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_check_hsrdata",
                          "type": 1,
                          "query": "let MissingTable = view () { print miss = \"1\", sid = \"\", records = -1 };\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(\"SapHana_SystemReplication_CL\")\n      | extend sid = column_ifexists(\"SYSTEM_ID_s\", \"\")\n      | extend miss = \"0\"\n      | where sid == \"{param_sid}\"\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\ncheckTableExists",
                          "isHiddenWhenLocked": true,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        }
                      ],
                      "style": "pills",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    "name": "param_replication"
                  },
                  {
                    "type": 1,
                    "content": {
                      "json": "System replication does not appear to be configured on this instance.",
                      "style": "warning"
                    },
                    "conditionalVisibility": {
                      "parameterName": "param_check_hsrdata",
                      "comparison": "isNotEqualTo",
                      "value": "0"
                    },
                    "name": "text_nohsr"
                  },
                  {
                    "type": 12,
                    "content": {
                      "version": "NotebookGroup/1.0",
                      "groupType": "editable",
                      "items": [
                        {
                          "type": 12,
                          "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "title": "Replication relationships by replication site name (click to expand)",
                            "expandable": true,
                            "expanded": true,
                            "items": [
                              {
                                "type": 3,
                                "content": {
                                  "version": "KqlItem/1.0",
                                  "query": "let param_sid = \"{param_sid}\"\r\n;\r\n// Filter the base data set to only work with the selected SID\r\nlet table_systemreplication = SapHana_SystemReplication_CL\r\n| where SYSTEM_ID_s == param_sid\r\n;\r\n// Find the latest post for this instance\r\nlet table_lastpost = table_systemreplication\r\n| summarize lastpost = max(TimeGenerated)\r\n| project lastpost\r\n;\r\n// Create table of the last posts for this instance\r\nlet table_hsrlastpost = table_systemreplication\r\n| join kind=inner (table_lastpost) \r\n  on  $left.TimeGenerated == $right.lastpost\r\n;\r\n//create a table with the primary site\r\nlet table_primarysite = table_hsrlastpost \r\n| distinct  \r\n    SITE_NAME_s\r\n| project  \r\n    NodeID = SITE_NAME_s,\r\n    SourceID = '',\r\n    TargetID = '',\r\n    CentreContent = SITE_NAME_s, \r\n    EdgeLabel = '', \r\n    TopContent = 'Primary'\r\n;\r\n// create a table with the secondary sites\r\nlet table_secondarysite = table_hsrlastpost \r\n| summarize\r\n   TIME_DIFF_SECONDS_d = avg(TIME_DIFF_SECONDS_d),\r\n   OPERATION_MODE_s = max(OPERATION_MODE_s),\r\n   REPLICATION_MODE_s = max(REPLICATION_MODE_s),\r\n   SYSTEM_REPLICATION_STATUS_s = max(SYSTEM_REPLICATION_STATUS_s)\r\n  by\r\n  SITE_NAME_s,\r\n   SECONDARY_SITE_NAME_s\r\n| project  \r\n   NodeID = SECONDARY_SITE_NAME_s,\r\n   SourceID = SITE_NAME_s,\r\n   TargetID = SECONDARY_SITE_NAME_s,\r\n   CentreContent = SECONDARY_SITE_NAME_s,\r\n   EdgeLabel = strcat( iif(SYSTEM_REPLICATION_STATUS_s == 'ACTIVE', '🟢', '🟥'), ' ', SYSTEM_REPLICATION_STATUS_s, ' - ', REPLICATION_MODE_s, ' with ',OPERATION_MODE_s), \r\n   TopContent = 'Secondary'\r\n;\r\n// join the two together\r\ntable_primarysite\r\n| union table_secondarysite\r\n| order by NodeID asc",
                                  "size": 3,
                                  "queryType": 0,
                                  "resourceType": "microsoft.operationalinsights/workspaces",
                                  "visualization": "graph",
                                  "graphSettings": {
                                    "type": 0,
                                    "topContent": {
                                      "columnMatch": "TopContent"
                                    },
                                    "leftContent": {
                                      "columnMatch": "LeftContent_real",
                                      "formatter": 5,
                                      "numberFormat": {
                                        "unit": 24,
                                        "options": {
                                          "style": "decimal",
                                          "useGrouping": false
                                        }
                                      },
                                      "tooltipFormat": {
                                        "tooltip": "This replication target is currently {0} behind the replication source"
                                      }
                                    },
                                    "centerContent": {
                                      "columnMatch": "CentreContent"
                                    },
                                    "rightContent": {
                                      "columnMatch": "RightContent",
                                      "formatter": 5
                                    },
                                    "bottomContent": {
                                      "columnMatch": "BottomContent",
                                      "formatter": 5
                                    },
                                    "nodeIdField": "NodeID",
                                    "sourceIdField": "SourceID",
                                    "targetIdField": "TargetID",
                                    "edgeSize": "EdgeSize",
                                    "edgeLabel": "EdgeLabel",
                                    "nodeSize": {
                                      "sizeField": "NodeSize",
                                      "minSize": 100,
                                      "maxSize": 200
                                    },
                                    "staticNodeSize": 100,
                                    "colorSettings": {
                                      "nodeColorField": "TopContent",
                                      "type": 1,
                                      "colorPalette": "default"
                                    },
                                    "hivesMargin": 5
                                  }
                                },
                                "customWidth": "80",
                                "name": "Cluster-node-graph-topology"
                              }
                            ]
                          },
                          "name": "group_graph_view"
                        },
                        {
                          "type": 9,
                          "content": {
                            "version": "KqlParameterItem/1.0",
                            "parameters": [
                              {
                                "id": "7d25d955-502f-483f-83dd-5a1ae98bf43b",
                                "version": "KqlParameterItem/1.0",
                                "name": "param_timeframe",
                                "label": "Timeframe",
                                "type": 4,
                                "isRequired": true,
                                "value": {
                                  "durationMs": 259200000
                                },
                                "typeSettings": {
                                  "selectableValues": [
                                    {
                                      "durationMs": 300000
                                    },
                                    {
                                      "durationMs": 900000
                                    },
                                    {
                                      "durationMs": 1800000
                                    },
                                    {
                                      "durationMs": 3600000
                                    },
                                    {
                                      "durationMs": 14400000
                                    },
                                    {
                                      "durationMs": 43200000
                                    },
                                    {
                                      "durationMs": 86400000
                                    },
                                    {
                                      "durationMs": 172800000
                                    },
                                    {
                                      "durationMs": 259200000
                                    },
                                    {
                                      "durationMs": 604800000
                                    },
                                    {
                                      "durationMs": 1209600000
                                    },
                                    {
                                      "durationMs": 2419200000
                                    },
                                    {
                                      "durationMs": 2592000000
                                    },
                                    {
                                      "durationMs": 5184000000
                                    },
                                    {
                                      "durationMs": 7776000000
                                    }
                                  ]
                                },
                                "timeContext": {
                                  "durationMs": 86400000
                                }
                              }
                            ],
                            "style": "pills",
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces"
                          },
                          "name": "parameters - 2"
                        },
                        {
                          "type": 3,
                          "content": {
                            "version": "KqlItem/1.0",
                            "query": "let param_sid = \"{param_sid}\"\n;\nlet table_systemreplication = SapHana_SystemReplication_CL\n| where SYSTEM_ID_s == param_sid\n| where TimeGenerated {param_timeframe}\n;\nlet table_lastpost = table_systemreplication\n| summarize last_post = max(TimeGenerated)\n| project last_post\n;\nlet table_hsrlastpost = table_systemreplication\n| join kind=inner (table_lastpost)\n    on $left.TimeGenerated == $right.last_post\n;\nlet table_tsreplicationtimediffbyservice = table_systemreplication\n| make-series ts_max_time_diff_seconds = max(TIME_DIFF_SECONDS_d) default=0 on TimeGenerated step {param_timeframe:grain} by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s \n;\nlet table_tsreplicationasyncbuffbyservice = table_systemreplication\n| make-series ts_max_async_buff_mb = max(ASYNC_BUFF_USED_MB_d) default=0 on TimeGenerated step {param_timeframe:grain} by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s \n;\nlet table_tsreplicationtimediffbyhost = table_systemreplication\n| make-series ts_max_time_diff_seconds = max(TIME_DIFF_SECONDS_d) default=0 on TimeGenerated step {param_timeframe:grain} by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s \n;\nlet table_tsreplicationasyncbuffbyhost = table_systemreplication\n| make-series ts_max_async_buff_mb = max(ASYNC_BUFF_USED_MB_d) default=0 on TimeGenerated step {param_timeframe:grain} by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s\n;\nlet table_lastreplicationpostbyservice = table_hsrlastpost\n| summarize last_post = max(TimeGenerated) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s\n;\nlet table_maxreplicationpostbyservice = table_systemreplication\n| summarize last_post = max(TimeGenerated), max_time_diff_seconds = max(TIME_DIFF_SECONDS_d), max_async_buff_used_mb = max(ASYNC_BUFF_USED_MB_d) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s\n;\nlet table_replicationmetricsbyservice = table_hsrlastpost\n| extend async_buff_used_mb = ASYNC_BUFF_USED_MB_d,\n         time_diff_seconds = TIME_DIFF_SECONDS_d\n| project last_post,\n          DATABASE_NAME_s,\n          HOST_s,\n          SECONDARY_HOST_s,\n          SITE_NAME_s,\n          SECONDARY_SITE_NAME_s,\n          SERVICE_NAME_s,\n          SHIPPED_LOG_POSITION_TIME_t,\n          REPLAYED_LOG_POSITION_TIME_t,\n          async_buff_used_mb,\n          time_diff_seconds\n;\nlet table_replicationmetricsbydb = table_replicationmetricsbyservice\n| summarize last_post = max(last_post), async_buff_used_mb = sum(async_buff_used_mb), time_diff_seconds = max(time_diff_seconds) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s\n;\nlet table_lastreplicationbystatusbyservice = table_hsrlastpost\n| summarize last_post = max(TimeGenerated) by DATABASE_NAME_s, SYSTEM_REPLICATION_STATUS_s, SERVICE_REPLICATION_STATUS_s, SERVICE_REPLICATION_STATUS_DETAILS_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s\n;\nlet table_replicationmodesbyservice = table_hsrlastpost\n| summarize last_post = max(TimeGenerated) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, SERVICE_NAME_s, REPLICATION_MODE_s, OPERATION_MODE_s\n;\nlet table_lastreplicationpostbyhost = table_lastreplicationpostbyservice\n| join (table_maxreplicationpostbyservice)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SITE_NAME_s == $right.SITE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n| summarize last_post = max(last_post), max_time_diff_seconds = max(max_time_diff_seconds), max_async_buff_used_mb = sum(max_async_buff_used_mb) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SECONDARY_SITE_NAME_s\n;\nlet table_lastreplicationbystatusbyhost = table_lastreplicationbystatusbyservice\n| summarize last_post = max(last_post) by DATABASE_NAME_s, SYSTEM_REPLICATION_STATUS_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s\n;\nlet table_replicationmodesbyhost = table_replicationmodesbyservice\n| summarize last_post = max(last_post) by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SITE_NAME_s, SECONDARY_SITE_NAME_s, REPLICATION_MODE_s, OPERATION_MODE_s\n;\nlet table_lastreplicationbystatusbydb = table_lastreplicationbystatusbyhost\n| top-nested of DATABASE_NAME_s by min(1), top-nested 1 of SYSTEM_REPLICATION_STATUS_s by last_post = max(last_post) desc\n;\nlet table_lastreplicationpostbydb = table_lastreplicationpostbyhost\n| summarize last_post = max(last_post) by DATABASE_NAME_s\n;\nlet table_databasesummary = table_lastreplicationpostbydb\n| join (table_lastreplicationbystatusbydb)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n| extend id = DATABASE_NAME_s,\n         parent_id = '',\n         replication_item = DATABASE_NAME_s,\n         site = '',\n         system_replication_status = SYSTEM_REPLICATION_STATUS_s,\n         system_replication_status_details = '',\n         replication_mode = '',\n         source_host = '',\n         target_host = '',\n         source_site = '',\n         target_site = '',\n         service_name = '',\n         tenant = DATABASE_NAME_s\n| project id,\n          parent_id,\n          replication_item,\n          site,\n          system_replication_status,\n          system_replication_status_details,\n          replication_mode,\n          source_host,\n          target_host,\n          source_site,\n          target_site,\n          service_name,\n          tenant\n;\nlet table_hostsummary = table_lastreplicationpostbyhost\n| join (table_lastreplicationbystatusbyhost)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_replicationmodesbyhost)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_replicationmetricsbydb)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_tsreplicationtimediffbyhost)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_tsreplicationasyncbuffbyhost)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| extend id = strcat(DATABASE_NAME_s, \".\", HOST_s, \".\", SECONDARY_HOST_s),\n         parent_id = DATABASE_NAME_s,\n         replication_item = strcat(HOST_s, \" -> \", SECONDARY_HOST_s),\n         site = strcat(SITE_NAME_s, \" -> \", SECONDARY_SITE_NAME_s),\n         system_replication_status = SYSTEM_REPLICATION_STATUS_s,\n         system_replication_status_details = '',\n         replication_mode = strcat(REPLICATION_MODE_s, \" (\", OPERATION_MODE_s, \")\"),\n         ts_time_diff_seconds = ts_max_time_diff_seconds,\n         // async_buff_string = strcat(format_bytes((async_buff_used_mb * 1024 * 1024), 2), \" (\", format_bytes((max_async_buff_used_mb * 1024 * 1024), 2), \")\"),\n         async_buff_used_mb,\n         max_async_buff_used_mb,\n         ts_async_buff_mb = ts_max_async_buff_mb,\n         source_host = HOST_s,\n         target_host = SECONDARY_HOST_s,\n         source_site = SITE_NAME_s,\n         target_site = SECONDARY_SITE_NAME_s,\n         service_name = '',\n         tenant = DATABASE_NAME_s\n| project id,\n          parent_id,\n          replication_item,\n          site,\n          system_replication_status,\n          replication_mode,\n          time_diff_seconds,\n          max_time_diff_seconds,\n          ts_time_diff_seconds,\n          // async_buff_string,\n          async_buff_used_mb,\n          max_async_buff_used_mb,\n          ts_async_buff_mb,\n          source_host,\n          target_host,\n          source_site,\n          target_site,\n          service_name,\n          tenant\n;\nlet table_servicesummary = table_lastreplicationpostbyservice\n| join (table_maxreplicationpostbyservice)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SITE_NAME_s == $right.SITE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n| join (table_lastreplicationbystatusbyservice)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_replicationmodesbyservice)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_replicationmetricsbyservice)\n    on $left.last_post == $right.last_post\n    and $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_tsreplicationtimediffbyservice)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| join (table_tsreplicationasyncbuffbyservice)\n    on $left.DATABASE_NAME_s == $right.DATABASE_NAME_s\n    and $left.HOST_s == $right.HOST_s\n    and $left.SECONDARY_HOST_s == $right.SECONDARY_HOST_s\n    and $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n    and $left.SECONDARY_SITE_NAME_s == $right.SECONDARY_SITE_NAME_s\n| extend id = strcat(DATABASE_NAME_s, \".\", HOST_s, \".\", SECONDARY_HOST_s, \".\", SERVICE_NAME_s),\n         parent_id = strcat(DATABASE_NAME_s, \".\", HOST_s, \".\", SECONDARY_HOST_s),\n         replication_item = SERVICE_NAME_s,\n         site = strcat(SITE_NAME_s, \" -> \", SECONDARY_SITE_NAME_s),\n         system_replication_status = SERVICE_REPLICATION_STATUS_s,\n         system_replication_status_details = SERVICE_REPLICATION_STATUS_DETAILS_s,\n         shipped_log_position_time = SHIPPED_LOG_POSITION_TIME_t,\n         replayed_log_position_time = REPLAYED_LOG_POSITION_TIME_t,\n         replication_mode = strcat(REPLICATION_MODE_s, \" (\", OPERATION_MODE_s, \")\"),\n         ts_time_diff_seconds = ts_max_time_diff_seconds,\n         // async_buff_string = strcat(format_bytes((async_buff_used_mb * 1024 * 1024), 2), \" (\", format_bytes((max_async_buff_used_mb * 1024 * 1024), 2), \")\"),\n         async_buff_used_mb,\n         max_async_buff_used_mb,\n         ts_async_buff_mb = ts_max_async_buff_mb,\n         source_host = HOST_s,\n         target_host = SECONDARY_HOST_s,\n         source_site = SITE_NAME_s,\n         target_site = SECONDARY_SITE_NAME_s,\n         service_name = SERVICE_NAME_s,\n         tenant = DATABASE_NAME_s\n| project id,\n          parent_id,\n          replication_item,\n          site,\n          system_replication_status,\n          system_replication_status_details,\n          shipped_log_position_time,\n          replayed_log_position_time,\n          replication_mode,\n          time_diff_seconds,\n          max_time_diff_seconds,\n          ts_time_diff_seconds,\n          // async_buff_string,\n          async_buff_used_mb,\n          max_async_buff_used_mb,\n          ts_async_buff_mb,\n          source_host,\n          target_host,\n          source_site,\n          target_site,\n          service_name,\n          tenant\n;\ntable_servicesummary\n| union (table_hostsummary)\n| union (table_databasesummary)\n",
                            "size": 3,
                            "title": "Replication Summary ",
                            "noDataMessage": "System Replication does not appear to be configured on this instance.",
                            "exportedParameters": [
                              {
                                "fieldName": "source_host",
                                "parameterName": "param_source_host",
                                "parameterType": 1
                              },
                              {
                                "fieldName": "target_host",
                                "parameterName": "param_target_host",
                                "parameterType": 1
                              },
                              {
                                "fieldName": "source_site",
                                "parameterName": "param_source_site",
                                "parameterType": 1
                              },
                              {
                                "fieldName": "target_site",
                                "parameterName": "param_target_site",
                                "parameterType": 1
                              },
                              {
                                "fieldName": "tenant",
                                "parameterName": "param_tenant",
                                "parameterType": 1
                              },
                              {
                                "fieldName": "service_name",
                                "parameterName": "param_service_name",
                                "parameterType": 1
                              }
                            ],
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces",
                            "gridSettings": {
                              "formatters": [
                                {
                                  "columnMatch": "id",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "parent_id",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "system_replication_status",
                                  "formatter": 18,
                                  "formatOptions": {
                                    "linkColumn": "system_replication_status_details",
                                    "linkTarget": "GenericDetails",
                                    "linkIsContextBlade": true,
                                    "thresholdsOptions": "icons",
                                    "thresholdsGrid": [
                                      {
                                        "operator": "==",
                                        "thresholdValue": "ACTIVE",
                                        "representation": "success",
                                        "text": "{0}{1}"
                                      },
                                      {
                                        "operator": "Default",
                                        "thresholdValue": null,
                                        "representation": "error",
                                        "text": "{0}{1}"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "columnMatch": "system_replication_status_details",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "shipped_log_position_time",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "replayed_log_position_time",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "time_diff_seconds",
                                  "formatter": 1,
                                  "numberFormat": {
                                    "unit": 24,
                                    "options": {
                                      "style": "decimal",
                                      "useGrouping": false,
                                      "minimumIntegerDigits": 1,
                                      "minimumFractionDigits": 0,
                                      "maximumFractionDigits": 0
                                    }
                                  }
                                },
                                {
                                  "columnMatch": "ts_time_diff_seconds",
                                  "formatter": 21,
                                  "formatOptions": {
                                    "palette": "blue",
                                    "aggregation": "Max"
                                  },
                                  "numberFormat": {
                                    "unit": 24,
                                    "options": {
                                      "style": "decimal",
                                      "useGrouping": false,
                                      "minimumIntegerDigits": 1,
                                      "minimumFractionDigits": 0,
                                      "maximumFractionDigits": 0
                                    }
                                  }
                                },
                                {
                                  "columnMatch": "async_buff_used_mb",
                                  "formatter": 1,
                                  "numberFormat": {
                                    "unit": 4,
                                    "options": {
                                      "style": "decimal",
                                      "minimumIntegerDigits": 1,
                                      "maximumFractionDigits": 1
                                    }
                                  }
                                },
                                {
                                  "columnMatch": "max_async_buff_used_mb",
                                  "formatter": 0,
                                  "numberFormat": {
                                    "unit": 4,
                                    "options": {
                                      "style": "decimal",
                                      "minimumIntegerDigits": 1,
                                      "maximumFractionDigits": 1
                                    }
                                  }
                                },
                                {
                                  "columnMatch": "ts_async_buff_mb",
                                  "formatter": 21,
                                  "formatOptions": {
                                    "palette": "blue",
                                    "aggregation": "Max"
                                  },
                                  "numberFormat": {
                                    "unit": 4,
                                    "options": {
                                      "style": "decimal"
                                    }
                                  }
                                },
                                {
                                  "columnMatch": "source_host",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "target_host",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "source_site",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "target_site",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "service_name",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "tenant",
                                  "formatter": 5
                                },
                                {
                                  "columnMatch": "Async buffer",
                                  "formatter": 1,
                                  "numberFormat": {
                                    "unit": 4,
                                    "options": {
                                      "style": "decimal",
                                      "useGrouping": false
                                    }
                                  }
                                }
                              ],
                              "hierarchySettings": {
                                "idColumn": "id",
                                "parentColumn": "parent_id",
                                "treeType": 0,
                                "expanderColumn": "replication_item",
                                "expandTopLevel": true
                              },
                              "labelSettings": [
                                {
                                  "columnId": "id"
                                },
                                {
                                  "columnId": "parent_id"
                                },
                                {
                                  "columnId": "replication_item",
                                  "label": "Item"
                                },
                                {
                                  "columnId": "site",
                                  "label": "Site"
                                },
                                {
                                  "columnId": "system_replication_status",
                                  "label": "Status"
                                },
                                {
                                  "columnId": "system_replication_status_details",
                                  "label": "Status details"
                                },
                                {
                                  "columnId": "shipped_log_position_time"
                                },
                                {
                                  "columnId": "replayed_log_position_time"
                                },
                                {
                                  "columnId": "replication_mode",
                                  "label": "Mode"
                                },
                                {
                                  "columnId": "time_diff_seconds",
                                  "label": "Time diff"
                                },
                                {
                                  "columnId": "max_time_diff_seconds",
                                  "label": "(Max)"
                                },
                                {
                                  "columnId": "ts_time_diff_seconds",
                                  "label": "Time diff over timeframe"
                                },
                                {
                                  "columnId": "async_buff_used_mb",
                                  "label": "Async buffer"
                                },
                                {
                                  "columnId": "max_async_buff_used_mb",
                                  "label": "(Max)"
                                },
                                {
                                  "columnId": "ts_async_buff_mb",
                                  "label": " Async buffer over timeframe"
                                },
                                {
                                  "columnId": "source_host"
                                },
                                {
                                  "columnId": "target_host"
                                },
                                {
                                  "columnId": "source_site"
                                },
                                {
                                  "columnId": "target_site"
                                },
                                {
                                  "columnId": "service_name"
                                },
                                {
                                  "columnId": "tenant"
                                }
                              ]
                            },
                            "sortBy": []
                          },
                          "name": "query_replication_summary"
                        },
                        {
                          "type": 12,
                          "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "items": [
                              {
                                "type": 3,
                                "content": {
                                  "version": "KqlItem/1.0",
                                  "query": "let param_sid = \"{param_sid}\"\r\n;\r\nlet param_tenant = \"{param_tenant}\"\r\n;\r\nlet param_target_host = \"{param_target_host}\"\r\n;\r\nlet param_source_host = \"{param_source_host}\"\r\n;\r\nlet param_service_name = \"{param_service_name}\"\r\n;\r\nlet table_systemreplication = SapHana_SystemReplication_CL\r\n| where SYSTEM_ID_s == param_sid\r\n| where TimeGenerated {param_timeframe}\r\n;\r\nlet table_hsrwithrownumbers = table_systemreplication\r\n| where DATABASE_NAME_s == param_tenant\r\n| where SECONDARY_HOST_s == param_target_host or isempty(param_target_host)\r\n| where HOST_s == param_source_host or isempty(param_source_host)\r\n| where SERVICE_NAME_s == param_service_name or isempty(param_service_name)\r\n| project TimeGenerated, \r\n          DATABASE_NAME_s, \r\n          HOST_s, \r\n          SECONDARY_HOST_s, \r\n          SERVICE_NAME_s, \r\n          TOTAL_TRIGGER_ASYNC_WRITES_d, \r\n          TOTAL_WRITE_TIME_d, \r\n          SHIPPED_LOG_BUFFERS_DURATION_d, \r\n          SHIPPED_LOG_BUFFERS_COUNT_d\r\n| order by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SERVICE_NAME_s, TimeGenerated  desc\r\n| extend RecordNumber = row_number(), PrevRecordNumber = row_number() -1\r\n;\r\n// The local buffer entrys are by localhost and service, so averaging by host and service will remove the duplicate values (important when we select by db or host)\r\nlet table_localbuffer = table_hsrwithrownumbers\r\n| join (table_hsrwithrownumbers) \r\n  on $left.RecordNumber == $right.PrevRecordNumber,\r\n     $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\r\n| summarize \r\n   TRIGGER_ASYNC_WRITES = avg(TOTAL_TRIGGER_ASYNC_WRITES_d - TOTAL_TRIGGER_ASYNC_WRITES_d1),\r\n   WRITE_TIME = avg(TOTAL_WRITE_TIME_d - TOTAL_WRITE_TIME_d1)\r\n  by  \r\n   TimeGenerated, \r\n   DATABASE_NAME_s, \r\n   HOST_s,\r\n   SERVICE_NAME_s   \r\n|summarize\r\n  Avg_local_log_buffer_write_time_ms = avg(WRITE_TIME / TRIGGER_ASYNC_WRITES / 1000)\r\n by bin(TimeGenerated, {param_timeframe:grain})\r\n;\r\n\r\nlet table_shipped_buffers = table_hsrwithrownumbers\r\n| join (table_hsrwithrownumbers) \r\n  on $left.RecordNumber == $right.PrevRecordNumber,\r\n     $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\r\n| summarize \r\n       Avg_log_buffer_shipping_time_ms = sum(SHIPPED_LOG_BUFFERS_DURATION_d - SHIPPED_LOG_BUFFERS_DURATION_d1) / 1000 / sum(SHIPPED_LOG_BUFFERS_COUNT_d - SHIPPED_LOG_BUFFERS_COUNT_d1)\r\n  by bin(TimeGenerated, {param_timeframe:grain})\r\n;\r\n\r\ntable_shipped_buffers\r\n| join (table_localbuffer)\r\n  on $left.TimeGenerated == $right.TimeGenerated\r\n|project-away TimeGenerated1",
                                  "size": 0,
                                  "aggregation": 2,
                                  "title": "Log buffer write time vs. shipping time",
                                  "queryType": 0,
                                  "resourceType": "microsoft.operationalinsights/workspaces",
                                  "visualization": "linechart",
                                  "chartSettings": {
                                    "xAxis": "TimeGenerated",
                                    "yAxis": [
                                      "Avg_local_log_buffer_write_time_ms",
                                      "Avg_log_buffer_shipping_time_ms"
                                    ],
                                    "showLegend": true,
                                    "seriesLabelSettings": [
                                      {
                                        "seriesName": "Avg_local_log_buffer_write_time_ms",
                                        "label": "Avg. local log buffer write time (ms)"
                                      },
                                      {
                                        "seriesName": "Avg_log_buffer_shipping_time_ms",
                                        "label": "Avg. log buffer shipping time (ms)",
                                        "color": "green"
                                      },
                                      {
                                        "color": "purple"
                                      }
                                    ],
                                    "ySettings": {
                                      "numberFormatSettings": {
                                        "unit": 23,
                                        "options": {
                                          "style": "decimal",
                                          "useGrouping": true
                                        }
                                      }
                                    }
                                  }
                                },
                                "customWidth": "50",
                                "name": "query_logbufferwritevsshipping"
                              },
                              {
                                "type": 3,
                                "content": {
                                  "version": "KqlItem/1.0",
                                  "query": "let param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet param_target_host = \"{param_target_host}\"\n;\nlet param_source_host = \"{param_source_host}\"\n;\nlet param_service_name = \"{param_service_name}\"\n;\nlet table_systemreplication = SapHana_SystemReplication_CL\n| where SYSTEM_ID_s == param_sid\n| where TimeGenerated {param_timeframe}\n;\nlet table_hsrwithrownumbers = table_systemreplication\n| where DATABASE_NAME_s == param_tenant\n| where SECONDARY_HOST_s == param_target_host or isempty(param_target_host)\n| where HOST_s == param_source_host or isempty(param_source_host)\n| where SERVICE_NAME_s == param_service_name or isempty(param_service_name)\n| project TimeGenerated, \n          DATABASE_NAME_s, \n          HOST_s, \n          SECONDARY_HOST_s, \n          SERVICE_NAME_s, \n          SHIPPED_LOG_BUFFERS_SIZE_d, \n          SHIPPED_LOG_BUFFERS_DURATION_d,\n          TOTAL_WRITE_SIZE_d,\n          TOTAL_WRITE_TIME_d\n| order by DATABASE_NAME_s, HOST_s, SECONDARY_HOST_s, SERVICE_NAME_s, TimeGenerated  desc\n| extend RecordNumber = row_number(), PrevRecordNumber = row_number() -1\n;\n// The local buffer entries are by localhost and service, so averaging by host and service will remove the duplicate values (important when we select by db or host)\nlet table_localbuffer = table_hsrwithrownumbers\n| join (table_hsrwithrownumbers) \n  on $left.RecordNumber == $right.PrevRecordNumber,\n     $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n| summarize \n   WRITE_SIZE = avg(TOTAL_WRITE_SIZE_d - TOTAL_WRITE_SIZE_d1),\n   WRITE_TIME = avg(TOTAL_WRITE_TIME_d - TOTAL_WRITE_TIME_d1)\n  by  \n   TimeGenerated, \n   DATABASE_NAME_s, \n   HOST_s,\n   SERVICE_NAME_s   \n|summarize\n  Avg_local_log_buffer_troughput_mbps = avg((WRITE_SIZE  / 1024 / 1024) / (WRITE_TIME / 1000 / 1000)) \nby bin(TimeGenerated, {param_timeframe:grain})\n;\n\nlet table_shipped_buffers = table_hsrwithrownumbers\n| join (table_hsrwithrownumbers) \n  on $left.RecordNumber == $right.PrevRecordNumber,\n     $left.SERVICE_NAME_s == $right.SERVICE_NAME_s\n| summarize \n       Avg_log_buffer_shipping_throughput_mbps = avg(((SHIPPED_LOG_BUFFERS_SIZE_d - SHIPPED_LOG_BUFFERS_SIZE_d1) / 1024 / 1024) / ((SHIPPED_LOG_BUFFERS_DURATION_d - SHIPPED_LOG_BUFFERS_DURATION_d1)/ 1000 / 1000))\n  by bin(TimeGenerated, {param_timeframe:grain})\n;\n\ntable_shipped_buffers\n| join (table_localbuffer)\n  on $left.TimeGenerated == $right.TimeGenerated\n|project-away TimeGenerated1",
                                  "size": 0,
                                  "aggregation": 2,
                                  "title": "Log buffer write throughput vs. shipping throughput",
                                  "queryType": 0,
                                  "resourceType": "microsoft.operationalinsights/workspaces",
                                  "visualization": "linechart",
                                  "chartSettings": {
                                    "xAxis": "TimeGenerated",
                                    "yAxis": [
                                      "Avg_log_buffer_shipping_throughput_mbps",
                                      "Avg_local_log_buffer_troughput_mbps"
                                    ],
                                    "showLegend": true,
                                    "seriesLabelSettings": [
                                      {
                                        "seriesName": "Avg_local_log_buffer_troughput_mbps",
                                        "color": "blue"
                                      },
                                      {
                                        "seriesName": "Avg_log_buffer_shipping_throughput_mbps",
                                        "color": "green"
                                      }
                                    ],
                                    "ySettings": {
                                      "numberFormatSettings": {
                                        "unit": 47,
                                        "options": {
                                          "style": "decimal",
                                          "useGrouping": true
                                        }
                                      },
                                      "min": 0
                                    }
                                  }
                                },
                                "customWidth": "50",
                                "name": "query_logbufferwritethroughputvsshipthroughput"
                              },
                              {
                                "type": 3,
                                "content": {
                                  "version": "KqlItem/1.0",
                                  "query": "// let numberOfBuckets = 10\n// ;\nlet param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet param_target_host = \"{param_target_host}\"\n;\nlet param_source_host = \"{param_source_host}\"\n;\nlet param_service_name = \"{param_service_name}\"\n;\nlet table_systemreplication = SapHana_SystemReplication_CL\n| where SYSTEM_ID_s == param_sid\n| where TimeGenerated {param_timeframe}\n;\n// let interval = toscalar(table_systemreplication\n// | summarize interval = (max(TimeGenerated)-min(TimeGenerated)) / numberOfBuckets\n// | project floor(interval, 1m))\n// ;\ntable_systemreplication\n| where DATABASE_NAME_s == param_tenant\n| where SECONDARY_HOST_s == param_target_host or isempty(param_target_host)\n| where HOST_s == param_source_host or isempty(param_source_host)\n| where SERVICE_NAME_s == param_service_name or isempty(param_service_name)\n| summarize \n  Max_seconds_behind_master = max(TIME_DIFF_SECONDS_d)\n  by bin(TimeGenerated, {param_timeframe:grain})\n",
                                  "size": 0,
                                  "aggregation": 2,
                                  "title": "Time behind master",
                                  "queryType": 0,
                                  "resourceType": "microsoft.operationalinsights/workspaces",
                                  "visualization": "areachart",
                                  "chartSettings": {
                                    "yAxis": [
                                      "Max_seconds_behind_master"
                                    ],
                                    "seriesLabelSettings": [
                                      {
                                        "seriesName": "Max_seconds_behind_master",
                                        "label": "Seconds behind master"
                                      }
                                    ],
                                    "ySettings": {
                                      "numberFormatSettings": {
                                        "unit": 24,
                                        "options": {
                                          "style": "decimal",
                                          "useGrouping": true
                                        }
                                      }
                                    }
                                  }
                                },
                                "customWidth": "50",
                                "name": "query_secondsbehindmaster",
                                "styleSettings": {
                                  "margin": "1%"
                                }
                              },
                              {
                                "type": 3,
                                "content": {
                                  "version": "KqlItem/1.0",
                                  "query": "// let numberOfBuckets = 10\n// ;\nlet param_sid = \"{param_sid}\"\n;\nlet param_tenant = \"{param_tenant}\"\n;\nlet param_target_host = \"{param_target_host}\"\n;\nlet param_source_host = \"{param_source_host}\"\n;\nlet param_service_name = \"{param_service_name}\"\n;\nlet table_systemreplication = SapHana_SystemReplication_CL\n| where SYSTEM_ID_s == param_sid\n| where TimeGenerated {param_timeframe}\n;\n// let interval = toscalar(table_systemreplication\n// | summarize interval = (max(TimeGenerated)-min(TimeGenerated)) / numberOfBuckets\n// | project floor(interval, 1m))\n// ;\ntable_systemreplication\n| where DATABASE_NAME_s == param_tenant\n| where SECONDARY_HOST_s == param_target_host or isempty(param_target_host)\n| where HOST_s == param_source_host or isempty(param_source_host)\n| where SERVICE_NAME_s == param_service_name or isempty(param_service_name)\n| summarize \n  Max_async_buff_used_mb = max(ASYNC_BUFF_USED_MB_d)\n  by bin(TimeGenerated, {param_timeframe:grain})\n",
                                  "size": 0,
                                  "aggregation": 2,
                                  "title": "Async buffer used",
                                  "queryType": 0,
                                  "resourceType": "microsoft.operationalinsights/workspaces",
                                  "visualization": "areachart",
                                  "chartSettings": {
                                    "yAxis": [
                                      "Max_async_buff_used_mb"
                                    ],
                                    "seriesLabelSettings": [
                                      {
                                        "seriesName": "Max_seconds_behind_master",
                                        "label": "Seconds behind master"
                                      }
                                    ],
                                    "ySettings": {
                                      "numberFormatSettings": {
                                        "unit": 4,
                                        "options": {
                                          "style": "decimal",
                                          "useGrouping": true
                                        }
                                      }
                                    }
                                  }
                                },
                                "customWidth": "50",
                                "name": "query_asyncbuffer",
                                "styleSettings": {
                                  "margin": "1%"
                                }
                              }
                            ]
                          },
                          "conditionalVisibility": {
                            "parameterName": "param_tenant",
                            "comparison": "isNotEqualTo"
                          },
                          "name": "replication_graphs"
                        }
                      ]
                    },
                    "conditionalVisibilities": [
                      {
                        "parameterName": "param_tab_main",
                        "comparison": "isEqualTo",
                        "value": "4"
                      },
                      {
                        "parameterName": "param_sid",
                        "comparison": "isNotEqualTo",
                        "value": "*"
                      },
                      {
                        "parameterName": "param_check_hsrdata",
                        "comparison": "isEqualTo",
                        "value": "0"
                      }
                    ],
                    "name": "group_replication_content"
                  }
                ]
              },
              "conditionalVisibility": {
                "parameterName": "param_tab_main",
                "comparison": "isEqualTo",
                "value": "4"
              },
              "name": "group_replication"
            },
            {
              "type": 12,
              "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "items": [
                  {
                    "type": 1,
                    "content": {
                      "json": "# Parameters entry #\r\nThe following parameters can be adjusted to create a capacity prediction scenario that best suits your HANA environment. Click on the \"i\" symbol to see an explanation for each parameter. "
                    },
                    "name": "text - 10"
                  },
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "4d8431e9-ce57-4818-be13-7d682af08291",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_timeframe",
                          "label": "Timeframe",
                          "type": 4,
                          "isRequired": true,
                          "typeSettings": {
                            "selectableValues": [
                              {
                                "durationMs": 31536000000
                              },
                              {
                                "durationMs": 15811200000
                              },
                              {
                                "durationMs": 7776000000
                              },
                              {
                                "durationMs": 5184000000
                              },
                              {
                                "durationMs": 2592000000
                              }
                            ],
                            "allowCustom": true
                          },
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "value": {
                            "durationMs": 31536000000
                          }
                        }
                      ],
                      "style": "pills",
                      "queryType": 0,
                      "resourceType": "microsoft.hanaonazure/sapmonitors"
                    },
                    "customWidth": "15",
                    "conditionalVisibility": {
                      "parameterName": "param_tab_main",
                      "comparison": "isEqualTo",
                      "value": "5"
                    },
                    "name": "param-data-size-timeframe"
                  },
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "896a42f6-bfa0-4e53-be38-33469a9ef40b",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_tenants",
                          "label": "DB Tenants",
                          "type": 2,
                          "isRequired": true,
                          "multiSelect": true,
                          "quote": "'",
                          "delimiter": ",",
                          "query": "{param_sizedatasource}\r\n| where SYSTEM_ID_s == \"{param_sid}\"\r\n| summarize by DATABASE_NAME_s",
                          "typeSettings": {
                            "additionalResourceOptions": [
                              "value::all"
                            ],
                            "showDefault": false
                          },
                          "defaultValue": "value::all",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        }
                      ],
                      "style": "pills",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    "customWidth": "85",
                    "conditionalVisibility": {
                      "parameterName": "param_tab_main",
                      "comparison": "isEqualTo",
                      "value": "5"
                    },
                    "name": "tenant_selector"
                  },
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "b697dfff-fd3a-45c5-81c4-e0b01146a53d",
                          "version": "KqlParameterItem/1.0",
                          "name": "parambag_tabledata",
                          "type": 1,
                          "description": "Data derived from log analytics used across the workbook",
                          "query": "//---------------------------------------------------------\r\n// Data derived from log analytics used across the workbook\r\n//---------------------------------------------------------\r\n// inputs\r\n// Input\r\n// •\tSapHana_size01_CL\r\n// •\tSapHana_LoadHistory_CL\r\n// Output\r\n// •\tData size series, gaps linear filled\r\n// •\tmeasured data growth\r\n// •\tInterception\r\n// •\tGAL\r\n// •\tIn-mem series\r\n// •\tUsed-mem series\r\n\r\n\r\n/////////////////////// Common components////////////////////////////////////////////////\r\n// Find the first and last date for the timeframe\r\nlet startdate=todatetime(format_datetime({param_timeframe:start},'yyyy-MM-dd'));\r\nlet enddate=todatetime(format_datetime({param_timeframe:end},'yyyy-MM-dd'));\r\n// Create an array of all of the days in the timeframe\r\nlet array_allthedays=range(startdate, enddate, 1d);\r\n\r\n///////////////Total Memory Usage and Global Allocation Unit////////////////////////////////////////////////\r\n// Create a table for the GAL and total memory usage that only has data for the selected provider and timeframe\r\nlet table_loadsource=materialize({param_loadsource}\r\n| where PROVIDER_INSTANCE_s ==\"{param_provider}\"\r\n| where TimeGenerated {param_timeframe}\r\n);\r\n// Get the global Allocation limit \"GAL\" for the cluster (sum of participating node GAL's)\r\nlet GAL=toscalar(table_loadsource\r\n| summarize arg_max(TimeGenerated, *) by HOST_s\r\n| summarize GAL=sum(MEMORY_ALLOCATION_LIMIT_d)/1024\r\n);\r\n/// Create a table with the total memory used sizes over time padded with nulls for missing history and a slope/intercept for bestfit line\r\nlet table_memused=table_loadsource\r\n| summarize MEMORY_USED_GiB_d=avg(MEMORY_USED_d/1024)\r\n  by PROVIDER_INSTANCE_s, HOST_s , bin(TimeGenerated, 1d)\r\n| make-series  series_memused=sum(MEMORY_USED_GiB_d) default=double(null) on TimeGenerated  step 1d\r\n| extend memsize_firstdate=TimeGenerated[0]\r\n| extend series_memused=series_fill_linear(series_memused)\r\n| extend (rsquare,memsize_slope,variance,rvariance,memsize_interception,bestline)=series_fit_line(series_memused)\r\n| extend lgap=datetime_diff('day',todatetime(TimeGenerated[0]),startdate)\r\n| extend leadingnulls=repeat(long(null),lgap )\r\n| project id=0, series_memused=array_concat(leadingnulls,series_memused), memsize_slope, memsize_interception, memsize_firstdate, memsize_firstpos=lgap\r\n;\r\n///////////END-Total Memory Usage and Global Allocation Unit-END ////////////////////////////////////\r\n\r\n\r\n/////////////////////// Column Store Values /////////////////////////////////////////////////\r\n// Create a table to the total column store size for the selected time period, instance and tenant(s)\r\nlet table_cs_tables=materialize({param_sizedatasource}\r\n| where TABLE_NAME_s == \"ALL_TABLES\"\r\n| where TimeGenerated {param_timeframe}\r\n| where DATABASE_NAME_s in({param_tenants})\r\n);\r\n\r\n// Create a table for the Get the sizes of column data held in memory, with a straight line trend over time padded with nulls for missing history\r\nlet series_csinmemsize=toscalar(table_cs_tables\r\n| summarize MEMORY_SIZE_IN_TOTAL_GIB_d=avg(MEMORY_SIZE_IN_TOTAL_GIB_d)\r\n  by DATABASE_NAME_s, bin(TimeGenerated, 1d) \r\n| make-series  series_csinmemsize=sum(MEMORY_SIZE_IN_TOTAL_GIB_d) default=double(null) on TimeGenerated  step 1d\r\n| project TimeGenerated, series_csinmemsize=series_fill_linear(series_csinmemsize)\r\n| extend lgap=datetime_diff('day',todatetime(TimeGenerated[0]),startdate)\r\n| extend leadingnulls=repeat(long(null),lgap )\r\n| extend series_csinmemsize=array_concat(leadingnulls,series_csinmemsize)\r\n| project series_csinmemsize\r\n);\r\n\r\n// Get the total size of cs tables and project all of the above metrics as a single object for use across the workbook\r\ntable_cs_tables\r\n| summarize ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL_GIB_d=avg(ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL_GIB_d)\r\n    by DATABASE_NAME_s, bin(TimeGenerated, 1d) \r\n| make-series  series_datasize=sum(ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL_GIB_d) default=double(null) on TimeGenerated  step 1d\r\n| extend series_datasize=series_fill_linear(series_datasize)\r\n| extend (rsquare,datasize_slope,variance,rvariance,datasize_interception,bestline)=series_fit_line(series_datasize)\r\n| extend datasize_firstdate=TimeGenerated[0]\r\n| extend lgap=datetime_diff('day',todatetime(TimeGenerated[0]),startdate)\r\n| extend leadingnulls=repeat(long(null),lgap )\r\n| extend series_datasize=array_concat(leadingnulls,series_datasize)\r\n| project id=0, array_allthedays, series_datasize, series_csinmemsize, datasize_slope, datasize_interception, datasize_firstdate, datasize_firstpos=lgap, GAL\r\n| join table_memused on id\r\n| extend series_memused, memsize_slope, memsize_interception, datasize_firstdate, datasize_firstpos\r\n| project-away id1, id\r\n| project packed=pack_all()",
                          "isHiddenWhenLocked": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        {
                          "id": "f09d6c38-dfd3-42c8-8166-9d1c20d977c6",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_datapredoffset",
                          "label": "Prediction offset GiB",
                          "type": 1,
                          "description": "Adjust this value to change the prediction to adjust the prediction to take account for a planned reduction or increase in size e.g. house-keeping activity",
                          "query": "print myvalue=\"0\"\r\n",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        {
                          "id": "12fb0a54-b982-4df6-bc88-5e8815202b4c",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_datapredgrowth",
                          "label": "Data growth rate GiB/day",
                          "type": 1,
                          "description": "The growth rate calculated from the best-fit straight line. Adjust this value to change the prediction to allow for a different growth rate e.g. one that takes into account a new data lifecycle policy or planned increase in workload",
                          "query": "let myparambag=parse_json('{parambag_tabledata:escapejson}');\r\nprint Slope=round(todouble(myparambag.datasize_slope),4)",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        {
                          "id": "ed81536f-5bd1-4b25-aa9b-3c491ddb0c6a",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_gal",
                          "label": "Global Allocation Limit GiB",
                          "type": 1,
                          "description": "The Global Allocation is the maximum memory available to HANA, which is normall ~97% of the VM size.  Adjust this value to see projections based on different VM sizes",
                          "query": "// bring in the calculated values from parambag_tabledata\r\nlet myparambag=parse_json('{parambag_tabledata:escapejson}');\r\n\r\nprint GAL=round(todouble(myparambag.GAL),3)",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        {
                          "id": "5d7d3bbc-6442-4e08-b4a8-4bedf9e127ff",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_percentofgal",
                          "label": "Projected Limit line %",
                          "type": 1,
                          "description": "Sets the limit line on th graph for the growth line to plot to, typically between 50 and 75% of GAL depending on workload",
                          "query": "{\"version\":\"1.0.0\",\"content\":\"[\\\"50\\\"]\",\"transformers\":null}",
                          "queryType": 8,
                          "value": "75"
                        },
                        {
                          "id": "7b65508a-0b0a-4fa2-be05-450c0858e2b8",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_csdaysfromnow",
                          "type": 1,
                          "query": "//param_daysfromnow:\r\n// bring in the calculated values \r\nlet myparambag=parse_json('{parambag_tabledata:escapejson}');\r\nlet predfirstdate=todatetime(myparambag.datasize_firstdate);\r\n// bring in user entered values\r\nlet chosendatalimit=todouble({param_percentofgal})*todouble({param_gal})/100;\r\nlet slope=todouble({param_datapredgrowth});\r\nlet offset=todouble({param_datapredoffset});\r\nlet intercept=todouble(myparambag.datasize_interception)+offset;\r\nlet gap=chosendatalimit - intercept;\r\nlet daystofull=toint(bin(gap/slope,1));\r\nlet systemfulldate=datetime_add('day',daystofull,predfirstdate);\r\nlet daysfromnow=datetime_diff('day',systemfulldate,now());\r\nprint daysfromnow",
                          "isHiddenWhenLocked": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        {
                          "version": "KqlParameterItem/1.0",
                          "name": "param_chosendatalimit",
                          "type": 1,
                          "query": "///Parmeter for chosen limit\r\nlet chosendatalimit=todouble({param_percentofgal})*todouble({param_gal})/100;\r\nprint round(chosendatalimit,3)",
                          "isHiddenWhenLocked": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "id": "4edef144-99db-45ea-b505-11ada9a8d56a"
                        },
                        {
                          "version": "KqlParameterItem/1.0",
                          "name": "param_csfulldate",
                          "type": 1,
                          "query": "//param_datasystemfull\r\n// bring in the calculated values \r\nlet myparambag=parse_json('{parambag_tabledata:escapejson}');\r\nlet predfirstdate=todatetime(myparambag.datasize_firstdate);\r\n// bring in user entered values\r\nlet chosendatalimit=todouble({param_percentofgal})*todouble({param_gal})/100;\r\nlet slope=todouble({param_datapredgrowth});\r\nlet offset=todouble({param_datapredoffset});\r\nlet intercept=todouble(myparambag.datasize_interception)+offset;\r\nlet gap=chosendatalimit - intercept;\r\nlet daystofull=toint(bin(gap/slope,1));\r\nlet systemfulldate=format_datetime(datetime_add('day',daystofull,predfirstdate),'MM-yyyy');\r\nprint systemfulldate",
                          "isHiddenWhenLocked": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "id": "9fe7a7d7-e990-482e-ab5b-a9a177833e46"
                        },
                        {
                          "version": "KqlParameterItem/1.0",
                          "name": "param_memdaysfromnow",
                          "type": 1,
                          "query": "// bring in the calculated values from parambag_tabledata\r\nlet myparambag=parse_json('{parambag_tabledata:escapejson}');\r\nlet daysintimegrame={param_timeframe:seconds}/60/60/24;\r\nlet gal=todouble({param_gal});\r\nlet slope=todouble(myparambag.memsize_slope);\r\nlet intercept=todouble(myparambag.memsize_interception);\r\nlet firstpos=toint(myparambag.memsize_firstpos);\r\nlet leadingnulls=repeat(long(null),firstpos );\r\n// Make the bestfit line based on the slope and intercept\r\nlet predfirstdate=todatetime(myparambag.memsize_firstdate);\r\nlet gap=gal - intercept;\r\nlet daystofullfromorigin=toint(bin(gap/slope,1));\r\nlet systemfulldate=datetime_add('day',daystofullfromorigin,predfirstdate);\r\nlet daysfromnow=datetime_diff('day',systemfulldate,now());\r\nprint daysfromnow",
                          "isHiddenWhenLocked": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "id": "29241abb-67dc-49a9-839d-a250ba6f53d7"
                        },
                        {
                          "version": "KqlParameterItem/1.0",
                          "name": "param_memfulldate",
                          "type": 1,
                          "query": "// bring in the calculated values from parambag_tabledata\r\nlet myparambag=parse_json('{parambag_tabledata:escapejson}');\r\nlet daysintimegrame={param_timeframe:seconds}/60/60/24;\r\nlet gal=todouble({param_gal});\r\nlet slope=todouble(myparambag.memsize_slope);\r\nlet intercept=todouble(myparambag.memsize_interception);\r\nlet firstpos=toint(myparambag.memsize_firstpos);\r\nlet leadingnulls=repeat(long(null),firstpos );\r\n// Make the bestfit line based on the slope and intercept\r\nlet predfirstdate=todatetime(myparambag.memsize_firstdate);\r\nlet gap=gal - intercept;\r\nlet daystofullfromorigin=toint(bin(gap/slope,1));\r\nlet systemfulldate=datetime_add('day',daystofullfromorigin,predfirstdate);\r\nlet daysfromnow=datetime_diff('day',systemfulldate,now());\r\nprint format_datetime(systemfulldate,'MM-yyyy')",
                          "isHiddenWhenLocked": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "id": "71e4876b-9d75-46a1-a95d-e98d0a9d8bc6"
                        }
                      ],
                      "style": "formHorizontal",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    "customWidth": "30",
                    "name": "UserParams",
                    "styleSettings": {
                      "margin": "0px",
                      "padding": "0px",
                      "showBorder": true
                    }
                  },
                  {
                    "type": 1,
                    "content": {
                      "json": ""
                    },
                    "customWidth": "70",
                    "name": "text - 15"
                  },
                  {
                    "type": 1,
                    "content": {
                      "json": "\r\n## <b style=\"color:DodgerBlue;\"> Columnar data will reach chosen limit in </b> {param_csdaysfromnow} days, on {param_csfulldate} </b>",
                      "style": "info"
                    },
                    "customWidth": "50",
                    "name": "CSdataPreditcionText"
                  },
                  {
                    "type": 1,
                    "content": {
                      "json": "## <b style=\"color:DodgerBlue;\"> Total Memory consumption will reach global allocation limit in </b>{param_memdaysfromnow} days, on ({param_memfulldate})",
                      "style": "info"
                    },
                    "customWidth": "50",
                    "name": "MemoryPredictionText"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "// bring in the calculated values from parambag_tabledata\r\nlet myparambag=parse_json('{parambag_tabledata:escapejson}');\r\nlet slope=todouble({param_datapredgrowth});\r\nlet offset=todouble({param_datapredoffset});\r\nlet daysintimeframe={param_timeframe:seconds}/60/60/24;\r\nlet chosendatalimit=todouble({param_percentofgal})*todouble({param_gal})/100;\r\nlet series_csdatasize_nopad=myparambag.series_datasize;\r\nlet intercept=todouble(myparambag.datasize_interception)+offset;\r\nlet timestamps=myparambag.array_allthedays ;\r\nlet firstpos=toint(myparambag.datasize_firstpos);\r\nlet lastpos=daysintimeframe-firstpos;\r\nlet leadingnulls=repeat(long(null),daysintimeframe );\r\n// Make the bestfit line based on the slope and intercept\r\nlet predfirstdate=todatetime(myparambag.datasize_firstdate);\r\nlet gap=chosendatalimit - intercept;\r\nlet daystofull_uncapped=toint(bin(gap/slope,1));\r\nlet daystofull=min_of(daystofull_uncapped,toint(datetime_diff('day',now(183d),predfirstdate)));\r\nlet systemfulldate=datetime_add('day',daystofull,predfirstdate);\r\nlet lastdatetoplot=todatetime(timestamps[array_length(timestamps) -1]);\r\nlet datestoaddd=range(datetime_add('day',1,lastdatetoplot), systemfulldate, 1d);\r\nlet sampledates=array_concat(timestamps,datestoaddd);\r\n// Create lists as long as the prediction\r\nlet series_gal=repeat(todouble({param_gal}),array_length(sampledates));\r\nlet series_chosendatalimit=repeat(chosendatalimit,array_length(sampledates));\r\nlet rpadding=repeat(long(null), array_length(datestoaddd));\r\nlet series_csdatasize=array_concat(series_csdatasize_nopad,rpadding);\r\nlet plotfrom=daysintimeframe-firstpos;\r\n\r\n//print firstpos, daystofull, plotfrom, daysintimeframe\r\n//create prediction line and plot others against it\r\nrange x from lastpos to daystofull step 1\r\n| project bestfit=slope*x+intercept\r\n| summarize make_list(bestfit)\r\n| project \r\n    sampledates,\r\n    ColumnDataSize=series_csdatasize, \r\n    ColumnDataPrediction=array_concat(leadingnulls,list_bestfit),\r\n    GlobalAllocationLimit=series_gal, \r\n    PredictionLimitLine=series_chosendatalimit",
                      "size": 0,
                      "aggregation": 2,
                      "title": "Column Data Size",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "timechart",
                      "sortBy": [],
                      "chartSettings": {
                        "xAxis": "sampledates",
                        "showLegend": true,
                        "seriesLabelSettings": [
                          {
                            "seriesName": "GlobalAllocationLimit",
                            "color": "redBright"
                          },
                          {
                            "seriesName": "ColumnDataSize",
                            "color": "blueDark"
                          },
                          {
                            "seriesName": "ColumnDataPrediction",
                            "color": "green"
                          },
                          {
                            "seriesName": "PredictionLimitLine",
                            "color": "orange"
                          }
                        ],
                        "ySettings": {
                          "numberFormatSettings": {
                            "unit": 5,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          },
                          "min": 0
                        }
                      },
                      "mapSettings": {
                        "locInfo": "LatLong",
                        "sizeSettings": "Data-Prediction",
                        "sizeAggregation": "Sum",
                        "legendMetric": "Data-Prediction",
                        "legendAggregation": "Sum",
                        "itemColorSettings": {
                          "type": "heatmap",
                          "colorAggregation": "Sum",
                          "nodeColorField": "Data-Prediction",
                          "heatmapPalette": "greenRed"
                        }
                      }
                    },
                    "customWidth": "50",
                    "name": "datasizechart"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "// bring in the calculated values from parambag_tabledata\nlet myparambag=parse_json('{parambag_tabledata:escapejson}');\nlet offset=todouble({param_datapredoffset});\nlet daysintimeframe={param_timeframe:seconds}/60/60/24;\nlet gal=todouble({param_gal});\nlet slope=todouble(myparambag.memsize_slope);\nlet series_memsize_nopad=myparambag.series_memsize;\nlet intercept=todouble(myparambag.memsize_interception);\nlet timestamps=myparambag.array_allthedays ;\nlet firstpos=toint(myparambag.memsize_firstpos);\nlet lastpos=daysintimeframe-firstpos;\nlet leadingnulls=repeat(long(null),daysintimeframe );\n// Make the bestfit line based on the slope and intercept\nlet predfirstdate=todatetime(myparambag.memsize_firstdate);\nlet gap=gal - intercept;\nlet daystofull_uncapped=toint(bin(gap/slope,1));\nlet daystofull=min_of(daystofull_uncapped,toint(datetime_diff('day',now(183d),predfirstdate)));\nlet systemfulldate=datetime_add('day',daystofull,predfirstdate);\nlet lastdatetoplot=todatetime(timestamps[array_length(timestamps) -1]);\nlet datestoaddd=range(datetime_add('day',1,lastdatetoplot), systemfulldate, 1d);\nlet sampledates=array_concat(timestamps,datestoaddd);\n// Create lists as long as the prediction\nlet series_gal=repeat(gal,array_length(sampledates));\nlet rpadding=repeat(long(null), array_length(datestoaddd));\nlet plotfrom=daysintimeframe-firstpos;\n\n//create prediction line and plot others against it\nrange x from lastpos to daystofull step 1\n| project bestfit=slope*x+intercept\n| summarize make_list(bestfit)\n| project sampledates,\n          GlobalAllocationLimitForInstance=series_gal,\n          ColumnDataSizeForTenantSelection=array_concat(myparambag.series_datasize,rpadding),\n          ColumnsLoadedForTenantSelection=array_concat(myparambag.series_csinmemsize,rpadding),\n          TotalMemoryUsedByInstance=array_concat(myparambag.series_memused,rpadding),\n          PredictedMemoryUseByInstance=array_concat(leadingnulls,list_bestfit)",
                      "size": 0,
                      "aggregation": 2,
                      "title": "Memory statistics (Sum of all nodes in system)",
                      "showExportToExcel": true,
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "linechart",
                      "sortBy": [],
                      "chartSettings": {
                        "showLegend": true,
                        "seriesLabelSettings": [
                          {
                            "seriesName": "GlobalAllocationLimitForInstance",
                            "color": "redBright"
                          },
                          {
                            "seriesName": "ColumnDataSizeForTenantSelection",
                            "color": "blueDark"
                          },
                          {
                            "seriesName": "ColumnsInMemoryForTenantSelection",
                            "color": "lightBlue"
                          },
                          {
                            "seriesName": "TotalMemoryUsedByInstance",
                            "color": "magenta"
                          },
                          {
                            "seriesName": "MemoryUsePredictionForInstance",
                            "color": "pink"
                          }
                        ],
                        "ySettings": {
                          "numberFormatSettings": {
                            "unit": 5,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      },
                      "mapSettings": {
                        "locInfo": "LatLong",
                        "sizeSettings": "Data-Prediction",
                        "sizeAggregation": "Sum",
                        "legendMetric": "Data-Prediction",
                        "legendAggregation": "Sum",
                        "itemColorSettings": {
                          "type": "heatmap",
                          "colorAggregation": "Sum",
                          "nodeColorField": "Data-Prediction",
                          "heatmapPalette": "greenRed"
                        }
                      }
                    },
                    "customWidth": "50",
                    "name": "In-memgraph"
                  },
                  {
                    "type": 9,
                    "content": {
                      "version": "KqlParameterItem/1.0",
                      "parameters": [
                        {
                          "id": "acf5030b-9416-4295-96a8-0534549b8b67",
                          "version": "KqlParameterItem/1.0",
                          "name": "param_rowlimit",
                          "type": 1,
                          "query": "{\"version\":\"1.0.0\",\"content\":\"[2000000000]\",\"transformers\":null}",
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 8
                        }
                      ],
                      "style": "above",
                      "queryType": 8
                    },
                    "conditionalVisibility": {
                      "parameterName": "param_nevereset",
                      "comparison": "isEqualTo",
                      "value": "999"
                    },
                    "name": "row_limit_test"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let Rows_Per_Partition_Max = {param_rowlimit};\r\nlet warningthreshold = 365;\r\nlet table_HANA_Size={param_sizedatasource}\r\n| where SYSTEM_ID_s == \"{param_sid}\"\r\n| where DATABASE_NAME_s in({param_tenants})\r\n| extend Rows_Per_Partition=RECORDS_d/PARTITION_COUNT_d\r\n| extend Rows_Until_Max=Rows_Per_Partition_Max-Rows_Per_Partition\r\n| where TimeGenerated {param_timeframe}\r\n;\r\n// Retrieve the time of the last posted data per tenant and table\r\nlet table_HANA_Size_LastPost=table_HANA_Size\r\n| summarize arg_max(TimeGenerated, *) by DATABASE_NAME_s, TABLE_NAME_s\r\n;\r\n\r\n// Get the first date we have data for\r\nlet timerange_from=toscalar(table_HANA_Size\r\n| summarize min(TimeGenerated)\r\n);\r\n\r\n// Calculate the totals for tables across all tenants (sum of the ALL_TABLES values)\r\nlet total_tables_size = toscalar(table_HANA_Size_LastPost\r\n| where TABLE_NAME_s == \"ALL_TABLES\"\r\n|summarize \r\n    total_cs_size=sum(ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL_GIB_d), \r\n    total_loaded_size=sum(MEMORY_SIZE_IN_TOTAL_GIB_d)\r\n| project pack_all()\r\n);\r\n\r\n// Calculate growth rate (slope of series)\r\ntable_HANA_Size\r\n| where TABLE_NAME_s <> \"ALL_TABLES\"\r\n| make-series Rows_Series=max(Rows_Per_Partition)\r\n    default=long(null)\r\n    on TimeGenerated\r\n    from timerange_from to {param_timeframe:end} step 1d\r\n    by DATABASE_NAME_s, TABLE_NAME_s\r\n| extend Rows_Series = series_fill_linear(Rows_Series)\r\n| extend (RSquare,Rows_Per_Day,Variance,RVariance,Interception,BestFit)=series_fit_line(Rows_Series)\r\n| join table_HANA_Size_LastPost on $left.DATABASE_NAME_s==$right.DATABASE_NAME_s, $left.TABLE_NAME_s==$right.TABLE_NAME_s\r\n| order by ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL_GIB_d\r\n| extend Rank=row_number()\r\n| extend Days_Until_Max=round((Rows_Until_Max/Rows_Per_Day),0)\r\n| extend MaxDate=format_datetime(datetime_add('Day',toint(Days_Until_Max),now()), 'yyyy-MM-dd')\r\n| extend Rows_Status=iif(Rows_Per_Day<=0,\"\",\r\n                        iif(Days_Until_Max>warningthreshold, \"\", strcat(\"WARNING:2 Billion partition row limit reached by \",MaxDate))\r\n                        )\r\n| extend TablePart=strcat(TABLE_NAME_s, \":[\", toint(PARTITION_COUNT_d),\"]\")\r\n| limit 10\r\n| project \r\n    Rank, \r\n    TenantDB=DATABASE_NAME_s, \r\n    TableName=TABLE_NAME_s,\r\n    TablePart,\r\n    TableRows=RECORDS_d, \r\n    DataSize=ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL_GIB_d,\r\n    LoadedSize=MEMORY_SIZE_IN_TOTAL_GIB_d, \r\n    PercTotalCSSize=100*ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL_GIB_d/total_tables_size.total_cs_size, \r\n    PercTotalLoaded=100*MEMORY_SIZE_IN_TOTAL_GIB_d/total_tables_size.total_loaded_size, \r\n    Rows_Per_Day,\r\n    Rows_Series,\r\n    Rows_Status",
                      "size": 0,
                      "exportedParameters": [
                        {
                          "fieldName": "TenantDB",
                          "parameterName": "param_Tenant",
                          "parameterType": 1
                        },
                        {
                          "fieldName": "TableName",
                          "parameterName": "param_TableName",
                          "parameterType": 1
                        }
                      ],
                      "showExportToExcel": true,
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "TableName",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "TableRows",
                            "formatter": 0,
                            "numberFormat": {
                              "unit": 0,
                              "options": {
                                "style": "decimal",
                                "useGrouping": true
                              }
                            }
                          },
                          {
                            "columnMatch": "DataSize",
                            "formatter": 0,
                            "numberFormat": {
                              "unit": 5,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "maximumFractionDigits": 2
                              }
                            }
                          },
                          {
                            "columnMatch": "LoadedSize",
                            "formatter": 0,
                            "numberFormat": {
                              "unit": 5,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 2
                              }
                            }
                          },
                          {
                            "columnMatch": "PercTotalCSSize",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "blue",
                              "customColumnWidthSetting": "96px"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "PercTotalLoaded",
                            "formatter": 4,
                            "formatOptions": {
                              "palette": "lightBlue",
                              "customColumnWidthSetting": "146px"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 1
                              }
                            }
                          },
                          {
                            "columnMatch": "Rows_Per_Day",
                            "formatter": 0,
                            "formatOptions": {
                              "customColumnWidthSetting": "28ch"
                            },
                            "numberFormat": {
                              "unit": 0,
                              "options": {
                                "style": "decimal",
                                "useGrouping": true,
                                "maximumFractionDigits": 0
                              }
                            }
                          },
                          {
                            "columnMatch": "Rows_Series",
                            "formatter": 9,
                            "formatOptions": {
                              "palette": "blue"
                            }
                          },
                          {
                            "columnMatch": "Rows_Status",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "icons",
                              "thresholdsGrid": [
                                {
                                  "operator": "startsWith",
                                  "thresholdValue": "WARNING",
                                  "representation": "2",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "representation": "Blank",
                                  "text": "{0}{1}"
                                }
                              ],
                              "customColumnWidthSetting": "58ch"
                            }
                          }
                        ],
                        "sortBy": [
                          {
                            "itemKey": "Rank",
                            "sortOrder": 1
                          }
                        ],
                        "labelSettings": [
                          {
                            "columnId": "Rank"
                          },
                          {
                            "columnId": "TenantDB"
                          },
                          {
                            "columnId": "TableName"
                          },
                          {
                            "columnId": "TablePart",
                            "label": "Table:[Partition Count]"
                          },
                          {
                            "columnId": "TableRows",
                            "label": "Row Count"
                          },
                          {
                            "columnId": "DataSize",
                            "label": "Data Size"
                          },
                          {
                            "columnId": "LoadedSize",
                            "label": "Loaded data"
                          },
                          {
                            "columnId": "PercTotalCSSize",
                            "label": "% of total size"
                          },
                          {
                            "columnId": "PercTotalLoaded",
                            "label": "% of all loaded"
                          },
                          {
                            "columnId": "Rows_Per_Day",
                            "label": "Daily row growth"
                          },
                          {
                            "columnId": "Rows_Series",
                            "label": "Row count"
                          },
                          {
                            "columnId": "Rows_Status",
                            "label": "Row Size Limit Status"
                          }
                        ]
                      },
                      "sortBy": [
                        {
                          "itemKey": "Rank",
                          "sortOrder": 1
                        }
                      ]
                    },
                    "name": "query - 16"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let table_HANA_Size_Detail={param_sizedatasource}\n| where DATABASE_NAME_s == \"{param_Tenant}\"\n| where TABLE_NAME_s == \"{param_TableName}\"\n| where TimeGenerated {param_timeframe}\n| extend TableRowLimit=PARTITION_COUNT_d*{param_rowlimit}\n;\n\nlet timerange_from=toscalar(table_HANA_Size_Detail\n| summarize min(TimeGenerated)\n);\n\nlet series_tablerowlimit=toscalar(table_HANA_Size_Detail\n| make-series series_tablerowlimit = max(TableRowLimit) default=double(null)\n   on TimeGenerated\n   from timerange_from to {param_timeframe:end} step 1d\n| extend series_tablerowlimit = series_fill_linear(series_tablerowlimit)\n);\n\ntable_HANA_Size_Detail\n| make-series HANA_Size_Series = max(RECORDS_d) default=double(null)\n    on TimeGenerated\n    from timerange_from to {param_timeframe:end} step 1d\n| extend HANA_Size_Series = series_fill_linear(HANA_Size_Series)\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(HANA_Size_Series)\n| project TimeGenerated, \n    BestFitLine=LineFit, \n    RowsInTable=HANA_Size_Series, \n     TableRowLimit=series_tablerowlimit    ",
                      "size": 0,
                      "aggregation": 2,
                      "title": "Number of Rows for Table {param_TableName} ({param_Tenant}) (Limit = 2B* No of Partitions)",
                      "showExportToExcel": true,
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "linechart",
                      "chartSettings": {
                        "showLegend": true,
                        "seriesLabelSettings": [
                          {
                            "seriesName": "TableRowLimit",
                            "color": "redBright"
                          },
                          {
                            "seriesName": "BestFitLine",
                            "color": "lightBlue"
                          },
                          {
                            "seriesName": "RowsInTable",
                            "color": "blueDark"
                          }
                        ],
                        "ySettings": {
                          "min": 0
                        }
                      }
                    },
                    "customWidth": "50",
                    "conditionalVisibility": {
                      "parameterName": "param_TableName",
                      "comparison": "isNotEqualTo"
                    },
                    "name": "Query_Top_Tables_Detail_by_Rows"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let table_HANA_Size_Detail={param_sizedatasource}\n| where DATABASE_NAME_s == \"{param_Tenant}\"\n| where TABLE_NAME_s == \"{param_TableName}\"\n| where TimeGenerated {param_timeframe}\n;\n\nlet timerange_from=toscalar(table_HANA_Size_Detail\n| summarize min(TimeGenerated)\n);\n\nlet series_datasize=toscalar(table_HANA_Size_Detail\n| make-series series_datasize = max(ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL_GIB_d) default=double(null)\n    on TimeGenerated\n    from timerange_from to {param_timeframe:end} step 1d\n| project series_datasize = series_fill_linear(series_datasize)\n);\n\n\ntable_HANA_Size_Detail\n| make-series series_memsize = max(MEMORY_SIZE_IN_TOTAL_GIB_d) default=double(null)\n    on TimeGenerated\n    from timerange_from to {param_timeframe:end} step 1d\n| extend series_memsize = series_fill_linear(series_memsize)\n| extend (RSquare,Slope,Variance,RVariance,Interception,series_linefit)=series_fit_line(series_memsize)\n| project TimeGenerated, \n    LoadedTrendLine=series_linefit,\n    LoadedData=series_memsize,\n    DataSize=series_datasize",
                      "size": 0,
                      "aggregation": 2,
                      "title": "Table size vs loaded size for Table {param_TableName} ({param_Tenant})",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "linechart",
                      "chartSettings": {
                        "showLegend": true,
                        "seriesLabelSettings": [
                          {
                            "seriesName": "LineFit",
                            "label": "In Memory Trend",
                            "color": "lightBlue"
                          },
                          {
                            "seriesName": "HANA_Size_Series",
                            "label": "In Memory Actual",
                            "color": "blueDark"
                          },
                          {
                            "seriesName": "LoadedTrendLine",
                            "color": "purple"
                          }
                        ],
                        "ySettings": {
                          "numberFormatSettings": {
                            "unit": 5,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          },
                          "min": 0
                        }
                      }
                    },
                    "customWidth": "50",
                    "conditionalVisibility": {
                      "parameterName": "param_TableName",
                      "comparison": "isNotEqualTo"
                    },
                    "name": "Query_Top_Tables_Detail_by_Memory"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let table_HANA_Disks={param_diskdatasource}\n| where PROVIDER_INSTANCE_s == \"{param_provider}\"\n| where TimeGenerated {param_timeframe}\n;\nlet table_HANA_Disks_Utilisation=table_HANA_Disks\n| summarize UsedSize = avg(USED_SIZE_d)/1024/1024/1024, UsedSizeMax = max(USED_SIZE_d)/1024/1024/1024, TotalSize = max(TOTAL_SIZE_d)/1024/1024/1024 by HOST_s,PATH_s, USAGE_TYPE_s\n| extend PercUsed = UsedSize*100/TotalSize\n| project HOST_s, USAGE_TYPE_s, PATH_s, UsedSize = round(UsedSize,2), UsedSizeMax = round(UsedSizeMax,2), TotalSize = round(TotalSize,2), PercUsed\n;\nlet table_HANA_Disks_Series=table_HANA_Disks\n| make-series HANA_Disks_Series = max(USED_SIZE_d) default=double(null) on TimeGenerated from {param_timeframe:start} to {param_timeframe:end} step {param_timeframe:grain} by HOST_s, PATH_s\n| extend Trend = series_fill_linear(HANA_Disks_Series)\n;\ntable_HANA_Disks_Utilisation\n| join table_HANA_Disks_Series on $left.HOST_s==$right.HOST_s, $left.PATH_s==$right.PATH_s\n| extend HostName=HOST_s, FullPath=PATH_s\n| project HostName, USAGE_TYPE_s, FullPath, PercUsed, UsedSize, UsedSizeMax, TotalSize, Trend\n| order by PercUsed\n;",
                      "size": 1,
                      "title": "HANA File Systems",
                      "exportedParameters": [
                        {
                          "fieldName": "FullPath",
                          "parameterName": "param_FullPath"
                        },
                        {
                          "fieldName": "HostName",
                          "parameterName": "param_HostName",
                          "parameterType": 1
                        }
                      ],
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "table",
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "PercUsed",
                            "formatter": 8,
                            "formatOptions": {
                              "palette": "greenRed"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "useGrouping": false,
                                "maximumFractionDigits": 2
                              }
                            }
                          },
                          {
                            "columnMatch": "UsedSize",
                            "formatter": 5,
                            "numberFormat": {
                              "unit": 2,
                              "options": {
                                "style": "decimal"
                              }
                            }
                          },
                          {
                            "columnMatch": "TotalSize",
                            "formatter": 22,
                            "formatOptions": {
                              "compositeBarSettings": {
                                "labelText": "[\"UsedSize\"] GB out of [\"TotalSize\"] GB is used",
                                "columnSettings": [
                                  {
                                    "columnName": "UsedSize",
                                    "color": "redBright"
                                  },
                                  {
                                    "columnName": "UsedSizeMax",
                                    "color": "yellow"
                                  },
                                  {
                                    "columnName": "TotalSize",
                                    "color": "green"
                                  }
                                ]
                              }
                            },
                            "numberFormat": {
                              "unit": 36,
                              "options": {
                                "style": "decimal"
                              }
                            }
                          },
                          {
                            "columnMatch": "Trend",
                            "formatter": 9,
                            "formatOptions": {
                              "palette": "redBright"
                            }
                          }
                        ],
                        "labelSettings": [
                          {
                            "columnId": "HostName",
                            "label": "Host"
                          },
                          {
                            "columnId": "USAGE_TYPE_s",
                            "label": "Usage"
                          },
                          {
                            "columnId": "FullPath",
                            "label": "Path"
                          },
                          {
                            "columnId": "PercUsed",
                            "label": "Average Utilization"
                          },
                          {
                            "columnId": "UsedSize",
                            "label": "Used Size"
                          },
                          {
                            "columnId": "UsedSizeMax",
                            "label": "Maximum Used"
                          },
                          {
                            "columnId": "TotalSize",
                            "label": "Statistics"
                          },
                          {
                            "columnId": "Trend",
                            "label": "Used Size Trendline"
                          }
                        ]
                      },
                      "sortBy": [],
                      "chartSettings": {
                        "xAxis": "TimeGenerated",
                        "group": "PATH_s",
                        "createOtherGroup": null,
                        "ySettings": {
                          "numberFormatSettings": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          }
                        }
                      }
                    },
                    "name": "Query_HANA_FIle_Systems"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "let table_HANA_Disks_Detail={param_diskdatasource}\n| where PROVIDER_INSTANCE_s == \"{param_provider}\"\n| where HOST_s == \"{param_HostName}\"\n| where PATH_s == \"{param_FullPath}\"\n| where TimeGenerated {param_timeframe}\n;\n\nlet timerange_from=toscalar(\ntable_HANA_Disks_Detail\n| summarize min(TimeGenerated)\n);\n\n\nlet series_maxsize=toscalar(\ntable_HANA_Disks_Detail\n| make-series series_maxsize=max(TOTAL_SIZE_d) default=double(null)\non TimeGenerated\n    from timerange_from to {param_timeframe:end} step 1d\n);\n\ntable_HANA_Disks_Detail\n| make-series series_dailymax=max(USED_SIZE_d) default=double(null)\non TimeGenerated\n    from timerange_from to {param_timeframe:end} step 1d\n| extend series_dailymax = series_fill_linear(series_dailymax)\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(series_dailymax) \n| project   \n    TimeGenerated, \n    DailMaxSize=series_dailymax,\n    BestFitLine=LineFit,\n    FileSystemLimit=series_maxsize\n\n",
                      "size": 0,
                      "aggregation": 3,
                      "title": "Details for HANA File System {param_FullPath} on Host {param_HostName}",
                      "queryType": 0,
                      "resourceType": "microsoft.operationalinsights/workspaces",
                      "visualization": "linechart",
                      "chartSettings": {
                        "xAxis": "TimeGenerated",
                        "showLegend": true,
                        "seriesLabelSettings": [
                          {
                            "seriesName": "FileSystemLimit",
                            "color": "redBright"
                          },
                          {
                            "seriesName": "DailMaxSize",
                            "color": "blueDark"
                          },
                          {
                            "seriesName": "BestFitLine",
                            "color": "lightBlue"
                          }
                        ],
                        "ySettings": {
                          "numberFormatSettings": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true
                            }
                          },
                          "min": 0
                        }
                      },
                      "mapSettings": {
                        "locInfo": "LatLong",
                        "sizeSettings": "Data-Prediction",
                        "sizeAggregation": "Sum",
                        "legendMetric": "Data-Prediction",
                        "legendAggregation": "Sum",
                        "itemColorSettings": {
                          "type": "heatmap",
                          "colorAggregation": "Sum",
                          "nodeColorField": "Data-Prediction",
                          "heatmapPalette": "greenRed"
                        }
                      }
                    },
                    "customWidth": "75",
                    "conditionalVisibilities": [
                      {
                        "parameterName": "param_tab_main",
                        "comparison": "isEqualTo",
                        "value": "5"
                      },
                      {
                        "parameterName": "param_FullPath",
                        "comparison": "isNotEqualTo"
                      }
                    ],
                    "name": "Query_HANA_File_Systems_Detail"
                  }
                ]
              },
              "conditionalVisibilities": [
                {
                  "parameterName": "param_tab_main",
                  "comparison": "isEqualTo",
                  "value": "5"
                },
                {
                  "parameterName": "param_sid",
                  "comparison": "isNotEqualTo",
                  "value": "*"
                }
              ],
              "name": "group_data_size"
            }
          ]
        },
        "conditionalVisibility": {
          "parameterName": "param_sid",
          "comparison": "isNotEqualTo",
          "value": "*"
        },
        "name": "group_details"
      }
    ],
    "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
  }