{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "## Azure Monitor for SAP Solutions on SAP NetWeaver\n---"
      },
      "name": "Workbook Title"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "2c886879-e271-4da3-801c-c932bc075074",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_table_exists",
            "type": 1,
            "query": "let checktable = (tb:string)\r\n{\r\n// 0 = no error\r\n// 1 = table does not exist (need to enable RFC)\r\n// 2 = table exists, but column v1 does not (or) column v1 exists but no data in the table (need to wait)\r\nlet c1 = \"SID_s\";\r\nlet dummy = \"unmÃ¶glicher-wert!\";\r\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\r\nlet checkRecords =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(tb)\r\n      | summarize records = count()\r\n    )\r\n  | project records\r\n  | top 1 by records desc\r\n;\r\nlet checkTableExists =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(tb)\r\n      | count\r\n      | extend miss = 0\r\n    )\r\n  | project miss\r\n  | limit 2\r\n  | top 1 by miss asc\r\n;\r\nlet checkColumnExists =\r\n  union\r\n    isfuzzy=true MissingTable,\r\n    (table(tb)\r\n      | extend miss = 0\r\n      | extend columnV1 = column_ifexists(c1, dummy)\r\n    )\r\n  | project miss, columnV1\r\n  | limit 2\r\n  | top 1 by miss asc\r\n ;\r\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\r\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\r\nlet tableRecords = toscalar(checkRecords | summarize max(records));\r\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\r\ntoscalar(x)\r\n};\r\nlet system = checktable('SapNetweaver_GetSystemInstanceList_CL');\r\nlet enqueue = checktable('SapNetweaver_EnqGetStatistic_CL');\r\nlet queue = checktable('SapNetweaver_GetQueueStatistic_CL');\r\nlet process = checktable('SapNetweaver_GetProcessList_CL');\r\nlet abap = checktable('SapNetweaver_ABAPGetWPTable_CL');\r\nlet swnc = checktable('SapNetweaver_SWNC_CL');\r\nlet sdump = checktable('SapNetweaver_ShortDumps_CL');\r\nlet smon = checktable('SapNetweaver_SMON_CL');\r\n//rfc v1.3 tables\r\nlet enqread = checktable('SapNetweaver_EnqueueRead_CL');\r\nlet inboundq = checktable('SapNetweaver_InboundQueues_CL');\r\nlet outboundq = checktable('SapNetweaver_OutboundQueues_CL');\r\nlet batchjob = checktable('SapNetweaver_BatchJobs_CL');\r\nlet failedupdate = checktable('SapNetweaver_FailedUpdates_CL');\r\nlet syslog = checktable('SapNetweaver_SysLogs_CL');\r\nlet T = datatable(tablename:string, id:string)\r\n[\r\n'SapNetweaver_SMON_CL', '',\r\n];\r\nT\r\n|project tablename\r\n| extend new_col = strcat('SapNetweaver_SMON_CL:',smon,\r\n',SapNetweaver_ShortDumps_CL:',sdump,\r\n',SapNetweaver_SWNC_CL:',swnc,\r\n',SapNetweaver_GetSystemInstanceList_CL:',system,',SapNetweaver_GetQueueStatistic_CL:',queue,\r\n',SapNetweaver_EnqGetStatistic_CL:',enqueue,\r\n',SapNetweaver_GetProcessList_CL:',process,\r\n',SapNetweaver_ABAPGetWPTable_CL:',abap,\r\n',SapNetweaver_EnqueueRead_CL:',enqread,\r\n',SapNetweaver_InboundQueues_CL:',inboundq,\r\n',SapNetweaver_OutboundQueues_CL:',outboundq,\r\n',SapNetweaver_BatchJobs_CL:',batchjob,\r\n',SapNetweaver_FailedUpdates_CL:',failedupdate,\r\n',SapNetweaver_SysLogs_CL:',syslog)\r\n|project-away tablename",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "aa8ab18f-5d36-4f34-8a54-f0f2e25ecbb8",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to add provider)\n// 2 = table exists, but column v1 does not (need to wait)\nlet t = \"SapNetweaver_GetSystemInstanceList_CL\";\nlet tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_GetSystemInstanceList_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_GetSystemInstanceList_CL:1'), \"1\",\n                             ((tableList) contains 'SapNetweaver_GetSystemInstanceList_CL:2'),\"2\",\"2\");print toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "225baab0-e4ce-4a45-92de-ddda00795a2d",
            "version": "KqlParameterItem/1.0",
            "name": "param_ams_resource",
            "type": 5,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.hanaonazure/sapmonitors": true
              },
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "defaultValue": "value::1"
          },
          {
            "id": "92bd4772-a480-4a10-a48d-fecfd54bb22f",
            "version": "KqlParameterItem/1.0",
            "name": "param_providers_list",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{param_ams_resource}/providerInstances/\",\"urlParams\":[{\"key\":\"api-version\",\"value\":\"2020-02-07-preview\"},{\"key\":\"pageLimit\",\"value\":\"1000\"}],\"batchDisabled\":false,\"transformers\":null}",
            "queryType": 12
          },
          {
            "id": "a00ff9e0-9235-4aa2-b617-933d7977bdb6",
            "version": "KqlParameterItem/1.0",
            "name": "param_provider_type",
            "type": 1,
            "value": "SapNetweaver",
            "isHiddenWhenLocked": true
          },
          {
            "id": "979c1ab9-90e4-4b19-9c58-7c1f96c38754",
            "version": "KqlParameterItem/1.0",
            "name": "param_alert_templates",
            "type": 1,
            "value": "[\r\n    {\r\n        \"name\": \"SAP Netweaver System Availability\",\r\n        \"description\": \"Fired when SAP NetWeaver Message Server is not available or all servers are not available.\",\r\n        \"author\": \"Microsoft\",\r\n        \"templateId\": \"sapnetweaver-system-availability\",\r\n        \"severity\": \"1\",\r\n        \"alertTemplate\": {\r\n            \"query\": \"let TotalInstanceAvailability = SapNetweaver_GetSystemInstanceList_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 1, 0) | summarize available=countif(Status == 1), total=count() by PROVIDER_INSTANCE_s, serverTimestamp_t;TotalInstanceAvailability | join kind = leftouter SapNetweaver_GetSystemInstanceList_CL on $left.PROVIDER_INSTANCE_s == $right.PROVIDER_INSTANCE_s and $left.serverTimestamp_t == $right.serverTimestamp_t | extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 1, 0) | extend ServiceStatus = iff(available == 0, 0, iff(features_s contains 'MESSAGESERVER' and Status == 0, 0, 1)), AppServer = strcat(hostname_s, '_', tostring(toint(instanceNr_d))) | summarize AggregatedValue = min(ServiceStatus) by bin(TimeGenerated, 1m), PROVIDER_INSTANCE_s, AppServer, dispstatus_s, serverTimestamp_t, features_s | where AggregatedValue == 0\",\r\n            \"thresholdOperator\": \"LessThan\",\r\n            \"defaultThreshold\": \"1\",\r\n            \"metricMeasurement\": {\r\n                \"thresholdOperator\": \"GreaterThan\",\r\n                \"threshold\": \"1\",\r\n                \"metricTriggerType\": \"Consecutive\",\r\n                \"metricColumn\": \"PROVIDER_INSTANCE_s\",\r\n                \"frequencyInMinutes\": \"5\",\r\n                \"timeWindowInMinutes\": \"10\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"SAP Netweaver Instance Availability\",\r\n        \"description\": \"Fired when SAP Netweaver ABAP, J2EE, JEE instances are not available.\",\r\n        \"author\": \"Microsoft\",\r\n        \"templateId\": \"sapnetweaver-instance-availability\",\r\n        \"severity\": \"2\",\r\n        \"alertTemplate\": {\r\n            \"query\": \"let TotalInstanceAvailability = SapNetweaver_GetSystemInstanceList_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 1, 0) | summarize available=countif(Status == 1), total=count() by PROVIDER_INSTANCE_s, serverTimestamp_t; TotalInstanceAvailability | join kind = leftouter SapNetweaver_GetSystemInstanceList_CL on $left.PROVIDER_INSTANCE_s == $right.PROVIDER_INSTANCE_s and $left.serverTimestamp_t == $right.serverTimestamp_t | where features_s contains 'J2EE' or features_s contains 'JEE' or features_s contains 'ABAP' | extend InstanceStatus = iff(available != 0 and dispstatus_s == 'SAPControl-GREEN', 1, 0), AppServer = strcat(hostname_s, '_', tostring(toint(instanceNr_d))) | summarize AggregatedValue = min(InstanceStatus) by bin(TimeGenerated, 1m), PROVIDER_INSTANCE_s, AppServer, dispstatus_s, serverTimestamp_t, features_s | where AggregatedValue == 0\",\r\n            \"thresholdOperator\": \"LessThan\",\r\n            \"defaultThreshold\": \"1\",\r\n            \"metricMeasurement\": {\r\n                \"thresholdOperator\": \"GreaterThan\",\r\n                \"threshold\": \"1\",\r\n                \"metricTriggerType\": \"Consecutive\",\r\n                \"metricColumn\": \"PROVIDER_INSTANCE_s\",\r\n                \"frequencyInMinutes\": \"5\",\r\n                \"timeWindowInMinutes\": \"10\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"SAP Netweaver EnqueueServer Availability\",\r\n        \"description\": \"Fired when SAP Netweaver EnqueueServer is not available.\",\r\n        \"author\": \"Microsoft\",\r\n        \"templateId\": \"sapnetweaver-enqueue-server\",\r\n        \"severity\": \"2\",\r\n        \"alertTemplate\": {\r\n            \"query\": \"SapNetweaver_GetProcessList_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and description_s contains 'EnqueueServer' | extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 1, 0), AppServer = strcat(hostname_s, '_', tostring(toint(instanceNr_d))) | summarize AggregatedValue = min(Status) by bin(TimeGenerated, 1m), PROVIDER_INSTANCE_s, AppServer, dispstatus_s, description_s, serverTimestamp_t | where AggregatedValue == 0\",\r\n            \"thresholdOperator\": \"LessThan\",\r\n            \"defaultThreshold\": \"1\",\r\n            \"metricMeasurement\": {\r\n                \"thresholdOperator\": \"GreaterThan\",\r\n                \"threshold\": \"1\",\r\n                \"metricTriggerType\": \"Consecutive\",\r\n                \"metricColumn\": \"PROVIDER_INSTANCE_s\",\r\n                \"frequencyInMinutes\": \"5\",\r\n                \"timeWindowInMinutes\": \"10\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"SAP Netweaver EnqueueReplicationServer Availability\",\r\n        \"description\": \"Fired when SAP Netweaver EnqueueReplicationServer is not available.\",\r\n        \"author\": \"Microsoft\",\r\n        \"templateId\": \"sapnetweaver-enqueue-replicator-server\",\r\n        \"severity\": \"2\",\r\n        \"alertTemplate\": {\r\n            \"query\": \"SapNetweaver_GetProcessList_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' and description_s contains 'EnqueueReplicator' | extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 1, 0), AppServer = strcat(hostname_s, '_', tostring(toint(instanceNr_d))) | summarize AggregatedValue = min(Status) by bin(TimeGenerated, 1m), PROVIDER_INSTANCE_s, AppServer, dispstatus_s, description_s, serverTimestamp_t | where AggregatedValue == 0\",\r\n            \"thresholdOperator\": \"LessThan\",\r\n            \"defaultThreshold\": \"1\",\r\n            \"metricMeasurement\": {\r\n                \"thresholdOperator\": \"GreaterThan\",\r\n                \"threshold\": \"1\",\r\n                \"metricTriggerType\": \"Consecutive\",\r\n                \"metricColumn\": \"PROVIDER_INSTANCE_s\",\r\n                \"frequencyInMinutes\": \"5\",\r\n                \"timeWindowInMinutes\": \"10\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"SAP Netweaver Instance Work Process Utilization\",\r\n        \"description\": \"Fired when SAP Netweaver Instance with DIA or BTC Usage breaches specified threshold.\",\r\n        \"author\": \"Microsoft\",\r\n        \"templateId\": \"sapnetweaver-instance-work-process-utilization\",\r\n        \"severity\": \"2\",\r\n        \"alertTemplate\": {\r\n            \"query\": \"SapNetweaver_ABAPGetWPTable_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | where Typ_s has '{Aggregate}' | summarize totalWP = count(), freeWP = countif(Status_s == 'Wait') by TimeGenerated, Typ_s, serverTimestamp_t, AppServer = strcat(hostname_s, '_', tostring(toint(instanceNr_d))) | extend UtilizationPctWP = round(toreal(totalWP - freeWP) / toreal(totalWP) * 100, 3) | summarize AggregatedValue = max(UtilizationPctWP) by bin(TimeGenerated, 1m), AppServer, Typ_s, serverTimestamp_t | where AggregatedValue > {AlertThreshold}\",\r\n            \"aggregateName\": \"WorkType\",\r\n            \"aggregateDropDownQuery\": \"SapNetweaver_ABAPGetWPTable_CL | where Typ_s has 'DIA' or Typ_s has 'BTC' | distinct Typ_s\",\r\n            \"thresholdOperator\": \"GreaterThan\",\r\n            \"defaultThreshold\": \"70\",\r\n            \"alertUnit\": \"percent\",\r\n            \"metricMeasurement\": {\r\n                \"thresholdOperator\": \"GreaterThan\",\r\n                \"threshold\": \"2\",\r\n                \"metricTriggerType\": \"Consecutive\",\r\n                \"metricColumn\": \"AppServer\",\r\n                \"frequencyInMinutes\": \"5\",\r\n                \"timeWindowInMinutes\": \"10\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"SAP Netweaver Instance Queue Wait\",\r\n        \"description\": \"Fired when SAP Netweaver Instance with DIA or BTC Queue Wait breaches specified threshold.\",\r\n        \"author\": \"Microsoft\",\r\n        \"templateId\": \"sapnetweaver-instance-queue-wait\",\r\n        \"severity\": \"2\",\r\n        \"alertTemplate\": {\r\n            \"query\": \"SapNetweaver_GetQueueStatistic_CL | where PROVIDER_INSTANCE_s == '{ProviderInstance}' | where Typ_s has '{Aggregate}' | summarize QueueLimit=max(Max_d)/7 by hostname_s, instanceNr_d, Typ_s, serverTimestamp_t, Now_d, TimeGenerated | extend QueueWaitPct = iff(QueueLimit != 0, (toreal(Now_d) / toreal(QueueLimit)) * 100, 0.0), AppServer = strcat(hostname_s, '_', tostring(toint(instanceNr_d))) | summarize AggregatedValue = max(QueueWaitPct) by bin(TimeGenerated, 1m), AppServer, Typ_s, serverTimestamp_t | where AggregatedValue > {AlertThreshold}\",\r\n            \"aggregateName\": \"WorkType\",\r\n            \"aggregateDropDownQuery\": \"SapNetweaver_GetQueueStatistic_CL | where Typ_s has 'DIA' or Typ_s has 'BTC' | distinct Typ_s\",\r\n            \"thresholdOperator\": \"GreaterThan\",\r\n            \"defaultThreshold\": \"5\",\r\n            \"alertUnit\": \"percent\",\r\n            \"metricMeasurement\": {\r\n                \"thresholdOperator\": \"GreaterThan\",\r\n                \"threshold\": \"2\",\r\n                \"metricTriggerType\": \"Consecutive\",\r\n                \"metricColumn\": \"AppServer\",\r\n                \"frequencyInMinutes\": \"5\",\r\n                \"timeWindowInMinutes\": \"10\"\r\n            }\r\n        }\r\n    }\r\n]",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "multiLineText": true,
              "editorLanguage": "text",
              "multiLineHeight": 10
            }
          },
          {
            "id": "7edfe64b-6cd1-4a0d-8808-6a02faf6820d",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_version",
            "type": 1,
            "query": "let versionExist = iff(toscalar(SapNetweaver_GetSystemInstanceList_CL | distinct SAPMON_VERSION_s | extend SAPMON_VERSION_s = iff(strlen(SAPMON_VERSION_s) == 3, strcat(split(SAPMON_VERSION_s, \".\")[0], \".\", strcat(\"0\", split(SAPMON_VERSION_s, \".\")[1])), SAPMON_VERSION_s) | where todouble(SAPMON_VERSION_s) >= 2.15| count ) > 0, \"0\", \"1\");\r\nprint versionExist",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "90bcea9a-3fcb-4f45-b88c-98782c711569",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_rfc_metrics",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = iff (((tableList) contains 'SapNetweaver_Short_Dumps_CL:0') or \n                           ((tableList) contains 'SapNetweaver_SMON_CL:0') or \n                           ((tableList) contains 'SapNetweaver_SWNC_CL:0') or\n                           ((tableList) contains 'SapNetweaver_EnqueueRead_CL:0') or\n                           ((tableList) contains 'SapNetweaver_BatchJobs_CL:0') or\n                           ((tableList) contains 'SapNetweaver_FailedUpdates_CL:0') or\n                           ((tableList) contains 'SapNetweaver_SysLogs_CL:0') or\n                           ((tableList) contains 'SapNetweaver_InboundQueues_CL:0') or\n                           ((tableList) contains 'SapNetweaver_OutboundQueues_CL:0'), \"0\", \"1\");\nprint toscalar(tableListValue)",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "dummy_neverset",
        "comparison": "isNotEqualTo"
      },
      "name": "overview_section_params"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Please add the SAP NetWeaver provider to view this workbook.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "NoProviderError"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "09b7cbce-8782-46bf-b1af-02ebf80071b1",
                  "version": "KqlParameterItem/1.0",
                  "name": "param_check_provider_error",
                  "type": 1,
                  "query": "print allProviders=parse_json(tostring(\"{param_providers_list:escapejson}\")).value\r\n| mv-expand allProviders\r\n| extend type=parse_json(allProviders.properties).type\r\n| extend state=parse_json(allProviders.properties).provisioningState\r\n| where type==\"SapNetweaver\"\r\n| where state!=\"Failed\"\r\n| summarize iff(count() > 0,count(), -1)",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.hanaonazure/sapmonitors"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.hanaonazure/sapmonitors"
            },
            "name": "ProviderParameter"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "IngestionError"
          },
          {
            "type": 1,
            "content": {
              "json": "There was an error while adding the SAP NetWeaver provider. Please reach out to support for further assistance.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "param_check_error",
                "comparison": "isEqualTo",
                "value": "0"
              },
              {
                "parameterName": "param_check_provider_error",
                "comparison": "isEqualTo",
                "value": "-1"
              }
            ],
            "name": "ProviderFailure"
          }
        ]
      },
      "name": "overview_group_error"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "1f9002cb-36a6-4dff-8ade-a86b9394a3ff",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_queuestatistics",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_GetQueueStatistic_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_GetQueueStatistic_CL:1'), \"1\",\n                             ((tableList) contains 'SapNetweaver_GetQueueStatistic_CL:2'),\"2\",\"3\");print toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2b9aff63-5047-4c0f-bd8b-612790daf309",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_enqgetstatistics",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_EnqGetStatistic_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_EnqGetStatistic_CL:1'), \"1\",\n                             ((tableList) contains 'SapNetweaver_EnqGetStatistic_CL:2'),\"2\",\"2\");print toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a134306b-a79f-4df5-ba11-940c1f56d836",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_abapwp",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_ABAPGetWPTable_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_ABAPGetWPTable_CL:1'), \"1\",\n                             ((tableList) contains 'SapNetweaver_ABAPGetWPTable_CL:2'),\"2\",\"2\");print toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "87833d8d-b023-4ccc-95af-8ab1d11223f7",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_systeminstancelist",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_GetSystemInstanceList_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_GetSystemInstanceList_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_GetSystemInstanceList_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "c5b1e8a0-0321-4058-9f9f-73c24177e5d4",
            "version": "KqlParameterItem/1.0",
            "name": "pram_check_processlist",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_GetProcessList_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_GetProcessList_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_GetProcessList_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a4281d63-4bdb-48f3-8b91-8bffc69c2701",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_swnc",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_SWNC_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_SWNC_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_SWNC_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "cc0d1c26-c8c2-4d38-aa91-aac907ce4d4e",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_smon",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_SMON_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_SMON_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_SMON_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "50d932ae-0a86-4e9b-b183-b14fcf6e401c",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_sdump",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_ShortDumps_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_ShortDumps_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_ShortDumps_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a31e2711-8cb7-4408-9606-8b40429b528f",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_enqread",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_EnqueueRead_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_EnqueueRead_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_EnqueueRead_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "42c423f1-c67b-402f-a8ef-68c5d1f7467a",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_inbound_queue",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_InboundQueues_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_InboundQueues_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_InboundQueues_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "d4209b99-84cf-4175-a368-42e44397f961",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_outbound_queue",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_OutboundQueues_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_OutboundQueues_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_OutboundQueues_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "6765c648-3fa9-46d8-8d1f-8f74859e35fb",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_batchjobs",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_BatchJobs_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_BatchJobs_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_BatchJobs_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "92513bbc-5343-4c22-8036-e3fa3fe674d1",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_failedupdates",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_FailedUpdates_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_FailedUpdates_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_FailedUpdates_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "44dec127-8ff2-434e-a75d-e609fc562d50",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_syslogs",
            "type": 1,
            "query": "let tableList = '{param_check_table_exists}';\nlet tableListValue = case(((tableList) contains 'SapNetweaver_SysLogs_CL:0'), \"0\",\n                            ((tableList) contains 'SapNetweaver_SysLogs_CL:1'),\"1\",\n                             ((tableList) contains 'SapNetweaver_SysLogs_CL:2'),\"2\",\"2\");\nprint toscalar(tableListValue);",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "dummy_neverset",
        "comparison": "isNotEqualTo"
      },
      "name": "GlobalParameters"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "id": "2d20d63e-d352-46e8-bcb0-9ca9ce897996",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Alerts",
            "style": "primary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/SapMonitor/Alerts/Alerts",
              "typeSource": "workbook",
              "gallerySource": "workbook",
              "locationSource": "default",
              "passSpecificParams": true,
              "templateParameters": [
                {
                  "name": "ProviderType",
                  "source": "parameter",
                  "value": "param_provider_type"
                },
                {
                  "name": "AlertTemplates",
                  "source": "parameter",
                  "value": "param_alert_templates"
                }
              ]
            }
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_version",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_provider_error",
          "comparison": "isNotEqualTo",
          "value": "-1"
        }
      ],
      "name": "Alert Button Step"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "810c5c3b-c12c-4ecc-a875-a7135a34af90",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "id": "2fcffdc4-ba32-4d94-82c9-69b0e90a3f04",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Availability",
            "subTarget": "Availability",
            "style": "link"
          },
          {
            "id": "bd309ce8-c389-493f-961f-6fc4cfd718dd",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Performance",
            "subTarget": "Performance",
            "style": "link"
          },
          {
            "id": "e844d4f7-2017-4360-824f-4ac26e8a941d",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Enqueue Statistics",
            "subTarget": "EnqueueStatistics",
            "style": "link"
          },
          {
            "id": "718a2865-1736-41f9-91fe-b0084ecd795d",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Queue Statistics",
            "subTarget": "QueueStatistics",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_provider_error",
          "comparison": "isNotEqualTo",
          "value": "-1"
        },
        {
          "parameterName": "param_check_rfc_metrics",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "Main Navigation Links"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "c69bbaf6-d2a9-4ebf-8985-a14e22643035",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "id": "3d052c5d-65d8-4462-83ae-375b5c7f65c6",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Availability",
            "subTarget": "Availability",
            "style": "link"
          },
          {
            "id": "8e505b33-7bc1-427b-9d1c-4998942e885e",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Performance",
            "subTarget": "Performance",
            "style": "link"
          },
          {
            "id": "7c7d7b69-c644-4744-a3b4-6027d942036c",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Workload Statistics",
            "subTarget": "WorkloadStatistics",
            "style": "link"
          },
          {
            "id": "0e04320b-60b3-463a-afc2-ff6546e574c7",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Application",
            "subTarget": "Application",
            "style": "link"
          },
          {
            "id": "6a312e51-76b6-4afc-a948-1f22094c392e",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Enqueue Statistics",
            "subTarget": "EnqueueStatistics",
            "style": "link"
          },
          {
            "id": "0155da79-79b5-4e35-91d3-3aeb2ac640e8",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Queue Statistics",
            "subTarget": "QueueStatistics",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_provider_error",
          "comparison": "isNotEqualTo",
          "value": "-1"
        },
        {
          "parameterName": "param_check_rfc_metrics",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Main Navigation Links - RFC"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "aa8ab18f-5d36-4f34-8a54-f0f2e25ecbb8",
            "version": "KqlParameterItem/1.0",
            "name": "SelectedTab",
            "type": 1,
            "query": "let selMenu = dynamic(\"{selectedMenu}\");\nlet selMenuRFC = dynamic(\"{selectedMenuRFC}\");\nlet rfcCheckParam = dynamic(\"{param_check_rfc_metrics}\");\nlet selTabValue = case(selMenu == \"Overview\", \"Overview\", \n                        selMenu == \"Availability\", \"Availability\" ,\n                        selMenu == \"Performance\", \"Performance\" , \n                        selMenu == \"WorkloadStatistics\", \"WorkloadStatistics\" , \n                        selMenu == \"EnqueueStatistics\", \"EnqueueStatistics\" ,\n                        selMenu == \"QueueStatistics\", \"QueueStatistics\",    \n                        \"\");\nlet selTabRFCValue = case(selMenuRFC == \"Overview\", \"Overview\", \n                          selMenuRFC == \"Availability\", \"Availability\" ,\n                          selMenuRFC == \"Utilization\", \"Utilization\" , \n                          selMenuRFC == \"EnqueueStatistics\", \"EnqueueStatistics\" ,\n                          selMenuRFC == \"QueueStatistics\", \"QueueStatistics\" ,\n                          selMenuRFC == \"Application\", \"Application\" ,\n                          selMenuRFC == \"WorkloadStatistics\", \"WorkloadStatistics\" ,\n                          selMenuRFC == \"Performance\", \"Performance\" ,\n                            \"\");    \n\nlet chooseTab = iff((rfcCheckParam == 0),selTabRFCValue, selTabValue);\nprint toscalar(chooseTab);\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "dummy_neverset",
        "comparison": "isNotEqualTo"
      },
      "name": "SelectedTabParameter"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "ccee9c3e-3680-4f30-91f7-b53705ab19cf",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": {
              "durationMs": 1800000
            }
          },
          {
            "id": "c3a0f233-017a-4db7-accf-771525491be4",
            "version": "KqlParameterItem/1.0",
            "name": "SID",
            "type": 2,
            "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where isnotempty(SID_s)\r\n| distinct SID_s",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "defaultValue": "value::1",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "71edfc3a-35c4-4aa0-ae7b-1756cee46705",
            "version": "KqlParameterItem/1.0",
            "name": "ApplicationServer",
            "label": "Application Server",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| where SID_s == '{SID}'\r\n| distinct SID_s, hostname_s, instanceNr_s\r\n| project AppServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| distinct AppServer",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isNotEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isNotEqualTo",
          "value": "WorkloadStatistics"
        }
      ],
      "name": "Utilization Parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "loadType": "always",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let extractColumn = dynamic(['UTC Timestamp', 'Server Timestamp']);\r\nSapNetweaver_GetSystemInstanceList_CL\r\n| summarize ['UTC Timestamp'] = max(timestamp_t), ['Server Timestamp'] = max(serverTimestamp_t)\r\n| project properties = pack_all()\r\n| mv-apply name = extractColumn to typeof(string) on \r\n(\r\n    project name, value=properties[name]\r\n)\r\n| project-away properties",
              "size": 3,
              "title": "Current Status Updated At",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "value",
                  "formatter": 6,
                  "dateFormat": {
                    "showUtcTime": true,
                    "formatName": "fullDateTimePattern"
                  }
                },
                "subtitleContent": {
                  "columnMatch": "name",
                  "formatter": 1
                },
                "showBorder": false,
                "size": "auto"
              }
            },
            "name": "OverviewStatusDate"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "d18c71f4-04b3-4042-b8fb-b5cf3889cad1",
                  "cellValue": "valueSubTab",
                  "linkTarget": "parameter",
                  "linkLabel": "By SID",
                  "subTarget": "BySID",
                  "style": "link"
                },
                {
                  "id": "fdff6bdb-cbf1-4d88-a956-040063eb0a69",
                  "cellValue": "valueSubTab",
                  "linkTarget": "parameter",
                  "linkLabel": "By Application Server",
                  "subTarget": "ByApplicationServer",
                  "style": "link"
                }
              ]
            },
            "name": "OverviewNavigationLinks"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n\\t{ \\\"Status\\\": \\\"Available\\\", \\\"Color\\\": 0 },\\r\\n\\t{ \\\"Status\\\": \\\"Not Functional\\\", \\\"Color\\\": 1 },\\r\\n\\t{ \\\"Status\\\": \\\"Error\\\", \\\"Color\\\": 2 },\\r\\n\\t{ \\\"Status\\\": \\\"Offline\\\", \\\"Color\\\": 3 },\\r\\n\\t{ \\\"Status\\\": \\\"Status Updated 5 Minutes Earlier\\\", \\\"Color\\\": 4 }\\r\\n\\r\\n]\",\"transformers\":null}",
              "size": 4,
              "title": "Chart Legend",
              "queryType": 8,
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 5
                },
                "leftContent": {
                  "columnMatch": "Status",
                  "formatter": 2,
                  "formatOptions": {
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": [
                        {
                          "columnName": "Color",
                          "color": "blue"
                        }
                      ]
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Color",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "colors",
                    "thresholdsGrid": [
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "representation": "green",
                        "text": ""
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "1",
                        "representation": "yellow",
                        "text": ""
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "2",
                        "representation": "red",
                        "text": ""
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "3",
                        "representation": "gray",
                        "text": ""
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "4",
                        "representation": "grayBlue",
                        "text": ""
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "blue",
                        "text": ""
                      }
                    ]
                  }
                },
                "showBorder": false,
                "size": "auto"
              }
            },
            "name": "Status Legend"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ranked = SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t > ago(14d)\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| project instanceNr_d, hostname_s, serverTimestamp_t, features_s, dispstatus_s, SID_s\r\n| extend Status = case(dispstatus_s == 'SAPControl-GREEN', \"Available\", \r\n                       dispstatus_s == 'SAPControl-RED', \"Error\", \r\n                       dispstatus_s == 'SAPControl-GRAY', \"Offline\",\r\n                       dispstatus_s == 'SAPControl-YELLOW', \"Not Functional\",\r\n                       \"\")\r\n| extend Status = iff(serverTimestamp_t > ago(5m), Status, \"Status Updated 5 mins earlier\")\r\n| extend Rank = case(dispstatus_s == 'SAPControl-GREEN', 2, \r\n                       dispstatus_s == 'SAPControl-RED', 0, \r\n                       dispstatus_s == 'SAPControl-GRAY', 3,\r\n                       dispstatus_s == 'SAPControl-YELLOW', 1,0)                       \r\n| sort by SID_s, Rank asc\r\n| serialize ;\r\nranked\r\n| project dispstatus_s, SID_s, serverTimestamp_t, Status \r\n| summarize arg_max(serverTimestamp_t, * ) by SID_s\r\n\r\n",
                    "size": 0,
                    "title": "SAP NetWeaver Availability Status By SID.",
                    "exportFieldName": "SID_s",
                    "exportParameterName": "selectedSID",
                    "exportDefaultValue": "*",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "graph",
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "SID_s",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "[\"Status\"]"
                        }
                      },
                      "nodeIdField": "SID_s",
                      "graphOrientation": 3,
                      "showOrientationToggles": false,
                      "nodeSize": null,
                      "staticNodeSize": 70,
                      "colorSettings": {
                        "nodeColorField": "Status",
                        "type": 3,
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "Available",
                            "representation": "green"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Not Functional",
                            "representation": "yellow"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Error",
                            "representation": "red"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Offline",
                            "representation": "gray"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Status Updated 5 mins earlier",
                            "representation": "grayBlue"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null
                          }
                        ]
                      },
                      "hivesMargin": 5
                    }
                  },
                  "name": "Current Status by SID",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t > ago(15m)\r\n| where SID_s == '{selectedSID}' or '*' == '{selectedSID}'\r\n| project-away hostname_s, instanceNr_d\r\n| extend Status = case(dispstatus_s == 'SAPControl-GREEN', 0,\r\n                        dispstatus_s == 'SAPControl-YELLOW', 1,\r\n                        dispstatus_s == 'SAPControl-RED', 2,3 )\r\n| summarize availability=countif(Status == 0), total=count() by SID_s, timestamp_t\r\n| extend availabilityPct = round(toreal(availability) / toreal(total) * 100, 3)\r\n| summarize availability=sum(availability), total=sum(total), availabilityTrend=make_list(availabilityPct) by SID_s\r\n| extend availability = round(toreal(availability) / toreal(total) * 100, 3)\r\n| project-away total",
                    "size": 3,
                    "title": "Availability Trend",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "SID_s",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "10%"
                          }
                        },
                        {
                          "columnMatch": "availability",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blueDark",
                            "aggregation": "Unique",
                            "customColumnWidthSetting": "20%"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "availabilityTrend",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "green",
                            "customColumnWidthSetting": "75%"
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"availability\"]"
                          }
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "SID_s",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "SID_s",
                          "label": "SAP System"
                        },
                        {
                          "columnId": "availability",
                          "label": "Availability Over 15 Minutes"
                        },
                        {
                          "columnId": "availabilityTrend",
                          "label": "Trend"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "SID_s",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "name": "Availability Percentage by SID - 15 minutes"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "SapNetweaver_GetProcessList_CL\r\n| project Instance_Process = description_s, SID_s, hostname_s, instanceNr_d, dispstatus_s, serverTimestamp_t\r\n| where serverTimestamp_t > ago(15m)\r\n| where SID_s == '{selectedSID}' or '*' == '{selectedSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| extend Status = case(dispstatus_s == 'SAPControl-GREEN', 0,\r\n                        dispstatus_s == 'SAPControl-YELLOW', 1,\r\n                        dispstatus_s == 'SAPControl-RED', 2,3 )\r\n| summarize Availability=countif(Status == 0), total=count() , failureCount=countif(Status != 0) by Instance_Process, serverTimestamp_t, SID_s\r\n| extend availabilityPct = round(((toreal(total) - toreal(failureCount)) / toreal(total)) * 100, 3)\r\n| summarize Availability=sum(Availability), total=sum(total), AvailabilityTrend=make_list(availabilityPct) by Instance_Process, SID_s\r\n| extend Availability = round(toreal(Availability) / toreal(total) * 100, 3)\r\n| project-away total\r\n",
                    "size": 0,
                    "title": "Process Availability by SID",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Instance_Process",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "10%"
                          }
                        },
                        {
                          "columnMatch": "SID_s",
                          "formatter": 5,
                          "formatOptions": {
                            "customColumnWidthSetting": "10%"
                          }
                        },
                        {
                          "columnMatch": "Availability",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blueDark",
                            "customColumnWidthSetting": "15%"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 3
                            }
                          }
                        },
                        {
                          "columnMatch": "AvailabilityTrend",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "green",
                            "customColumnWidthSetting": "75%"
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"availability\"]"
                          }
                        },
                        {
                          "columnMatch": "Process",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "10%"
                          }
                        },
                        {
                          "columnMatch": "availability",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blueDark",
                            "aggregation": "Unique",
                            "customColumnWidthSetting": "20%"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "availabilityTrend",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "green",
                            "customColumnWidthSetting": "75%"
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"availability\"]"
                          }
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SID_s"
                        ],
                        "expandTopLevel": true
                      },
                      "labelSettings": [
                        {
                          "columnId": "Instance_Process",
                          "label": "Process"
                        },
                        {
                          "columnId": "SID_s",
                          "label": "SID"
                        },
                        {
                          "columnId": "Availability",
                          "label": "Availability by SID"
                        },
                        {
                          "columnId": "AvailabilityTrend",
                          "label": "Availability Trend"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "conditionalVisibility": {
                    "parameterName": "pram_check_processlist",
                    "comparison": "isEqualTo",
                    "value": "0"
                  },
                  "name": "Process Availability Status by SID"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "valueSubTab",
              "comparison": "isEqualTo",
              "value": "BySID"
            },
            "name": "sidCurrentStatus"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "1665c0a1-800a-4d7a-baf7-1e6057d1813a",
                        "version": "KqlParameterItem/1.0",
                        "name": "selectedSID",
                        "label": "SID",
                        "type": 2,
                        "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t > ago(14d)\r\n| project SID_s\r\n| distinct SID_s",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::1"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::1",
                        "timeContext": {
                          "durationMs": 86400000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "SID parameters - Availability Status"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ranked = SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t > ago(14d)\r\n| where SID_s == '{selectedSID}'\r\n| project instanceNr_d, hostname_s, serverTimestamp_t, features_s, dispstatus_s, SID_s\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend feature_label = iff(features_s has \"ABAP\", \"ABAP\", \"\")\r\n| extend feature_label = iff(features_s has \"J2EE\", \"J2EE\", feature_label)\r\n| extend feature_label = iff(features_s has \"ENQUE\", \"Enqueue Server\", feature_label)\r\n| extend Status = case(dispstatus_s == 'SAPControl-GREEN', \"Available\", \r\n                       dispstatus_s == 'SAPControl-RED', \"Error\", \r\n                       dispstatus_s == 'SAPControl-GRAY', \"Offline\",\r\n                       dispstatus_s == 'SAPControl-YELLOW', \"Not Functional\",\r\n                       \"\")\r\n| extend Status = iff(serverTimestamp_t > ago(5m), Status, \"Status Updated 5 mins earlier\")\r\n| extend appServer = strcat( hostname_s, \"_\", instanceNr_s)\r\n| extend Rank = case(dispstatus_s == 'SAPControl-GREEN', 2, \r\n                       dispstatus_s == 'SAPControl-RED', 0, \r\n                       dispstatus_s == 'SAPControl-GRAY', 3,\r\n                       dispstatus_s == 'SAPControl-YELLOW', 1,\r\n                       0)                       \r\n| sort by SID_s, Rank asc\r\n| serialize ;\r\nranked\r\n| project dispstatus_s, SID_s, serverTimestamp_t, Status, appServer,feature_label,instanceNr_d,hostname_s\r\n| summarize arg_max(serverTimestamp_t, * ) by appServer, SID_s",
                    "size": 0,
                    "title": "SAP NetWeaver Availability Status by Application Server.",
                    "noDataMessage": "Please select a SID to view status.",
                    "exportedParameters": [
                      {
                        "fieldName": "hostname_s",
                        "parameterName": "selectedHostname",
                        "parameterType": 1,
                        "defaultValue": "*"
                      },
                      {
                        "fieldName": "instanceNr_d",
                        "parameterName": "selectedInstanceNr",
                        "parameterType": 1,
                        "defaultValue": "*"
                      },
                      {
                        "fieldName": "SID_s",
                        "parameterName": "selectedSID",
                        "parameterType": 1,
                        "defaultValue": "*"
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "graph",
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "columnMatch": "SID_s",
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "appServer",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "[\"Status\"]"
                        }
                      },
                      "bottomContent": {
                        "columnMatch": "feature_label"
                      },
                      "nodeIdField": "appServer",
                      "graphOrientation": 3,
                      "showOrientationToggles": false,
                      "nodeSize": null,
                      "staticNodeSize": 100,
                      "colorSettings": {
                        "nodeColorField": "Status",
                        "type": 3,
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "Available",
                            "representation": "green"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Not Functional",
                            "representation": "yellow"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Error",
                            "representation": "red"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Offline",
                            "representation": "gray"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Status Updated 5 mins earlier",
                            "representation": "grayBlue"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null
                          }
                        ]
                      },
                      "hivesMargin": 5
                    }
                  },
                  "name": "Current Status By AppServer",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "SapNetweaver_GetProcessList_CL\r\n| project Instance_Process = description_s, SID_s, hostname_s, instanceNr_d, dispstatus_s, serverTimestamp_t\r\n| where serverTimestamp_t > ago(15m)\r\n| where SID_s == '{selectedSID}'\r\n| where hostname_s == '{selectedHostname}'\r\n| where instanceNr_d == '{selectedInstanceNr}'\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 0, 1)\r\n| summarize total=count(), failureCount=countif(Status != 0) by Instance_Process, serverTimestamp_t\r\n| extend Availability = round(((toreal(total) - toreal(failureCount)) / toreal(total)) * 100, 2)\r\n| summarize Availability = avg(Availability), AvailabilityTrend = make_list(Availability) by Instance_Process",
                    "size": 1,
                    "title": "Process Availability (Last 15 mins)",
                    "noDataMessage": "No processes available for selected App Server.",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Availability",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blue",
                            "customColumnWidthSetting": "15%"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "AvailabilityTrend",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "green",
                            "customColumnWidthSetting": "75ch"
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"Availability\"]"
                          }
                        },
                        {
                          "columnMatch": "total",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "failureCount",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Overall Availability %",
                          "formatter": 5,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"failureCount\"] of [\"total\"] mins unhealthy",
                              "columnSettings": [
                                {
                                  "columnName": "AvailableProcess",
                                  "color": "green"
                                },
                                {
                                  "columnName": "failureCount",
                                  "color": "redDark"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "AvailableProcess",
                          "formatter": 5
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Instance_Process",
                          "label": "Instance Label"
                        },
                        {
                          "columnId": "AvailabilityTrend",
                          "label": "Availability Trend"
                        }
                      ]
                    }
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "selectedSID",
                      "comparison": "isNotEqualTo",
                      "value": "*"
                    },
                    {
                      "parameterName": "selectedHostname",
                      "comparison": "isNotEqualTo",
                      "value": "*"
                    }
                  ],
                  "name": "Process Availability Status"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "valueSubTab",
              "comparison": "isEqualTo",
              "value": "ByApplicationServer"
            },
            "name": "applicationServerOverview"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_provider_error",
          "comparison": "isNotEqualTo",
          "value": "-1"
        },
        {
          "parameterName": "pram_check_processlist",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Overview"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Status = case(dispstatus_s == 'SAPControl-GREEN', 0,\r\n                        dispstatus_s == 'SAPControl-YELLOW', 1,\r\n                        dispstatus_s == 'SAPControl-RED', 2,3 );\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize availability=countif(Status == 0), total=count() by bin(serverTimestamp_t, timespanInterval), SID_s\r\n| extend availability = (availability / total) * 100\r\n| project-away total",
              "size": 0,
              "aggregation": 3,
              "title": "Availability Status Trend",
              "color": "green",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "chartSettings": {
                "xAxis": "serverTimestamp_t",
                "yAxis": [
                  "availability"
                ],
                "group": "SID_s",
                "createOtherGroup": 0,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  },
                  "min": 0,
                  "max": 100
                }
              }
            },
            "name": "AvailabilityTrend"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_GetProcessList_CL\r\n| project Instance_Process = description_s, SID_s, hostname_s, instanceNr_d, dispstatus_s, serverTimestamp_t\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 0, 1)\r\n| summarize total=count(), failureCount=countif(Status != 0) by Instance_Process, serverTimestamp_t, SID_s\r\n| extend Availability = round(((toreal(total) - toreal(failureCount)) / toreal(total)) * 100, 2)\r\n| summarize Availability = round(avg(Availability), 3), AvailabilityTrend = make_list(Availability) by Instance_Process, SID_s",
              "size": 0,
              "title": "Instance Process Availability",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Instance_Process",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "10%"
                    }
                  },
                  {
                    "columnMatch": "SID_s",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Availability",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "blue",
                      "customColumnWidthSetting": "15%"
                    },
                    "numberFormat": {
                      "unit": 1,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 3
                      }
                    }
                  },
                  {
                    "columnMatch": "AvailabilityTrend",
                    "formatter": 21,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "green",
                      "customColumnWidthSetting": "75%"
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"Availability\"]"
                    }
                  }
                ],
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "SID_s"
                  ],
                  "expandTopLevel": true
                },
                "labelSettings": [
                  {
                    "columnId": "Instance_Process",
                    "label": "Instance Process"
                  },
                  {
                    "columnId": "SID_s",
                    "label": "SID"
                  },
                  {
                    "columnId": "Availability",
                    "label": "Availability %"
                  },
                  {
                    "columnId": "AvailabilityTrend",
                    "label": "Availability Trend"
                  }
                ]
              },
              "sortBy": []
            },
            "customWidth": "100",
            "name": "Instance Process Availability By SID"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Availability"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_provider_error",
          "comparison": "isNotEqualTo",
          "value": "-1"
        },
        {
          "parameterName": "pram_check_processlist",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Availability Group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Unable to create the required table (EnqGetStatistic) to capture telemetry information. Please try after some time. If the issue persists, please contact support.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_enqgetstatistics",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "EnqTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_enqgetstatistics",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "EnqIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "EnqueueStatistics"
        },
        {
          "parameterName": "param_check_enqgetstatistics",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "enqStat_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### Enqueue Lock Statistics"
            },
            "name": "enqueuelocktext"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s));\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project enqueue_requests_d\r\n| summarize threshold = percentile(enqueue_requests_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| project enqueue_requests_d, serverTimestamp_t\r\n| summarize sum(enqueue_requests_d), arg_max(serverTimestamp_t, enqueue_requests_d)\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), (toreal(enqueue_requests_d - threshold) / toreal(threshold) * 100))\r\n| project sum_enqueue_requests_d, percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Number Of Lock Requests\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "sum_enqueue_requests_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Number Of Lock Requests"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s));\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project enqueue_rejects_d\r\n| summarize threshold = percentile(enqueue_rejects_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| project enqueue_rejects_d, serverTimestamp_t\r\n| summarize sum(enqueue_rejects_d), arg_max(serverTimestamp_t, enqueue_rejects_d)\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), toreal(enqueue_rejects_d - threshold) / toreal(threshold) * 100)\r\n| project sum_enqueue_rejects_d, percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Rejected Lock Requests\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "sum_enqueue_rejects_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Rejected Lock Requests"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| summarize TotalErrors = sum(enqueue_errors_d)\r\n| extend Title = \"Enqueue Errors\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "TotalErrors",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Enqueue Errors"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s));\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project lock_time_d\r\n| summarize threshold = percentile(lock_time_d, 95)\r\n| project threshold = iff(isnull(threshold), toreal(0), threshold);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| project lock_time_d, serverTimestamp_t\r\n| summarize avg(lock_time_d), arg_max(serverTimestamp_t, lock_time_d)\r\n| where isnan(avg_lock_time_d) != 1\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), (toreal(lock_time_d - threshold) / toreal(threshold) * 100))\r\n| project avg_lock_time_d , percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Average Time For Lock Operations\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "avg_lock_time_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Average Time Taken For Lock Operations"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s));\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project lock_wait_time_d\r\n| summarize threshold = percentile(lock_wait_time_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| project lock_wait_time_d, serverTimestamp_t\r\n| summarize avg(lock_wait_time_d), arg_max(serverTimestamp_t, lock_wait_time_d)\r\n| where isnan(avg_lock_wait_time_d) != 1\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), toreal(lock_wait_time_d - threshold) / toreal(threshold) * 100)\r\n| project avg_lock_wait_time_d, percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Average Waiting Time Taken For Lock Operations\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "avg_lock_wait_time_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Average Waiting Time Taken For Lock Operations"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s));\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project server_time_d\r\n| summarize threshold = percentile(server_time_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| project server_time_d, serverTimestamp_t\r\n| summarize avg(server_time_d), arg_max(serverTimestamp_t, server_time_d)\r\n| where isnan(avg_server_time_d) != 1\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), toreal(server_time_d - threshold) / toreal(threshold) * 100)\r\n| project avg_server_time_d, percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Average Time Taken In Enqueue Server\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "avg_server_time_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Average Time Taken In Enqueue Server"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s));\r\nlet lockQuery = baseQuery\r\n| project locks_now_d, locks_max_d, serverTimestamp_t, arguments_state_s\r\n| summarize arg_max(serverTimestamp_t, arguments_state_s), Average=avg(locks_now_d), Max=max(locks_now_d), ObjectLimit=max(locks_max_d)\r\n| where isnan(Average) != 1\r\n| extend ['Lock Object Type'] = \"Locks\"\r\n| project ['Lock Object Type'], arguments_state_s, Average, Max, ObjectLimit;\r\nlet ownerQuery = baseQuery\r\n| project owner_now_d, owner_max_d, arguments_state_s, serverTimestamp_t\r\n| summarize arg_max(serverTimestamp_t, arguments_state_s), Average=avg(owner_now_d), Max=max(owner_now_d), ObjectLimit=max(owner_max_d)\r\n| where isnan(Average) != 1\r\n| extend ['Lock Object Type'] = \"Owner\"\r\n| project ['Lock Object Type'], arguments_state_s, Average, Max, ObjectLimit;\r\nlet argumentQuery = baseQuery\r\n| project owner_now_d, owner_max_d, arguments_state_s, serverTimestamp_t\r\n| summarize arg_max(serverTimestamp_t, arguments_state_s), Average=avg(owner_now_d), Max=max(owner_now_d), ObjectLimit=max(owner_max_d)\r\n| where isnan(Average) != 1\r\n| extend ['Lock Object Type'] = \"Arguments\"\r\n| project ['Lock Object Type'], arguments_state_s, Average, Max, ObjectLimit;\r\nlet replicationStateQuery = baseQuery\r\n| project replication_state_s, serverTimestamp_t\r\n| summarize arg_max(serverTimestamp_t, replication_state_s)\r\n| project arguments_state_s = replication_state_s\r\n| where isempty(arguments_state_s) != 1\r\n| extend ['Lock Object Type'] = 'Replication State';\r\nlockQuery\r\n| union ownerQuery\r\n| union argumentQuery\r\n| union replicationStateQuery\r\n| extend Status = iff(arguments_state_s == 'SAPControl-GREEN', \"OK\", \"\")\r\n| extend Status = iff(arguments_state_s == 'SAPControl-RED', \"Critical\", Status)\r\n| extend Status = iff(isempty(Status), \"Warning\", Status)\r\n| project ['Lock Object Type'], Status, Average, Max, ObjectLimit\r\n| project-reorder ['Lock Object Type'], Status, Average, Max, ObjectLimit",
              "size": 1,
              "noDataMessage": "The query returned no result",
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Lock Object Type",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Status",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "OK",
                          "representation": "success",
                          "text": "{0}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Critical",
                          "representation": "4",
                          "text": "{0}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Warning",
                          "representation": "2",
                          "text": "{0}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Average",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 3
                      }
                    }
                  },
                  {
                    "columnMatch": "Max",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "ObjectLimit",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal"
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"ObjectLimit\"]"
                    }
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "Lock Object Type",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "Lock Object Type"
                  },
                  {
                    "columnId": "Status"
                  },
                  {
                    "columnId": "Average",
                    "label": "Average Number Of Objects"
                  },
                  {
                    "columnId": "Max",
                    "label": "Max Number Of Objects"
                  },
                  {
                    "columnId": "ObjectLimit",
                    "label": "Object Limit"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "Lock Object Type",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "100",
            "name": "Enqueue Lock Statistics Status"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s));\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project locks_now_d\r\n| summarize Threshold=percentile(locks_now_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| extend dummy=1\r\n| join kind=inner (thresholdQuery | extend dummy=1) on dummy\r\n| project locks_now_d, Threshold,serverTimestamp_t",
              "size": 0,
              "aggregation": 3,
              "title": "Enqueue Locks",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "chartSettings": {
                "xAxis": "serverTimestamp_t",
                "yAxis": [
                  "locks_now_d",
                  "Threshold"
                ],
                "seriesLabelSettings": [
                  {
                    "seriesName": "locks_now_d",
                    "label": "Number of Locks"
                  },
                  {
                    "seriesName": "locks_high_d",
                    "label": "Max Locks"
                  }
                ]
              }
            },
            "name": "Enqueue Locks Trend"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "EnqueueStatistics"
        },
        {
          "parameterName": "param_check_enqgetstatistics",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "enqueueStatistics"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Unable to create the required table (GetQueueStatistics) to capture telemetry information. Please try after some time. If the issue persists, please contact support.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_queuestatistics",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "QueueStatTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_queuestatistics",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "QueueStatIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "QueueStatistics"
        },
        {
          "parameterName": "param_check_queuestatistics",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "queuestat_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### Queue Statistics"
            },
            "name": "Queue Utilization Group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == 'ABAP/UPD'\r\n| summarize AvgRequests = avg(Now_d), QueueLimit = max(Max_d)/7;\r\nlet freeQuery = baseQuery\r\n| project Title = 'Used', Utilization = AvgRequests;\r\nlet utilizationQuery = baseQuery\r\n| project Title = 'Free', Utilization = QueueLimit - AvgRequests;\r\nfreeQuery\r\n| union utilizationQuery",
                    "size": 1,
                    "title": "Update Queue (UPD)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "piechart",
                    "chartSettings": {
                      "yAxis": [
                        "Utilization"
                      ],
                      "group": "Title",
                      "createOtherGroup": null,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Free",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Queue Utilization",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "25",
                  "name": "UpdateQueuePieChart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == 'ABAP/DIA'\r\n| summarize AvgRequests = avg(Now_d), QueueLimit = max(Max_d)/7;\r\nlet freeQuery = baseQuery\r\n| project Title = 'Used', Utilization = AvgRequests;\r\nlet utilizationQuery = baseQuery\r\n| project Title = 'Free', Utilization = QueueLimit - AvgRequests;\r\nfreeQuery\r\n| union utilizationQuery",
                    "size": 1,
                    "title": "Dialog Queue (DIA)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "piechart",
                    "chartSettings": {
                      "yAxis": [
                        "Utilization"
                      ],
                      "group": "Title",
                      "createOtherGroup": null,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Free",
                          "label": "Free",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Used",
                          "label": "Used",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "25",
                  "name": "DialogQueuePieChart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == 'ABAP/ENQ'\r\n| summarize AvgRequests = avg(Now_d), QueueLimit = max(Max_d)/7;\r\nlet freeQuery = baseQuery\r\n| project Title = 'Used', Utilization = AvgRequests;\r\nlet utilizationQuery = baseQuery\r\n| project Title = 'Free', Utilization = QueueLimit - AvgRequests;\r\nfreeQuery\r\n| union utilizationQuery",
                    "size": 1,
                    "title": "Enqueue Queue (ENQ)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "piechart",
                    "chartSettings": {
                      "yAxis": [
                        "Utilization"
                      ],
                      "group": "Title",
                      "createOtherGroup": null,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Free",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Queue Utilization",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "25",
                  "name": "EnqueueQueuePieChart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == 'ABAP/BTC'\r\n| summarize AvgRequests = avg(Now_d), QueueLimit = max(Max_d)/7;\r\nlet freeQuery = baseQuery\r\n| project Title = 'Used', Utilization = AvgRequests;\r\nlet utilizationQuery = baseQuery\r\n| project Title = 'Free', Utilization = QueueLimit - AvgRequests;\r\nfreeQuery\r\n| union utilizationQuery",
                    "size": 1,
                    "title": "Batch Queue (BTC)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "piechart",
                    "chartSettings": {
                      "yAxis": [
                        "Utilization"
                      ],
                      "group": "Title",
                      "createOtherGroup": null,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Free",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Queue Utilization",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "25",
                  "name": "BatchQueuePieChart"
                }
              ]
            },
            "name": "Queue Utilization Statistics"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet MaxQuery = baseQuery\r\n| summarize QueueLimit=max(Max_d) by Typ_s;\r\nlet CurrentStatusQuery = baseQuery\r\n| summarize CurrentStatus = arg_max(timestamp_t, Now_d) by Typ_s;\r\nbaseQuery\r\n| summarize AvgRequests = avg(Now_d), MaxRequests = max(Now_d), ReadRequest = sum(Reads_d), WriteRequest = sum(Writes_d) by Typ_s\r\n| join kind=inner MaxQuery on Typ_s\r\n| join kind=inner CurrentStatusQuery on Typ_s\r\n| extend QueueUtilization = iff(QueueLimit != 0, (toreal(Now_d) / toreal(QueueLimit/7)) * 100, 0.0)\r\n| extend Status = iff(QueueUtilization <= 5, \"OK\", \"\")\r\n| extend Status = iff(QueueUtilization > 5 and QueueUtilization <= 15 , \"Warning\", Status)\r\n| extend Status = iff(QueueUtilization > 15, \"Critical\", Status)\r\n| project Typ_s, Status, AvgRequests, MaxRequests, QueueLimit, WriteRequest, ReadRequest\r\n| project-reorder Typ_s, Status, AvgRequests, MaxRequests, QueueLimit, WriteRequest, ReadRequest",
              "size": 0,
              "title": "Queue Statistic Summary",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Status",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "OK",
                          "representation": "success",
                          "text": "{0}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Warning",
                          "representation": "2",
                          "text": "{0}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Critical",
                          "representation": "critical",
                          "text": "{0}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AvgRequests",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "MaxRequests",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "QueueLimit",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "WriteRequest",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"WriteRequest\"]"
                    }
                  },
                  {
                    "columnMatch": "ReadRequest",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"ReadRequest\"]"
                    }
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "$gen_number_MaxRequests_3",
                    "sortOrder": 2
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "Typ_s",
                    "label": "Queue"
                  },
                  {
                    "columnId": "Status"
                  },
                  {
                    "columnId": "AvgRequests",
                    "label": "Average Number Of Requests In Queue"
                  },
                  {
                    "columnId": "MaxRequests",
                    "label": "Max Number Of Requests In Queue"
                  },
                  {
                    "columnId": "QueueLimit",
                    "label": "Dispatcher Max Queue"
                  },
                  {
                    "columnId": "WriteRequest",
                    "label": "Number Of Requests Written"
                  },
                  {
                    "columnId": "ReadRequest",
                    "label": "Number Of Requests Read"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "$gen_number_MaxRequests_3",
                  "sortOrder": 2
                }
              ]
            },
            "customWidth": "100",
            "name": "DetailedQueueSummary",
            "styleSettings": {
              "maxWidth": "100%"
            }
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "ebeb7d85-8c21-4534-8135-b05732fab7b5",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueueType",
                  "label": "Queue Type",
                  "type": 2,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Typ_s;",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "QueueType"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet queueList = dynamic([{QueueType}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| where array_length(queueList) == 0 or Typ_s in (queueList)\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Now_d;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Request=sum(Now_d) by bin(serverTimestamp_t, timespanInterval), Typ_s",
              "size": 0,
              "aggregation": 3,
              "title": "Queue Length Trend Graph",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "chartSettings": {
                "xAxis": "serverTimestamp_t",
                "yAxis": [
                  "Request"
                ],
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                },
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "QueueLengthTrend"
          },
          {
            "type": 1,
            "content": {
              "json": "### Queued Remote Function (SMQ1/SMQ2)"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_inbound_queue",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "Queued Remote Function"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_InboundQueues_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| distinct QNAME_s\r\n| summarize inbound_queues = count()\r\n| extend Title = \"Total Inbound Queue\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "inbound_queues",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "max": 8,
                    "palette": "greenRed"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "25",
            "conditionalVisibility": {
              "parameterName": "param_check_inbound_queue",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "Total Inbound Queue "
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_InboundQueues_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| summarize QD = max(QDEEP_d) by QNAME_s, DEST_s\r\n| summarize inbound_items = sum(QD)\r\n| extend Title = \"Total Inbound Queue Items\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "inbound_items",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "max": 8,
                    "palette": "greenRed"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "25",
            "conditionalVisibility": {
              "parameterName": "param_check_inbound_queue",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "Total Inbound Queue Items"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_OutboundQueues_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| distinct QNAME_s\r\n| summarize outbound_queues = count()\r\n| extend Title = \"Total Outbound Queue\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "outbound_queues",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "max": 8,
                    "palette": "greenRed"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "25",
            "conditionalVisibility": {
              "parameterName": "param_check_outbound_queue",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "Total Inbound Queue Items - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_OutboundQueues_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| summarize QD = max(QDEEP_d) by QNAME_s, DEST_s\r\n| summarize outbound_items = sum(QD)\r\n| extend Title = \"Total Outbound Queue Items\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "outbound_items",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "max": 8,
                    "palette": "greenRed"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "25",
            "conditionalVisibility": {
              "parameterName": "param_check_outbound_queue",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "Total Inbound Queue Items - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "SapNetweaver_InboundQueues_CL\r\n| union SapNetweaver_OutboundQueues_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| distinct  QNAME_s, Type, timestamp_t\r\n| summarize total_queue  = count() by QNAME_s, Type, timestamp_t\r\n\r\n",
              "size": 0,
              "aggregation": 5,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "total_queue"
                ],
                "group": "Type",
                "createOtherGroup": null,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "SapNetweaver_OutboundQueues_CL",
                    "label": "Outbound Queues"
                  },
                  {
                    "seriesName": "SapNetweaver_InboundQueues_CL",
                    "label": "Inbound Queues"
                  }
                ],
                "ySettings": {
                  "min": 0
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "param_check_inbound_queue",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "Queued Remote Function"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_OutboundQueues_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| summarize QD = max(QDEEP_d) by QNAME_s, DEST_s\r\n\r\n",
              "size": 0,
              "aggregation": 5,
              "title": "Outbound Queues",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "QNAME_s",
                    "label": "Queue Name"
                  },
                  {
                    "columnId": "DEST_s",
                    "label": "Destination"
                  },
                  {
                    "columnId": "QD",
                    "label": "Number of Items"
                  }
                ]
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "queue_items"
                ],
                "group": "Type",
                "createOtherGroup": null,
                "seriesLabelSettings": [
                  {
                    "seriesName": "SapNetweaver_OutboundQueues_CL",
                    "label": "Outbound Queues"
                  },
                  {
                    "seriesName": "SapNetweaver_InboundQueues_CL",
                    "label": "Inbound Queues"
                  }
                ],
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "param_check_inbound_queue",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "Outbound Queues"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_InboundQueues_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| summarize QD = max(QDEEP_d) by QNAME_s, DEST_s\r\n\r\n",
              "size": 0,
              "aggregation": 5,
              "title": "Inbound Queues",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "QNAME_s",
                    "label": "Queue Name"
                  },
                  {
                    "columnId": "DEST_s",
                    "label": "Destination"
                  },
                  {
                    "columnId": "QD",
                    "label": "Number of Items"
                  }
                ]
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "queue_items"
                ],
                "group": "Type",
                "createOtherGroup": null,
                "seriesLabelSettings": [
                  {
                    "seriesName": "SapNetweaver_OutboundQueues_CL",
                    "label": "Outbound Queues"
                  },
                  {
                    "seriesName": "SapNetweaver_InboundQueues_CL",
                    "label": "Inbound Queues"
                  }
                ],
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "param_check_inbound_queue",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "Inbound Queues"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "QueueStatistics"
        },
        {
          "parameterName": "param_check_queuestatistics",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Queue Statistics Group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "These metrics are available when you configure the NetWeaver provider to include support for RFC communication. You will need to add the NetWeaver provider again.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SelectedTab",
                "comparison": "isEqualTo",
                "value": "Application"
              },
              {
                "parameterName": "param_check_sdump",
                "comparison": "isEqualTo",
                "value": "1"
              }
            ],
            "name": "QueueStatTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SelectedTab",
                "comparison": "isEqualTo",
                "value": "Application"
              },
              {
                "parameterName": "param_check_sdump",
                "comparison": "isEqualTo",
                "value": "2"
              }
            ],
            "name": "ShortDumpIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Application"
        },
        {
          "parameterName": "param_check_sdump",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_rfc_metrics",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "shortdump_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "These metrics are available when you configure the NetWeaver provider to include support for RFC communication. You will need to add the NetWeaver provider again.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_cpumemory",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "SMONTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_cpumemory",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "CPUMemoryIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_smon",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Performance"
        },
        {
          "parameterName": "param_check_abapwp",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_rfc_metrics",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "cpumemory_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "These metrics are available when you configure the NetWeaver provider to include support for RFC communication. You will need to add the NetWeaver provider again.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_abapwp",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "ABAPTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_abapwp",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "ABAPIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_abapwp",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Performance"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_rfc_metrics",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "name": "processutilization_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "These metrics are available when you configure the NetWeaver provider to include support for RFC communication. You will need to add the NetWeaver provider again.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_swnc",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "SWNCTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_swnc",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "WorkloadIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error_workloadstatistics",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "WorkloadStatistics"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "workloadstatistics_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "88a4bf26-0754-4252-b521-f188afffcb60",
                  "version": "KqlParameterItem/1.0",
                  "name": "param_check_v13",
                  "type": 1,
                  "query": "let enq = dynamic(\"{param_check_enqread}\");\r\nlet failed = dynamic(\"{param_check_failedupdates}\");\r\nlet syslogs = dynamic(\"{param_check_syslogs}\");\r\nlet batchjobs = dynamic(\"{param_check_batchjobs}\");\r\n\r\nlet selTabValue = iif(enq == \"0\", \r\n    iif(failed == \"0\", \r\n        iif(syslogs == \"0\", \r\n            iif(batchjobs == \"0\", \"efsb\", \"1\"),\"1\"), \"1\"), \"1\");\r\nlet selTabValueNew = case(selTabValue == \"efsb\", \"0\", \"1\"); \r\nprint toscalar(selTabValueNew);\r\n",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.hanaonazure/sapmonitors"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.hanaonazure/sapmonitors"
            },
            "conditionalVisibility": {
              "parameterName": "dummy_neverset",
              "comparison": "isEqualTo",
              "value": "0"
            },
            "name": "ApplicationCriteriaParam"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "c1a42a78-71e1-42fd-85e4-ada35354c051",
                  "cellValue": "selectedv12Tab",
                  "linkTarget": "parameter",
                  "linkLabel": "Short Dumps (ST22)",
                  "subTarget": "ShortDump",
                  "preText": "Short Dump",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SelectedTab",
                "comparison": "isEqualTo",
                "value": "Application"
              },
              {
                "parameterName": "param_check_sdump",
                "comparison": "isEqualTo",
                "value": "0"
              },
              {
                "parameterName": "param_check_v13",
                "comparison": "isEqualTo",
                "value": "1"
              }
            ],
            "name": "rfcv1.2ApplicationTab"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "f7397e19-ab90-4d77-9b60-73310cdbaea1",
                  "cellValue": "selectedv13Tab",
                  "linkTarget": "parameter",
                  "linkLabel": "Lock Entries (SM12)",
                  "subTarget": "LockEntries",
                  "preText": "Lock Entries",
                  "style": "link"
                },
                {
                  "id": "2d8c4653-be36-4cc0-9cdc-7abe3856b3a5",
                  "cellValue": "selectedv13Tab",
                  "linkTarget": "parameter",
                  "linkLabel": "Failed Updates (SM13)",
                  "subTarget": "FailedUpdate",
                  "preText": "Failed Updates",
                  "style": "link"
                },
                {
                  "id": "668e9d86-9810-4000-9c17-cc1b44dfaba5",
                  "cellValue": "selectedv13Tab",
                  "linkTarget": "parameter",
                  "linkLabel": "System Logs (SM21)",
                  "subTarget": "SysLogs",
                  "preText": "System Logs",
                  "style": "link"
                },
                {
                  "id": "fa15a467-9880-4acf-ad8e-5388907e8834",
                  "cellValue": "selectedv13Tab",
                  "linkTarget": "parameter",
                  "linkLabel": "Short Dumps (ST22)",
                  "subTarget": "ShortDump",
                  "preText": "Short Dump",
                  "style": "link"
                },
                {
                  "id": "469a981b-8caf-471b-8b04-77a9a89bbb85",
                  "cellValue": "selectedv13Tab",
                  "linkTarget": "parameter",
                  "linkLabel": "Batch Jobs (SM37)",
                  "subTarget": "BatchJob",
                  "preText": "Batch Job",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SelectedTab",
                "comparison": "isEqualTo",
                "value": "Application"
              },
              {
                "parameterName": "param_check_v13",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "rfcv1.3ApplicationTab"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e9ee5d1e-d4b0-489d-8d35-be07fee30ccd",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedApplicationTab",
                  "type": 1,
                  "query": "\r\nlet selMenu12 = dynamic(\"{selectedv12Tab}\");\r\nlet selMenu13 = dynamic(\"{selectedv13Tab}\");\r\nlet isv13Enabled = dynamic(\"{param_check_v13}\");\r\nlet selv13TabValue = case(selMenu13 == \"LockEntries\", \"LockEntries\", \r\n                       selMenu13 == \"FailedUpdate\", \"FailedUpdate\" ,  \r\n\t\t       selMenu13 == \"SysLogs\", \"SysLogs\" ,  \r\n                       selMenu13 == \"ShortDump\", \"ShortDump\" ,  \r\n \t\t       selMenu13 == \"BatchJob\", \"BatchJob\" ,\r\n                        \"\");\r\nlet selTabv12Value = case(\r\n                          selMenu12 == \"ShortDump\", \"ShortDump\" ,\r\n                            \"\");    \r\n\r\nlet chooseTab = iff((isv13Enabled == 0),selMenu13,selMenu12);\r\nprint toscalar(chooseTab);",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.hanaonazure/sapmonitors"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.hanaonazure/sapmonitors"
            },
            "conditionalVisibility": {
              "parameterName": "dummy_neverset",
              "comparison": "isNotEqualTo"
            },
            "name": "selApplicationParam"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_EnqueueRead_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| summarize GTCODE = dcount(GTCODE_s) by GNAME_s, GMODE_s, GOBJ_s, GUNAME_s, GBCKTYPE_s, GTWP_s, hostname_s, serverTimestamp_t\r\n| summarize total_locks = count()\r\n| extend Title = \"Total Number Of Lock Entries\"",
                    "size": 4,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "formatter": 2,
                        "numberFormat": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "maximumFractionDigits": 2
                          }
                        }
                      },
                      "leftContent": {
                        "columnMatch": "total_locks",
                        "formatter": 12,
                        "formatOptions": {
                          "min": 0,
                          "max": 8,
                          "palette": "greenRed"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal",
                            "useGrouping": false,
                            "maximumFractionDigits": 2,
                            "maximumSignificantDigits": 3
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Title",
                        "formatter": 1
                      },
                      "showBorder": true,
                      "size": "full"
                    }
                  },
                  "customWidth": "20",
                  "name": "Lock Requests Count"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_EnqueueRead_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| summarize GTCODE = dcount(GTCODE_s) by GNAME_s, GMODE_s, GOBJ_s, GUNAME_s, GBCKTYPE_s, GTWP_s, hostname_s, serverTimestamp_t\r\n| summarize object_locks = count() by serverTimestamp_t",
                    "size": 0,
                    "aggregation": 3,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "barchart",
                    "chartSettings": {
                      "xAxis": "serverTimestamp_t",
                      "yAxis": [
                        "object_locks"
                      ],
                      "showMetrics": false,
                      "showLegend": true,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "object_locks",
                          "label": "Number of Locks",
                          "color": "orange"
                        }
                      ]
                    }
                  },
                  "customWidth": "80",
                  "conditionalVisibility": {
                    "parameterName": "param_check_enqread",
                    "comparison": "isEqualTo",
                    "value": "0"
                  },
                  "name": "Lock Entries in SAP"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_EnqueueRead_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend datevalue = format_datetime(serverTimestamp_t, 'dd-MM-yy')\r\n| extend timevalue = format_datetime(serverTimestamp_t, 'HH:mm:ss')\r\n| distinct GTCODE_s,GNAME_s, GMODE_s, GOBJ_s, GTWP_s, hostname_s, GBCKTYPE_s, datevalue, timevalue, GUNAME_s",
                    "size": 1,
                    "noDataMessage": "The query returned no result",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Lock Object Type",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "OK",
                                "representation": "success",
                                "text": "{0}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "4",
                                "text": "{0}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 3
                            }
                          }
                        },
                        {
                          "columnMatch": "Max",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "ObjectLimit",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"ObjectLimit\"]"
                          }
                        }
                      ],
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "GTCODE_s",
                          "label": "T-CODE"
                        },
                        {
                          "columnId": "GNAME_s",
                          "label": "Table Name"
                        },
                        {
                          "columnId": "GMODE_s",
                          "label": "Lock Mode"
                        },
                        {
                          "columnId": "GOBJ_s",
                          "label": "Object Name"
                        },
                        {
                          "columnId": "GTWP_s",
                          "label": "Work  Process Number"
                        },
                        {
                          "columnId": "hostname_s",
                          "label": "Instance Name"
                        },
                        {
                          "columnId": "GBCKTYPE_s",
                          "label": "Backup Flag"
                        },
                        {
                          "columnId": "datevalue",
                          "label": "Date"
                        },
                        {
                          "columnId": "timevalue",
                          "label": "Time"
                        },
                        {
                          "columnId": "GUNAME_s",
                          "label": "Username"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "customWidth": "100",
                  "conditionalVisibility": {
                    "parameterName": "param_check_enqread",
                    "comparison": "isEqualTo",
                    "value": "0"
                  },
                  "showPin": true,
                  "name": "Lock Entries Table"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedApplicationTab",
                "comparison": "isEqualTo",
                "value": "LockEntries"
              },
              {
                "parameterName": "param_check_enqread",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "lockentriesgroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_FailedUpdates_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| extend datevalue = format_datetime(serverTimestamp_t, 'dd-MM-yy')\r\n| extend timevalue = format_datetime(serverTimestamp_t, 'HH:mm:ss')\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct VBTCODE_s, VBCONTEXT_s, VBREPORT_s, VBUSR_s, VBSTATE_s, VBRC_s, VBCLIINFO_s, VBMANDT_s, datevalue, timevalue\r\n| count\r\n| extend Title = \"Number Of Update Request\"",
                    "size": 4,
                    "title": "Administrate Update Records​",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "tiles",
                    "tileSettings": {
                      "leftContent": {
                        "columnMatch": "Count",
                        "formatter": 12,
                        "formatOptions": {
                          "min": 0,
                          "palette": "greenRed"
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Title",
                        "formatter": 1
                      },
                      "showBorder": true,
                      "sortOrderField": 1,
                      "size": "full"
                    }
                  },
                  "customWidth": "20",
                  "name": "FailedUpdateTile"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_FailedUpdates_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct VBTCODE_s, VBCONTEXT_s, VBREPORT_s, VBUSR_s, VBSTATE_s, VBRC_s, VBCLIINFO_s, VBMANDT_s, serverTimestamp_t\r\n| project serverTimestamp_t;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize total_failed_update  = count() by bin(serverTimestamp_t, timespanInterval)",
                    "size": 0,
                    "aggregation": 5,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "linechart",
                    "graphSettings": {
                      "type": 0,
                      "topContent": {
                        "columnMatch": "GNAME_s",
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "object_locks",
                        "formatter": 1,
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      }
                    },
                    "chartSettings": {
                      "xAxis": "serverTimestamp_t",
                      "yAxis": [
                        "total_failed_update"
                      ],
                      "group": null,
                      "createOtherGroup": 0,
                      "showMetrics": false,
                      "showLegend": true,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "total_failed_update",
                          "label": "Number Of Objects Locked",
                          "color": "orange"
                        },
                        {
                          "color": "red"
                        }
                      ],
                      "showDataPoints": true,
                      "xSettings": {
                        "numberFormatSettings": {
                          "unit": 0,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          }
                        }
                      },
                      "ySettings": {
                        "min": 0
                      }
                    }
                  },
                  "customWidth": "80",
                  "name": "FailedUpdateChart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_FailedUpdates_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| extend datevalue = format_datetime(serverTimestamp_t, 'dd-MM-yy')\r\n| extend timevalue = format_datetime(serverTimestamp_t, 'HH:mm:ss')\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct VBTCODE_s, VBCONTEXT_s, VBREPORT_s, VBSTATE_s, VBRC_s, VBCLIINFO_s, VBCLINAME_s, datevalue, timevalue, VBUSR_s, VBKEY_g",
                    "size": 1,
                    "noDataMessage": "The query returned no result",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Lock Object Type",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "OK",
                                "representation": "success",
                                "text": "{0}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "4",
                                "text": "{0}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 3
                            }
                          }
                        },
                        {
                          "columnMatch": "Max",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "ObjectLimit",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"ObjectLimit\"]"
                          }
                        }
                      ],
                      "rowLimit": 200,
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "VBTCODE_s",
                          "label": "T-CODE"
                        },
                        {
                          "columnId": "VBCONTEXT_s",
                          "label": "Update Context"
                        },
                        {
                          "columnId": "VBREPORT_s",
                          "label": "Report"
                        },
                        {
                          "columnId": "VBSTATE_s",
                          "label": "State of Request"
                        },
                        {
                          "columnId": "VBRC_s",
                          "label": "Update Return"
                        },
                        {
                          "columnId": "VBCLIINFO_s",
                          "label": "Info"
                        },
                        {
                          "columnId": "VBCLINAME_s",
                          "label": "Instance Name"
                        },
                        {
                          "columnId": "datevalue",
                          "label": "Date"
                        },
                        {
                          "columnId": "timevalue",
                          "label": "Time"
                        },
                        {
                          "columnId": "VBUSR_s",
                          "label": "Username"
                        },
                        {
                          "columnId": "VBKEY_g",
                          "label": "Key"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "customWidth": "100",
                  "showPin": true,
                  "name": "FailedUpdateTable"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedApplicationTab",
                "comparison": "isEqualTo",
                "value": "FailedUpdate"
              },
              {
                "parameterName": "param_check_failedupdates",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "failedupdategroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Component_s, Development_Class_s, Application_Componen_s, timestamp_t\r\n| count\r\n| extend Title = \"Total Number Of Short Dumps\"",
                    "size": 4,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {},
                      "leftContent": {
                        "columnMatch": "Count",
                        "formatter": 12,
                        "formatOptions": {
                          "min": 0,
                          "palette": "greenRed"
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Title",
                        "formatter": 1
                      },
                      "showBorder": true,
                      "sortOrderField": 1,
                      "size": "full"
                    }
                  },
                  "customWidth": "20",
                  "name": "Short Dump Count"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Component_s, timestamp_t, Development_Class_s, Application_Componen_s\r\n| project timestamp_t;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize error_count  = count() by bin(timestamp_t, timespanInterval)\r\n",
                    "size": 0,
                    "aggregation": 5,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "barchart",
                    "graphSettings": {
                      "type": 0,
                      "topContent": {
                        "columnMatch": "GNAME_s",
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "object_locks",
                        "formatter": 1,
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      }
                    },
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "error_count"
                      ],
                      "group": null,
                      "createOtherGroup": 0,
                      "showMetrics": false,
                      "showLegend": true,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "error_count",
                          "label": "Number Of Short Dumps",
                          "color": "orange"
                        },
                        {
                          "color": "red"
                        }
                      ],
                      "showDataPoints": true,
                      "ySettings": {
                        "min": 0
                      }
                    }
                  },
                  "customWidth": "80",
                  "name": "Error Logs"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Short Dump By Error",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Component_s, timestamp_t, Development_Class_s, Application_Componen_s, Runtime_Error_s\r\n| extend Runtime_Error_s;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Count = count() by bin(timestamp_t, timespanInterval), Runtime_Error_s",
                          "size": 0,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "barchart",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Runtime_Error_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Error_Short_Text_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Exception_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "SID_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Count",
                                "formatter": 1
                              }
                            ],
                            "sortBy": [
                              {
                                "itemKey": "Runtime_Error_s",
                                "sortOrder": 1
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "Runtime_Error_s",
                                "label": "Runtime Exceptions"
                              },
                              {
                                "columnId": "Error_Short_Text_s",
                                "label": "Exception Text"
                              },
                              {
                                "columnId": "Exception_s",
                                "label": "Exceptions"
                              },
                              {
                                "columnId": "SID_s",
                                "label": "Source System"
                              },
                              {
                                "columnId": "Count",
                                "label": "Exception Count"
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "Runtime_Error_s",
                              "sortOrder": 1
                            }
                          ]
                        },
                        "name": "shortdumpexceptions"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Component_s, timestamp_t, Development_Class_s, Application_Componen_s, Runtime_Error_s, Error_Short_Text_s, Exception_s, SID_s\r\n| summarize Count=count() by Runtime_Error_s, Error_Short_Text_s, Exception_s, SID_s\r\n| order by Count",
                          "size": 3,
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Runtime_Error_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Error_Short_Text_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Exception_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "SID_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Count",
                                "formatter": 1
                              }
                            ],
                            "filter": true,
                            "sortBy": [
                              {
                                "itemKey": "Runtime_Error_s",
                                "sortOrder": 1
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "Runtime_Error_s",
                                "label": "Runtime Exceptions"
                              },
                              {
                                "columnId": "Error_Short_Text_s",
                                "label": "Exception Text"
                              },
                              {
                                "columnId": "Exception_s",
                                "label": "Exceptions"
                              },
                              {
                                "columnId": "SID_s",
                                "label": "Source System"
                              },
                              {
                                "columnId": "Count",
                                "label": "Exception Count"
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "Runtime_Error_s",
                              "sortOrder": 1
                            }
                          ]
                        },
                        "customWidth": "0",
                        "name": "shortdumpexceptionsingrid",
                        "styleSettings": {
                          "maxWidth": "100%"
                        }
                      }
                    ]
                  },
                  "name": "Shortdumpbyerrorgroup"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Short Dump By Program",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Component_s, timestamp_t, Development_Class_s, Application_Componen_s, Program_s\r\n| extend Program_s;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Count = count() by bin(timestamp_t, timespanInterval), Program_s",
                          "size": 0,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "unstackedbar",
                          "chartSettings": {
                            "xAxis": "Program_s",
                            "yAxis": [
                              "Count"
                            ],
                            "showMetrics": false
                          }
                        },
                        "name": "shortdumpbyprogram"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Component_s, timestamp_t, Development_Class_s, Application_Componen_s, Program_s, SID_s\r\n| summarize Count=count() by Program_s, SID_s\r\n| order by Count",
                          "size": 3,
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Program_s",
                                "formatter": 1,
                                "formatOptions": {
                                  "customColumnWidthSetting": "30ch"
                                }
                              },
                              {
                                "columnMatch": "SID_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Count",
                                "formatter": 1
                              }
                            ],
                            "filter": true,
                            "sortBy": [
                              {
                                "itemKey": "Count",
                                "sortOrder": 2
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "Program_s",
                                "label": "Top Cancelled Programs"
                              },
                              {
                                "columnId": "SID_s",
                                "label": "Source System"
                              },
                              {
                                "columnId": "Count",
                                "label": "Cancellation Count​"
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "Count",
                              "sortOrder": 2
                            }
                          ]
                        },
                        "customWidth": "0",
                        "name": "CancelledProgramQuery",
                        "styleSettings": {
                          "maxWidth": "100%"
                        }
                      }
                    ]
                  },
                  "name": "shortdumpybyproggroup"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Short Dump By User",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Component_s, timestamp_t, Development_Class_s, Application_Componen_s, Program_s, SID_s, E2E_USER_s\r\n| extend E2E_USER_s;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Count = count() by bin(timestamp_t, timespanInterval), E2E_USER_s",
                          "size": 0,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "barchart",
                          "chartSettings": {
                            "xAxis": "E2E_USER_s",
                            "yAxis": [
                              "Count"
                            ],
                            "showMetrics": false
                          }
                        },
                        "name": "shortdumpbyuser"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Component_s, timestamp_t, Development_Class_s, Application_Componen_s, Program_s, SID_s, E2E_USER_s\r\n| summarize Count=count() by E2E_USER_s, SID_s\r\n| sort by Count",
                          "size": 3,
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "E2E_USER_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Count",
                                "formatter": 1
                              }
                            ],
                            "filter": true,
                            "sortBy": [
                              {
                                "itemKey": "Count",
                                "sortOrder": 2
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "E2E_USER_s",
                                "label": "User "
                              },
                              {
                                "columnId": "SID_s",
                                "label": "Source System"
                              },
                              {
                                "columnId": "Count",
                                "label": "Short Dumps Count"
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "Count",
                              "sortOrder": 2
                            }
                          ]
                        },
                        "customWidth": "0",
                        "name": "shortdumpbyusers",
                        "styleSettings": {
                          "maxWidth": "100%"
                        }
                      }
                    ]
                  },
                  "name": "shortdumpbyuser"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedApplicationTab",
                "comparison": "isEqualTo",
                "value": "ShortDump"
              },
              {
                "parameterName": "param_check_sdump",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "ShortDumpGroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_BatchJobs_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct STATUS_s,STRTDATE_s,STRTTIME_s, JOBNAME_s\r\n| where STATUS_s == 'F' or STATUS_s == 'A' or STATUS_s == 'Z'\r\n| count as TotalCount\r\n| extend Title = \"Number Of Jobs Executed\"",
                    "size": 1,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "tiles",
                    "tileSettings": {
                      "leftContent": {
                        "columnMatch": "TotalCount",
                        "formatter": 12,
                        "formatOptions": {
                          "min": 0,
                          "palette": "green"
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Title",
                        "formatter": 1
                      },
                      "showBorder": true,
                      "sortOrderField": 1,
                      "size": "full"
                    }
                  },
                  "customWidth": "20",
                  "name": "batchjobcount"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_BatchJobs_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct STATUS_s,STRTDATE_s,STRTTIME_s, JOBNAME_s,timestamp_t\r\n| project timestamp_t;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize batchjobcount  = count() by bin(timestamp_t, timespanInterval)\r\n\r\n",
                    "size": 0,
                    "aggregation": 5,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "linechart",
                    "graphSettings": {
                      "type": 0,
                      "topContent": {
                        "columnMatch": "GNAME_s",
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "object_locks",
                        "formatter": 1,
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      }
                    },
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "batchjobcount"
                      ],
                      "group": null,
                      "createOtherGroup": 0,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "batchjobcount",
                          "label": "Number Of Batch Job",
                          "color": "orange"
                        }
                      ],
                      "showDataPoints": true,
                      "ySettings": {
                        "min": 0
                      }
                    }
                  },
                  "customWidth": "80",
                  "name": "BatchJobChart"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "Click on \"Cancelled Job\" tile to see further details.",
                    "style": "info"
                  },
                  "name": "text_clickcancelledjob"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_BatchJobs_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct STATUS_s, STRTDATE_s, STRTTIME_s, SDLSTRTDT_s, SDLSTRTTM_s, JOBNAME_s, ENDDATE_s, ENDTIME_s \r\n| extend startdatetime = todatetime(strcat(STRTDATE_s,STRTTIME_s))\r\n| extend enddatetime = todatetime(strcat(ENDDATE_s,ENDTIME_s))\r\n| extend runtime = enddatetime - startdatetime\r\n| extend min =  runtime / 1s \r\n| summarize totaljob = countif(min > 30)\r\n| extend Title = \"Runtime > 30 Minutes\"",
                          "size": 1,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "tiles",
                          "tileSettings": {
                            "leftContent": {
                              "columnMatch": "totaljob",
                              "formatter": 12,
                              "formatOptions": {
                                "min": 0,
                                "palette": "orange"
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Title",
                              "formatter": 1
                            },
                            "showBorder": true,
                            "sortOrderField": 1,
                            "size": "full"
                          }
                        },
                        "customWidth": "33",
                        "name": "runtimeofjob",
                        "styleSettings": {
                          "maxWidth": "100"
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_BatchJobs_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct STATUS_s, STRTDATE_s, STRTTIME_s, SDLSTRTDT_s, SDLSTRTTM_s, JOBNAME_s, ENDDATE_s, ENDTIME_s \r\n| extend planneddatetime =  todatetime(strcat(SDLSTRTDT_s,SDLSTRTTM_s))\r\n| extend startdatetime = todatetime(strcat(STRTDATE_s,STRTTIME_s))\r\n| where STATUS_s != 'P' or STATUS_s != 'S' or STATUS_s != 'Y'\r\n| summarize totaljob = countif(startdatetime > planneddatetime)\r\n| extend Title = \"Jobs With Delayed Start\"",
                          "size": 1,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "tiles",
                          "tileSettings": {
                            "leftContent": {
                              "columnMatch": "totaljob",
                              "formatter": 12,
                              "formatOptions": {
                                "min": 0,
                                "palette": "orange"
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Title",
                              "formatter": 1
                            },
                            "showBorder": true,
                            "sortOrderField": 1,
                            "size": "full"
                          }
                        },
                        "customWidth": "33",
                        "name": "delayedstartjob",
                        "styleSettings": {
                          "maxWidth": "100"
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_BatchJobs_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct STATUS_s, STRTDATE_s, STRTTIME_s, SDLSTRTDT_s, SDLSTRTTM_s, JOBNAME_s, ENDDATE_s, ENDTIME_s \r\n| summarize totaljob = countif(STATUS_s == 'A' or STATUS_s == 'X')\r\n| extend Title = \"Number Of Cancelled Jobs\"",
                          "size": 1,
                          "exportParameterName": "param_status",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "tiles",
                          "tileSettings": {
                            "leftContent": {
                              "columnMatch": "totaljob",
                              "formatter": 12,
                              "formatOptions": {
                                "min": 0,
                                "palette": "greenRed"
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Title",
                              "formatter": 1
                            },
                            "showBorder": true,
                            "sortOrderField": 1,
                            "size": "full"
                          }
                        },
                        "customWidth": "33",
                        "name": "cancelledjob",
                        "styleSettings": {
                          "margin": "-36px 0px 0px 0px"
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_BatchJobs_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| extend planneddatetime =  todatetime(strcat(SDLSTRTDT_s, SDLSTRTTM_s))\r\n| extend planneddate = format_datetime(planneddatetime,'dd-MM-yy')\r\n| extend plannedtime = format_datetime(planneddatetime,'HH:mm:ss')\r\n| extend startdatetime =  todatetime(strcat(STRTDATE_s, STRTTIME_s))\r\n| extend startdate = format_datetime(planneddatetime,'dd-MM-yy')\r\n| extend starttime = format_datetime(planneddatetime,'HH:mm:ss')\r\n| extend enddatetime =  todatetime(strcat(ENDDATE_s, ENDTIME_s))\r\n| extend enddate = format_datetime(enddatetime,'dd-MM-yy')\r\n| extend endtime = format_datetime(enddatetime,'HH:mm:ss')\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Status = case( STATUS_s == 'F', 'Finished',\r\n                        STATUS_s == 'S', 'Released',\r\n                        STATUS_s == 'P', 'Scheduled',\r\n                        STATUS_s == 'A', 'Cancelled',\r\n                        STATUS_s == 'Z', 'Active',\r\n                        STATUS_s == 'Y', 'Ready', '')\r\n| extend selValue = case( '{param_status}' contains 'Cancelled', 'A', '')  \r\n| where  STATUS_s == selValue           \r\n| distinct Status, JOBNAME_s, JOBCLASS_s, PERIODIC_s, planneddate, plannedtime, startdate, starttime, enddate, endtime, LASTCHNAME_s",
                          "size": 1,
                          "noDataMessage": "The query returned no result",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Status",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "Finished",
                                      "representation": "success",
                                      "text": "{0}"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "Cancelled",
                                      "representation": "4",
                                      "text": "{0}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "1",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "Lock Object Type",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Average",
                                "formatter": 1,
                                "numberFormat": {
                                  "unit": 0,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 3
                                  }
                                }
                              },
                              {
                                "columnMatch": "Max",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "ObjectLimit",
                                "formatter": 1,
                                "numberFormat": {
                                  "unit": 17,
                                  "options": {
                                    "style": "decimal"
                                  }
                                },
                                "tooltipFormat": {
                                  "tooltip": "[\"ObjectLimit\"]"
                                }
                              }
                            ],
                            "rowLimit": 200,
                            "filter": true,
                            "sortBy": [
                              {
                                "itemKey": "$gen_thresholds_Status_0",
                                "sortOrder": 1
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "Status"
                              },
                              {
                                "columnId": "JOBNAME_s",
                                "label": "Job Name"
                              },
                              {
                                "columnId": "JOBCLASS_s",
                                "label": "Job Class"
                              },
                              {
                                "columnId": "PERIODIC_s",
                                "label": "Periodic"
                              },
                              {
                                "columnId": "planneddate",
                                "label": "Planned Date"
                              },
                              {
                                "columnId": "plannedtime",
                                "label": "Planned Time"
                              },
                              {
                                "columnId": "startdate",
                                "label": "Start Date"
                              },
                              {
                                "columnId": "starttime",
                                "label": "Start Time"
                              },
                              {
                                "columnId": "enddate",
                                "label": "End Date"
                              },
                              {
                                "columnId": "endtime",
                                "label": "End Time"
                              },
                              {
                                "columnId": "LASTCHNAME_s",
                                "label": "User Name "
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "$gen_thresholds_Status_0",
                              "sortOrder": 1
                            }
                          ]
                        },
                        "conditionalVisibility": {
                          "parameterName": "param_status",
                          "comparison": "isNotEqualTo"
                        },
                        "showPin": true,
                        "name": "BatchJobTable",
                        "styleSettings": {
                          "margin": "-150px 0px 0px 0px"
                        }
                      }
                    ]
                  },
                  "name": "batchjobtilegroup"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedApplicationTab",
                "comparison": "isEqualTo",
                "value": "BatchJob"
              },
              {
                "parameterName": "param_check_batchjobs",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "BatchJobGroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "5f7ce5da-c2d2-4f2b-8144-4c4d55689f0e",
                        "version": "KqlParameterItem/1.0",
                        "name": "SeverityType",
                        "label": "Severity Type",
                        "type": 2,
                        "query": "SapNetweaver_SysLogs_CL\r\n| extend Severity = case( E2E_SEVERITY_s == '1', 'Error',\r\n                        E2E_SEVERITY_s == '2', 'Warning',\r\n                        E2E_SEVERITY_s == '3', 'Info','')\r\n| distinct Severity",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::1"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::1",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "Sys Log Parameters"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_SysLogs_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Severity = case( '{SeverityType}' == 'Error','1',\r\n                          '{SeverityType}' == 'Warning','2',\r\n                          '{SeverityType}' == 'Info','3','')\r\n| where E2E_SEVERITY_s == Severity\r\n| distinct E2E_SEVERITY_s, E2E_HOST_s, Problem_Class_s, Application_Comp_s, Program_s, Msg_area_Msd_Id_s, Description_s, timestamp_t, E2E_USER_s\r\n| count\r\n| extend Title = strcat(\"Total Number Of \",'{SeverityType}',\" Messages\")",
                    "size": 4,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "tiles",
                    "tileSettings": {
                      "leftContent": {
                        "columnMatch": "Count",
                        "formatter": 12,
                        "formatOptions": {
                          "min": 0,
                          "palette": "greenRed"
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Title",
                        "formatter": 1
                      },
                      "showBorder": true,
                      "sortOrderField": 1,
                      "size": "full"
                    }
                  },
                  "customWidth": "20",
                  "name": "SysLogTile"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_SysLogs_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct E2E_SEVERITY_s, E2E_HOST_s, Problem_Class_s, Application_Comp_s, Program_s, Msg_area_Msd_Id_s, Description_s, timestamp_t, E2E_USER_s\r\n| extend Severity = case( '{SeverityType}' == 'Error','1',\r\n                          '{SeverityType}' == 'Warning','2',\r\n                          '{SeverityType}' == 'Info','3','')\r\n| where E2E_SEVERITY_s == Severity\r\n| project timestamp_t;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize error_count  = count() by bin(timestamp_t, timespanInterval)\r\n\r\n",
                    "size": 0,
                    "aggregation": 5,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "linechart",
                    "graphSettings": {
                      "type": 0,
                      "topContent": {
                        "columnMatch": "GNAME_s",
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "object_locks",
                        "formatter": 1,
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      }
                    },
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "error_count"
                      ],
                      "group": null,
                      "createOtherGroup": 0,
                      "showMetrics": false,
                      "showLegend": true,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "error_count",
                          "label": "Number Of System Error/Warnings",
                          "color": "orange"
                        },
                        {
                          "color": "red"
                        }
                      ],
                      "showDataPoints": true,
                      "ySettings": {
                        "min": 0
                      }
                    }
                  },
                  "customWidth": "75",
                  "name": "SysLogsChart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_SysLogs_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_s))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| extend datevalue = format_datetime(timestamp_t, 'dd-MM-yy')\r\n| extend timevalue = format_datetime(timestamp_t, 'HH:mm:ss')\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Severity = case( '{SeverityType}' == 'Error','1',\r\n                          '{SeverityType}' == 'Warning','2',\r\n                          '{SeverityType}' == 'Info','3','')\r\n| where E2E_SEVERITY_s == Severity\r\n| distinct E2E_SEVERITY_s,Problem_Class_s, Application_Comp_s, Program_s, Msg_area_Msd_Id_s, Description_s, E2E_HOST_s, datevalue, timevalue, E2E_USER_s",
                    "size": 1,
                    "noDataMessage": "The query returned no result",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Lock Object Type",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "OK",
                                "representation": "success",
                                "text": "{0}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "4",
                                "text": "{0}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Unknown",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 3
                            }
                          }
                        },
                        {
                          "columnMatch": "Max",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "ObjectLimit",
                          "formatter": 1,
                          "numberFormat": {
                            "unit": 17,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"ObjectLimit\"]"
                          }
                        }
                      ],
                      "rowLimit": 200,
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "E2E_SEVERITY_s",
                          "label": "Severity"
                        },
                        {
                          "columnId": "Problem_Class_s",
                          "label": "Problem Class"
                        },
                        {
                          "columnId": "Application_Comp_s",
                          "label": "Application Component"
                        },
                        {
                          "columnId": "Program_s",
                          "label": "Program Name"
                        },
                        {
                          "columnId": "Msg_area_Msd_Id_s",
                          "label": "Message ID"
                        },
                        {
                          "columnId": "Description_s",
                          "label": "Description"
                        },
                        {
                          "columnId": "E2E_HOST_s",
                          "label": "Instance Name "
                        },
                        {
                          "columnId": "datevalue",
                          "label": "Date"
                        },
                        {
                          "columnId": "timevalue",
                          "label": "Time"
                        },
                        {
                          "columnId": "E2E_USER_s",
                          "label": "User"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "customWidth": "100",
                  "showPin": true,
                  "name": "SysLogTable"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedApplicationTab",
                "comparison": "isEqualTo",
                "value": "SysLogs"
              },
              {
                "parameterName": "param_check_syslogs",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "SysLogsGroup"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Application"
        },
        {
          "parameterName": "param_check_sdump",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "applicationgroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "f6abaf17-46a5-4849-9d72-d4a262bb2965",
                  "cellValue": "selectedPerfRFCTab",
                  "linkTarget": "parameter",
                  "linkLabel": "CPU and Memory",
                  "subTarget": "CPUMemory",
                  "style": "link"
                },
                {
                  "id": "ee23bc56-4d33-4a4b-8d68-54a1f8173a04",
                  "cellValue": "selectedPerfRFCTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Process Utilization",
                  "subTarget": "ProcessUtilization",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SelectedTab",
                "comparison": "isEqualTo",
                "value": "Performance"
              },
              {
                "parameterName": "param_check_smon",
                "comparison": "isEqualTo",
                "value": "0"
              },
              {
                "parameterName": "param_check_abapwp",
                "comparison": "isEqualTo",
                "value": "0"
              },
              {
                "parameterName": "param_check_rfc_metrics",
                "comparison": "isEqualTo",
                "value": "0"
              },
              {
                "parameterName": "param_check_provider_error",
                "comparison": "isNotEqualTo",
                "value": "-1"
              }
            ],
            "name": "RFCPerformaceTab"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "9c13180c-e1fe-4d7d-ac8c-68e6fce92bcd",
                  "cellValue": "selectedPerfTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Process Utilization",
                  "subTarget": "ProcessUtilization",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SelectedTab",
                "comparison": "isEqualTo",
                "value": "Performance"
              },
              {
                "parameterName": "param_check_provider_error",
                "comparison": "isNotEqualTo",
                "value": "-1"
              },
              {
                "parameterName": "param_check_rfc_metrics",
                "comparison": "isNotEqualTo",
                "value": "0"
              },
              {
                "parameterName": "param_check_abapwp",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "NonRFCPerformaceTab"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "2a6540cb-5072-4185-8a3c-bece3c4b1ed0",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedPerformanceTab",
                  "type": 1,
                  "query": "let selMenu = dynamic(\"{selectedPerfRFCTab}\");\nlet selMenuRFC = dynamic(\"{selectedPerfTab}\");\nlet rfcCheckParam = dynamic(\"{param_check_rfc_metrics}\");\nlet selTabValue = case(selMenu == \"CPUMemory\", \"CPUMemory\", \n                        selMenu == \"ProcessUtilization\", \"ProcessUtilization\" ,  \n                        \"\");\nlet selTabRFCValue = case(\n                          selMenuRFC == \"ProcessUtilization\", \"ProcessUtilization\" ,\n                            \"\");    \n\nlet chooseTab = iff((rfcCheckParam == 0),selTabValue,selTabRFCValue);\nprint toscalar(chooseTab);\n",
                  "isHiddenWhenLocked": true,
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "SelectedPerfTabParameter"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Performance"
        },
        {
          "parameterName": "param_check_abapwp",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "PerformanceTabGroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_SMON_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| project USR_TOTAL_d, SYS_TOTAL_d, IDLE_TOTAL_d, SID_s, hostname_s, instanceNr_s, timestamp_t\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend TOTAL_CPU = (100 - IDLE_TOTAL_d)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Count = count() by bin(timestamp_t, timespanInterval),USR_TOTAL_d, SYS_TOTAL_d, IDLE_TOTAL_d, TOTAL_CPU, timestamp_t",
                    "size": 0,
                    "aggregation": 3,
                    "title": "CPU Utilization % - User and System (SMON)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "areachart",
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "USR_TOTAL_d",
                        "SYS_TOTAL_d"
                      ],
                      "group": null,
                      "createOtherGroup": 0,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "USR_TOTAL_d",
                          "label": "CPU User Utilization"
                        },
                        {
                          "seriesName": "SYS_TOTAL_d",
                          "label": "CPU System Utilization"
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "CPU Utilization - User / System",
                  "styleSettings": {
                    "maxWidth": "50",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_SMON_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| project FREE_MEM_MB_d, FREE_MEM_MB_INC_FS_d, timestamp_t,  hostname_s,instanceNr_s,SID_s\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| project FREE_MEM_MB_d, FREE_MEM_MB_INC_FS_d, timestamp_t",
                    "size": 0,
                    "aggregation": 3,
                    "title": "Free Memory (SMON)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "linechart",
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "FREE_MEM_MB_d",
                        "FREE_MEM_MB_INC_FS_d"
                      ],
                      "group": null,
                      "createOtherGroup": 0,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "FREE_MEM_MB_d",
                          "label": "Free Memory (MB)",
                          "color": "blue"
                        },
                        {
                          "seriesName": "FREE_MEM_MB_INC_FS_d",
                          "label": "Free Memory Including Cache (MB)",
                          "color": "blueDark"
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "SMON Memory Utilization",
                  "styleSettings": {
                    "maxWidth": "50",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_SMON_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| project PAGE_IN_PERC_d, PAGE_OUT_PERC_d, timestamp_t, hostname_s,instanceNr_s,SID_s\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| project PAGE_IN_PERC_d, PAGE_OUT_PERC_d, timestamp_t, hostname_s",
                    "size": 0,
                    "aggregation": 3,
                    "title": "Memory - Paging In/Out % Of RAM/Hour (SMON)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "timechart",
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "seriesLabelSettings": [
                        {
                          "seriesName": "PAGE_IN_PERC_d",
                          "label": "Paging In (% of RAM per hour) "
                        },
                        {
                          "seriesName": "PAGE_OUT_PERC_d",
                          "label": "Paging Out (% of RAM per hour) "
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "Paging In Out",
                  "styleSettings": {
                    "maxWidth": "50",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_SMON_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| project PRIVWPNO_d, timestamp_t,  hostname_s,instanceNr_s,SID_s\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| project PRIVWPNO_d, timestamp_t",
                    "size": 0,
                    "aggregation": 3,
                    "title": "Number Of Work Processes in Priv Modes (SMON)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "timechart",
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "PRIVWPNO_d"
                      ],
                      "seriesLabelSettings": [
                        {
                          "seriesName": "PRIVWPNO_d",
                          "label": "Number Of Process In Private Mode"
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "SMON Privatemode",
                  "styleSettings": {
                    "maxWidth": "50",
                    "showBorder": true
                  }
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedPerformanceTab",
                "comparison": "isEqualTo",
                "value": "CPUMemory"
              },
              {
                "parameterName": "param_check_smon",
                "comparison": "isEqualTo",
                "value": "0"
              },
              {
                "parameterName": "param_check_rfc_metrics",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "Memorygroup",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "c3787ab9-7fbe-4f52-9adc-47ef495bdab4",
                        "version": "KqlParameterItem/1.0",
                        "name": "CPUWorkProcessType",
                        "label": "Work Process Type",
                        "type": 2,
                        "query": "SapNetweaver_ABAPGetWPTable_CL\r\n| distinct Typ_s",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::1"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::1",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "Utilization Parameters"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet workProcessType = '{CPUWorkProcessType}';\r\nSapNetweaver_ABAPGetWPTable_CL\r\n| where serverTimestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == workProcessType\r\n| summarize totalWP = count(), freeWP = countif(Status_s == \"Wait\") by bin(serverTimestamp_t, 1m), Typ_s\r\n| extend activeWP = totalWP - freeWP",
                    "size": 0,
                    "aggregation": 3,
                    "title": "Workprocess Utilization​",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "areachart",
                    "chartSettings": {
                      "xAxis": "serverTimestamp_t",
                      "yAxis": [
                        "activeWP",
                        "freeWP"
                      ],
                      "seriesLabelSettings": [
                        {
                          "seriesName": "activeWP",
                          "label": "Active Work Process",
                          "color": "red"
                        },
                        {
                          "seriesName": "freeWP",
                          "label": "Free Work Process",
                          "color": "blue"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "param_check_abapwp",
                    "comparison": "isEqualTo",
                    "value": "0"
                  },
                  "name": "PerformanceWorkprocessUtilization​"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let workProcessType = '{CPUWorkProcessType}';\r\nlet appServerList = dynamic([{ApplicationServer}]);\r\nlet maxTimestamp = SapNetweaver_ABAPGetWPTable_CL\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == workProcessType\r\n| where Status_s == 'Run' or Status_s == 'On Hold'\r\n| summarize max(serverTimestamp_t);\r\n\r\nSapNetweaver_ABAPGetWPTable_CL\r\n| where serverTimestamp_t == toscalar(maxTimestamp)\r\n| where SID_s == '{SID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == workProcessType\r\n| where Status_s == 'Run' or Status_s == 'On-Hold'\r\n| extend ApplicationServerInstance = strcat(hostname_s, \"_\", SID_s,\"_\", instanceNr_s), ProcessNumber = No_d, ProcessType = Typ_s, ProcessId = Pid_d, Status = Status_s, Reason = Reason_s, Error = Err_s, CPU = Cpu_s, Time = Time_s, Program = Program_s, User = User_s, Client = Client_s\r\n| project ApplicationServerInstance, ProcessNumber, ProcessType, ProcessId, Status, Reason, Error , CPU,Time, Program, User, Client\r\n",
                    "size": 3,
                    "title": "Active Work Process (SM66)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ApplicationServerInstance",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "ProcessNumber",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "ProcessType",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "ProcessId",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Reason",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Error",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "CPU",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Time",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Program",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "User",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Client",
                          "formatter": 1
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "ApplicationServerInstance",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "ApplicationServerInstance",
                          "label": "Application Server Instance"
                        },
                        {
                          "columnId": "ProcessNumber",
                          "label": "Process Number"
                        },
                        {
                          "columnId": "ProcessType",
                          "label": "Process Type"
                        },
                        {
                          "columnId": "ProcessId",
                          "label": "Process Id"
                        },
                        {
                          "columnId": "Status"
                        },
                        {
                          "columnId": "Reason"
                        },
                        {
                          "columnId": "Error"
                        },
                        {
                          "columnId": "CPU",
                          "label": "CPU Time"
                        },
                        {
                          "columnId": "Time",
                          "label": "Time Priority"
                        },
                        {
                          "columnId": "Program",
                          "label": "Program Name"
                        },
                        {
                          "columnId": "User",
                          "label": "User Id"
                        },
                        {
                          "columnId": "Client"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "ApplicationServerInstance",
                        "sortOrder": 1
                      }
                    ],
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "FREE_MEM_MB_d",
                        "ACT_WPS_d"
                      ],
                      "seriesLabelSettings": [
                        {
                          "seriesName": "ACT_DIA_d",
                          "label": "Active Dialog  WPs"
                        },
                        {
                          "seriesName": "ACT_WPS_d",
                          "label": "Active WPs​"
                        },
                        {
                          "seriesName": "TRFC_FREE_d",
                          "label": "Available RFC WPs"
                        },
                        {
                          "seriesName": "FREE_MEM_MB_d",
                          "label": "Free WPs"
                        },
                        {
                          "seriesName": "FREE_MEM_MB_INC_FS_d",
                          "label": "Free Memory including File System Cache (MB)"
                        }
                      ]
                    }
                  },
                  "name": "ActiveWorkprocess (SM66)",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_SMON_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| project USERS_d, SESSIONS_d, SID_s, hostname_s, instanceNr_s, timestamp_t\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| project USERS_d, SESSIONS_d, timestamp_t\r\n",
                          "size": 0,
                          "title": "User Logons and Sessions",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "linechart",
                          "chartSettings": {
                            "xAxis": "timestamp_t",
                            "yAxis": [
                              "SESSIONS_d",
                              "USERS_d"
                            ],
                            "seriesLabelSettings": [
                              {
                                "seriesName": "SESSIONS_d",
                                "label": "Sessions"
                              },
                              {
                                "seriesName": "USERS_d",
                                "label": "User Logons"
                              }
                            ]
                          }
                        },
                        "customWidth": "50",
                        "name": "User Logons and Sessions",
                        "styleSettings": {
                          "maxWidth": "50",
                          "showBorder": true
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet baseQuery = SapNetweaver_SMON_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| project UPDQ_d, ENQQ_d, DIAQ_d, QINLENGTH_d, QOUTLENGTH_d, SID_s, hostname_s, instanceNr_s, SERVER_s, timestamp_t\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| project UPDQ_d, ENQQ_d, DIAQ_d, QINLENGTH_d, QOUTLENGTH_d, timestamp_t;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Count = count() by bin(timestamp_t, timespanInterval),UPDQ_d, ENQQ_d, DIAQ_d, QINLENGTH_d, QOUTLENGTH_d\r\n| project-away Count\r\n",
                          "size": 0,
                          "title": "Queue Lengths Performance",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "linechart",
                          "chartSettings": {
                            "xAxis": "timestamp_t",
                            "seriesLabelSettings": [
                              {
                                "seriesName": "UPDQ_d",
                                "label": "Update"
                              },
                              {
                                "seriesName": "ENQQ_d",
                                "label": "Enqueue"
                              },
                              {
                                "seriesName": "DIAQ_d",
                                "label": "Dialog"
                              },
                              {
                                "seriesName": "QINLENGTH_d",
                                "label": "Incoming RFC"
                              },
                              {
                                "seriesName": "QOUTLENGTH_d",
                                "label": "Outgoing RFC"
                              }
                            ]
                          }
                        },
                        "customWidth": "50",
                        "name": "Queue Lengths Performance",
                        "styleSettings": {
                          "maxWidth": "50",
                          "showBorder": true
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nSapNetweaver_SMON_CL\r\n| where timestamp_t between (todatetime({TimeRange:start}) .. todatetime({TimeRange:end}))\r\n| where SID_s == '{SID}'\r\n| project DIAAVG20_d, DIAAVG60_d, SID_s, hostname_s, instanceNr_s, SERVER_s, timestamp_t\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 1, strcat(\"0\", instanceNr_s), instanceNr_s)\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| project DIAAVG20_d, DIAAVG60_d, timestamp_t\r\n",
                          "size": 0,
                          "aggregation": 3,
                          "title": "Dialog Queue Length Performance",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "linechart",
                          "chartSettings": {
                            "xAxis": "timestamp_t",
                            "yAxis": [
                              "DIAAVG20_d",
                              "DIAAVG60_d"
                            ],
                            "seriesLabelSettings": [
                              {
                                "seriesName": "DIAAVG20_d",
                                "label": "Dialog Queue Length (20s)"
                              },
                              {
                                "seriesName": "DIAAVG60_d",
                                "label": "Dialog Queue Length (60s)"
                              }
                            ]
                          }
                        },
                        "name": "Dialog Queue Length Performance"
                      }
                    ]
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "param_check_smon",
                      "comparison": "isEqualTo",
                      "value": "0"
                    },
                    {
                      "parameterName": "param_check_rfc_metrics",
                      "comparison": "isEqualTo",
                      "value": "0"
                    }
                  ],
                  "name": "SMONUtilizationGroup"
                }
              ],
              "exportParameters": true
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedPerformanceTab",
                "comparison": "isEqualTo",
                "value": "ProcessUtilization"
              },
              {
                "parameterName": "param_check_abapwp",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "UtilizationGroup"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Performance"
        },
        {
          "parameterName": "param_check_abapwp",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "performanceprocessutilizationgroup"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "1dc67097-34d6-4ef1-b0c1-2b3b7b16a148",
            "version": "KqlParameterItem/1.0",
            "name": "WorkloadTimeRange",
            "label": "Time Range",
            "type": 4,
            "value": {
              "durationMs": 1800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "6f7246d7-6be3-463b-9a60-0e80f7e21644",
            "version": "KqlParameterItem/1.0",
            "name": "WorkloadSID",
            "type": 2,
            "quote": "'",
            "delimiter": ",",
            "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where isnotempty(SID_s)\r\n| distinct SID_s",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "defaultValue": "value::1",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "label": "SID"
          },
          {
            "id": "fc6e4d15-16f3-4ab0-99de-cc5e28322caa",
            "version": "KqlParameterItem/1.0",
            "name": "WorkloadTaskType",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "SapNetweaver_SWNC_CL\r\n| where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'\r\n| summarize count() by Task_Type_Name_s\r\n| order by count_\r\n| project Task_Type_Name_s",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "label": "Workload Task Type"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "WorkloadStatistics"
        },
        {
          "parameterName": "param_check_swnc",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Workload Parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Response Time Trends",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let taskTypeList = dynamic([{WorkloadTaskType}]);\r\nSapNetweaver_SWNC_CL\r\n|where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'|where array_length(taskTypeList) == 0 or Task_Type_Name_s in (taskTypeList)\r\n|extend Avg_Response_Time=Total_Response_Time_d / Total_Steps_d,\r\n         Avg_CPU_Time=Total_CPU_Time_d / Total_Steps_d\r\n|extend  Avg_CPU_Time_In_MS = bin(totimespan(Avg_CPU_Time)/ time(1ms), 0.001)\r\n| sort by strlen(Task_Type_Name_s) desc\r\n//| extend tasktype = sort by strlen(Task_Type_Name_s) asc\r\n| project timestamp_t, Task_Type_Name_s,  Avg_CPU_Time_In_MS\r\n\r\n\r\n",
              "size": 0,
              "aggregation": 3,
              "title": "Average CPU Time (in milliseconds)",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "Total_DB_Chg_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  }
                },
                "rightContent": {
                  "columnMatch": "Total_DB_Seq_Read_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "orange"
                  }
                },
                "showBorder": true
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total_DB_Chg_Time_d",
                    "label": "Change Time",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Total_DB_Seq_Read_Time_d",
                    "label": "Sequence Read Time",
                    "color": "brown"
                  },
                  {
                    "seriesName": "RFC",
                    "color": "blue"
                  },
                  {
                    "seriesName": "AUTOABA",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "BCKGRD",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "0xF9",
                    "color": "blueDarkDark"
                  },
                  {
                    "seriesName": "DIALOG",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "DINOGUI",
                    "color": "green"
                  },
                  {
                    "seriesName": "UPDATE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "BGRFC SCHEDULER",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "AUTOCCMS",
                    "color": "purpleDark"
                  },
                  {
                    "seriesName": "AUTOTH",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HTTP",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "DEL. THCALL",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "BUF.SYN",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "SPOOL",
                    "color": "red"
                  },
                  {
                    "seriesName": "DDLOG CLEANUP",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "OTHER",
                    "color": "brown"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "name": "Average CPU time",
            "styleSettings": {
              "margin": "1",
              "padding": "1",
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let taskTypeList = dynamic([{WorkloadTaskType}]);\r\nSapNetweaver_SWNC_CL\r\n|where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'|where array_length(taskTypeList) == 0 or Task_Type_Name_s in (taskTypeList)\r\n|extend Avg_Response_Time=Total_Response_Time_d / Total_Steps_d,\r\n         Avg_CPU_Time=Total_CPU_Time_d / Total_Steps_d,\r\n         Avg_Queue_Time=Total_Queue_Time_d / Total_Steps_d,\r\n         Avg_GUI_Time=Total_GUI_Time_d / Total_Steps_d,\r\n         Avg_DB_Time=Total_DB_Time_d / Total_Steps_d,\r\n         Avg_DB_Proc_Time=Total_DB_Proc_Time_d / Total_Steps_d,\r\n         Avg_RollWait_Time=Total_Roll_Wait_Time_d / Total_Steps_d,\r\n         Avg_Processing_Time=Total_Processing_Time_d / Total_Steps_d\r\n|extend  Avg_Response_Time_In_MS = bin(totimespan(Avg_Response_Time)/ time(1ms), 0.001)    \r\n| project timestamp_t, Task_Type_Name_s,Avg_Response_Time,Avg_Response_Time_In_MS\r\n\r\n",
              "size": 0,
              "aggregation": 3,
              "title": "Average Response Time (in milliseconds)",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "Total_DB_Chg_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  }
                },
                "rightContent": {
                  "columnMatch": "Total_DB_Seq_Read_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "orange"
                  }
                },
                "showBorder": true
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "Avg_Response_Time_In_MS"
                ],
                "group": "Task_Type_Name_s",
                "createOtherGroup": null,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total_DB_Chg_Time_d",
                    "label": "Change Time",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Total_DB_Seq_Read_Time_d",
                    "label": "Sequence Read Time",
                    "color": "brown"
                  },
                  {
                    "seriesName": "0xF9",
                    "color": "blueDarkDark"
                  },
                  {
                    "seriesName": "BCKGRD",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "RFC",
                    "color": "blue"
                  },
                  {
                    "seriesName": "AUTOABA",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "UPDATE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "DIALOG",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "DINOGUI",
                    "color": "green"
                  },
                  {
                    "seriesName": "BGRFC SCHEDULER",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "OTHER",
                    "color": "brown"
                  },
                  {
                    "seriesName": "HTTP",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  },
                  {
                    "seriesName": "AUTOTH",
                    "color": "pink"
                  },
                  {
                    "seriesName": "DEL. THCALL",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "BUF.SYN",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "SPOOL",
                    "color": "red"
                  },
                  {
                    "seriesName": "DDLOG CLEANUP",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "AUTOCCMS",
                    "color": "purpleDark"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "name": "Average Response time",
            "styleSettings": {
              "margin": "1",
              "padding": "1",
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let taskTypeList = dynamic([{WorkloadTaskType}]);\r\nSapNetweaver_SWNC_CL\r\n|where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'|where array_length(taskTypeList) == 0 or Task_Type_Name_s in (taskTypeList)\r\n|extend Avg_Response_Time=Total_Response_Time_d / Total_Steps_d,\r\n         Avg_CPU_Time=Total_CPU_Time_d / Total_Steps_d,\r\n         Avg_Queue_Time=Total_Queue_Time_d / Total_Steps_d,\r\n         Avg_GUI_Time=Total_GUI_Time_d / Total_Steps_d,\r\n         Avg_DB_Time=Total_DB_Time_d / Total_Steps_d,\r\n         Avg_DB_Proc_Time=Total_DB_Proc_Time_d / Total_Steps_d,\r\n         Avg_RollWait_Time=Total_Roll_Wait_Time_d / Total_Steps_d,\r\n         Avg_Processing_Time=Total_Processing_Time_d / Total_Steps_d\r\n| project timestamp_t, Task_Type_Name_s, Avg_Queue_Time\r\n\r\n",
              "size": 0,
              "aggregation": 3,
              "title": "Average Wait Time (in milliseconds)",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "Total_DB_Chg_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  }
                },
                "rightContent": {
                  "columnMatch": "Total_DB_Seq_Read_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "orange"
                  }
                },
                "showBorder": true
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "Avg_Queue_Time"
                ],
                "group": "Task_Type_Name_s",
                "createOtherGroup": null,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total_DB_Chg_Time_d",
                    "label": "Change Time",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Total_DB_Seq_Read_Time_d",
                    "label": "Sequence Read Time",
                    "color": "brown"
                  },
                  {
                    "seriesName": "OTHER",
                    "color": "brown"
                  },
                  {
                    "seriesName": "AUTOCCMS",
                    "color": "purpleDark"
                  },
                  {
                    "seriesName": "AUTOTH",
                    "color": "pink"
                  },
                  {
                    "seriesName": "DDLOG CLEANUP",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "RFC",
                    "color": "blue"
                  },
                  {
                    "seriesName": "BCKGRD",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "BUF.SYN",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "HTTP",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "DIALOG",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "DINOGUI",
                    "color": "green"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  },
                  {
                    "seriesName": "DEL. THCALL",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "AUTOABA",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "SPOOL",
                    "color": "red"
                  },
                  {
                    "seriesName": "BGRFC SCHEDULER",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "UPDATE",
                    "color": "orange"
                  }
                ],
                "showDataPoints": true,
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                },
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "name": "AverageWaitTime",
            "styleSettings": {
              "margin": "1",
              "padding": "1",
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let taskTypeList = dynamic([{WorkloadTaskType}]);\r\nSapNetweaver_SWNC_CL\r\n|where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'|where array_length(taskTypeList) == 0 or Task_Type_Name_s in (taskTypeList)\r\n|extend Avg_Response_Time=Total_Response_Time_d / Total_Steps_d,\r\n         Avg_CPU_Time=Total_CPU_Time_d / Total_Steps_d,\r\n         Avg_Queue_Time=Total_Queue_Time_d / Total_Steps_d,\r\n         Avg_GUI_Time=Total_GUI_Time_d / Total_Steps_d,\r\n         Avg_DB_Time=Total_DB_Time_d / Total_Steps_d,\r\n         Avg_DB_Proc_Time=Total_DB_Proc_Time_d / Total_Steps_d,\r\n         Avg_RollWait_Time=Total_Roll_Wait_Time_d / Total_Steps_d,\r\n         Avg_Processing_Time=Total_Processing_Time_d / Total_Steps_d\r\n|extend  Avg_Processing_Time_In_MS = bin(totimespan(Avg_Processing_Time)/ time(1ms), 0.001)    \r\n| project timestamp_t, Task_Type_Name_s, Avg_Processing_Time, Avg_Processing_Time_In_MS\r\n            \r\n\r\n",
              "size": 0,
              "aggregation": 3,
              "title": "Average Load  Time (in milliseconds)",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "Total_DB_Chg_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  }
                },
                "rightContent": {
                  "columnMatch": "Total_DB_Seq_Read_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "orange"
                  }
                },
                "showBorder": true
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "Avg_Processing_Time_In_MS"
                ],
                "group": "Task_Type_Name_s",
                "createOtherGroup": null,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total_DB_Chg_Time_d",
                    "label": "Change Time",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Total_DB_Seq_Read_Time_d",
                    "label": "Sequence Read Time",
                    "color": "brown"
                  },
                  {
                    "seriesName": "BCKGRD",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "AUTOABA",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "RFC",
                    "color": "blue"
                  },
                  {
                    "seriesName": "DIALOG",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "DINOGUI",
                    "color": "green"
                  },
                  {
                    "seriesName": "0xF9",
                    "color": "blueDarkDark"
                  },
                  {
                    "seriesName": "BGRFC SCHEDULER",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "HTTP",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "SPOOL",
                    "color": "red"
                  },
                  {
                    "seriesName": "AUTOTH",
                    "color": "pink"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  },
                  {
                    "seriesName": "DEL. THCALL",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "BUF.SYN",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "DDLOG CLEANUP",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "AUTOCCMS",
                    "color": "purpleDark"
                  },
                  {
                    "seriesName": "UPDATE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "OTHER",
                    "color": "brown"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "name": "AverageLoadTime",
            "styleSettings": {
              "margin": "1",
              "padding": "1",
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let taskTypeList = dynamic([{WorkloadTaskType}]);\r\nSapNetweaver_SWNC_CL\r\n|where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'|where array_length(taskTypeList) == 0 or Task_Type_Name_s in (taskTypeList)\r\n|extend Avg_Response_Time=Total_Response_Time_d / Total_Steps_d,\r\n         Avg_CPU_Time=Total_CPU_Time_d / Total_Steps_d,\r\n         Avg_Queue_Time=Total_Queue_Time_d / Total_Steps_d,\r\n         Avg_GUI_Time=Total_GUI_Time_d / Total_Steps_d,\r\n         Avg_DB_Time=Total_DB_Time_d / Total_Steps_d,\r\n         Avg_DB_Proc_Time=Total_DB_Proc_Time_d / Total_Steps_d,\r\n         Avg_RollWait_Time=Total_Roll_Wait_Time_d / Total_Steps_d,\r\n         Avg_Processing_Time=Total_Processing_Time_d / Total_Steps_d\r\n|extend  Avg_GUI_Time_In_MS = bin(totimespan(Avg_GUI_Time)/ time(1ms), 0.001)    \r\n| project timestamp_t, Task_Type_Name_s, Avg_Response_Time, Avg_GUI_Time_In_MS, Avg_GUI_Time\r\n",
              "size": 0,
              "aggregation": 3,
              "title": "Average GUI Time (in milliseconds)",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "Total_DB_Chg_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  }
                },
                "rightContent": {
                  "columnMatch": "Total_DB_Seq_Read_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "orange"
                  }
                },
                "showBorder": true
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "Avg_GUI_Time_In_MS"
                ],
                "group": "Task_Type_Name_s",
                "createOtherGroup": null,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total_DB_Chg_Time_d",
                    "label": "Change Time",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Total_DB_Seq_Read_Time_d",
                    "label": "Sequence Read Time",
                    "color": "brown"
                  },
                  {
                    "seriesName": "DIALOG",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "DINOGUI",
                    "color": "green"
                  },
                  {
                    "seriesName": "SPOOL",
                    "color": "red"
                  },
                  {
                    "seriesName": "BCKGRD",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "BUF.SYN",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "AUTOABA",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "AUTOTH",
                    "color": "pink"
                  },
                  {
                    "seriesName": "DDLOG CLEANUP",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "DEL. THCALL",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "AUTOCCMS",
                    "color": "purpleDark"
                  },
                  {
                    "seriesName": "HTTP",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "BGRFC SCHEDULER",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "UPDATE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "OTHER",
                    "color": "brown"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "name": "AverageGUITime",
            "styleSettings": {
              "margin": "1",
              "padding": "1",
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let taskTypeList = dynamic([{WorkloadTaskType}]);\r\nSapNetweaver_SWNC_CL\r\n|where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'|where array_length(taskTypeList) == 0 or Task_Type_Name_s in (taskTypeList)\r\n|extend Avg_Response_Time=Total_Response_Time_d / Total_Steps_d,\r\n         Avg_CPU_Time=Total_CPU_Time_d / Total_Steps_d,\r\n         Avg_Queue_Time=Total_Queue_Time_d / Total_Steps_d,\r\n         Avg_GUI_Time=Total_GUI_Time_d / Total_Steps_d,\r\n         Avg_DB_Time=Total_DB_Time_d / Total_Steps_d,\r\n         Avg_DB_Proc_Time=Total_DB_Proc_Time_d / Total_Steps_d,\r\n         Avg_RollWait_Time=Total_Roll_Wait_Time_d / Total_Steps_d,\r\n         Avg_Processing_Time=Total_Processing_Time_d / Total_Steps_d\r\n|extend  Avg_RollWait_Time_In_MS = bin(totimespan(Avg_RollWait_Time)/ time(1ms), 0.001)    \r\n| project timestamp_t, Task_Type_Name_s, Avg_RollWait_Time_In_MS, Avg_RollWait_Time\r\n\r\n",
              "size": 0,
              "aggregation": 3,
              "title": "Average Roll Wait Time (in milliseconds)",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "Total_DB_Chg_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  }
                },
                "rightContent": {
                  "columnMatch": "Total_DB_Seq_Read_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "orange"
                  }
                },
                "showBorder": true
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "Avg_RollWait_Time_In_MS"
                ],
                "group": "Task_Type_Name_s",
                "createOtherGroup": null,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total_DB_Chg_Time_d",
                    "label": "Change Time",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Total_DB_Seq_Read_Time_d",
                    "label": "Sequence Read Time",
                    "color": "brown"
                  },
                  {
                    "seriesName": "0xF9",
                    "color": "blueDarkDark"
                  },
                  {
                    "seriesName": "DIALOG",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "DINOGUI",
                    "color": "green"
                  },
                  {
                    "seriesName": "RFC",
                    "color": "blue"
                  },
                  {
                    "seriesName": "SPOOL",
                    "color": "red"
                  },
                  {
                    "seriesName": "BCKGRD",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "BUF.SYN",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "AUTOABA",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "AUTOTH",
                    "color": "pink"
                  },
                  {
                    "seriesName": "DDLOG CLEANUP",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "HTTP",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "DEL. THCALL",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "AUTOCCMS",
                    "color": "purpleDark"
                  },
                  {
                    "seriesName": "BGRFC SCHEDULER",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "UPDATE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "OTHER",
                    "color": "brown"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "name": "AverageRollWaitTime",
            "styleSettings": {
              "margin": "1",
              "padding": "1",
              "showBorder": true
            }
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "WorkloadStatistics"
        },
        {
          "parameterName": "param_check_swnc",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "workloadstatisticsresponetimegroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Database Latency Trends",
        "expandable": true,
        "expanded": true,
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let taskTypeList = dynamic([{WorkloadTaskType}]);\r\nSapNetweaver_SWNC_CL\r\n|where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'|where array_length(taskTypeList) == 0 or Task_Type_Name_s in (taskTypeList)\r\n| extend DatabaseCalls =  ST03_Avg_DB_Dir_Time_d + ST03_Avg_DB_Seq_Time_d + ST03_Avg_DB_Change_Time_d   \r\n| project timestamp_t, Task_Type_Name_s,DatabaseCalls",
              "size": 0,
              "aggregation": 3,
              "title": "Database Calls",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "Total_DB_Chg_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  }
                },
                "rightContent": {
                  "columnMatch": "Total_DB_Seq_Read_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "orange"
                  }
                },
                "showBorder": true
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "DatabaseCalls"
                ],
                "group": "Task_Type_Name_s",
                "createOtherGroup": null,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total_DB_Chg_Time_d",
                    "label": "Change Time",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Total_DB_Seq_Read_Time_d",
                    "label": "Sequence Read Time",
                    "color": "brown"
                  },
                  {
                    "seriesName": "BCKGRD",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "RFC",
                    "color": "blue"
                  },
                  {
                    "seriesName": "DIALOG",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "DINOGUI",
                    "color": "green"
                  },
                  {
                    "seriesName": "OTHER",
                    "color": "brown"
                  },
                  {
                    "seriesName": "BGRFC SCHEDULER",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "AUTOABA",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "BUF.SYN",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "0xF9",
                    "color": "blueDarkDark"
                  },
                  {
                    "seriesName": "DEL. THCALL",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  },
                  {
                    "seriesName": "UPDATE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "AUTOTH",
                    "color": "pink"
                  },
                  {
                    "seriesName": "HTTP",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "SPOOL",
                    "color": "red"
                  },
                  {
                    "seriesName": "DDLOG CLEANUP",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "AUTOCCMS",
                    "color": "purpleDark"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "name": "DatabaseCalls",
            "styleSettings": {
              "margin": "1",
              "padding": "1",
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let taskTypeList = dynamic([{WorkloadTaskType}]);\r\nSapNetweaver_SWNC_CL\r\n|where timestamp_t between (todatetime({WorkloadTimeRange:start}) .. todatetime({WorkloadTimeRange:end}))\r\n| where SID_s == '{WorkloadSID}'|where array_length(taskTypeList) == 0 or Task_Type_Name_s in (taskTypeList)\r\n//| extend LogicalDatabaseCall =  Total_DB_Time_d\r\n|extend   Total_DB_Time_In_MS = bin(totimespan( Total_DB_Time_d)/ time(1ms), 0.001)    \r\n| project timestamp_t, Task_Type_Name_s, Total_DB_Time_d,  Total_DB_Time_In_MS",
              "size": 0,
              "aggregation": 3,
              "title": "Average Time/DB Call (in milliseconds)",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "tileSettings": {
                "titleContent": {},
                "leftContent": {
                  "columnMatch": "Total_DB_Chg_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  }
                },
                "rightContent": {
                  "columnMatch": "Total_DB_Seq_Read_Time_d",
                  "formatter": 3,
                  "formatOptions": {
                    "min": 0,
                    "palette": "orange"
                  }
                },
                "showBorder": true
              },
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "Total_DB_Time_In_MS"
                ],
                "group": "Task_Type_Name_s",
                "createOtherGroup": null,
                "showLegend": true,
                "seriesLabelSettings": [
                  {
                    "seriesName": "Total_DB_Chg_Time_d",
                    "label": "Change Time",
                    "color": "blue"
                  },
                  {
                    "seriesName": "Total_DB_Seq_Read_Time_d",
                    "label": "Sequence Read Time",
                    "color": "brown"
                  },
                  {
                    "seriesName": "RFC",
                    "color": "blue"
                  },
                  {
                    "seriesName": "BCKGRD",
                    "color": "lightBlue"
                  },
                  {
                    "seriesName": "DIALOG",
                    "color": "redDark"
                  },
                  {
                    "seriesName": "DINOGUI",
                    "color": "green"
                  },
                  {
                    "seriesName": "AUTOABA",
                    "color": "blueDark"
                  },
                  {
                    "seriesName": "0xF9",
                    "color": "blueDarkDark"
                  },
                  {
                    "seriesName": "HTTP",
                    "color": "magenta"
                  },
                  {
                    "seriesName": "AUTOTH",
                    "color": "pink"
                  },
                  {
                    "seriesName": "DEL. THCALL",
                    "color": "grayBlue"
                  },
                  {
                    "seriesName": "SPOOL",
                    "color": "red"
                  },
                  {
                    "seriesName": "Other",
                    "color": "gray"
                  },
                  {
                    "seriesName": "BUF.SYN",
                    "color": "yellow"
                  },
                  {
                    "seriesName": "DDLOG CLEANUP",
                    "color": "greenDarkDark"
                  },
                  {
                    "seriesName": "AUTOCCMS",
                    "color": "purpleDark"
                  },
                  {
                    "seriesName": "BGRFC SCHEDULER",
                    "color": "turquoise"
                  },
                  {
                    "seriesName": "UPDATE",
                    "color": "orange"
                  },
                  {
                    "seriesName": "OTHER",
                    "color": "brown"
                  }
                ],
                "showDataPoints": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 3
                    }
                  }
                }
              }
            },
            "customWidth": "100",
            "name": "Average time per DB call",
            "styleSettings": {
              "margin": "1",
              "padding": "1",
              "showBorder": true
            }
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "WorkloadStatistics"
        },
        {
          "parameterName": "param_check_swnc",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "workloadstatisticsdatabaselatencygroup "
    }
  ],
   "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}