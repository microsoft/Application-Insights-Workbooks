{
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json",
  "version": "Notebook/1.0",
  "isLocked": true,
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# New Failures Analysis\nThis workbook will help you identify any new failures that may have begun in your app. It looks at your app's failures from three telemetry sources:\n* Requests served by app\n* Exceptions in your app\n* Dependency calls made by you app\n\nThe report provides you with a bunch of information to help you triage and diagnose these new issues. Use it in conjunction with the Failure report in App Insights to understand the failures in your app."
      },
      "conditionalVisibility": null,
      "halfWidth": false
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "84caf619-7585-48e0-a9c3-85c364aaa13b",
            "version": "KqlParameterItem/1.0",
            "name": "Show",
            "type": 2,
            "description": null,
            "isRequired": true,
            "query": "datatable(x:string, y:string)[\r\n\"['New Failure Rate (%)'], ['Existing Failure Rate (%)']\", 'New and Existing Failures',\r\n\"['New Failure Rate (%)']\", 'Only New Failures',\r\n\"['Existing Failure Rate (%)']\", 'Only Existing Failures',\r\n]",
            "value": "['New Failure Rate (%)'], ['Existing Failure Rate (%)']",
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "6ab5c1cb-bad0-4d96-8e63-d439d0681c6e",
            "version": "KqlParameterItem/1.0",
            "name": "In",
            "type": 2,
            "description": null,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "requests\n| where timestamp >= ago(1d)\n| summarize Count = count() by operation_Name\n| order by Count desc\n| project v = operation_Name, t = operation_Name, s = false\n| union (datatable(v:string, t:string, s:boolean)[\n'*', 'All Operations', true\n])",
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "eac9cbf1-6364-4f28-9c61-a9b038c035d7",
            "version": "KqlParameterItem/1.0",
            "name": "OverTimeRange",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "6f0de137-0136-48f0-b463-640de7109c05",
            "version": "KqlParameterItem/1.0",
            "name": "UseComparisonTimeRangeOf",
            "type": 1,
            "isRequired": true,
            "query": "let t = {OverTimeRange:seconds};\r\nlet w = case(t <= 86400, '7d', t <= 259200, '14d', t <= 120960, '28d', '60d');\r\nrange i from 1 to 1 step 1\r\n| project x = w",
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "parameters - 1"
    },
    {
      "type": 1,
      "content": {
        "json": "---\n## Request Failures Analysis\n"
      },
      "name": "text - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "7a6716e6-3b5d-426b-a091-76e25325563a",
            "version": "KqlParameterItem/1.0",
            "name": "RequestFilters",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "requests\r\n| where timestamp {OverTimeRange}\r\n| where operation_Name in ({In}) or '*' in ({In})\r\n| summarize Count = count(), Users = dcount(user_Id) by name\r\n| project v = name, t = name, s=false\r\n| union (datatable(v:string, t:string, s:boolean)[\r\n'*', 'All Requests', true\r\n])",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "fa3ae272-8e65-4b87-a5a6-ef256a8a1956",
            "version": "KqlParameterItem/1.0",
            "name": "IncludeResultCodes",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "datatable(x:string, y:string, z:boolean)[\r\n'@', 'All 500s', false,\r\n'#', 'All 400s', false\r\n]\r\n| union (requests\r\n| where timestamp {OverTimeRange}\r\n| where success == false\r\n| summarize by resultCode\r\n| order by resultCode asc\r\n| project x = resultCode, y = resultCode, z = false)",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.insights/components",
            "value": [
              "value::all"
            ]
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "parameters - 3"
    },
    {
      "type": 1,
      "content": {
        "json": "### Failures Rates\nThis section will help you see how your request failure rates change over time -- segmented by new vs. existing failures."
      },
      "name": "text - 4"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let startTime = {OverTimeRange:start};\nlet grain = {OverTimeRange:grain};\nlet bigWindowTimeRange = {UseComparisonTimeRangeOf};\nlet existingFailures = requests\n| where timestamp >= ago(bigWindowTimeRange) and timestamp < bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| where resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\n| extend Key = strcat(name, '-', resultCode)\n| summarize makeset(Key, 10000);\nrequests\n| where timestamp >= bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| extend IncludeInFailures = resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\n| extend Key = strcat(name, '-', resultCode)\n| summarize NewFailures = countif(success == false and Key !in (existingFailures) and IncludeInFailures), ExistingFailures = countif(success == false and Key in (existingFailures) and IncludeInFailures), All = count() by bin(timestamp, grain)\n| project timestamp, ['New Failure Rate (%)'] = 100.0 * NewFailures / All, ['Existing Failure Rate (%)'] = 100.0 * ExistingFailures / All\n| project timestamp, {Show}",
        "size": 0,
        "aggregation": 2,
        "showAnnotations": true,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart"
      },
      "name": "query - 5"
    },
    {
      "type": 1,
      "content": {
        "json": "### Requests Volume\nThis chart shows you request volumes or load over time. Changes in volume can impact failures and performance. This data will set the context in which any failures have occured."
      },
      "name": "text - 6"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let startTime = {OverTimeRange:start};\nlet grain = {OverTimeRange:grain};\nlet bigWindowTimeRange = {UseComparisonTimeRangeOf};\nlet existingFailures = requests\n| where timestamp >= ago(bigWindowTimeRange) and timestamp < bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| extend Key = strcat(name, '-', resultCode)\n| summarize makeset(Key, 10000);\nrequests\n| where timestamp >= bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| extend IncludeAsFailure = resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\n| extend Key = strcat(name, '-', resultCode)\n| summarize NewFailures = countif(success == false and Key !in (existingFailures) and IncludeAsFailure == true), ExistingFailures = countif(success == false and Key in (existingFailures) and IncludeAsFailure), All = count() by bin(timestamp, grain)\n| project timestamp, ['Passing'] = All - NewFailures - ExistingFailures, ['Existing Failures'] = ExistingFailures, ['New Failures'] = NewFailures",
        "size": 1,
        "aggregation": 2,
        "showAnnotations": true,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart"
      },
      "name": "query - 7"
    },
    {
      "type": 1,
      "content": {
        "json": "## Request Details\nThis table shows all failing requests in your app and their result codes - sorted by users impacted. This information will help you know the various failures in your app and their severity. The report also indicates if a failure is new or existing - so you see failures just started happening -- usually the most interesting ones."
      },
      "name": "text - 8"
    },
    {
      "type": 1,
      "content": {
        "json": "\n🔸 New Failure 🔹 Existing Failure"
      },
      "name": "text - 9"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let startTime = {OverTimeRange:start};\nlet grain = {OverTimeRange:grain};\nlet bigWindowTimeRange = {UseComparisonTimeRangeOf};\nlet bigWindow = requests\n| where timestamp >= ago(bigWindowTimeRange) and timestamp < bin(startTime, grain)\n| where success == false\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| where resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\n| summarize by name, resultCode\n| summarize makelist(strcat(name, '-', resultCode), 10000);\nrequests\n| where timestamp {OverTimeRange}\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| where resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\n| where success == false\n| summarize Count = count(), Users = dcount(user_Id) by name, resultCode\n| extend IsNew = strcat(name, '-', resultCode) !in (bigWindow)\n| where \"{Show}\" == \"['New Failure Rate (%)'], ['Existing Failure Rate (%)']\" or IsNew == true\n| order by Users desc, Count desc, name asc\n| project ['Request Name'] = iff(IsNew, strcat('🔸 ', name), strcat('🔹 ', name)), ['Failed with Result Code'] = resultCode, ['Request Failures'] = Count, ['Users Affected'] = Users",
        "size": 0,
        "aggregation": 2,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Request Failures",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": null,
                "palette": "yellow"
              }
            },
            {
              "columnMatch": "Users Affected",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": null,
                "palette": "green"
              }
            }
          ]
        }
      },
      "name": "query - 10"
    },
    {
      "type": 1,
      "content": {
        "json": "---\n## Exceptions Analysis\n"
      },
      "name": "text - 11"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "481f99f9-eec9-453b-a342-064a91cc4ed6",
            "version": "KqlParameterItem/1.0",
            "name": "ProblemFilter",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "exceptions\r\n| where timestamp {OverTimeRange}\r\n| where operation_Name in ({In}) or '*' in ({In})\r\n| summarize Count = count() by problemId\r\n| order by Count desc\r\n| project v = problemId, t = problemId, s=false\r\n| union (datatable(v:string, t:string, s:boolean)[\r\n'*', 'All Exceptions', true\r\n])",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "8b14a6a5-f37a-46f9-8438-cef1349478b2",
            "version": "KqlParameterItem/1.0",
            "name": "Source",
            "type": 2,
            "isRequired": true,
            "query": "datatable(x:string, y:string)[\r\n'1 == 1', 'Server and Client Exceptions',\r\n'client_Type <> \"Browser\"', 'Only Server Exceptions',\r\n'client_Type == \"Browser\"', 'Only Client Exceptions',\r\n]",
            "value": "1 == 1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "parameters - 12"
    },
    {
      "type": 1,
      "content": {
        "json": "### Exception Trends"
      },
      "name": "text - 13"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let startTime = {OverTimeRange:start};\nlet grain = {OverTimeRange:grain};\nlet bigWindowTimeRange = {UseComparisonTimeRangeOf};\nlet bigWindow = exceptions\n| where timestamp >= ago(bigWindowTimeRange) and timestamp < bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where {Source}\n| where problemId in ({ProblemFilter}) or '*' in ({ProblemFilter})\n| summarize makeset(problemId, 10000);\nexceptions\n| where timestamp {OverTimeRange}\n| where operation_Name in ({In}) or '*' in ({In})\n| where {Source}\n| summarize Count = count() by bin(timestamp, grain), problemId\n| where problemId in ({ProblemFilter}) or '*' in ({ProblemFilter})\n| extend IsNew = problemId !in (bigWindow)\n| where \"{Show}\" == \"['New Failure Rate (%)'], ['Existing Failure Rate (%)']\" or IsNew\n| project timestamp, problemId, Count\n",
        "size": 0,
        "aggregation": 2,
        "showAnnotations": true,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart"
      },
      "name": "query - 14"
    },
    {
      "type": 1,
      "content": {
        "json": "### Exception Details\nThis table shows all exceptions in your app and related operation - sorted by users impacted. This information will help you know the various errors in your app and their severity. The report also indicates if an exception is new or existing - so you see exceptions that just started happening -- usually the most interesting ones."
      },
      "name": "text - 15"
    },
    {
      "type": 1,
      "content": {
        "json": "\n🔸 New Exception 🔹 Existing Exception"
      },
      "name": "text - 16"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let startTime = {OverTimeRange:start};\nlet grain = {OverTimeRange:grain};\nlet bigWindowTimeRange = {UseComparisonTimeRangeOf};\nlet bigWindow = exceptions\n| where timestamp >= ago(bigWindowTimeRange) and timestamp < bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where {Source}\n| where problemId in ({ProblemFilter}) or '*' in ({ProblemFilter})\n| summarize makeset(problemId, 10000);\nexceptions\n| where timestamp {OverTimeRange}\n| where operation_Name in ({In}) or '*' in ({In})\n| where {Source}\n| summarize Count = count(), Users = dcount(user_Id) by problemId\n| where problemId in ({ProblemFilter}) or '*' in ({ProblemFilter})\n| extend IsNew = iff(problemId !in (bigWindow), true, false)\n| where \"{Show}\" == \"['New Failure Rate (%)'], ['Existing Failure Rate (%)']\" or IsNew\n| order by Users desc, Count desc, problemId asc\n| project Problem = iff(IsNew, strcat('🔸 ', problemId), strcat('🔹 ', problemId)), ['Exception Count'] = Count, ['Users Affected'] = Users",
        "size": 0,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Exception Count",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": null,
                "palette": "yellow"
              }
            },
            {
              "columnMatch": "Users Affected",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": null,
                "palette": "green"
              }
            }
          ]
        }
      },
      "name": "query - 17"
    },
    {
      "type": 1,
      "content": {
        "json": "---\n## Dependency Failure Analysis\n"
      },
      "name": "text - 18"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "42490f33-2004-4535-8e9f-69ede57f2542",
            "version": "KqlParameterItem/1.0",
            "name": "DependencyFilters",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "dependencies\r\n| where timestamp {OverTimeRange}\r\n| where operation_Name in ({In}) or '*' in ({In})\r\n| summarize Count = count() by name\r\n| order by Count desc\r\n| project v = name, t = name, s=false\r\n| union (datatable(v:string, t:string, s:boolean)[\r\n'*', 'All Dependencies', true\r\n])",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "ac2d6138-9403-41fc-a29c-99857071abc9",
            "version": "KqlParameterItem/1.0",
            "name": "IncludeResultCodes",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "datatable(x:string, y:string, z:boolean)[\r\n'*', 'All', true,\r\n'@', 'All 500s', false,\r\n'#', 'All 400s', false\r\n]\r\n| union (dependencies\r\n| where timestamp {OverTimeRange}\r\n| where success == false\r\n| summarize by resultCode\r\n| order by resultCode asc\r\n| project x = resultCode, y = resultCode, z = false)",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "parameters - 19"
    },
    {
      "type": 1,
      "content": {
        "json": "### Failure Rates\nThis section will help you see how your dependency failure rates change over time -- segmented by new vs. existing failures."
      },
      "name": "text - 20"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let startTime = {OverTimeRange:start};\nlet grain = {OverTimeRange:grain};\nlet bigWindowTimeRange = {UseComparisonTimeRangeOf};\nlet existingFailures = dependencies\n| where timestamp >= ago(bigWindowTimeRange) and timestamp < bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| extend Key = strcat(name, '-', resultCode)\n| summarize makeset(Key, 10000);\ndependencies\n| where timestamp >= bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| extend IncludeAsFailure = resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\n| extend Key = strcat(name, '-', resultCode)\n| summarize NewFailures = countif(success == false and Key !in (existingFailures) and IncludeAsFailure), ExistingFailures = countif(success == false and Key in (existingFailures) and IncludeAsFailure), All = count() by bin(timestamp, grain)\n| project timestamp, ['New Failure Rate (%)'] = 100.0 * NewFailures / All, ['Existing Failure Rate (%)'] = 100.0 * ExistingFailures / All\n| project timestamp, {Show}",
        "size": 0,
        "aggregation": 2,
        "showAnnotations": true,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart"
      },
      "name": "query - 21"
    },
    {
      "type": 1,
      "content": {
        "json": "### Dependency Volume\nThis chart shows you request volumes or load over time. Changes in volume can impact failures and performance. This data will set the context in which any failures have occured."
      },
      "name": "text - 22"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let startTime = {OverTimeRange:start};\nlet grain = {OverTimeRange:grain};\nlet bigWindowTimeRange = {UseComparisonTimeRangeOf};\nlet existingFailures = dependencies\n| where timestamp >= ago(bigWindowTimeRange) and timestamp < bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| extend Key = strcat(name, '-', resultCode)\n| summarize makeset(Key, 10000);\ndependencies\n| where timestamp >= bin(startTime, grain)\n| where operation_Name in ({In}) or '*' in ({In})\n| where name in ({RequestFilters}) or '*' in ({RequestFilters})\n| extend IncludeAsFailure = resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\n| summarize NewFailures = countif(success == false and strcat(name, '-', resultCode) !in (existingFailures) and IncludeAsFailure == true), ExistingFailures = countif(success == false and strcat(name, '-', resultCode) in (existingFailures) and IncludeAsFailure == true), All = count() by bin(timestamp, grain)\n| project timestamp, ['Passing'] = All - NewFailures - ExistingFailures, ['Existing Failures'] = ExistingFailures, ['New Failures'] = NewFailures",
        "size": 1,
        "aggregation": 2,
        "showAnnotations": true,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart"
      },
      "name": "query - 23"
    },
    {
      "type": 1,
      "content": {
        "json": "### Dependency Details\nThis table shows all failing dependencies in your app and their result codes - sorted by users impacted. This information will help you know the various failures in your app and their severity. The report also indicates if a failure is new or existing - so you see failures just started happening -- usually the most interesting ones."
      },
      "name": "text - 24"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let startTime = {OverTimeRange:start};\r\nlet grain = {OverTimeRange:grain};\r\nlet bigWindowTimeRange = {UseComparisonTimeRangeOf};\r\nlet bigWindow = dependencies\r\n| where timestamp >= ago(bigWindowTimeRange) and timestamp < bin(startTime, grain)\r\n| where operation_Name in ({In}) or '*' in ({In})\r\n| where name in ({DependencyFilters}) or '*' in ({DependencyFilters})\r\n| where resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\r\n| where success == false\r\n| summarize by name, resultCode\r\n| summarize makelist(strcat(name, '-', resultCode));\r\ndependencies\r\n| where timestamp {OverTimeRange}\r\n| where operation_Name in ({In}) or '*' in ({In})\r\n| where name in ({DependencyFilters}) or '*' in ({DependencyFilters})\r\n| where resultCode in ({IncludeResultCodes}) or '*' in ({IncludeResultCodes}) or iff('@' in ({IncludeResultCodes}), resultCode startswith '5', false) or iff('#' in ({IncludeResultCodes}), resultCode startswith '4', false)\r\n| where success == false\r\n| summarize Count = count(), Users = dcount(user_Id) by name, resultCode, operation_Name\r\n| extend IsNew = iff(strcat(name, '-', resultCode) !in (bigWindow), true, false)\r\n| where \"{Show}\" == \"['New Failure Rate (%)'], ['Existing Failure Rate (%)']\" or IsNew == true\r\n| order by Users desc, Count desc, name asc\r\n| project ['Dependency Name'] = iff(IsNew == true, strcat('🔸 ', name), strcat('🔹 ', name)), ['Failed with Result Code'] = resultCode, Operation = operation_Name, ['Dependency Failures'] = Count, ['Users Affected'] = Users",
        "size": 0,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Dependency Failures",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": null,
                "palette": "yellow"
              }
            },
            {
              "columnMatch": "Users Affected",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "max": null,
                "palette": "green"
              }
            }
          ]
        }
      },
      "name": "query - 25"
    }
  ]
}