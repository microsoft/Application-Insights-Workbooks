{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "7aa94d19-4c5b-40e2-b14f-e29736a8f90c",
            "version": "KqlParameterItem/1.0",
            "name": "resource",
            "type": 5,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::1"
          }
        ],
        "style": "above",
        "queryType": 7
      },
      "conditionalVisibility": {
        "parameterName": "a",
        "comparison": "isEqualTo",
        "value": "a"
      },
      "name": "resourceParameter"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{resource}/providers/Microsoft.Insights/dataCollectionRuleAssociations?api-version=2021-04-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.value\",\"columns\":[{\"path\":\"$.properties.dataCollectionRuleId\",\"columnid\":\"Id\",\"columnType\":\"string\"}]}}]}",
        "size": 0,
        "queryType": 12
      },
      "conditionalVisibility": {
        "parameterName": "a",
        "comparison": "isEqualTo",
        "value": "a"
      },
      "name": "dcrAssociations"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n    | where type == \"microsoft.insights/datacollectionrules\"\r\n    | extend extensions = properties.dataSources.extensions\r\n    | extend flows = properties.dataFlows\r\n    | mv-expand extensions\r\n    | where extensions.name contains \"ContainerInsightsExtension\"\r\n    | extend extensionStreams = extensions.streams\r\n    | where extensionStreams !contains \"Microsoft-ContainerInsights-Group-Default\" and extensionStreams !contains \"Microsoft-InsightsMetrics\"\r\n    | project id",
        "size": 0,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "conditionalVisibility": {
        "parameterName": "a",
        "comparison": "isEqualTo",
        "value": "a"
      },
      "name": "dcrsFromARG"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "7f395a97-9643-4cb4-8825-7277b7441cc6",
            "version": "KqlParameterItem/1.0",
            "name": "parsedDCRInfo",
            "type": 1,
            "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"60f80c2a-b820-4cc6-bcf2-7d0f5ebcc862\",\"mergeType\":\"innerunique\",\"leftTable\":\"dcrAssociations\",\"rightTable\":\"dcrsFromARG\",\"leftColumn\":\"Id\",\"rightColumn\":\"id\"}],\"projectRename\":[{\"originalName\":\"[dcrAssociations].Id\",\"mergedName\":\"Id\",\"fromId\":\"60f80c2a-b820-4cc6-bcf2-7d0f5ebcc862\"},{\"originalName\":\"[dcrsFromARG].id\",\"mergedName\":\"id\",\"fromId\":\"60f80c2a-b820-4cc6-bcf2-7d0f5ebcc862\"}]}",
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 7
          }
        ],
        "style": "above",
        "queryType": 7
      },
      "conditionalVisibility": {
        "parameterName": "a",
        "comparison": "isEqualTo",
        "value": "a"
      },
      "name": "parsedDCRInfo"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Insights data is not available with custom data collection. To view this workbook, set \"Collected data\" to “All” in Monitoring Settings or use Log Analytics to query logs.",
              "style": "info"
            },
            "name": "Cost Settings Banner"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "paragraph",
              "links": [
                {
                  "id": "9e26bb9c-0a13-4754-9e40-daa7d0c4f86e",
                  "cellValue": "OpenBlade",
                  "linkTarget": "OpenBlade",
                  "linkLabel": "Configure Monitoring Settings",
                  "style": "primary",
                  "linkIsContextBlade": true,
                  "bladeOpenContext": {
                    "bladeName": "OnboardMonitorInsights.ReactView",
                    "extensionName": "Microsoft_Azure_ContainerInsightsExt",
                    "bladeParameters": [
                      {
                        "name": "clusterResourceId",
                        "source": "parameter",
                        "value": "resource"
                      },
                      {
                        "name": "initiator",
                        "source": "static",
                        "value": "Workbooks:NodeNetwork"
                      }
                    ]
                  }
                }
              ]
            },
            "name": "Configure Monitoring Settings"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "parsedDCRInfo",
        "comparison": "isNotEqualTo",
        "value": ""
      },
      "name": "Custom Cost Settings",
      "styleSettings": {
        "padding": "20"
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<div style=\"font-style: italic\">More information about the metrics in this workbook is available <a href='https://github.com/influxdata/telegraf/blob/master/plugins/inputs/net/NET_README.md'>here</a></div>"
            },
            "name": "documentation-link"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e2b5cd30-7276-477f-a6bb-07da25ba5e5f",
                  "version": "KqlParameterItem/1.0",
                  "name": "timeRange",
                  "label": "Time Range",
                  "type": 4,
                  "description": "Filter data by time range",
                  "isRequired": true,
                  "value": {
                    "durationMs": 21600000
                  },
                  "typeSettings": {
                    "selectableValues": [
                      {
                        "durationMs": 300000
                      },
                      {
                        "durationMs": 900000
                      },
                      {
                        "durationMs": 1800000
                      },
                      {
                        "durationMs": 3600000
                      },
                      {
                        "durationMs": 14400000
                      },
                      {
                        "durationMs": 43200000
                      },
                      {
                        "durationMs": 86400000
                      },
                      {
                        "durationMs": 172800000
                      },
                      {
                        "durationMs": 259200000
                      },
                      {
                        "durationMs": 604800000
                      },
                      {
                        "durationMs": 1209600000
                      },
                      {
                        "durationMs": 2419200000
                      },
                      {
                        "durationMs": 2592000000
                      },
                      {
                        "durationMs": 5184000000
                      },
                      {
                        "durationMs": 7776000000
                      }
                    ],
                    "allowCustom": true
                  }
                },
                {
                  "id": "fe3adb7b-110f-42d8-a33c-b07ba9d0caf7",
                  "version": "KqlParameterItem/1.0",
                  "name": "resource",
                  "type": 5,
                  "description": "Used to find the resource to run queries off of",
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1"
                },
                {
                  "id": "a59dd2c3-f62d-4007-839f-cab1a1fd6c76",
                  "version": "KqlParameterItem/1.0",
                  "name": "resourceType",
                  "type": 7,
                  "description": "Used to find the resource type to run queries off of",
                  "isRequired": true,
                  "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{resource:resourcetype}\\\"\",\"transformers\":null}",
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 8
                },
                {
                  "id": "b8998f52-b18f-4319-8194-098a29fa6f80",
                  "version": "KqlParameterItem/1.0",
                  "name": "clusterId",
                  "type": 1,
                  "description": "Filter the selected workspace by cluster id",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 0
                  },
                  "timeContextFromParameter": "timeRange"
                },
                {
                  "id": "e1c643ba-5308-4009-ab16-47d42b272399",
                  "version": "KqlParameterItem/1.0",
                  "name": "clusterIdWhereClause",
                  "type": 1,
                  "description": "Used to filter queries by cluster id",
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "resourceType",
                        "operator": "contains",
                        "rightValType": "static",
                        "rightVal": "microsoft.operationalinsights/workspaces",
                        "resultValType": "static",
                        "resultVal": "| where ClusterId =~ \"{clusterId}\""
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "| where \"a\" == \"a\""
                      }
                    }
                  ]
                },
                {
                  "id": "4c9a0f80-fa3e-44af-8f0d-6744ecf503c6",
                  "version": "KqlParameterItem/1.0",
                  "name": "unit",
                  "label": "Unit",
                  "type": 2,
                  "description": "The units to use for the data",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"label\": \"Bytes\", \"value\": \"1\", \"selected\": \"true\" },\r\n    { \"label\": \"Kilobytes\", \"value\": \"1000\", \"selected\": \"false\" },\r\n    { \"label\": \"Megabytes\", \"value\": \"1000000\", \"selected\": \"false\" },\r\n    { \"label\": \"Gigabytes\", \"value\": \"1000000000\", \"selected\": \"false\" }\r\n]"
                },
                {
                  "id": "5a7770ff-fdc2-4590-85e2-5ee1c5653805",
                  "version": "KqlParameterItem/1.0",
                  "name": "aggregation1",
                  "label": "Aggregation",
                  "type": 2,
                  "description": "Choose which data aggregation you want to visualize on the time chart",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"label\": \"Max\", \"value\": \"Max\", \"selected\": \"true\" },\r\n    { \"label\": \"Average\", \"value\": \"Average\", \"selected\": \"false\" },\r\n    { \"label\": \"Min\", \"value\": \"Min\", \"selected\": \"false\" }\r\n]",
                  "timeContext": {
                    "durationMs": 21600000
                  },
                  "timeContextFromParameter": "timeRange"
                },
                {
                  "id": "0c040f71-7b0d-4021-96e0-bbcdb6390de9",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedNodes1",
                  "label": "Node",
                  "type": 2,
                  "description": "Filter by node",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId'])\r\n{clusterIdWhereClause}\r\n| project HostName = tostring(Tags.hostName)\r\n| distinct HostName\r\n| sort by HostName asc\r\n\r\n",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 0
                  },
                  "timeContextFromParameter": "timeRange",
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "{resourceType}"
                },
                {
                  "id": "3201a4f3-4914-45cd-810e-551688fd9069",
                  "version": "KqlParameterItem/1.0",
                  "name": "selectedInterfaces1",
                  "label": "Interface",
                  "type": 2,
                  "description": "Filter by interface",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId'])\r\n{clusterIdWhereClause}\r\n| project HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| distinct Interface\r\n| sort by Interface asc\r\n",
                  "crossComponentResources": [
                    "{resource}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 0
                  },
                  "timeContextFromParameter": "timeRange",
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "{resourceType}",
                  "value": [
                    "eth0"
                  ]
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters"
            },
            "name": "dropdowns"
          },
          {
            "type": 1,
            "content": {
              "json": "<div style=\"border: 1px solid grey\"></div>"
            },
            "name": "text - 20"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Network Details</h3>"
            },
            "name": "text - 21"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let data = materialize(InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where \"*\" in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where \"*\" in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface, '/', Name)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / datetime_diff('Second', TimeGenerated, PrevTimeGenerated), (Val - PrevVal) / datetime_diff('Second', TimeGenerated, PrevTimeGenerated))\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Name, Rate\r\n);\r\nlet bytesSent = materialize(\r\ndata\r\n| where Name == 'bytes_sent'\r\n);\r\nlet bytesReceived = materialize(\r\ndata\r\n| where Name == 'bytes_recv'\r\n);\r\nlet errorsOut = materialize(\r\ndata\r\n| where Name == 'err_out'\r\n);\r\nlet errorsIn = materialize(\r\ndata\r\n| where Name == 'err_in'\r\n);\r\nlet maxOn = indexof(\"{aggregation1}\", 'Max');\r\nlet avgOn = indexof(\"{aggregation1}\", 'Average');\r\nlet minOn = indexof(\"{aggregation1}\", 'Min');\r\nlet bytesSentTableData = bytesSent // bytes sent per sec data\r\n| summarize BytesSentPerSecond = avg(Rate) by HostName, Interface // for interfaces, group by parentId (HostName) \r\n| join kind = inner (\r\n    bytesSent\r\n    | make-series BytesSentPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n) on HostName\r\n| where Interface == Interface1\r\n| project Id = strcat(HostName, Interface), HostName, Interface, Name = strcat('🔹 ', Interface), ParentId = strcat('🖥️ ', HostName), Kind = 'Interface', BytesSentPerSecond, BytesSentPerSecondTrend;\r\nlet bytesReceivedTableData = bytesReceived // bytes received per sec data\r\n| summarize BytesReceivedPerSecond = avg(Rate) by HostName, Interface\r\n| join kind = inner (\r\n    bytesReceived\r\n    | make-series BytesReceivedPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n) on HostName\r\n| where Interface == Interface1\r\n| project Id = strcat(HostName, Interface), HostName, Interface, Name = strcat('🔹 ', Interface), ParentId = strcat('🖥️ ', HostName), Kind = 'Interface', BytesReceivedPerSecond, BytesReceivedPerSecondTrend;\r\nlet errorsOutTableData = errorsOut // errors out per sec data\r\n| summarize ErrorsOutPerSecond = avg(Rate) by HostName, Interface\r\n| join kind = inner (\r\n    errorsOut\r\n    | make-series ErrorsOutPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n) on HostName\r\n| where Interface == Interface1\r\n| project Id = strcat(HostName, Interface), HostName, Interface, Name = strcat('🔹 ', Interface), ParentId = strcat('🖥️ ', HostName), Kind = 'Interface', ErrorsOutPerSecond, ErrorsOutPerSecondTrend;\r\nlet errorsInTableData = errorsIn // errors in per sec data\r\n| summarize ErrorsInPerSecond = avg(Rate) by HostName, Interface\r\n| join kind = inner (\r\n    errorsIn\r\n    | make-series ErrorsInPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n) on HostName\r\n| where Interface == Interface1\r\n| project Id = strcat(HostName, Interface), HostName, Interface, Name = strcat('🔹 ', Interface), ParentId = strcat('🖥️ ', HostName), Kind = 'Interface', ErrorsInPerSecond, ErrorsInPerSecondTrend;\r\nbytesSentTableData\r\n| join kind = inner ( bytesReceivedTableData ) on Id\r\n| project-away Id1, Name1, ParentId1, Kind1, HostName1, Interface1\r\n| join kind = inner ( errorsOutTableData ) on Id\r\n| project-away Id1, Name1, ParentId1, Kind1, HostName1, Interface1\r\n| join kind = inner ( errorsInTableData ) on Id\r\n| project-away Id1, Name1, ParentId1, Kind1, HostName1, Interface1\r\n| project-rename ['Sent Bytes/sec'] = BytesSentPerSecond, ['Sent Bytes/sec Trend'] = BytesSentPerSecondTrend, ['Received Bytes/sec'] = BytesReceivedPerSecond, ['Received Bytes/sec Trend'] = BytesReceivedPerSecondTrend, ['Errors Out/sec'] = ErrorsOutPerSecond, ['ErrorsOut/sec Trend'] = ErrorsOutPerSecondTrend, ['Errors In/sec'] = ErrorsInPerSecond, ['Errors In/sec Trend'] = ErrorsInPerSecondTrend\r\n| order by Id asc\r\n| project-rename FullId = Id, GridId = Name, Name = ParentId",
              "size": 0,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "FullId",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "HostName",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Interface",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "GridId",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Kind",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Sent Bytes/sec",
                    "formatter": 0,
                    "formatOptions": {
                      "showIcon": true
                    },
                    "numberFormat": {
                      "unit": 11,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Sent Bytes/sec Trend",
                    "formatter": 9,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Received Bytes/sec",
                    "formatter": 0,
                    "formatOptions": {
                      "showIcon": true
                    },
                    "numberFormat": {
                      "unit": 11,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Received Bytes/sec Trend",
                    "formatter": 9,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Errors Out/sec",
                    "formatter": 0,
                    "formatOptions": {
                      "showIcon": true
                    },
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "ErrorsOut/sec Trend",
                    "formatter": 9,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Errors In/sec",
                    "formatter": 0,
                    "formatOptions": {
                      "showIcon": true
                    },
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Errors In/sec Trend",
                    "formatter": 9,
                    "formatOptions": {
                      "showIcon": true
                    }
                  }
                ],
                "filter": true,
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "Name"
                  ],
                  "expandTopLevel": true,
                  "finalBy": "GridId"
                }
              }
            },
            "showPin": true,
            "name": "overview-grid"
          },
          {
            "type": 1,
            "content": {
              "json": "<br/>\r\n<div style=\"border: 1px solid grey\"></div>\r\n<br/>\r\n"
            },
            "name": "text - 20 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Sent {unit:label}/sec</h3>"
            },
            "customWidth": "50",
            "name": "text - 5"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Received {unit:label}/sec</h3>"
            },
            "customWidth": "50",
            "name": "text - 5 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let bytesSentPerSecond = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| where Name == 'bytes_sent'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * {unit}), (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * {unit}))\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Rate;\r\nlet maxOn = indexof(\"{aggregation1}\", 'Max');\r\nlet avgOn = indexof(\"{aggregation1}\", 'Average');\r\nlet minOn = indexof(\"{aggregation1}\", 'Min');\r\nbytesSentPerSecond\r\n| make-series Val = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default=0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n| extend Name = strcat(HostName, Interface)\r\n| project-away HostName, Interface",
              "size": 0,
              "aggregation": 1,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "timechart",
              "tileSettings": {
                "showBorder": false
              }
            },
            "customWidth": "50",
            "showPin": true,
            "name": "bytes-sent-per-sec"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let bytesReceivedPerSecond = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| where Name == 'bytes_recv'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * {unit}), (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * {unit}))\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Rate;\r\nlet maxOn = indexof(\"{aggregation1}\", 'Max');\r\nlet avgOn = indexof(\"{aggregation1}\", 'Average');\r\nlet minOn = indexof(\"{aggregation1}\", 'Min');\r\nbytesReceivedPerSecond\r\n| make-series Val = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default=0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n| extend Name = strcat(HostName, Interface)\r\n| project-away HostName, Interface",
              "size": 0,
              "aggregation": 1,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "timechart"
            },
            "customWidth": "50",
            "showPin": true,
            "name": "bytes-received-per-sec"
          },
          {
            "type": 1,
            "content": {
              "json": "<br/>\r\n<br/>\r\n"
            },
            "name": "text - 22"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Total {unit:label} Sent (by {timeRange:grain} intervals)</h3>"
            },
            "customWidth": "50",
            "name": "text - 5 - Copy - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Total {unit:label} Received (by {timeRange:grain} intervals)</h3>"
            },
            "customWidth": "50",
            "name": "text - 5 - Copya"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let bytesSentTotal = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| where Name == 'bytes_sent'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / {unit}, (Val - PrevVal) / {unit})\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Rate;\r\nbytesSentTotal\r\n| make-series Val = sum(Rate) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n| extend Name = strcat(HostName, '/', Interface)\r\n| project-away HostName, Interface",
              "size": 0,
              "aggregation": 1,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "timechart"
            },
            "customWidth": "50",
            "showPin": true,
            "name": "total-bytes-sent"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let bytesReceivedTotal = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| where Name == 'bytes_recv'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / {unit}, (Val - PrevVal) / {unit})\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Rate;\r\nlet sum = bytesReceivedTotal\r\n| make-series Val = sum(Rate) default=0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName\r\n| extend Name = strcat(HostName, ':', 'Sum')\r\n| project-away HostName;\r\nsum",
              "size": 0,
              "aggregation": 1,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "timechart"
            },
            "customWidth": "50",
            "showPin": true,
            "name": "total-bytes-received"
          },
          {
            "type": 1,
            "content": {
              "json": "<br/>\r\n<br/>\r\n"
            },
            "name": "text - 23"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Errors Out/sec</h3>"
            },
            "customWidth": "50",
            "name": "text - 5 - Copy - Copy - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Errors In/sec</h3>"
            },
            "customWidth": "50",
            "name": "text - 5 - Copy - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let errorsOutPerSecond = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| where Name == 'err_out'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / datetime_diff('Second', TimeGenerated, PrevTimeGenerated), (Val - PrevVal) / datetime_diff('Second', TimeGenerated, PrevTimeGenerated))\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Rate;\r\nlet maxOn = indexof(\"{aggregation1}\", 'Max');\r\nlet avgOn = indexof(\"{aggregation1}\", 'Average');\r\nlet minOn = indexof(\"{aggregation1}\", 'Min');\r\nerrorsOutPerSecond\r\n| make-series Val = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default=0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n| extend Name = strcat(HostName, Interface)\r\n| project-away HostName, Interface",
              "size": 0,
              "aggregation": 2,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "timechart"
            },
            "customWidth": "50",
            "showPin": true,
            "name": "errors-out-per-sec"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let errorsInPerSecond = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| where Name == 'err_in'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / datetime_diff('Second', TimeGenerated, PrevTimeGenerated), (Val - PrevVal) / datetime_diff('Second', TimeGenerated, PrevTimeGenerated))\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Rate;\r\nlet maxOn = indexof(\"{aggregation1}\", 'Max');\r\nlet avgOn = indexof(\"{aggregation1}\", 'Average');\r\nlet minOn = indexof(\"{aggregation1}\", 'Min');\r\nerrorsInPerSecond\r\n| make-series Val = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default=0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n| extend Name = strcat(HostName, Interface)\r\n| project-away HostName, Interface",
              "size": 0,
              "aggregation": 2,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "timechart"
            },
            "customWidth": "50",
            "showPin": true,
            "name": "errors-in-per-sec"
          },
          {
            "type": 1,
            "content": {
              "json": "<br/>\r\n<br/>\r\n"
            },
            "name": "text - 24"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Total Errors Out (by {timeRange:grain} intervals)</h3>"
            },
            "customWidth": "50",
            "name": "text - 5 - Copy - Copy - Copy - Copya"
          },
          {
            "type": 1,
            "content": {
              "json": "<h3>Total Errors In (by {timeRange:grain} intervals)</h3>"
            },
            "customWidth": "50",
            "name": "text - 5 - Copy - Copy - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let totalErrorsOut = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| where Name == 'err_out'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val, Val - PrevVal)\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Rate;\r\ntotalErrorsOut\r\n| make-series Val = sum(Rate) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n| extend Name = strcat(HostName, '/', Interface)\r\n| project-away HostName, Interface",
              "size": 0,
              "aggregation": 2,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "timechart"
            },
            "customWidth": "50",
            "showPin": true,
            "name": "total-errors-out"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let totalErrorsIn = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| where Name == 'err_in'\r\n| extend Tags = todynamic(Tags)\r\n| extend ClusterId = tostring(Tags['container.azm.ms/clusterId']), HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n{clusterIdWhereClause}\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedInterfaces1}) or Interface in ({selectedInterfaces1})\r\n| extend partitionKey = strcat(HostName, '/', Interface)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val, Val - PrevVal)\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Rate;\r\ntotalErrorsIn\r\n| make-series Val = sum(Rate) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n| extend Name = strcat(HostName, '/', Interface)\r\n| project-away HostName, Interface",
              "size": 0,
              "aggregation": 2,
              "showAnalytics": true,
              "timeContext": {
                "durationMs": 21600000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "visualization": "timechart"
            },
            "customWidth": "50",
            "showPin": true,
            "name": "total-errors-in"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "parsedDCRInfo",
        "comparison": "isEqualTo",
        "value": ""
      },
      "name": "Workbook Content"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}