{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{subscription}"
        ],
        "parameters": [
          {
            "id": "2c3bd553-1307-4363-97c7-e2b1bc3d543e",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 2419200000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                }
              ]
            },
            "timeContext": {
              "durationMs": 14400000
            },
            "timeContextFromParameter": "timeRange"
          },
          {
            "id": "09a907b9-5b7b-42e2-93e1-e88ed2dbbff0",
            "version": "KqlParameterItem/1.0",
            "name": "subscription",
            "label": "Subscriptions",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| where type =~ 'microsoft.azurestackhci/clusters'\r\n| summarize by subscriptionId\r\n| union (Resources\r\n| where type =~ 'microsoft.azurestackhci/clusters'\r\n| summarize Count = count() by subscriptionId\r\n| top 1 by Count desc)\r\n| summarize Count = count() by subscriptionId\r\n| project value = subscriptionId, label = subscriptionId, selected = Count > 1",
            "crossComponentResources": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "0bd8be0a-5391-4e03-9b4b-5eb2643f9b73",
            "version": "KqlParameterItem/1.0",
            "name": "clusters",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\"\r\n| where EventID in (\"3000\", \"3001\", \"3002\", \"3003\", \"3004\")\r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| distinct ClusterArmId\r\n| union (datatable (ClusterArmId:string)[\"*\"])",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 14400000
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "194d34fb-ab23-4c89-b903-0c985acd3f60",
            "version": "KqlParameterItem/1.0",
            "name": "selectedRg",
            "label": "Resource groups",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| where id in~ (dynamic([{clusters}]))\r\n| extend rg = extract(\"/resourceGroups/([^/]+)\", 1, id)\r\n| distinct rg\r\n| order by tolower(rg) asc\r\n| project rg",
            "crossComponentResources": [
              "{subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 14400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "1cbeffb7-08e3-4e19-95b0-9639e9c8cd71",
            "version": "KqlParameterItem/1.0",
            "name": "selectedCluster",
            "label": "HCI clusters",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| where id in~ (dynamic([{clusters}]))\r\n| extend rg = extract(\"/resourceGroups/([^/]+)\", 1, id)\r\n| where rg in ({selectedRg})\r\n| order by tolower(name) asc\r\n| extend Rank = row_number()\r\n| project id, selected = Rank <= 10",
            "crossComponentResources": [
              "{subscription}"
            ],
            "typeSettings": {
              "limitSelectTo": 100,
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 14400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "0fd64f15-3e8b-4f65-b64b-759620b7eb3f",
            "version": "KqlParameterItem/1.0",
            "name": "Message",
            "type": 1,
            "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| summarize Total = count(), RegisteredClusters = countif(id in~ (dynamic([{clusters}])))\r\n| project Message = strcat(RegisteredClusters, ' monitored; ', Total - RegisteredClusters, ' unmonitored')",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "837cf92d-3c98-44df-9657-3545ee0c9301",
            "version": "KqlParameterItem/1.0",
            "name": "selectedTab",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "clusters",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "not set",
                  "resultValType": "static",
                  "resultVal": "gettingStarted"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "overview"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange"
          },
          {
            "id": "19a22d82-e997-4437-8b3c-423097ecce96",
            "version": "KqlParameterItem/1.0",
            "name": "lastCorrelationId",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend ClusterArmId = tostring(description.ArmId)\r\n| where ClusterArmId in~ ({selectedCluster})\r\n| where tostring(description.IsLastMessage) =~ 'true'\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| summarize arg_max(TimeGenerated, CorrelationId) by ClusterArmId\r\n| project lastCorrelationId = CorrelationId",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "f1caf3c3-6bb2-4ae3-a874-b058f1c5da53",
            "version": "KqlParameterItem/1.0",
            "name": "healthyClusters",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend ClusterArmId = tostring(description.ArmId)\r\n| where description.CorrelationId in~ ({lastCorrelationId})\r\n| distinct ClusterArmId\r\n| union (datatable (ClusterArmId:string)[\"*\"])",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions"
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "HCI Parameters",
      "styleSettings": {
        "margin": "10",
        "padding": "10"
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "99cd5df5-c4ca-465d-8aeb-0caf2ad03ff4",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Overview",
                  "subTarget": "gettingStarted",
                  "style": "link"
                },
                {
                  "id": "97fae118-0614-4397-99aa-45b2e4213754",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Cluster Health",
                  "subTarget": "overview",
                  "preText": "Overview",
                  "style": "link"
                },
                {
                  "id": "15845ae5-0810-4099-8e00-56f1b8be0599",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Node Health",
                  "subTarget": "node",
                  "style": "link"
                },
                {
                  "id": "3d546c95-3287-45c5-b780-be73b606d178",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Events",
                  "subTarget": "events",
                  "style": "link"
                }
              ]
            },
            "name": "Tabs"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "What's this workbook?\r\n\r\n### Cluster Health:\r\nThis view offers a snapshot of the overall health of Dell APEX Cloud Platform for Microsoft Azure clusters. It categorizes events by severity, enabling users to quickly identify critical issues. By glancing at this view, users can get an instant overview of the clusters' health status.\r\n\r\n### Node Health:\r\nIn the Node view, users can access a summary of events and the health status of individual nodes. This view allows for easy expansion of clusters, providing in-depth information about each node, including uptime and status. Users can gain a granular understanding of the cluster's performance and pinpoint potential areas of concern.\r\n\r\n### Events:\r\nThe Node View also includes details about events generated by the nodes. Users can access information such as the event code, time of event, and associated knowledge base articles (KB articles). This feature assists users in diagnosing and resolving issues efficiently.\r\n\r\nTo learn more about the platform, you can explore [Dell APEX Cloud Platform for Microsoft Azure](https://www.dell.com/en-us/dt/apex/cloud-platforms/microsoft-azure.htm).\r\n\r\nThese visualizations are tailored specifically for the selected time range, offering an insightful overview of issues affecting the cluster's performance. In addition, this tab presents the health status of individual nodes within the cluster, providing users with a comprehensive display of node health. It also includes detailed information about the events that have impacted these nodes during the selected time range. This breakdown encompasses error specifics, timestamps, and affected services or components, offering users a deeper understanding of the cluster's health status.\r\n\r\nFor further guidance and comprehensive information on utilizing the workbook's features, please refer to the [Event Monitoring for Dell APEX Cloud Platform for Microsoft Azure](https://dl.dell.com/content/manual62439893-event-monitoring-for-dell-apex-cloud-platform-for-microsoft-azure.pdf?language=en-us) on the Dell Support site.\r\n"
                  },
                  "name": "text - 0"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "gettingStarted"
            },
            "name": "Introduction"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let nodeinfo  = Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| project ClusterName, ClusterArmId, Nodename = tostring(servers_information.m_name), TimeGenerated\r\n| extend NodeId = tolower(Nodename)\r\n| summarize arg_max(TimeGenerated,*) by NodeId;\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-Hyper-V-Dell-APEX-CP/Admin\"\r\n| extend servers_information = split(Computer, \".\")\r\n| project  Nodename = tostring(servers_information[0]), EventLevel\r\n| extend NodeId = tolower(Nodename)\r\n| extend NodeId = tolower(Nodename)\r\n| join kind = rightouter nodeinfo on NodeId\r\n| extend ServerHealthy = iff(isnull(EventLevel), 1, 0)\r\n| extend ServerCritical = iif(EventLevel == 1, 1, 0) \r\n| extend ServerWarning = iif(EventLevel == 3, 1, 0) \r\n| extend ServerInformation = iif(EventLevel == 4, 1, 0)\r\n| summarize TotalServers = count_distinct(Nodename1), Critical = sum(ServerCritical), Warning = sum(ServerWarning), Information = sum(ServerInformation), Healthy = sum(ServerHealthy) by NodeId\r\n| extend HealthyServer = case(Critical > 0 or Warning > 0, 0, Healthy > 0, Healthy, 1)\r\n| extend Warning = iff(Critical > 0 , 0, Warning )\r\n| extend Critical = iff(Critical > 1, 1, Critical)\r\n| extend Warning = iff(Warning > 1, 1, Warning)\r\n| summarize Healthy = sum(HealthyServer), Critical= sum(Critical), Warning= sum(Warning), Information=sum(Information), TotalServers=sum(TotalServers)\r\n| project TotalServers, Healthy, Critical, Warning\r\n| evaluate narrow()\r\n| extend Column = iff(Column == \"TotalServers\", \"Total Nodes\", Column)\r\n| project Column, tolong(Value)",
                    "size": 3,
                    "timeContextFromParameter": "timeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Column",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "none"
                        }
                      },
                      "rightContent": {
                        "columnMatch": "Column",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Healthy",
                              "representation": "success",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Critical",
                              "representation": "4",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Warning",
                              "representation": "2",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Other",
                              "representation": "unknown",
                              "text": ""
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "Blank",
                              "text": ""
                            }
                          ]
                        }
                      },
                      "showBorder": false,
                      "size": "auto"
                    }
                  },
                  "name": "Servers Summary"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "<p>Expand a cluster to see the health of individual nodes\r\n"
                  },
                  "name": "text - 0"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Hyper-V-Dell-APEX-CP/Admin\"\r\n| extend servers_information = split(Computer, \".\")\r\n| extend Nodename = tostring(servers_information[0])\r\n| extend NodeId = tolower(Nodename)\r\n| extend Severity = case(EventLevel == 1, 3, EventLevel == 3, 2, 0)\r\n| summarize HealthStatus = max(Severity) by NodeId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClusterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClusterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend NodeId = tolower(Nodename)\r\n| join kind=leftouter Health on NodeId\r\n| extend HealthText = case(HealthStatus == 3, \"Critical\", HealthStatus == 2, \"Warning\", HealthStatus == 1, \"Other\", \"Healthy\")\r\n| extend ParentId = ClusterArmId, Id = Nodename, MergeId = strcat(ClusterArmId, \"/\", Nodename)\r\n| extend NodeState = toint(servers_information.m_status[0]), StatusInformation = toint(servers_information.m_status[1]), Uptime = servers_information.m_uptimeInSeconds\r\n| order by tolower(Nodename) asc\r\n| union (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClusterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClusterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend NodeId = tolower(Nodename)\r\n| join kind=leftouter Health on NodeId\r\n| summarize  HealthStatus = max(HealthStatus), StatusInformation = max(toint(servers_information.m_status[1])), ClusterName = any(ClusterName), TotalNodes = count(), UpNodes = countif(toint(servers_information.m_status[0]) == 0), TotalWarning = countif(HealthStatus == 2), TotalCritical = countif(HealthStatus == 3), TotalUnknown = countif(HealthStatus == 1), TimeGenerated = max(TimeGenerated) by ClusterArmId\r\n| extend ParentId = '', Id = ClusterArmId, MergeId = ClusterArmId, NodeState = toint(4)\r\n| extend HealthText = \"\"\r\n| extend HealthText = iff(TotalCritical > 0, strcat(tostring(TotalCritical), \" \", \"Critical\"), HealthText)\r\n| extend HealthText = iff(TotalWarning > 0, strcat(HealthText, iff(HealthText == \"\", \"\", \", \"), tostring(TotalWarning), \" \", \"Warning\"), HealthText)\r\n| extend HealthText = iff(TotalUnknown > 0, strcat(HealthText, iff(HealthText == \"\", \"\", \", \"), tostring(TotalUnknown), \" \", \"Other\"), HealthText)\r\n| extend TotalHealthy = TotalNodes - (TotalCritical + TotalWarning + TotalUnknown)\r\n| extend HealthText = iff(TotalHealthy > 0, strcat(HealthText, iff(HealthText == \"\", \"\", \", \"), tostring(TotalHealthy), \" \", \"Healthy\"), HealthText)\r\n| order by tolower(ClusterName) asc)\r\n| project ParentId, Id, MergeId, LastUpdated = TimeGenerated, HealthStatus, HealthText, NodeState, StatusInformation, Uptime = servers_information.m_uptimeInSeconds,TotalNodes, UpNodes, Site=tostring(servers_information.m_site), DomainGroup = extract(@'[^\\.]+\\.(.+)', 1, Computer)",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ParentId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "HealthStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "4",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "Unknown",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "[\"HealthText\"]"
                              }
                            ],
                            "aggregation": "Max"
                          }
                        },
                        {
                          "columnMatch": "HealthText",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NodeState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "up",
                                "text": "Up"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "down",
                                "text": "Down"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "In Maintenance"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "pending",
                                "text": "Joining"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "4",
                                "representation": "Blank",
                                "text": "[\"UpNodes\"] of [\"TotalNodes\"] up"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": ""
                              }
                            ],
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": []
                            }
                          }
                        },
                        {
                          "columnMatch": "StatusInformation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Uptime",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "UpNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalProcessorUsed",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalProcessorUsed\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "TotalProcessorUsed",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "TotalProcessorAvailable",
                                  "color": "gray"
                                }
                              ]
                            }
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalProcessorAvailable",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MemoryUsage",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"MemoryUsage\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "UsedMemory",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "AvailableMemory",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "UsedMemory",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailableMemory",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "NetworkUsageTrend",
                          "formatter": 9,
                          "formatOptions": {
                            "min": 0,
                            "palette": "blue",
                            "aggregation": "Sum"
                          }
                        },
                        {
                          "columnMatch": "TotalVmsRunning",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalVmsRunning\"] of [\"TotalVms\"] running",
                              "columnSettings": [
                                {
                                  "columnName": "TotalVmsRunning",
                                  "color": "green"
                                },
                                {
                                  "columnName": "TotalVmsStopped",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "TotalVmsOther",
                                  "color": "gray"
                                },
                                {
                                  "columnName": "TotalVmsFailed",
                                  "color": "red"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalVmsStopped",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalVmsFailed",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalVmsOther",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Version",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}"
                              },
                              {
                                "operator": "startsWith",
                                "thresholdValue": "Difference",
                                "representation": "2",
                                "text": "{0}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 0,
                          "formatOptions": {
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "Hostname",
                          "formatter": 5,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": true,
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "TimeGenerated",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NetworkUsage",
                          "formatter": 0,
                          "formatOptions": {
                            "aggregation": "Sum"
                          },
                          "numberFormat": {
                            "unit": 11,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 2
                            }
                          }
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "ParentId",
                        "treeType": 0,
                        "expanderColumn": "Id"
                      }
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedtab",
                    "comparison": "isEqualTo",
                    "value": "node"
                  },
                  "name": "Nodes Grid View"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "ExtensibilityResources\r\n| where type =~ 'microsoft.azurestackhci/clusters/arcsettings'\r\n| where properties.aggregateState =~ 'connected'\r\n| extend ClusterArmId = extract(\"(.+)/[aA]rcSettings/default$\", 1, id)\r\n| extend node = properties.perNodeDetails\r\n| mv-expand node\r\n| where node.state =~ 'connected'\r\n| extend MergeId = strcat(ClusterArmId, \"/\", node.name)\r\n| project MergeId, ArcId = node.arcInstance\r\n",
                    "size": 4,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{subscription}"
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "hide",
                    "comparison": "isEqualTo",
                    "value": "false"
                  },
                  "name": "Arc View"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Resources\r\n| where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| extend clustername = properties.reportedProperties.clusterName\r\n| project id, clustername",
                    "size": 4,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{subscription}"
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "hide",
                    "comparison": "isEqualTo",
                    "value": "false"
                  },
                  "name": "ClusterName view"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\",\"mergeType\":\"leftouter\",\"leftTable\":\"Nodes Grid View\",\"rightTable\":\"Arc View\",\"leftColumn\":\"MergeId\",\"rightColumn\":\"MergeId\"},{\"id\":\"c41adc9f-98cc-4b37-b0ab-df0399c030e8\",\"mergeType\":\"leftouter\",\"leftTable\":\"Nodes Grid View\",\"rightTable\":\"ClusterName view\",\"leftColumn\":\"Id\",\"rightColumn\":\"id\"}],\"projectRename\":[{\"originalName\":\"[Added column]\",\"mergedName\":\"Name\",\"fromId\":null,\"isNewItem\":true,\"newItemData\":[{\"criteriaContext\":{\"leftOperand\":\"ArcId\",\"operator\":\"isNotNull\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"ArcId\"}},{\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"Id\"}}]},{\"originalName\":\"[Nodes Grid View].ParentId\",\"mergedName\":\"ParentId\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].Id\",\"mergedName\":\"Id\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].MergeId\",\"mergedName\":\"MergeId\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].LastUpdated\",\"mergedName\":\"LastUpdated\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].HealthStatus\",\"mergedName\":\"HealthStatus\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].HealthText\",\"mergedName\":\"HealthText\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].NodeState\",\"mergedName\":\"NodeState\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].StatusInformation\",\"mergedName\":\"StatusInformation\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].Uptime\",\"mergedName\":\"Uptime\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].TotalNodes\",\"mergedName\":\"TotalNodes\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Nodes Grid View].UpNodes\",\"mergedName\":\"UpNodes\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Arc View].MergeId\",\"mergedName\":\"MergeId1\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Arc View].ArcId\",\"mergedName\":\"ArcId\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[ClusterName view].id\",\"mergedName\":\"id\",\"fromId\":\"c41adc9f-98cc-4b37-b0ab-df0399c030e8\"},{\"originalName\":\"[ClusterName view].clustername\",\"mergedName\":\"clustername\",\"fromId\":\"c41adc9f-98cc-4b37-b0ab-df0399c030e8\"},{\"originalName\":\"[Nodes Grid View].Site\",\"mergedName\":\"Site\",\"fromId\":\"unknown\"},{\"originalName\":\"[Nodes Grid View].Compute\",\"mergedName\":\"Compute\",\"fromId\":\"unknown\"},{\"originalName\":\"[Nodes Grid View].DomainGroup\",\"mergedName\":\"DomainGroup\",\"fromId\":\"unknown\"},{\"originalName\":\"[Clusters Grid View].TotalProcessorUsed\"},{\"originalName\":\"[Clusters Grid View].TotalProcessorAvailable\"},{\"originalName\":\"[Clusters Grid View].MemoryUsage\"},{\"originalName\":\"[Clusters Grid View].UsedMemory\"},{\"originalName\":\"[Clusters Grid View].AvailableMemory\"}]}",
                    "size": 3,
                    "showAnalytics": true,
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 7,
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Name",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "ParentId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Id",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "HealthStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "4",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "Unknown",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "[\"HealthText\"]"
                              }
                            ],
                            "aggregation": "Max"
                          }
                        },
                        {
                          "columnMatch": "HealthText",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NodeState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "up",
                                "text": "Up"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "down",
                                "text": "Down"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "In Maintenance"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "pending",
                                "text": "Joining"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "4",
                                "representation": "Blank",
                                "text": "[\"UpNodes\"] of [\"TotalNodes\"] up"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": ""
                              }
                            ],
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": []
                            }
                          }
                        },
                        {
                          "columnMatch": "StatusInformation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Uptime",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "UpNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "id",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "clustername",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 5,
                          "formatOptions": {
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "Hostname",
                          "formatter": 5,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": true,
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "TimeGenerated",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 5
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "ParentId",
                        "treeType": 0,
                        "expanderColumn": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "Name",
                          "label": "Cluster > Node"
                        },
                        {
                          "columnId": "ParentId",
                          "label": "parentid"
                        },
                        {
                          "columnId": "Id",
                          "label": "id"
                        },
                        {
                          "columnId": "MergeId",
                          "label": "mergeid"
                        },
                        {
                          "columnId": "LastUpdated",
                          "label": "Last Updated"
                        },
                        {
                          "columnId": "HealthStatus",
                          "label": "Health Status"
                        },
                        {
                          "columnId": "HealthText",
                          "label": "Healthtext"
                        },
                        {
                          "columnId": "NodeState",
                          "label": "Node State"
                        },
                        {
                          "columnId": "StatusInformation",
                          "label": "statusinformation"
                        },
                        {
                          "columnId": "Uptime",
                          "label": "Uptime"
                        },
                        {
                          "columnId": "TotalNodes",
                          "label": "totalnodes"
                        },
                        {
                          "columnId": "UpNodes",
                          "label": "upnodes"
                        },
                        {
                          "columnId": "MergeId1",
                          "label": "mergeid1"
                        },
                        {
                          "columnId": "ArcId",
                          "label": "arcid"
                        },
                        {
                          "columnId": "id",
                          "label": "id"
                        },
                        {
                          "columnId": "clustername",
                          "label": "clustername"
                        }
                      ]
                    }
                  },
                  "name": "Merge View"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "node"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "server group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let SDDC = Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| project ClusterName, ClusterArmId, Nodename = tostring(servers_information.m_name), TimeGenerated\r\n| extend NodeId = tolower(Nodename)\r\n| summarize arg_max(TimeGenerated,*) by NodeId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-Hyper-V-Dell-APEX-CP/Admin\" \r\n| extend servers_information = split(Computer, \".\")\r\n| project Nodename = tostring(servers_information[0]), EventLevel\r\n| extend NodeId = tolower(Nodename)\r\n| join kind = rightouter SDDC on NodeId\r\n| extend ServerHealthy = iff(isnull(EventLevel), 1, 0)\r\n| extend ServerCritical = iif(EventLevel == 1, 1, 0)\r\n| extend ServerWarning = iif(EventLevel == 3, 1, 0)\r\n| extend ServerInformation = iif(EventLevel == 4, 1, 0)\r\n| summarize\r\n    TotalClusters = count_distinct(ClusterName),\r\n    Critical = sum(ServerCritical),\r\n    Warning = sum(ServerWarning),\r\n    Information = sum(ServerInformation),\r\n    Healthy = sum(ServerHealthy)\r\n    by ClusterArmId\r\n| extend Healthy = case(Critical > 0 or Warning > 0, 0, 1)\r\n| extend Warning = iff(Critical > 0 , 0, Warning )\r\n| extend Critical = iff(Critical > 1, 1, Critical)\r\n| extend Warning = iff(Warning > 1, 1, Warning)\r\n| summarize\r\n    Healthy = sum(Healthy),\r\n    Critical= sum(Critical),\r\n    Warning= sum(Warning),\r\n    Information=sum(Information),\r\n    TotalClusters=sum(TotalClusters)\r\n| project TotalClusters, Healthy, Critical, Warning\r\n| evaluate narrow()\r\n| extend Column = iff(Column == \"TotalClusters\", \"Total Clusters\", Column)\r\n| project Column, tolong(Value)\r\n",
                    "size": 3,
                    "timeContextFromParameter": "timeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Column",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "none"
                        }
                      },
                      "rightContent": {
                        "columnMatch": "Column",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Healthy",
                              "representation": "success",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Warning",
                              "representation": "2",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Critical",
                              "representation": "4",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Other",
                              "representation": "unknown",
                              "text": ""
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "Blank",
                              "text": ""
                            }
                          ]
                        }
                      },
                      "showBorder": false
                    }
                  },
                  "name": "cluster health query"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Hyper-V-Dell-APEX-CP/Admin\"\r\n| extend servers_information = split(Computer, \".\")\r\n| extend Nodename = tostring(servers_information[0])\r\n| extend NodeId = tolower(Nodename)\r\n| extend Severity = case(EventLevel == 1, 3, EventLevel == 3, 2, 0)\r\n| summarize Status = max(Severity), LastUpdated = max(TimeGenerated) by NodeId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tolower(tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"]))\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend NodeId = tolower(Nodename)\r\n| join kind = leftouter Health on NodeId\r\n| summarize TotalServers = count(), ClusterName = any(ClusterName), LastUpdated = max(TimeGenerated), Status = max(Status), Site = any(tostring(servers_information.m_site)) , DomainGroup = any(extract(@'[^\\.]+\\.(.+)', 1, Computer)) by ClusterArmId\r\n| sort by tolower(ClusterName) asc\r\n| project ClusterArmId, LastUpdated, TotalServers, Status, Site, DomainGroup",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "Warning"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "4",
                                "text": "Critical"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "4",
                                "representation": "unknown",
                                "text": "Other"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "Healthy"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 13,
                          "formatOptions": {
                            "linkColumn": "ClusterArmId",
                            "linkTarget": "Resource",
                            "showIcon": false
                          }
                        },
                        {
                          "columnMatch": "NodeId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Message",
                          "formatter": 5
                        }
                      ],
                      "rowLimit": 10000,
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "ClusterArmId",
                          "label": "Cluster Name"
                        },
                        {
                          "columnId": "LastUpdated",
                          "label": "Last Updated"
                        },
                        {
                          "columnId": "TotalServers",
                          "label": "Total Nodes"
                        },
                        {
                          "columnId": "Status",
                          "label": "Health Status"
                        }
                      ]
                    },
                    "sortBy": [],
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "columnMatch": "ClusterName",
                        "formatter": 1,
                        "formatOptions": {
                          "linkTarget": "WorkbookTemplate",
                          "linkIsContextBlade": false,
                          "workbookContext": {
                            "componentIdSource": "column",
                            "componentId": "ClusterArmId",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Stack HCI/SingleCluster",
                            "typeSource": "workbook",
                            "gallerySource": "workbook",
                            "locationSource": "default"
                          }
                        }
                      },
                      "centerContent": {
                        "columnMatch": "TotalServers",
                        "formatter": 1,
                        "formatOptions": {
                          "linkTarget": "WorkbookTemplate",
                          "workbookContext": {
                            "componentIdSource": "column",
                            "componentId": "ClusterArmId",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Stack HCI/SingleCluster",
                            "typeSource": "workbook",
                            "gallerySource": "workbook",
                            "locationSource": "default"
                          }
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal",
                            "maximumFractionDigits": 2,
                            "maximumSignificantDigits": 3
                          }
                        }
                      },
                      "nodeIdField": "ClusterName",
                      "graphOrientation": 3,
                      "showOrientationToggles": false,
                      "nodeSize": null,
                      "staticNodeSize": 100,
                      "colorSettings": {
                        "nodeColorField": "ClusterStatus",
                        "type": 3,
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "1",
                            "representation": "yellow"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "2",
                            "representation": "red"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "-1",
                            "representation": "gray"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null,
                            "representation": "green"
                          }
                        ]
                      },
                      "hivesMargin": 5
                    }
                  },
                  "name": "cluster query"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "overview"
            },
            "name": "Cluster Health Page"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let SDDC = Event\r\n    | where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n    | extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n    | extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n    | where ClusterArmId in~ ({selectedCluster:query})\r\n    | extend servers_information = parse_json(RenderedDescription).m_servers\r\n    | mv-expand servers_information\r\n    | project ClusterName, ClusterArmId, Nodename = tostring(servers_information.m_name), TimeGenerated\r\n    | extend NodeId = tolower(Nodename)\r\n    | summarize arg_max(TimeGenerated, *) by NodeId;\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-Hyper-V-Dell-APEX-CP/Admin\" \r\n| extend servers_information = split(Computer, \".\")\r\n| extend EvData = parse_xml(EventData)\r\n| extend EvDataList = EvData.DataItem.EventData.Data\r\n| extend FaultCode = tostring(EvDataList.[0][\"#text\"])\r\n| extend ReportedTime = format_datetime(todatetime(EvDataList.[2][\"#text\"]),\"yyyy-MM-dd HH:mm:ss\")\r\n| extend Nodename = tostring(servers_information[0]), EventLevel\r\n| extend NodeId = tolower(Nodename)\r\n| summarize arg_max(TimeGenerated, *) by NodeId, ReportedTime, FaultCode\r\n| join kind = rightouter SDDC on NodeId\r\n| extend ServerCritical = iif(EventLevel == 1, 1, 0)\r\n| extend ServerWarning = iif(EventLevel == 3, 1, 0)\r\n| extend ServerInformation = iif(EventLevel == 4, 1, 0)\r\n| summarize\r\n    Critical = sum(ServerCritical),\r\n    Warning = sum(ServerWarning),\r\n    Information = sum(ServerInformation)\r\n    by NodeId\r\n| extend h = case(Critical > 0 or Warning > 0, 0, 1)\r\n| summarize\r\n    Critical= sum(Critical),\r\n    Warning= sum(Warning),\r\n    Information=sum(Information),\r\n    Total = sum(Critical + Warning + Information)\r\n| project Total, Critical, Warning, Information\r\n| evaluate narrow()\r\n| project Column, tolong(Value)",
                    "size": 3,
                    "timeContextFromParameter": "timeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Column",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "none"
                        }
                      },
                      "rightContent": {
                        "columnMatch": "Column",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Information",
                              "representation": "1",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Critical",
                              "representation": "4",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Warning",
                              "representation": "2",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Total",
                              "text": ""
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "success",
                              "text": ""
                            }
                          ]
                        }
                      },
                      "showBorder": false
                    }
                  },
                  "name": "Events tiles"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let avlnode = Event\r\n| where EventLog =~ \"Microsoft-Windows-Hyper-V-Dell-APEX-CP/Admin\"\r\n| where TimeGenerated {timeRange:query}\r\n| extend servers_information = split(Computer, \".\")\r\n| extend Nodename = tostring(servers_information[0])\r\n| extend NodeId = tolower(Nodename)\r\n| project NodeId;\r\n\r\nlet SDDC = Event\r\n    | where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n    | where TimeGenerated {timeRange:query}\r\n    | extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n    | extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n    | where ClusterArmId in~ ({selectedCluster:query})\r\n    | extend servers_information = parse_json(RenderedDescription).m_servers\r\n    | mv-expand servers_information\r\n    | extend \r\n        ClusterName,\r\n        ClusterArmId,\r\n        Nodename = tostring(servers_information.m_name),\r\n        TimeGenerated\r\n    | extend NodeId = tolower(Nodename)\r\n    |where NodeId  in~ (avlnode)\r\n    | summarize arg_max(TimeGenerated, *) by NodeId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-Hyper-V-Dell-APEX-CP/Admin\"\r\n| where TimeGenerated {timeRange:query}\r\n| extend servers_information = split(Computer, \".\")\r\n| extend description = parse_json(RenderedDescription)\r\n| extend EvData = parse_xml(EventData)\r\n| extend Nodename = tostring(servers_information[0])\r\n| extend NodeId = tolower(Nodename)\r\n| extend EvDataList = EvData.DataItem.EventData.Data\r\n| extend Component = split(tostring(EvDataList.[4][\"#text\"]), ',')[0]\r\n| extend SubComponent = iff(isnull(tostring(EvDataList.[5][\"#text\"])), Component , tostring(EvDataList.[5][\"#text\"]))\r\n| extend ServiceTag = split(tostring(EvDataList.[4][\"#text\"]), ',')[1] \r\n| extend FaultCode = tostring(EvDataList.[0][\"#text\"])\r\n| extend Detail = tostring(EvDataList.[1][\"#text\"])\r\n| extend KB = split(tostring(EvDataList.[6][\"#text\"]), ',')[1]\r\n| extend Severity = tostring(EventLevelName)\r\n| extend FaultingResourceType = tostring(SourceSystem)\r\n| extend EventTime = format_datetime(todatetime(EvDataList.[2][\"#text\"]),\"yyyy-MM-dd HH:mm:ss\")\r\n| extend ReportedTime = format_datetime(TimeGenerated, \"yyyy-MM-dd HH:mm:ss\")\r\n| extend Acknowledged = split(tostring(description), ' ')[-1]\r\n| extend NodeLink = _ResourceId\r\n| join kind = rightouter  SDDC on NodeId\r\n| summarize arg_max(TimeGenerated, *) by NodeId, EventTime, FaultCode\r\n| project\r\n    ClusterArmId,\r\n    NodeLink,\r\n    Severity,\r\n    FaultCode,\r\n    ReportedTime,\r\n    EventTime,\r\n    Detail,\r\n    Component,\r\n    SubComponent,\r\n    ServiceTag,\r\n    KB,\r\n    Acknowledged",
                    "size": 3,
                    "timeContextFromParameter": "timeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "NodeLink",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Severity",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "4",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Information",
                                "representation": "1",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "KB",
                          "formatter": 7,
                          "formatOptions": {
                            "linkTarget": "Url"
                          }
                        }
                      ],
                      "rowLimit": 1000,
                      "filter": true,
                      "sortBy": [
                        {
                          "itemKey": "ReportedTime",
                          "sortOrder": 2
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "ClusterArmId",
                          "label": "Cluster Name"
                        },
                        {
                          "columnId": "NodeLink",
                          "label": "Node Name"
                        },
                        {
                          "columnId": "Severity",
                          "label": "Severity"
                        },
                        {
                          "columnId": "FaultCode",
                          "label": "Event Code"
                        },
                        {
                          "columnId": "ReportedTime",
                          "label": "Reported Time"
                        },
                        {
                          "columnId": "EventTime",
                          "label": "Event Time"
                        },
                        {
                          "columnId": "Detail",
                          "label": "Short Description"
                        },
                        {
                          "columnId": "Component",
                          "label": "Component"
                        },
                        {
                          "columnId": "SubComponent",
                          "label": "Sub Component"
                        },
                        {
                          "columnId": "ServiceTag",
                          "label": "Service Tag"
                        },
                        {
                          "columnId": "KB",
                          "label": "Knowledgebase"
                        },
                        {
                          "columnId": "Acknowledged",
                          "label": "Acknowledged"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "ReportedTime",
                        "sortOrder": 2
                      }
                    ]
                  },
                  "name": "Events table"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "events"
            },
            "name": "Events Group"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "subscription",
        "comparison": "isNotEqualTo",
        "value": ""
      },
      "name": "Workbook Content"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "template",
        "loadFromTemplateId": "community-Workbooks/Common/noSubscriptions",
        "items": []
      },
      "conditionalVisibility": {
        "parameterName": "subscription",
        "comparison": "isEqualTo"
      },
      "name": "No subscriptions group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}