{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "7a25a79e-d30f-419a-ab06-b435a84e7793",
            "version": "KqlParameterItem/1.0",
            "name": "tabName",
            "type": 1,
            "isRequired": true,
            "isGlobal": true,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "getStartedTab"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.azurestackhci/clusters"
      },
      "name": "Tab parameter"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "1687959d-aa87-4cfb-9fa2-14c0d6f34323",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Get started",
            "subTarget": "getStartedTab",
            "style": "link"
          },
          {
            "id": "88e62bba-e5ad-4a98-92a2-c329aac0c5d8",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Savings",
            "subTarget": "savingsTab",
            "style": "link"
          },
          {
            "id": "8063067c-eebb-4517-b23c-bcb82fb03b4d",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Performance",
            "subTarget": "performanceTab",
            "style": "link"
          },
          {
            "id": "003637c3-2ed7-4f95-b663-4e9f140a8379",
            "cellValue": "tabName",
            "linkTarget": "parameter",
            "linkLabel": "Jobs",
            "subTarget": "jobsTab",
            "style": "link"
          }
        ]
      },
      "name": "Tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "##### **What's this workbook?**\r\n\r\nUse this sample workbook to monitor ReFS deduplication and compression. ReFS deduplication and compression is a new storage capability of Azure Stack HCI, version 23H2 that helps you save space with minimal performance impact. [Learn more.](https://aka.ms/ReFS_deduplication_and_compression)\r\n\r\nTo view the workbook source code and customize it, click Edit.\r\n\r\n##### **Prerequisites**\r\n\r\n- You need an Azure Stack HCI, version 23H2 preview cluster ([instructions](https://aka.ms/ReFS_deduplication_and_compression)).\r\n- Your cluster must be Arc-enabled and have Azure Monitor extension installed ([instructions](https://learn.microsoft.com/en-us/azure-stack/hci/manage/monitor-hci-single?tabs=22h2#prerequisites-for-enabling-insights)).\r\n- You need at least 1 volume that has ReFS dedupe/compression enabled, or else there will be no data ([instructions](https://aka.ms/ReFS_deduplication_and_compression)).\r\n\r\nIf you don't meet these prerequisites, there will be no data."
            },
            "name": "text",
            "styleSettings": {
              "padding": "0px 200px 20px 20px"
            }
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "nav",
              "links": [
                {
                  "id": "d756c59d-c71e-48e7-98f4-0d5d3b16a1f6",
                  "cellValue": "tabName",
                  "linkTarget": "parameter",
                  "linkLabel": "Got it",
                  "subTarget": "savingsTab",
                  "style": "primary"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "tabName",
              "comparison": "isEqualTo",
              "value": "getStartedTab"
            },
            "name": "Button"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isEqualTo",
        "value": "getStartedTab"
      },
      "name": "GetStarted Tab markdown"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "c21acd7c-8d16-4538-95e8-bffd82146d0a",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": {
              "durationMs": 2592000000
            }
          },
          {
            "id": "b41f8d95-d867-4570-ba5c-1696a0f2166d",
            "version": "KqlParameterItem/1.0",
            "name": "Resource",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "defaultValue": "value::1"
          },
          {
            "id": "d531d8ad-f5d2-4f33-b609-be2b18031d53",
            "version": "KqlParameterItem/1.0",
            "name": "logAnalyticsWorkSpaceArmId",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true
          },
          {
            "id": "c6732b26-e31a-4634-bd5e-ecabc62fbc1a",
            "version": "KqlParameterItem/1.0",
            "name": "lastCorrelationId",
            "type": 1,
            "isRequired": true,
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = '{Resource}'\r\n| where _ResourceId =~ ClusterArmId\r\n| extend description = parse_json(RenderedDescription)\r\n| where description.IsLastMessage =~ 'true'\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| summarize arg_max(TimeGenerated, CorrelationId) by ClusterArmId\r\n| project lastCorrelationId = CorrelationId",
            "crossComponentResources": [
              "{logAnalyticsWorkSpaceArmId}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a25adf95-7524-4b01-9c74-c82b50fd7da3",
            "version": "KqlParameterItem/1.0",
            "name": "Volumes",
            "type": 2,
            "isRequired": true,
            "isGlobal": true,
            "multiSelect": true,
            "quote": "",
            "delimiter": ",",
            "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId);\r\n\r\nEvent\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated, *) by _ResourceId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project\r\n    VolumeId,\r\n    Volumes = tostring(volumes_information.m_Label);",
            "crossComponentResources": [
              "{logAnalyticsWorkSpaceArmId}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "6a402fe2-d419-4f19-a4b8-9cdb7bdcafeb",
            "version": "KqlParameterItem/1.0",
            "name": "RenderedDescription",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"{\\\"json\\\": {\\r\\n\\t\\\"Volume\\\": {\\r\\n\\t\\t\\\"VolumeGuidPath\\\": \\\"33e6c3ce-1d8c-4b3b-ab6e-ee4fd2a024b7\\\",\\r\\n\\t\\t\\\"MountPoints\\\": [\\r\\n\\t\\t\\t\\\"C:\\\\\\\\\\\\\\\\ClusterStorage\\\\\\\\\\\\\\\\Volume1\\\"\\r\\n\\t\\t],\\r\\n\\t\\t\\\"VolumeSize\\\": 1099511627776,\\r\\n\\t\\t\\\"SizeOnDisk\\\": 351843720888,\\r\\n\\t\\t\\\"TotalDedupSavings\\\": 989560464998,\\r\\n\\t\\t\\\"TotalCompressionSavings\\\": 769658139443\\r\\n\\t},\\r\\n\\t\\\"Results\\\": {\\r\\n\\t\\t\\\"RunKind\\\": { \\r\\n\\t\\t\\t\\\"DedupType\\\": \\\"DedupAndCompress\\\",\\r\\n\\t\\t\\t\\\"Reason\\\": \\\"On-Demand\\\"\\r\\n\\t\\t},\\r\\n\\t\\t\\\"RunStatus\\\": \\\"Success\\\",\\r\\n\\t\\t\\\"StartTime\\\": \\\"2023-04-26T12:10:45.7260949Z\\\",\\r\\n\\t\\t\\\"Duration\\\": \\\"0:01:17:33.9588184\\\",\\r\\n\\t\\t\\\"StatusCode\\\": \\\"0x00000000\\\",\\r\\n\\t\\t\\\"DedupStatus\\\": { \\r\\n\\t\\t\\t\\\"State\\\": \\\"Idle\\\",\\r\\n\\t\\t\\t\\\"ScannedOnLastRun\\\": 303888000000,\\r\\n\\t\\t\\t\\\"TotalDedupSavings\\\": \\\"581F5000\\\",\\r\\n\\t\\t\\t\\\"DedupedOnLastRun\\\": \\\"654E2000\\\"\\r\\n\\t\\t},\\r\\n\\t\\t\\\"CompressionStatus\\\": { \\r\\n\\t\\t\\t\\\"Format\\\": \\\"LZ4\\\",\\r\\n\\t\\t\\t\\\"Level\\\": 1,\\r\\n\\t\\t\\t\\\"ChunkSizeBytes\\\": 1000,\\r\\n\\t\\t\\t\\\"VolumeClusterSizeBytes\\\": 1000,\\r\\n\\t\\t\\t\\\"VolumeTotalClusters\\\": \\\"500FC000\\\",\\r\\n\\t\\t\\t\\\"VolumeTotalAllocatedClusters\\\": \\\"3A1121F\\\",\\r\\n\\t\\t\\t\\\"VolumeTotalAllocatedCompressibleClusters\\\": \\\"47625FE\\\",\\r\\n\\t\\t\\t\\\"VolumeTotalInUseCompressibleClusters\\\": \\\"3686F03\\\",\\r\\n\\t\\t\\t\\\"VolumeTotalCompressedClusters\\\": \\\"18B3830\\\",\\r\\n\\t\\t\\t\\\"VolumeTotalCompressionSavings\\\": \\\"2EAEDCE000\\\"\\r\\n\\t\\t} \\r\\n\\t} \\r\\n}\\r\\n}\",\"transformers\":null}",
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 8
          },
          {
            "id": "6b4f18ff-6f16-4153-b763-03298ef3f300",
            "version": "KqlParameterItem/1.0",
            "name": "grain",
            "type": 1,
            "isRequired": true,
            "query": "print ({timeRange:end} - {timeRange:start})/100",
            "isHiddenWhenLocked": true,
            "queryType": 0
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "SavingsGranularity",
            "type": 1,
            "isRequired": true,
            "query": "print ({timeRange:end} - {timeRange:start})/100",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "id": "fe9880fc-c388-4c0b-a08d-c64f804bc526"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isNotEqualTo",
        "value": "getStartedTab"
      },
      "name": "Parameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "#### **Total savings**"
            },
            "name": "Total Savings Header Text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated, *) by _ResourceId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project\r\n    VolumeId,\r\n    Volumes = tostring(volumes_information.m_Label),\r\n    SizeOnDisk = tolong(volumes_information.m_Size) - tolong(volumes_information.m_SizeUsed);\r\n\r\nEvent\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-ReFsDedupSvc/Operational\" and EventID == 4\r\n| extend description = parse_json(tostring(split(RenderedDescription, \". \")[1]))\r\n| extend VolumeId = extract(\"\\\\\\\\?\\\\\\\\Volume{([^\\\\\\\\]+)}\\\\\\\\\", 1, RenderedDescription)\r\n| join kind=rightouter VolumeList on VolumeId\r\n| extend dedupType = tostring(description.Results.RunKind.DedupType)\r\n| extend Deduplication = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Dedup\")), \"On\", \"Off\")\r\n| extend Compression = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Compress\")), \"On\", \"Off\")\r\n| extend Saved = iff(description != \"\", tolong(iff(Deduplication == \"On\", description.Results.DedupStatus.TotalDedupSavings, 0)) + tolong(iff(Compression == \"On\", description.Results.CompressionStatus.TotalCompressionSavings, 0)), 0)\r\n| extend DatasetSize = Saved + SizeOnDisk\r\n| where '{Volumes}' contains VolumeId\r\n| order by TimeGenerated desc\r\n| summarize arg_max(TimeGenerated, *) by Volumes\r\n| summarize colName=\"DATASET SIZE\", value=sum(DatasetSize);",
              "size": 3,
              "noDataMessage": "Data set size is not found as there is no Volume data or Volume events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "tiles",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "DatasetSize",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                ]
              },
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "colName",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "value",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blueDark"
                  },
                  "numberFormat": {
                    "unit": 2,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "showBorder": false
              }
            },
            "customWidth": "33.33",
            "name": "Dataset Size Tile"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated, *) by _ResourceId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project\r\n    VolumeId,\r\n    Volumes = tostring(volumes_information.m_Label);\r\n\r\nEvent\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-ReFsDedupSvc/Operational\" and EventID == 4\r\n| extend description = parse_json(tostring(split(RenderedDescription, \". \")[1]))\r\n| extend VolumeId = extract(\"\\\\\\\\?\\\\\\\\Volume{([^\\\\\\\\]+)}\\\\\\\\\", 1, RenderedDescription)\r\n| extend dedupType = tostring(description.Results.RunKind.DedupType)\r\n| extend Deduplication = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Dedup\")), \"On\", \"Off\")\r\n| extend Compression = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Compress\")), \"On\", \"Off\")\r\n| extend Saved = iff(description != \"\", tolong(iff(Deduplication == \"On\", description.Results.DedupStatus.TotalDedupSavings, 0)) + tolong(iff(Compression == \"On\", description.Results.CompressionStatus.TotalCompressionSavings, 0)), 0)\r\n| join kind=leftouter VolumeList on VolumeId\r\n| where '{Volumes}' contains VolumeId\r\n| order by TimeGenerated desc\r\n| summarize arg_max(TimeGenerated, *) by Volumes\r\n| summarize colName=\"SAVED SIZE\", value=sum(Saved);",
              "size": 3,
              "noDataMessage": "Saved size is not found as there is no Volume data or Volume events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "colName",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "value",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 2,
                    "options": {
                      "style": "decimal"
                    }
                  }
                },
                "showBorder": false
              }
            },
            "customWidth": "33.33",
            "name": "Saved Size Tile"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated, *) by _ResourceId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project\r\n    VolumeId,\r\n    Volumes = tostring(volumes_information.m_Label),\r\n    SizeOnDisk = tolong(volumes_information.m_Size) - tolong(volumes_information.m_SizeUsed);\r\n\r\nEvent\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-ReFsDedupSvc/Operational\" and EventID == 4\r\n| extend description = parse_json(tostring(split(RenderedDescription, \". \")[1]))\r\n| extend VolumeId = extract(\"\\\\\\\\?\\\\\\\\Volume{([^\\\\\\\\]+)}\\\\\\\\\", 1, RenderedDescription)\r\n| join kind=rightouter VolumeList on VolumeId\r\n| extend dedupType = tostring(description.Results.RunKind.DedupType)\r\n| extend Deduplication = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Dedup\")), \"On\", \"Off\")\r\n| extend Compression = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Compress\")), \"On\", \"Off\")\r\n| extend Saved = iff(description != \"\", tolong(iff(Deduplication == \"On\", description.Results.DedupStatus.TotalDedupSavings, 0)) + tolong(iff(Compression == \"On\", description.Results.CompressionStatus.TotalCompressionSavings, 0)), 0)\r\n| extend DatasetSize = Saved + SizeOnDisk\r\n| where '{Volumes}' contains VolumeId\r\n| order by TimeGenerated desc\r\n| summarize arg_max(TimeGenerated, *) by Volumes\r\n| summarize value1=sum(DatasetSize), value2=sum(Saved)\r\n| project colName=\"SAVINGS RATE\", value=todouble(value2)/todouble(value1);",
              "size": 3,
              "noDataMessage": "Savings data is not found as there is no Volume data or Volume events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "colName",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "value",
                  "formatter": 12,
                  "formatOptions": {
                    "min": 0,
                    "max": 1,
                    "palette": "lightBlue"
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "percent",
                      "maximumFractionDigits": 1
                    }
                  }
                },
                "showBorder": false
              }
            },
            "customWidth": "33.33",
            "name": "Savings Rate Tile"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isEqualTo",
        "value": "savingsTab"
      },
      "name": "Total savings group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "#### **Savings per volume**"
            },
            "name": "Savings per volume Header Text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated, *) by _ResourceId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project\r\n    VolumeId,\r\n    Volumes = tostring(volumes_information.m_Label),\r\n    VolumeSize = tolong(volumes_information.m_Size),\r\n    SizeOnDisk = tolong(volumes_information.m_Size) - tolong(volumes_information.m_SizeUsed);\r\n\r\nlet ReFSEventLogs = Event\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-ReFsDedupSvc/Operational\" and EventID == 4\r\n| extend description = parse_json(tostring(split(RenderedDescription, \". \")[1]))\r\n| extend VolumeId = extract(\"\\\\\\\\?\\\\\\\\Volume{([^\\\\\\\\]+)}\\\\\\\\\", 1, RenderedDescription);\r\n\r\nVolumeList\r\n| join kind=leftouter ReFSEventLogs on VolumeId\r\n| where '{Volumes}' contains VolumeId\r\n| extend dedupType = tostring(description.Results.RunKind.DedupType)\r\n| extend Deduplication = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Dedup\")), \"On\", \"Off\")\r\n| extend Compression = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Compress\")), \"On\", \"Off\")\r\n| extend Saved = iff(description != \"\", tolong(iff(Deduplication == \"On\", description.Results.DedupStatus.TotalDedupSavings, 0)) + tolong(iff(Compression == \"On\", description.Results.CompressionStatus.TotalCompressionSavings, 0)), 0)\r\n| extend DatasetSize = iff(Saved != \"\", Saved + SizeOnDisk, 0)\r\n| extend Savings = todouble(Saved) / todouble(DatasetSize)\r\n| extend Usage = todouble(SizeOnDisk) / todouble(VolumeSize)\r\n| order by TimeGenerated desc\r\n| summarize arg_max(TimeGenerated, *) by Volumes\r\n| project Volumes, Deduplication, Compression, VolumeSize, DatasetSize, Saved, Savings, SizeOnDisk, Usage;",
              "size": 3,
              "noDataMessage": "There is no savings per volume data",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Deduplication",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "On",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Off",
                          "text": "Off"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "more",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Compression",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "On",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Off",
                          "text": "Off"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "more",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "VolumeSize",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "DatasetSize",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Saved",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Savings",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 1,
                      "palette": "green"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "percent",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "SizeOnDisk",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Usage",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "max": 1,
                      "palette": "blueOrange"
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "percent",
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "Volumes",
                    "label": "Name"
                  },
                  {
                    "columnId": "VolumeSize",
                    "label": "Volume Size"
                  },
                  {
                    "columnId": "DatasetSize",
                    "label": "Dataset Size"
                  },
                  {
                    "columnId": "Savings",
                    "label": "Savings (%)"
                  },
                  {
                    "columnId": "SizeOnDisk",
                    "label": "Size On Disk"
                  },
                  {
                    "columnId": "Usage",
                    "label": "Usage (%)"
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibility": {
              "parameterName": "tabName",
              "comparison": "isEqualTo",
              "value": "savingsTab"
            },
            "name": "Savings per volume"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isEqualTo",
        "value": "savingsTab"
      },
      "name": "Savings per volume group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "#### **Savings over time**"
            },
            "name": "Savings over time Header Text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated, *) by _ResourceId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project\r\n    VolumeId,\r\n    Volumes = tostring(volumes_information.m_Label);\r\n\r\nEvent\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-ReFsDedupSvc/Operational\" and EventID == 4\r\n| extend description = parse_json(tostring(split(RenderedDescription, \". \")[1]))\r\n| extend VolumeId = extract(\"\\\\\\\\?\\\\\\\\Volume{([^\\\\\\\\]+)}\\\\\\\\\", 1, RenderedDescription)\r\n| extend dedupType = tostring(description.Results.RunKind.DedupType)\r\n| extend Deduplication = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Dedup\")), \"On\", \"Off\")\r\n| extend Compression = iff(((dedupType == \"DedupAndCompress\") or (dedupType == \"Compress\")), \"On\", \"Off\")\r\n| extend VolumeSize = tolong(description.VolumeSize)\r\n| extend Saved = iff(description != \"\", tolong(iff(Deduplication == \"On\", description.Results.DedupStatus.TotalDedupSavings, 0)) + tolong(iff(Compression == \"On\", description.Results.CompressionStatus.TotalCompressionSavings, 0)), 0)\r\n| extend SizeOnDisk = tolong(description.SizeOnDisk)\r\n| extend DatasetSize = Saved + SizeOnDisk\r\n| extend Savings = todouble(Saved) / todouble(DatasetSize)\r\n| extend Usage = todouble(SizeOnDisk) / todouble(VolumeSize)\r\n| join kind=leftouter VolumeList on VolumeId\r\n| where '{Volumes}' contains VolumeId\r\n| summarize Saved = avg(Saved) by Volumes, TimeGenerated\r\n| order by TimeGenerated asc\r\n| project TimeGenerated, Volumes, Saved;",
              "size": 0,
              "aggregation": 5,
              "title": "Saved space",
              "noDataMessage": "There is no Savings over time data or savings over time events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "areachart",
              "chartSettings": {
                "xAxis": "TimeGenerated",
                "yAxis": [
                  "Saved"
                ],
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                },
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 2,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    },
                    "missingSparkDataOption": "Zero"
                  },
                  "min": 0
                }
              }
            },
            "name": "Savings over time graph"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isEqualTo",
        "value": "savingsTab"
      },
      "name": "Savings Over time"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "#### **Summary**"
            },
            "name": "Summary Header Text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n    | extend ClsuterData = parse_xml(EventData)\r\n    | extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n    | summarize arg_max(TimeGenerated, *) by _ResourceId\r\n    | extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n    | extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n    | mv-expand volumes_information\r\n    | extend VolumeId = tostring(volumes_information.m_Id)\r\n    | join kind=leftouter Health on VolumeId\r\n    | project\r\n        VolumeId,\r\n        InstanceName = tostring(volumes_information.m_Label);\r\n    \r\nlet readIOPS = Perf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Reads/sec\"\r\n| where InstanceName !contains \"_Total\"\r\n| summarize arg_max(TimeGenerated, *) by InstanceName\r\n| project InstanceName, readIOPSvalue = CounterValue;\r\n\r\nlet writeIOPS = Perf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Writes/sec\"\r\n| where InstanceName !contains \"_Total\"\r\n| summarize arg_max(TimeGenerated, *) by InstanceName\r\n| project InstanceName, writeIOPSvalue = CounterValue;\r\n\r\nlet readLat = Perf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Avg. sec/Read\"\r\n| where InstanceName !contains \"_Total\"\r\n| summarize arg_max(TimeGenerated, *) by InstanceName\r\n| project InstanceName, readLatValue = CounterValue;\r\n\r\nlet p95readLat = Perf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Avg. sec/Read\"\r\n| where InstanceName !contains \"_Total\"\r\n| summarize p95read = round(percentile(CounterValue*1000, 95), 2) by InstanceName\r\n| project InstanceName, p95read;\r\n\r\nlet writeLat = Perf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Avg. sec/Write\"\r\n| where InstanceName !contains \"_Total\"\r\n| summarize arg_max(TimeGenerated, *) by InstanceName\r\n| project InstanceName, writeLatValue = CounterValue;\r\n\r\nlet p95writeLat = Perf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Avg. sec/Write\"\r\n| where InstanceName !contains \"_Total\"\r\n| summarize p95write = round(percentile(CounterValue*1000, 95), 2) by InstanceName\r\n| project InstanceName, p95write;\r\n\r\nreadIOPS\r\n| join writeIOPS on InstanceName\r\n| join readLat on InstanceName\r\n| join writeLat on InstanceName\r\n| join p95readLat on InstanceName\r\n| join p95writeLat on InstanceName\r\n| join kind=leftouter VolumeList on InstanceName\r\n| where '{Volumes}' contains VolumeId\r\n| project InstanceName, readIOPSvalue, writeIOPSvalue, readLatValue, writeLatValue, p95read, p95write;",
              "size": 3,
              "noDataMessage": "There is no performance data or performance events are not configured.",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "readIOPSvalue",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 0
                      }
                    }
                  },
                  {
                    "columnMatch": "writeIOPSvalue",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 0
                      }
                    }
                  },
                  {
                    "columnMatch": "readLatValue",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "writeLatValue",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "p95read",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    },
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "p95write",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    },
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "CounterValue",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 0
                      }
                    }
                  },
                  {
                    "columnMatch": "CounterValue1",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 0
                      }
                    }
                  },
                  {
                    "columnMatch": "CounterValue2",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 0.05,
                      "palette": "blue"
                    },
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "CounterValue3",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 0.05,
                      "palette": "blue"
                    },
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "InstanceName",
                    "label": "Volume"
                  },
                  {
                    "columnId": "readIOPSvalue",
                    "label": "Read IOPS (Avg)"
                  },
                  {
                    "columnId": "writeIOPSvalue",
                    "label": "Write IOPS (Avg)"
                  },
                  {
                    "columnId": "readLatValue",
                    "label": "Read Lat. (Avg)"
                  },
                  {
                    "columnId": "writeLatValue",
                    "label": "Write Lat. (Avg)"
                  },
                  {
                    "columnId": "p95read",
                    "label": "P95 Read Lat."
                  },
                  {
                    "columnId": "p95write",
                    "label": "P95 Write Lat."
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "tabName",
              "comparison": "isEqualTo",
              "value": "performanceTab"
            },
            "name": "Summary grid"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isEqualTo",
        "value": "performanceTab"
      },
      "name": "Summary performance"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "History",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "parameters": [
                {
                  "id": "9e468a71-8d7a-4dad-ad67-2e2a1b687157",
                  "version": "KqlParameterItem/1.0",
                  "name": "ReadIOPSAggregates",
                  "label": "Aggregates",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue), 2)\", \"label\":\"Average\", \"selected\":true },\r\n    { \"value\":\"P1st = round(percentile(CounterValue, 1), 2)\", \"label\":\"P1st\", \"selected\":false},\r\n    { \"value\":\"P5th = round(percentile(CounterValue, 5), 2)\", \"label\":\"P5th\", \"selected\":false},\r\n    { \"value\":\"P10th = round(percentile(CounterValue, 10), 2)\", \"label\":\"P10th\", \"selected\":false},\r\n    { \"value\":\"P50th = round(percentile(CounterValue, 50), 2)\", \"label\":\"P50th\", \"selected\":false},\r\n    { \"value\":\"P90th = round(percentile(CounterValue, 90), 2)\", \"label\":\"P90th\", \"selected\":false},\r\n    { \"value\":\"P95th = round(percentile(CounterValue, 95), 2)\", \"label\":\"P95th\", \"selected\":true},\r\n    { \"value\":\"P99th = round(percentile(CounterValue, 99), 2)\", \"label\":\"P99th\", \"selected\":false},\r\n    { \"value\":\"Min = round(min(CounterValue), 2)\", \"label\":\"Min\", \"selected\":false},\r\n    { \"value\":\"Max = round(max(CounterValue), 2)\", \"label\":\"Max\", \"selected\":false}    \r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "b1fb034e-406a-48fd-9583-7abc204219cc",
                  "version": "KqlParameterItem/1.0",
                  "name": "ReadIOPSAggregatesText",
                  "label": "AggregatesText",
                  "type": 1,
                  "query": "print \"{ReadIOPSAggregates}\"",
                  "crossComponentResources": [
                    "{logAnalyticsWorkSpaceArmId}"
                  ],
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "ReadIOPS parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "parameters": [
                {
                  "id": "a32d88eb-a679-411c-ad45-c3926533f40d",
                  "version": "KqlParameterItem/1.0",
                  "name": "WriteIOPSAggregates",
                  "label": "Aggregates",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue), 2)\", \"label\":\"Average\", \"selected\":true },\r\n    { \"value\":\"P1st = round(percentile(CounterValue, 1), 2)\", \"label\":\"P1st\", \"selected\":false},\r\n    { \"value\":\"P5th = round(percentile(CounterValue, 5), 2)\", \"label\":\"P5th\", \"selected\":false},\r\n    { \"value\":\"P10th = round(percentile(CounterValue, 10), 2)\", \"label\":\"P10th\", \"selected\":false},\r\n    { \"value\":\"P50th = round(percentile(CounterValue, 50), 2)\", \"label\":\"P50th\", \"selected\":false},\r\n    { \"value\":\"P90th = round(percentile(CounterValue, 90), 2)\", \"label\":\"P90th\", \"selected\":false},\r\n    { \"value\":\"P95th = round(percentile(CounterValue, 95), 2)\", \"label\":\"P95th\", \"selected\":true},\r\n    { \"value\":\"P99th = round(percentile(CounterValue, 99), 2)\", \"label\":\"P99th\", \"selected\":false},\r\n    { \"value\":\"Min = round(min(CounterValue), 2)\", \"label\":\"Min\", \"selected\":false},\r\n    { \"value\":\"Max = round(max(CounterValue), 2)\", \"label\":\"Max\", \"selected\":false}    \r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "08b51978-8b5e-4495-834b-0c790acf3ea4",
                  "version": "KqlParameterItem/1.0",
                  "name": "WriteIOPSAggregatesText",
                  "label": "AggregatesText",
                  "type": 1,
                  "query": "print \"{WriteIOPSAggregates}\"",
                  "crossComponentResources": [
                    "{logAnalyticsWorkSpaceArmId}"
                  ],
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "WriteIOPS parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n    | extend ClsuterData = parse_xml(EventData)\r\n    | extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n    | summarize arg_max(TimeGenerated, *) by _ResourceId\r\n    | extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n    | extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n    | mv-expand volumes_information\r\n    | extend VolumeId = tostring(volumes_information.m_Id)\r\n    | join kind=leftouter Health on VolumeId\r\n    | project\r\n        VolumeId,\r\n        InstanceName = tostring(volumes_information.m_Label);\r\n        \r\nPerf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Reads/sec\"\r\n| where InstanceName !contains \"_Total\"\r\n| join kind=leftouter VolumeList on InstanceName\r\n| where '{Volumes}' contains VolumeId\r\n| summarize {ReadIOPSAggregatesText} by InstanceName, bin(TimeGenerated, totimespan('{grain}'));",
              "size": 0,
              "aggregation": 5,
              "title": "Read IOPS",
              "noDataMessage": "There is no Read IOPS data or Read IOPS events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "linechart"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "tabName",
              "comparison": "isEqualTo",
              "value": "performanceTab"
            },
            "name": "ReadIOPS graph"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n    | extend ClsuterData = parse_xml(EventData)\r\n    | extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n    | summarize arg_max(TimeGenerated, *) by _ResourceId\r\n    | extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n    | extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n    | mv-expand volumes_information\r\n    | extend VolumeId = tostring(volumes_information.m_Id)\r\n    | join kind=leftouter Health on VolumeId\r\n    | project\r\n        VolumeId,\r\n        InstanceName = tostring(volumes_information.m_Label);\r\n\r\nPerf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Writes/sec\"\r\n| where InstanceName !contains \"_Total\"\r\n| join kind=leftouter VolumeList on InstanceName\r\n| where '{Volumes}' contains VolumeId\r\n| summarize {WriteIOPSAggregatesText} by InstanceName, bin(TimeGenerated, totimespan('{grain}'));",
              "size": 0,
              "aggregation": 5,
              "title": "Write IOPS",
              "noDataMessage": "There is no Write IOPS data or Write IOPS events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "linechart"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "tabName",
              "comparison": "isEqualTo",
              "value": "performanceTab"
            },
            "name": "WriteIOPS graph"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "parameters": [
                {
                  "id": "aae624d0-d875-4518-8615-4a7fb46fa6d0",
                  "version": "KqlParameterItem/1.0",
                  "name": "ReadLatencyAggregates",
                  "label": "Aggregates",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue*1000), 2)\", \"label\":\"Average\", \"selected\":true },\r\n    { \"value\":\"P1st = round(percentile(CounterValue*1000, 1), 2)\", \"label\":\"P1st\", \"selected\":false},\r\n    { \"value\":\"P5th = round(percentile(CounterValue*1000, 5), 2)\", \"label\":\"P5th\", \"selected\":false},\r\n    { \"value\":\"P10th = round(percentile(CounterValue*1000, 10), 2)\", \"label\":\"P10th\", \"selected\":false},\r\n    { \"value\":\"P50th = round(percentile(CounterValue*1000, 50), 2)\", \"label\":\"P50th\", \"selected\":false},\r\n    { \"value\":\"P90th = round(percentile(CounterValue*1000, 90), 2)\", \"label\":\"P90th\", \"selected\":false},\r\n    { \"value\":\"P95th = round(percentile(CounterValue*1000, 95), 2)\", \"label\":\"P95th\", \"selected\":true},\r\n    { \"value\":\"P99th = round(percentile(CounterValue*1000, 99), 2)\", \"label\":\"P99th\", \"selected\":false},\r\n    { \"value\":\"Min = round(min(CounterValue*1000), 2)\", \"label\":\"Min\", \"selected\":false},\r\n    { \"value\":\"Max = round(max(CounterValue*1000), 2)\", \"label\":\"Max\", \"selected\":false}    \r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "40997f1d-0d8e-472e-aaeb-8c71d155e0b6",
                  "version": "KqlParameterItem/1.0",
                  "name": "ReadLatencyAggregatesText",
                  "label": "AggregatesText",
                  "type": 1,
                  "query": "print \"{ReadLatencyAggregates}\"",
                  "crossComponentResources": [
                    "{logAnalyticsWorkSpaceArmId}"
                  ],
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "ReadLatency parameters"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "parameters": [
                {
                  "id": "5a0f42b1-c486-4914-8f0e-949cb1a76a5e",
                  "version": "KqlParameterItem/1.0",
                  "name": "WriteLatencyAggregates",
                  "label": "Aggregates",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue*1000), 2)\", \"label\":\"Average\", \"selected\":true },\r\n    { \"value\":\"P1st = round(percentile(CounterValue*1000, 1), 2)\", \"label\":\"P1st\", \"selected\":false},\r\n    { \"value\":\"P5th = round(percentile(CounterValue*1000, 5), 2)\", \"label\":\"P5th\", \"selected\":false},\r\n    { \"value\":\"P10th = round(percentile(CounterValue*1000, 10), 2)\", \"label\":\"P10th\", \"selected\":false},\r\n    { \"value\":\"P50th = round(percentile(CounterValue*1000, 50), 2)\", \"label\":\"P50th\", \"selected\":false},\r\n    { \"value\":\"P90th = round(percentile(CounterValue*1000, 90), 2)\", \"label\":\"P90th\", \"selected\":false},\r\n    { \"value\":\"P95th = round(percentile(CounterValue*1000, 95), 2)\", \"label\":\"P95th\", \"selected\":true},\r\n    { \"value\":\"P99th = round(percentile(CounterValue*1000, 99), 2)\", \"label\":\"P99th\", \"selected\":false},\r\n    { \"value\":\"Min = round(min(CounterValue*1000), 2)\", \"label\":\"Min\", \"selected\":false},\r\n    { \"value\":\"Max = round(max(CounterValue*1000), 2)\", \"label\":\"Max\", \"selected\":false}    \r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "96c8f6dd-b84b-40bc-bc80-33f006f0449e",
                  "version": "KqlParameterItem/1.0",
                  "name": "WriteLatencyAggregatesText",
                  "label": "AggregatesText",
                  "type": 1,
                  "query": "print \"{WriteLatencyAggregates}\"",
                  "crossComponentResources": [
                    "{logAnalyticsWorkSpaceArmId}"
                  ],
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "above",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "WriteLatency parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n    | extend ClsuterData = parse_xml(EventData)\r\n    | extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n    | summarize arg_max(TimeGenerated, *) by _ResourceId\r\n    | extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n    | extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n    | mv-expand volumes_information\r\n    | extend VolumeId = tostring(volumes_information.m_Id)\r\n    | join kind=leftouter Health on VolumeId\r\n    | project\r\n        VolumeId,\r\n        InstanceName = tostring(volumes_information.m_Label);\r\n        \r\nPerf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Avg. sec/Read\"\r\n| where InstanceName !contains \"_Total\"\r\n| join kind=leftouter VolumeList on InstanceName\r\n| where '{Volumes}' contains VolumeId\r\n| summarize {ReadLatencyAggregatesText} by InstanceName, bin(TimeGenerated, totimespan('{grain}'));",
              "size": 0,
              "aggregation": 5,
              "title": "Read Latency",
              "noDataMessage": "There is no Read Latency data or Read Latency events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "linechart",
              "chartSettings": {
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "tabName",
              "comparison": "isEqualTo",
              "value": "performanceTab"
            },
            "name": "ReadLatency graph"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n    | extend ClsuterData = parse_xml(EventData)\r\n    | extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n    | summarize arg_max(TimeGenerated, *) by _ResourceId\r\n    | extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n    | extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n    | mv-expand volumes_information\r\n    | extend VolumeId = tostring(volumes_information.m_Id)\r\n    | join kind=leftouter Health on VolumeId\r\n    | project\r\n        VolumeId,\r\n        InstanceName = tostring(volumes_information.m_Label);\r\n        \r\nPerf\r\n| where _ResourceId =~ '{Resource}'\r\n| where ObjectName contains \"Cluster CSVFS\"\r\n| where CounterName contains \"Avg. sec/Write\"\r\n| where InstanceName !contains \"_Total\"\r\n| join kind=leftouter VolumeList on InstanceName\r\n| where '{Volumes}' contains VolumeId\r\n| summarize {WriteLatencyAggregatesText} by InstanceName, bin(TimeGenerated, totimespan('{grain}'));",
              "size": 0,
              "aggregation": 5,
              "title": "Write Latency",
              "noDataMessage": "There is no Write Latency data or Write Latency events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "linechart",
              "chartSettings": {
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "tabName",
              "comparison": "isEqualTo",
              "value": "performanceTab"
            },
            "name": "WriteLatency graph"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isEqualTo",
        "value": "performanceTab"
      },
      "name": "Performance History group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "#### **Jobs over time**"
            },
            "name": "Jobs over time Header Text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated, *) by _ResourceId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project\r\n    VolumeId,\r\n    Volumes = tostring(volumes_information.m_Label);\r\n    \r\nEvent\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-ReFsDedupSvc/Operational\" and EventID == 4\r\n| extend description = parse_json(tostring(split(RenderedDescription, \". \")[1]))\r\n| extend VolumeId = extract(\"\\\\\\\\?\\\\\\\\Volume{([^\\\\\\\\]+)}\\\\\\\\\", 1, RenderedDescription)\r\n| extend RunStatus = tostring(description.Results.RunStatus)\r\n| where RunStatus == 'Success'\r\n| extend Date=format_datetime(TimeGenerated, \"MM/dd/yyyy\")\r\n| join kind=leftouter VolumeList on VolumeId\r\n| summarize Count=count() by Volumes, Date\r\n| order by Date asc;",
              "size": 1,
              "title": "Job completions",
              "noDataMessage": "There is no Job completion data or Job completion events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "visualization": "barchart",
              "chartSettings": {
                "xAxis": "Date",
                "yAxis": [
                  "Count"
                ],
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                },
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true,
                      "maximumFractionDigits": 0
                    },
                    "missingSparkDataOption": "Zero"
                  },
                  "min": 0
                }
              }
            },
            "name": "Jobs over time graph"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isEqualTo",
        "value": "jobsTab"
      },
      "name": "Jobs Over Time"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "#### **Job details**"
            },
            "name": "Job details Header Text"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Health = Event\r\n    | where _ResourceId =~ '{Resource}'\r\n    | where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n    | extend description = parse_json(RenderedDescription)\r\n    | extend CorrelationId = tostring(description.CorrelationId)\r\n    | where CorrelationId =~ '{lastCorrelationId}'\r\n    | where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n    | extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n    | extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n    | summarize by VolumeId;\r\n\r\nlet VolumeList = Event\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated, *) by _ResourceId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project\r\n    VolumeId,\r\n    Volumes = tostring(volumes_information.m_Label);\r\n\r\nEvent\r\n| where _ResourceId =~ '{Resource}'\r\n| where EventLog =~ \"Microsoft-Windows-ReFsDedupSvc/Operational\" and EventID == 4\r\n| extend description = parse_json(tostring(split(RenderedDescription, \". \")[1]))\r\n| extend VolumeId = extract(\"\\\\\\\\?\\\\\\\\Volume{([^\\\\\\\\]+)}\\\\\\\\\", 1, RenderedDescription)\r\n| extend RunStatus = tostring(description.Results.RunStatus)\r\n| extend StartTime = todatetime(description.Results.StartTime)\r\n| extend timeList = split(format_timespan(totimespan(description.Results.Duration), 'dd hh mm ss'), \" \")\r\n| extend Duration = strcat(iff(timeList[0] > 0, strcat(timeList[0], \" days \"), \"\"), timeList[1], \" hours \", timeList[2], \" mins \", timeList[3], \" seconds\")\r\n| extend EndTime = StartTime + totimespan(description.Results.Duration)\r\n| extend Scanned = tolong(description.Results.DedupStatus.ScannedOnLastRun)\r\n| extend VolumeSize = tolong(description.Results.VolumeSize)\r\n| extend PercentScanned = todouble(Scanned) / todouble(VolumeSize)\r\n| join kind=leftouter VolumeList on VolumeId\r\n| project Volumes, RunStatus, StartTime, EndTime, Duration, Scanned, VolumeSize, PercentScanned;",
              "size": 3,
              "noDataMessage": "There is no Job details data or Job details events are not configured",
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{logAnalyticsWorkSpaceArmId}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "RunStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Success",
                          "representation": "success",
                          "text": "Success"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Failed",
                          "representation": "failed",
                          "text": "Failed"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Cancelled",
                          "representation": "cancelled",
                          "text": "Cancelled"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "Unknown"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Scanned",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "VolumeSize",
                    "formatter": 5,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "PercentScanned",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "percent",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "runStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Success",
                          "representation": "success",
                          "text": "Succeeded"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Running",
                          "representation": "pending",
                          "text": "Running"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Cancelled",
                          "representation": "cancelled",
                          "text": "Cancelled"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "Unknown"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "scanned",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "volumeSize",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 2,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "Volumes",
                    "label": "Volume"
                  },
                  {
                    "columnId": "RunStatus",
                    "label": "Status"
                  },
                  {
                    "columnId": "StartTime",
                    "label": "Start time"
                  },
                  {
                    "columnId": "EndTime",
                    "label": "End time"
                  },
                  {
                    "columnId": "Duration",
                    "label": "Duration"
                  },
                  {
                    "columnId": "Scanned",
                    "label": "Scanned (blocks)"
                  },
                  {
                    "columnId": "PercentScanned",
                    "label": "Scanned (%)"
                  }
                ]
              }
            },
            "name": "Job details grid"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabName",
        "comparison": "isEqualTo",
        "value": "jobsTab"
      },
      "name": "Job details group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}