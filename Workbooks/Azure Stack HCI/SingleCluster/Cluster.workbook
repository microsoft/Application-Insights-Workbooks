{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "2c3bd553-1307-4363-97c7-e2b1bc3d543e",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "timeRange"
          },
          {
            "id": "837cf92d-3c98-44df-9657-3545ee0c9301",
            "version": "KqlParameterItem/1.0",
            "name": "selectedTab",
            "type": 1,
            "isGlobal": true,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "value": "health"
          },
          {
            "id": "54788f5d-0e4c-4dfb-937b-6e80af8572fa",
            "version": "KqlParameterItem/1.0",
            "name": "resourceId",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "timeRange"
          },
          {
            "id": "9b253dd6-24fa-4c72-bc24-0018d2e12ad2",
            "version": "KqlParameterItem/1.0",
            "name": "resource",
            "type": 5,
            "isRequired": true,
            "query": "where type =~ 'microsoft.azurestackhci/clusters'\r\n| where id =~ '{resourceId}'",
            "crossComponentResources": [
              "value::all"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.azurestackhci/clusters": true
              },
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "f0ad1bbb-e939-4e63-9327-56e7aaf86ab8",
            "version": "KqlParameterItem/1.0",
            "name": "lastCorrelationId",
            "type": 1,
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = '{resourceId}'\r\n| extend description = parse_json(RenderedDescription)\r\n| where description.ArmId =~ ClusterArmId\r\n| where description.IsLastMessage =~ 'true'\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| summarize arg_max(TimeGenerated, CorrelationId) by ClusterArmId\r\n| project lastCorrelationId = CorrelationId",
            "crossComponentResources": [
              "{resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "name": "HCI Parameters",
      "styleSettings": {
        "margin": "10",
        "padding": "10"
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "6338feb7-5d30-4390-9a06-5de43131ee29",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Health",
                  "subTarget": "health",
                  "preText": "Overview",
                  "style": "link"
                },
                {
                  "id": "77337040-0e9f-4848-8ad8-4ecf61d11ae1",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Server",
                  "subTarget": "server",
                  "preText": "Overview",
                  "style": "link"
                },
                {
                  "id": "5e6ba817-0355-406e-897f-e83d763f2d2a",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Virtual machines",
                  "subTarget": "virtualMachines",
                  "style": "link"
                },
                {
                  "id": "98d18adc-ac1d-4b2e-ba1f-de5734b33f77",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Storage",
                  "subTarget": "storage",
                  "style": "link"
                },
                {
                  "id": "5806bcb9-9058-4308-8d2d-f573cd5961c3",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Networking",
                  "subTarget": "networking",
                  "style": "link"
                }
              ]
            },
            "name": "Tabs"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId =~ '{lastCorrelationId}'\r\n| where tostring(description.Fault.RootObjectType) == 'Microsoft.Health.EntityType.Cluster'\r\n| extend Severity = toint(description.Fault.Severity)\r\n| summarize Total = count(), Error = countif(Severity == 2), Warning = countif(Severity == 1), Unknown = countif(Severity == 255)\r\n| evaluate narrow()",
                    "size": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{resource}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Column",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "none"
                        }
                      },
                      "rightContent": {
                        "columnMatch": "Column",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Total",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Error",
                              "representation": "3",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Warning",
                              "representation": "2",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Unknown",
                              "representation": "unknown",
                              "text": ""
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "success",
                              "text": ""
                            }
                          ]
                        }
                      },
                      "showBorder": false,
                      "size": "auto"
                    }
                  },
                  "name": "health query"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId =~ '{lastCorrelationId}'\r\n| where tostring(description.Fault.RootObjectType) == 'Microsoft.Health.EntityType.Cluster'\r\n| extend Fault = description.Fault\r\n| extend ShortDescription = split(tostring(Fault.Type), '.')[-1]\r\n| extend Severity = toint(Fault.Severity)\r\n| extend FaultingResourceType = split(tostring(Fault.ObjectType), '.')[-1]\r\n| extend FaultingResourceId = tostring(Fault.ObjectId)\r\n| extend ReportedTime = datetime_add('Microsecond', tolong(Fault.Timestamp)/10, make_datetime(1601,1,1))\r\n| extend Detail = pack(\r\n\"Severity\", iff(Severity == 0, \"Healthy\", iff(Severity == 1, \"Warning\", iff(Severity == 2, \"Critical\", \"Unknown\"))),\r\n\"Faulting Resource ID\", FaultingResourceId,\r\n\"Faulting Resource Type\", FaultingResourceType,\r\n\"Reported Time\", ReportedTime,\r\n\"Short Description\", ShortDescription,\r\n\"Description\", tostring(Fault.Description),\r\n\"Remediation\", tostring(Fault.Remediation),\r\n\"Raw Json\", tostring(Fault))\r\n| sort by ReportedTime asc\r\n| project ShortDescription, Detail, FaultingResourceType, FaultingResourceId, Severity, ReportedTime",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "All nodes are healthy.",
                    "noDataMessageStyle": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{resource}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ShortDescription",
                          "formatter": 1,
                          "formatOptions": {
                            "linkColumn": "Detail",
                            "linkTarget": "CellDetails",
                            "linkIsContextBlade": true
                          }
                        },
                        {
                          "columnMatch": "Detail",
                          "formatter": 5,
                          "formatOptions": {
                            "linkColumn": "Detail",
                            "linkTarget": "CellDetails",
                            "linkLabel": "Open",
                            "linkIsContextBlade": true
                          }
                        },
                        {
                          "columnMatch": "Severity",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "Healthy"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "Warning"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "4",
                                "text": "Critical"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "Unknown"
                              }
                            ]
                          }
                        }
                      ],
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "ShortDescription",
                          "label": "Short Description"
                        },
                        {
                          "columnId": "FaultingResourceType",
                          "label": "Faulting Resource Type"
                        },
                        {
                          "columnId": "FaultingResourceId",
                          "label": "Faulting Resource ID"
                        },
                        {
                          "columnId": "ReportedTime",
                          "label": "Reported Time"
                        }
                      ]
                    }
                  },
                  "name": "health detail query"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "health"
            },
            "name": "health group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId =~ '{lastCorrelationId}'\r\n| where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Server'\r\n| extend Nodename = tostring(description.Fault.ObjectId)\r\n| extend Severity = toint(description.Fault.Severity)\r\n| extend Severity = iff(Severity > 2, -1, Severity)\r\n| summarize Status = max(Severity) by Nodename;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId =~ '{resourceId}'\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| join kind=leftouter Health on Nodename\r\n| extend serverArmId = strcat(ArmPrefix, Nodename)\r\n| extend UsedCpu = toint(servers_information.m_totalProcessorsUsedPercentage)\r\n| extend AvailableCpu = 100 - UsedCpu\r\n| extend UsedMemory = todecimal(servers_information.m_usedPhysicalMemoryInBytes)\r\n| extend TotalMemory = todecimal(servers_information.m_totalPhysicalMemoryInBytes)\r\n| extend AvailableMemory = TotalMemory - UsedMemory\r\n| extend MemoryUsage = round(UsedMemory/TotalMemory*100, 0)\r\n| extend LogicalProcessors = toint(servers_information.m_totalLogicalProcessors)\r\n| extend PhysicalProcessors = toint(servers_information.m_totalPhysicalProcessors)\r\n| extend Site = tostring(servers_information.m_site)\r\n| extend Uptime = tolong(servers_information.m_uptimeInSeconds)\r\n| extend DomainGroup = extract(@'[^\\.]+\\.(.+)', 1, Computer)\r\n| order by tolower(Nodename) asc\r\n| project serverArmId, Nodename, LastUpdated = TimeGenerated, Status, UsedCpu, AvailableCpu, MemoryUsage, UsedMemory, AvailableMemory, LogicalProcessors, PhysicalProcessors, Uptime, Site, DomainGroup",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{resource}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "serverArmId",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": false,
                            "showIcon": true,
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/Azure Stack HCI/Server",
                              "typeSource": "workbook",
                              "gallerySource": "workbook",
                              "locationSource": "default",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "resourceId",
                                  "source": "parameter",
                                  "value": "resourceId"
                                },
                                {
                                  "name": "server",
                                  "source": "column",
                                  "value": "Nodename"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "Nodename",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "Warning"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "4",
                                "text": "Critical"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "-1",
                                "representation": "unknown",
                                "text": "Unknown"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "Healthy"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "UsedCpu",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"UsedCpu\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "UsedCpu",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "AvailableCpu",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "AvailableCpu",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MemoryUsage",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"MemoryUsage\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "UsedMemory",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "AvailableMemory",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "UsedMemory",
                          "formatter": 5,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": [
                                {
                                  "columnName": "UsedMemory",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "AvailableMemory",
                                  "color": "gray"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "AvailableMemory",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LogicalProcessors",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "19ch"
                          }
                        },
                        {
                          "columnMatch": "PhysicalProcessors",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "19ch"
                          }
                        },
                        {
                          "columnMatch": "Uptime",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "HealthStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "Healthy"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "Warning"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "4",
                                "text": "Critical"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "Unknown"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "CpuUsage",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "green",
                            "aggregation": "Max"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "percent",
                              "useGrouping": false
                            }
                          }
                        }
                      ],
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "serverArmId",
                          "label": "Servers"
                        },
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "UsedCpu",
                          "label": "Cpu usage"
                        },
                        {
                          "columnId": "MemoryUsage",
                          "label": "Memory usage"
                        },
                        {
                          "columnId": "LogicalProcessors",
                          "label": "Log. Processors"
                        },
                        {
                          "columnId": "PhysicalProcessors",
                          "label": "Phy. Processors"
                        },
                        {
                          "columnId": "DomainGroup",
                          "label": "Domain group"
                        }
                      ]
                    }
                  },
                  "name": "server query"
                },
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "crossComponentResources": [
                      "{resource}"
                    ],
                    "parameters": [
                      {
                        "id": "9f6238f3-f31a-4ce9-aa78-6581830843c3",
                        "version": "KqlParameterItem/1.0",
                        "name": "serverTimeRange",
                        "label": "Time range for chart",
                        "type": 4,
                        "isRequired": true,
                        "value": {
                          "durationMs": 86400000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            },
                            {
                              "durationMs": 259200000
                            },
                            {
                              "durationMs": 604800000
                            },
                            {
                              "durationMs": 1209600000
                            },
                            {
                              "durationMs": 2419200000
                            },
                            {
                              "durationMs": 2592000000
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 86400000
                        }
                      },
                      {
                        "id": "39d73fd2-3199-4146-a053-3357e4ff11db",
                        "version": "KqlParameterItem/1.0",
                        "name": "servers",
                        "label": "Servers",
                        "type": 2,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId =~ '{resourceId}'\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| sort by Nodename asc\r\n| project Nodename",
                        "crossComponentResources": [
                          "{resource}"
                        ],
                        "value": [
                          "value::all"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "showDefault": false
                        },
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "serverTimeRange",
                        "defaultValue": "value::all",
                        "queryType": 0,
                        "resourceType": "microsoft.resources/subscriptions"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions"
                  },
                  "name": "server parameters"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Cpu and memory usage",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ArmId = Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId =~ '{resourceId}'\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| where Nodename in~ ({servers})\r\n| project _ResourceId = tolower(strcat(ArmPrefix, Nodename));\r\n\r\nPerf\r\n| where CounterName == \"% Processor Time\"\r\n| join kind=leftsemi ArmId on _ResourceId\r\n| project NodeName = split(Computer, \".\")[0], CpuUsage = CounterValue, TimeGenerated\r\n\r\n",
                          "size": 0,
                          "aggregation": 3,
                          "title": "CPU usage",
                          "noDataMessage": "There is no CPU performance counter.",
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "timeContextFromParameter": "serverTimeRange",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{resource}"
                          ],
                          "visualization": "linechart",
                          "sortBy": [],
                          "chartSettings": {
                            "yAxis": [
                              "CpuUsage"
                            ],
                            "group": "NodeName",
                            "createOtherGroup": null,
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 1,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": true,
                                  "maximumFractionDigits": 2
                                }
                              },
                              "min": 0,
                              "max": 100
                            }
                          }
                        },
                        "customWidth": "50",
                        "name": "cpu usage query"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ArmId = Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId =~ '{resourceId}'\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| where Nodename in~ ({servers})\r\n| project _ResourceId = tolower(strcat(ArmPrefix, Nodename)), TotalMemoryInBytes = todecimal(servers_information.m_totalPhysicalMemoryInBytes);\r\n\r\nPerf\r\n| where ObjectName == \"Memory\"\r\n| where CounterName == \"Available Bytes\"\r\n| join kind=inner ArmId on _ResourceId\r\n| project NodeName = split(Computer, \".\")[0], MemoryUsage = (TotalMemoryInBytes - todecimal(CounterValue))/TotalMemoryInBytes*100, TimeGenerated",
                          "size": 0,
                          "aggregation": 3,
                          "title": "Memory usage",
                          "noDataMessage": "There is no Memory performance counter.",
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "timeContextFromParameter": "serverTimeRange",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{resource}"
                          ],
                          "visualization": "linechart",
                          "chartSettings": {
                            "yAxis": [
                              "MemoryUsage"
                            ],
                            "group": "NodeName",
                            "createOtherGroup": null,
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 1,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": false,
                                  "maximumFractionDigits": 2
                                }
                              },
                              "min": 0,
                              "max": 100
                            }
                          }
                        },
                        "customWidth": "50",
                        "name": "memory usage query"
                      }
                    ]
                  },
                  "name": "Cpu and memory usage group"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "RDMA",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ArmId = Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId =~ '{resourceId}'\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| where Nodename in~ ({servers})\r\n| project _ResourceId = tolower(strcat(ArmPrefix, Nodename));\r\n\r\nPerf\r\n| where ObjectName == \"RDMA Activity\"\r\n| summarize Computer = any(Computer), _ResourceId = any(_ResourceId), RdmaUsage = sum(CounterValue) by TimeGenerated\r\n| join kind=leftsemi ArmId on _ResourceId\r\n| project NodeName = split(Computer, \".\")[0], RdmaUsage, TimeGenerated",
                          "size": 0,
                          "title": "RDMA",
                          "noDataMessage": "There is no RDMA performance counter.",
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "timeContextFromParameter": "serverTimeRange",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{resource}"
                          ],
                          "visualization": "linechart",
                          "chartSettings": {
                            "yAxis": [
                              "TotalRdmaUsage"
                            ],
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 11,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": false
                                }
                              }
                            }
                          }
                        },
                        "customWidth": "50",
                        "name": "rdma query"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ArmId = Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId =~ '{resourceId}'\r\n| extend ArmPrefix = extract(@'(.+/)[^/]+$', 1, _ResourceId)\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| where Nodename in~ ({servers})\r\n| project _ResourceId = tolower(strcat(ArmPrefix, Nodename));\r\n\r\nPerf\r\n| where ObjectName == \"Network Interface\"\r\n| summarize Computer = any(Computer), _ResourceId = any(_ResourceId), NetworkUsage = sum(CounterValue) by TimeGenerated\r\n| join kind=leftsemi ArmId on _ResourceId\r\n| project NodeName = split(Computer, \".\")[0], NetworkUsage, TimeGenerated",
                          "size": 0,
                          "title": "Non RDMA",
                          "noDataMessage": "There is no Networking performance counter.",
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "timeContextFromParameter": "serverTimeRange",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{resource}"
                          ],
                          "visualization": "linechart",
                          "chartSettings": {
                            "yAxis": [
                              "NetworkUsage"
                            ],
                            "group": "NodeName",
                            "createOtherGroup": null,
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 11,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": false,
                                  "maximumFractionDigits": 0
                                }
                              }
                            }
                          }
                        },
                        "customWidth": "50",
                        "name": "memory usage query"
                      }
                    ]
                  },
                  "name": "rdma group"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "server"
            },
            "name": "server group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "### State of all the virtual machines in the cluster\r\nVM can be in one of the following states: Running, Stopped, Failed, or Other (Unknown, Starting, Snapshoting, Saving, Stopping, Pausing, Resuming, Paused, Suspended)"
                  },
                  "name": "Virtual Machine Description"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3003\"\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ('{resourceId}')\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| extend description = parse_json(RenderedDescription)\r\n| extend VmsUnknown = toint(description.m_totalVmsUnknown)\r\n| extend VmsRunning = toint(description.m_totalVmsRunning)\r\n| extend VmsStopped = toint(description.m_totalVmsStopped)\r\n| extend VmsFailed = toint(description.m_totalVmsFailed)\r\n| extend VmsPaused = toint(description.m_totalVmsPaused)\r\n| extend VmsSuspended = toint(description.m_totalVmsSuspended)\r\n| extend VmsStarting = toint(description.m_totalVmsStarting)\r\n| extend VmsSnapshoting = toint(description.m_totalVmsSnapshotting)\r\n| extend VmsSaving = toint(description.m_totalVmsSaving)\r\n| extend VmsStopping = toint(description.m_totalVmsStopping)\r\n| extend VmsPausing = toint(description.m_totalVmsPausing)\r\n| extend VmsResuming = toint(description.m_totalVmsResuming)\r\n| project VmsRunning, VmsStopped, VmsFailed, VmsOther = VmsUnknown + VmsStarting + VmsSnapshoting + VmsSaving + VmsStopping + VmsPausing + VmsResuming + VmsPaused + VmsSuspended\r\n| evaluate narrow()\r\n| project Column, tolong(Value)",
                    "size": 3,
                    "showAnalytics": true,
                    "noDataMessage": "There is no virtual machine in this cluster.",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{resource}"
                    ],
                    "visualization": "piechart",
                    "chartSettings": {
                      "seriesLabelSettings": [
                        {
                          "seriesName": "VmsStopped",
                          "label": "Stopped VMs",
                          "color": "orange"
                        },
                        {
                          "seriesName": "VmsRunning",
                          "label": "Running VMs",
                          "color": "green"
                        },
                        {
                          "seriesName": "VmsFailed",
                          "label": "Failed VMs",
                          "color": "red"
                        },
                        {
                          "seriesName": "VmsOther",
                          "label": "Other VMs",
                          "color": "gray"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedTab",
                    "comparison": "isEqualTo",
                    "value": "virtualMachines"
                  },
                  "showPin": false,
                  "name": "Virtual Machine Chart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ('{resourceId}')\r\n| extend ServerResourceId = strcat_array(array_slice(split(_ResourceId,\"/\"), 0, -2), \"/\")\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| mv-expand servers_information\r\n| extend VmsFailed = toint(servers_information.m_vm.m_totalVmsFailed)\r\n| extend VmsRunning = toint(servers_information.m_vm.m_totalVmsRunning)\r\n| extend VmsStopped = toint(servers_information.m_vm.m_totalVmsStopped)\r\n| extend VmsOther = toint(toint(servers_information.m_vm.m_totalVmsPaused) + toint(servers_information.m_vm.m_totalVmsPausing) + toint(servers_information.m_vm.m_totalVmsResuming) + toint(servers_information.m_vm.m_totalVmsSaving) + toint(servers_information.m_vm.m_totalVmsSnapshotting) + toint(servers_information.m_vm.m_totalVmsStarting) + toint(servers_information.m_vm.m_totalVmsStopping) + toint(servers_information.m_vm.m_totalVmsSuspended) + toint(servers_information.m_vm.m_totalVmsUnknown))\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend Hostname = strcat(ServerResourceId, \"/\", Nodename)\r\n| order by tolower(Nodename) asc\r\n| project Hostname, Nodename, LastUpdated = TimeGenerated, VmsTotal = VmsFailed + VmsRunning + VmsStopped + VmsOther, VmsRunning, VmsStopped, VmsFailed, VmsOther",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{resource}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Hostname",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "WorkbookTemplate",
                            "showIcon": true,
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/Azure Stack HCI/Server",
                              "typeSource": "workbook",
                              "gallerySource": "workbook",
                              "locationSource": "default",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "server",
                                  "source": "column",
                                  "value": "Nodename"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "Nodename",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "VmsTotal",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"VmsRunning\"] of [\"VmsTotal\"] running",
                              "columnSettings": [
                                {
                                  "columnName": "VmsRunning",
                                  "color": "green"
                                },
                                {
                                  "columnName": "VmsFailed",
                                  "color": "red"
                                },
                                {
                                  "columnName": "VmsStopped",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "VmsOther",
                                  "color": "gray"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "Hostname",
                          "label": "Nodes"
                        },
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "VmsTotal",
                          "label": "Total VMs"
                        },
                        {
                          "columnId": "VmsRunning",
                          "label": "Running"
                        },
                        {
                          "columnId": "VmsStopped",
                          "label": "Stopped"
                        },
                        {
                          "columnId": "VmsFailed",
                          "label": "Failed"
                        },
                        {
                          "columnId": "VmsOther",
                          "label": "Other"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedTab",
                    "comparison": "isEqualTo",
                    "value": "virtualMachines"
                  },
                  "showPin": false,
                  "name": "Virtual Machines Grid View"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "virtualMachines"
            },
            "name": "Virtual Machines Group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "## We are working on the storage section, stay tuned"
                  },
                  "name": "storage text"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "storage"
            },
            "name": "storage group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "## We are working on the networking section, stay tuned"
                  },
                  "name": "networking text"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "networking"
            },
            "name": "networking group"
          }
        ]
      },
      "name": "Tabs Group"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}