{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{subscription}"
        ],
        "parameters": [
          {
            "id": "2c3bd553-1307-4363-97c7-e2b1bc3d543e",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "timeRange"
          },
          {
            "id": "09a907b9-5b7b-42e2-93e1-e88ed2dbbff0",
            "version": "KqlParameterItem/1.0",
            "name": "subscription",
            "label": "Subscriptions",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| where type =~ 'microsoft.azurestackhci/clusters'\r\n| summarize by subscriptionId\r\n| union (Resources\r\n| where type =~ 'microsoft.azurestackhci/clusters'\r\n| summarize Count = count() by subscriptionId\r\n| top 1 by Count desc)\r\n| summarize Count = count() by subscriptionId\r\n| project value = subscriptionId, label = subscriptionId, selected = Count > 1",
            "crossComponentResources": [
              "value::selected"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "0bd8be0a-5391-4e03-9b4b-5eb2643f9b73",
            "version": "KqlParameterItem/1.0",
            "name": "clusters",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\"\r\n| where EventID in (\"3000\", \"3001\", \"3002\", \"3003\", \"3004\")\r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| distinct ClusterArmId\r\n| union (datatable (ClusterArmId:string)[\"*\"])",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions"
          },
          {
            "id": "194d34fb-ab23-4c89-b903-0c985acd3f60",
            "version": "KqlParameterItem/1.0",
            "name": "selectedCluster",
            "label": "HCI clusters",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| where id in~ (dynamic([{clusters}]))\r\n| order by tolower(name) asc\r\n| extend Rank = row_number()\r\n| project id, selected = Rank <= 10",
            "crossComponentResources": [
              "{subscription}"
            ],
            "typeSettings": {
              "limitSelectTo": 100,
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "0fd64f15-3e8b-4f65-b64b-759620b7eb3f",
            "version": "KqlParameterItem/1.0",
            "name": "Message",
            "type": 1,
            "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| summarize Total = count(), RegisteredClusters = countif(id in~ (dynamic([{clusters}])))\r\n| project Message = strcat('# ', RegisteredClusters, ' / ', Total)",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "837cf92d-3c98-44df-9657-3545ee0c9301",
            "version": "KqlParameterItem/1.0",
            "name": "selectedTab",
            "type": 1,
            "value": "overview",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "clusters",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "not set",
                  "resultValType": "static",
                  "resultVal": "gettingStarted"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "overview"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "name": "HCI Parameters",
      "styleSettings": {
        "margin": "10",
        "padding": "10"
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "99cd5df5-c4ca-465d-8aeb-0caf2ad03ff4",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Get started",
                  "subTarget": "gettingStarted",
                  "style": "link"
                },
                {
                  "id": "97fae118-0614-4397-99aa-45b2e4213754",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Overview",
                  "subTarget": "overview",
                  "preText": "Overview",
                  "style": "link"
                },
                {
                  "id": "5e6ba817-0355-406e-897f-e83d763f2d2a",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Virtual machines",
                  "subTarget": "virtualMachines",
                  "style": "link"
                },
                {
                  "id": "98d18adc-ac1d-4b2e-ba1f-de5734b33f77",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Storage",
                  "subTarget": "storage",
                  "style": "link"
                },
                {
                  "id": "5806bcb9-9058-4308-8d2d-f573cd5961c3",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Cluster performance",
                  "subTarget": "clusterPerformance",
                  "style": "link"
                },
                {
                  "id": "03ce7f63-1e3c-4fd0-987b-f06bbe807792",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Alerts (coming soon)",
                  "subTarget": "alerts",
                  "style": "link"
                }
              ]
            },
            "name": "Tabs"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "### State of all the virtual machines in selected clusters\r\nVM can be in one of the following states: Running, Stopped, Failed, or Other (Unknown, Starting, Snapshoting, Saving, Stopping, Pausing, Resuming, Paused, Suspended)"
                  },
                  "name": "Virtual Machine Description"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3003\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| extend description = parse_json(RenderedDescription)\r\n| extend VmsUnknown = toint(description.m_totalVmsUnknown)\r\n| extend VmsRunning = toint(description.m_totalVmsRunning)\r\n| extend VmsStopped = toint(description.m_totalVmsStopped)\r\n| extend VmsFailed = toint(description.m_totalVmsFailed)\r\n| extend VmsPaused = toint(description.m_totalVmsPaused)\r\n| extend VmsSuspended = toint(description.m_totalVmsSuspended)\r\n| extend VmsStarting = toint(description.m_totalVmsStarting)\r\n| extend VmsSnapshoting = toint(description.m_totalVmsSnapshotting)\r\n| extend VmsSaving = toint(description.m_totalVmsSaving)\r\n| extend VmsStopping = toint(description.m_totalVmsStopping)\r\n| extend VmsPausing = toint(description.m_totalVmsPausing)\r\n| extend VmsResuming = toint(description.m_totalVmsResuming)\r\n| project VmsRunning, VmsStopped, VmsFailed, VmsOther = VmsUnknown + VmsStarting + VmsSnapshoting + VmsSaving + VmsStopping + VmsPausing + VmsResuming + VmsPaused + VmsSuspended\r\n| evaluate narrow()\r\n| project Column, tolong(Value)",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "piechart",
                    "chartSettings": {
                      "seriesLabelSettings": [
                        {
                          "seriesName": "VmsStopped",
                          "label": "Stopped VMs",
                          "color": "orange"
                        },
                        {
                          "seriesName": "VmsRunning",
                          "label": "Running VMs",
                          "color": "green"
                        },
                        {
                          "seriesName": "VmsFailed",
                          "label": "Failed VMs",
                          "color": "red"
                        },
                        {
                          "seriesName": "VmsOther",
                          "label": "Other VMs",
                          "color": "gray"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedTab",
                    "comparison": "isEqualTo",
                    "value": "virtualMachines"
                  },
                  "showPin": false,
                  "name": "Virtual Machine Chart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ServerResourceId = strcat_array(array_slice(split(_ResourceId,\"/\"), 0, -2), \"/\")\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| mv-expand servers_information\r\n| extend VmsFailed = toint(servers_information.m_vm.m_totalVmsFailed)\r\n| extend VmsRunning = toint(servers_information.m_vm.m_totalVmsRunning)\r\n| extend VmsStopped = toint(servers_information.m_vm.m_totalVmsStopped)\r\n| extend VmsOther = toint(toint(servers_information.m_vm.m_totalVmsPaused) + toint(servers_information.m_vm.m_totalVmsPausing) + toint(servers_information.m_vm.m_totalVmsResuming) + toint(servers_information.m_vm.m_totalVmsSaving) + toint(servers_information.m_vm.m_totalVmsSnapshotting) + toint(servers_information.m_vm.m_totalVmsStarting) + toint(servers_information.m_vm.m_totalVmsStopping) + toint(servers_information.m_vm.m_totalVmsSuspended) + toint(servers_information.m_vm.m_totalVmsUnknown))\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend Hostname = strcat(ServerResourceId, \"/\", Nodename)\r\n| extend ParentId = ClusterArmId, Id = Hostname, Name = Hostname\r\n| order by tolower(Nodename) asc\r\n| union (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Other = toint(servers_information.m_vm.m_totalVmsPaused) + toint(servers_information.m_vm.m_totalVmsPausing) + toint(servers_information.m_vm.m_totalVmsResuming) + toint(servers_information.m_vm.m_totalVmsSaving) + toint(servers_information.m_vm.m_totalVmsSnapshotting) + toint(servers_information.m_vm.m_totalVmsStarting) + toint(servers_information.m_vm.m_totalVmsStopping) + toint(servers_information.m_vm.m_totalVmsSuspended) + toint(servers_information.m_vm.m_totalVmsUnknown)\r\n| summarize TimeGenerated = max(TimeGenerated), VmsRunning = toint(sum(toint(servers_information.m_vm.m_totalVmsRunning))), VmsStopped = toint(sum(toint(servers_information.m_vm.m_totalVmsStopped))), VmsFailed = toint(sum(toint(servers_information.m_vm.m_totalVmsFailed))), VmsOther = toint(sum(Other)), ClusterName = any(ClusterName) by ClusterArmId\r\n| extend ParentId = '', Id = ClusterArmId, Name = ClusterArmId\r\n| order by tolower(ClusterName) asc)\r\n| project ParentId, Id, Name, LastUpdated = TimeGenerated, VmsTotal = VmsFailed + VmsRunning + VmsStopped + VmsOther, VmsRunning, VmsStopped, VmsFailed, VmsOther",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ParentId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Id",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "VmsTotal",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"VmsRunning\"] of [\"VmsTotal\"] running",
                              "columnSettings": [
                                {
                                  "columnName": "VmsRunning",
                                  "color": "green"
                                },
                                {
                                  "columnName": "VmsFailed",
                                  "color": "red"
                                },
                                {
                                  "columnName": "VmsStopped",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "VmsOther",
                                  "color": "gray"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Hostname",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 5
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "ParentId",
                        "treeType": 0,
                        "expanderColumn": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "ParentId"
                        },
                        {
                          "columnId": "Id"
                        },
                        {
                          "columnId": "Name",
                          "label": "Cluster > Node"
                        },
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "VmsTotal",
                          "label": "Total VMs"
                        },
                        {
                          "columnId": "VmsRunning",
                          "label": "Running"
                        },
                        {
                          "columnId": "VmsStopped",
                          "label": "Stopped"
                        },
                        {
                          "columnId": "VmsFailed",
                          "label": "Failed"
                        },
                        {
                          "columnId": "VmsOther",
                          "label": "Other"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedTab",
                    "comparison": "isEqualTo",
                    "value": "virtualMachines"
                  },
                  "showPin": false,
                  "name": "Virtual Machines Grid View"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "virtualMachines"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "Virtual Machines Group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<p> This view provides the health, usage, and network performance information about the nodes of selected clusters that have connected to Azure in the last 24 hours. It is adviced to check both of the node and storage health of your clusters.\r\nIf you don't see a particular cluster, check the filters here as well as the cluster's connection to Azure on the **Azure Stack HCI** resource page. To see if monitoring is enabled on the cluster, use the **Get started** tab."
                  },
                  "name": "Overview Description"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| mv-expand servers_information\r\n| project ClusterName, Hostname = servers_information.m_name, status= toint(servers_information.m_statusCategory)\r\n| extend ServerHealthy = iif(status == 0, 1, 0)\r\n| extend ServerWarning = iif(status == 1, 1, 0)\r\n| extend ServerCritical = iif(status == 2, 1, 0)\r\n| extend ServerUnknown = iif(status == 255, 1, 0)\r\n| summarize TotalServers = count(), TotalHealthyServers = sum(ServerHealthy), TotalCriticalServers = sum(ServerCritical), TotalWarningServers = sum(ServerWarning), TotalUnknownServers = sum(ServerUnknown) by ClusterName\r\n| project isHealthy = iff(TotalHealthyServers == TotalServers,1,0), isCritical = iff(TotalCriticalServers > 0, 1,0), isWarning = iff(TotalWarningServers > 0, 1,0), isUnknown = iff(TotalUnknownServers > 0, 1,0)\r\n| summarize Total = count(), Healthy = sum(isHealthy), Warning = sum(isWarning), Critical = sum(isCritical), Other = sum(isUnknown)\r\n| evaluate narrow()\r\n| extend Column = iff(Column == \"Total\", \"Total clusters\", Column)\r\n| project Column, tolong(Value)",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Column",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "none"
                        }
                      },
                      "rightContent": {
                        "columnMatch": "Column",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Healthy",
                              "representation": "success",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Critical",
                              "representation": "4",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Warning",
                              "representation": "2",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Other",
                              "representation": "unknown",
                              "text": ""
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "Blank",
                              "text": ""
                            }
                          ]
                        }
                      },
                      "showBorder": false,
                      "size": "auto"
                    }
                  },
                  "name": "Clusters Summary"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend serverResourceId_substring = strcat_array(array_slice(split(_ResourceId,\"/\"), 0, -2), \"/\")\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend Hostname = strcat(serverResourceId_substring, \"/\", Nodename)\r\n| extend TotalVmsRunning = toint(servers_information.m_vm.m_totalVmsRunning)\r\n| extend TotalVmsStopped = toint(servers_information.m_vm.m_totalVmsStopped)\r\n| extend TotalVmsFailed = toint(servers_information.m_vm.m_totalVmsFailed)\r\n| extend TotalVmsOther = toint(toint(servers_information.m_vm.m_totalVmsUnknown) + toint(servers_information.m_vm.m_totalVmsPaused) + toint(servers_information.m_vm.m_totalVmsSuspended) + toint(servers_information.m_vm.m_totalVmsStarting) + toint(servers_information.m_vm.m_totalVmsSnapshotting) + toint(servers_information.m_vm.m_totalVmsSaving) + toint(servers_information.m_vm.m_totalVmsStopping) + toint(servers_information.m_vm.m_totalVmsPausing) + toint(servers_information.m_vm.m_totalVmsResuming))\r\n| extend TotalVms = toint(TotalVmsRunning + TotalVmsStopped + TotalVmsFailed + TotalVmsOther)\r\n| extend ParentId = ClusterArmId, Id = Nodename, Name = Hostname\r\n| extend TotalProcessorUsed = todouble(servers_information.m_totalProcessorsUsedPercentage)\r\n| extend TotalProcessorAvailable = todouble(100 - TotalProcessorUsed)\r\n| extend UsedPhysicalMemoryInGb = round(todecimal(servers_information.m_usedPhysicalMemoryInBytes)/1073741824, 2), AvailableMemoryInGb = round((todecimal(servers_information.m_totalPhysicalMemoryInBytes) - todecimal(servers_information.m_usedPhysicalMemoryInBytes))/1073741824, 2), TotalMemoryInGb = round(todecimal(servers_information.m_totalPhysicalMemoryInBytes)/1073741824, 2)\r\n| extend HealthStatus = toint(servers_information.m_statusCategory), NodeState = toint(servers_information.m_status[0]), StatusInformation = toint(servers_information.m_status[1]), Uptime = servers_information.m_uptimeInSeconds\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| where TimeGenerated {timeRange:query}\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend serverResourceId_substring = strcat_array(array_slice(split(_ResourceId,\"/\"), 0, -2), \"/\")\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Hostname = strcat(serverResourceId_substring,\"/\",servers_information.m_name)\r\n| extend TotalNetworkUsage = (todouble(servers_information.m_InboundNetworkUsage) + todouble(servers_information.m_OutboundNetworkUsage) + todouble(servers_information.m_InboundRdmaUsage) + todouble(servers_information.m_OutboundRdmaUsage))*0.125\r\n| make-series NetworkUsageTrend = sum(TotalNetworkUsage) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by Hostname) on Hostname\r\n| order by tolower(Nodename) asc\r\n| union (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| summarize UsedPhysicalMemoryInGb = round(sum(todecimal(servers_information.m_usedPhysicalMemoryInBytes))/1073741824, 2), AvailableMemoryInGb = round((sum(todecimal(servers_information.m_totalPhysicalMemoryInBytes)) - sum(todecimal(servers_information.m_usedPhysicalMemoryInBytes)))/1073741824, 2), TotalMemoryInGb = round(sum(todecimal(servers_information.m_totalPhysicalMemoryInBytes))/1073741824, 2), HealthStatus = max(toint(servers_information.m_statusCategory)), StatusInformation = max(toint(servers_information.m_status[1])), TotalVmsRunning = toint(sum(toint(servers_information.m_vm.m_totalVmsRunning))), TotalVmsStopped = toint(sum(toint(servers_information.m_vm.m_totalVmsStopped))), TotalVmsFailed = toint(sum(toint(servers_information.m_vm.m_totalVmsFailed))), TotalVmsOther = toint(sum(toint(servers_information.m_vm.m_totalVmsUnknown) + toint(servers_information.m_vm.m_totalVmsPaused) + toint(servers_information.m_vm.m_totalVmsSuspended) + toint(servers_information.m_vm.m_totalVmsStarting) + toint(servers_information.m_vm.m_totalVmsSnapshotting) + toint(servers_information.m_vm.m_totalVmsSaving) + toint(servers_information.m_vm.m_totalVmsStopping) + toint(servers_information.m_vm.m_totalVmsPausing) + toint(servers_information.m_vm.m_totalVmsResuming))), TotalCpu = sum(todecimal(servers_information.m_totalClockSpeedInMHz)), UsedCpu = sum(todecimal(servers_information.m_totalClockSpeedInMHz) * todecimal(servers_information.m_totalProcessorsUsedPercentage) / 100), ClusterName = any(ClusterName), TotalNodes = count(), UpNodes = countif(toint(servers_information.m_status[0]) == 0), TimeGenerated = max(TimeGenerated) by ClusterArmId\r\n| extend ParentId = '', Id = ClusterArmId, Name = ClusterArmId, TotalVms = toint(TotalVmsRunning + TotalVmsStopped + TotalVmsFailed + TotalVmsOther), NodeState = toint(4)\r\n| extend TotalProcessorUsed = todouble(round(UsedCpu/TotalCpu*100, 2))\r\n| extend TotalProcessorAvailable = todouble(round(100 - TotalProcessorUsed, 2))\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterArmId = tostring(ClsuterData.DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend TotalNetworkUsage = (todouble(servers_information.m_InboundNetworkUsage) + todouble(servers_information.m_OutboundNetworkUsage) + todouble(servers_information.m_InboundRdmaUsage) + todouble(servers_information.m_OutboundRdmaUsage))*0.125\r\n| make-series NetworkUsageTrend = sum(TotalNetworkUsage) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId) on ClusterArmId\r\n| order by tolower(ClusterName) asc)\r\n| project ParentId, Name, Id, LastUpdated = TimeGenerated, HealthStatus, NodeState, StatusInformation, Uptime = servers_information.m_uptimeInSeconds, TotalProcessorUsed, TotalProcessorAvailable, UsedPhysicalMemoryInGb, AvailableMemoryInGb, TotalMemoryInGb,NetworkUsageTrend, TotalVms, TotalVmsRunning, TotalVmsStopped, TotalVmsFailed, TotalVmsOther, TotalNodes, UpNodes",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ParentId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Id",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "HealthStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "Healthy"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "Warning"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "failed",
                                "text": "Critical"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "255",
                                "representation": "Unknown",
                                "text": "Other"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Unknown",
                                "text": "Unknown"
                              }
                            ],
                            "aggregation": "Max"
                          }
                        },
                        {
                          "columnMatch": "NodeState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "up",
                                "text": "Up"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "down",
                                "text": "Down"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "In Maintenance"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "pending",
                                "text": "Joining"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "4",
                                "representation": "Blank",
                                "text": "[\"UpNodes\"] of [\"TotalNodes\"] up"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": ""
                              }
                            ],
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": []
                            }
                          }
                        },
                        {
                          "columnMatch": "StatusInformation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Uptime",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalProcessorUsed",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalProcessorUsed\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "TotalProcessorUsed",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "TotalProcessorAvailable",
                                  "color": "gray"
                                }
                              ]
                            }
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalProcessorAvailable",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "UsedPhysicalMemoryInGb",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailableMemoryInGb",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalMemoryInGb",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"AvailableMemoryInGb\"] of [\"TotalMemoryInGb\"] GB available",
                              "columnSettings": [
                                {
                                  "columnName": "UsedPhysicalMemoryInGb",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "AvailableMemoryInGb",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            },
                            "customColumnWidthSetting": "178px"
                          },
                          "numberFormat": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "NetworkUsageTrend",
                          "formatter": 9,
                          "formatOptions": {
                            "min": 0,
                            "palette": "blue",
                            "aggregation": "Sum"
                          }
                        },
                        {
                          "columnMatch": "TotalVmsRunning",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalVmsRunning\"] of [\"TotalVms\"] running",
                              "columnSettings": [
                                {
                                  "columnName": "TotalVmsRunning",
                                  "color": "green"
                                },
                                {
                                  "columnName": "TotalVmsStopped",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "TotalVmsOther",
                                  "color": "gray"
                                },
                                {
                                  "columnName": "TotalVmsFailed",
                                  "color": "red"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalVmsStopped",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalVmsFailed",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalVmsOther",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "UpNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 0,
                          "formatOptions": {
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "Hostname",
                          "formatter": 5,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": true,
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "TimeGenerated",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "usedPhysicalMemoryInBytes",
                          "formatter": 5,
                          "formatOptions": {
                            "aggregation": "Sum",
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": [
                                {
                                  "columnName": "available_physical_storage_InGB",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "usedPhysicalMemoryInBytes",
                                  "color": "blue"
                                }
                              ]
                            }
                          },
                          "numberFormat": {
                            "unit": 2,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "NetworkUsage",
                          "formatter": 0,
                          "formatOptions": {
                            "aggregation": "Sum"
                          },
                          "numberFormat": {
                            "unit": 11,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 2
                            }
                          }
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "ParentId",
                        "treeType": 0,
                        "expanderColumn": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "ParentId"
                        },
                        {
                          "columnId": "Name",
                          "label": "Cluster > Node"
                        },
                        {
                          "columnId": "Id"
                        },
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "HealthStatus",
                          "label": "Node Health"
                        },
                        {
                          "columnId": "NodeState",
                          "label": "Node state"
                        },
                        {
                          "columnId": "StatusInformation"
                        },
                        {
                          "columnId": "Uptime"
                        },
                        {
                          "columnId": "TotalProcessorUsed",
                          "label": "CPU usage"
                        },
                        {
                          "columnId": "TotalProcessorAvailable"
                        },
                        {
                          "columnId": "UsedPhysicalMemoryInGb"
                        },
                        {
                          "columnId": "AvailableMemoryInGb"
                        },
                        {
                          "columnId": "TotalMemoryInGb",
                          "label": "Available memory"
                        },
                        {
                          "columnId": "NetworkUsageTrend",
                          "label": "Network usage (B/s)"
                        },
                        {
                          "columnId": "TotalVms",
                          "label": "Virtual machines"
                        },
                        {
                          "columnId": "TotalVmsRunning",
                          "label": "VM state"
                        },
                        {
                          "columnId": "TotalVmsStopped"
                        },
                        {
                          "columnId": "TotalVmsFailed"
                        },
                        {
                          "columnId": "TotalVmsOther"
                        },
                        {
                          "columnId": "TotalNodes"
                        },
                        {
                          "columnId": "UpNodes"
                        }
                      ]
                    }
                  },
                  "name": "Clusters Grid View"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "overview"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "overview group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "### We are working on the alerts, stay tuned"
                  },
                  "name": "Alerts Description"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "alerts"
            },
            "name": "Alerts Group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Volumes in the selected clusters",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| mv-expand volumes_information\r\n| project ClusterName, Status = toint(volumes_information.m_StatusCategory)\r\n| extend VolumeHealthy = iif(Status == 0, 1, 0)\r\n| extend VolumeWarning = iif(Status == 1, 1, 0)\r\n| extend VolumeCritical = iif(Status == 2, 1, 0)\r\n| extend VolumeUnknown = iif(Status == 255, 1, 0)\r\n| summarize Total = count(), Healthy = sum(VolumeHealthy), Warning = sum(VolumeWarning), Critical = sum(VolumeCritical), Other = sum(VolumeUnknown)\r\n| evaluate narrow()\r\n| extend Column = iff(Column == \"Total\", \"Total volumes\", Column)\r\n| project Column, tolong(Value)",
                          "size": 3,
                          "showAnalytics": true,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "timeContextFromParameter": "timeRange",
                          "showRefreshButton": true,
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "Column",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "none"
                              }
                            },
                            "rightContent": {
                              "columnMatch": "Column",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Healthy",
                                    "representation": "success",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Critical",
                                    "representation": "critical",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Warning",
                                    "representation": "2",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Other",
                                    "representation": "Unknown",
                                    "text": ""
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "Blank",
                                    "text": ""
                                  }
                                ]
                              }
                            },
                            "showBorder": false,
                            "size": "auto"
                          }
                        },
                        "name": "Volume Tile"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| extend number_of_volumes = array_length(volumes_information)\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| mv-expand volumes_information\r\n| extend Volume = tostring(volumes_information.m_Label)\r\n| extend Status = toint(volumes_information.m_StatusCategory)\r\n| extend TotalSize = todouble(volumes_information.m_Size)\r\n| extend UsedSizeInPercentage = round(todouble(volumes_information.m_SizeUsed)/todouble(TotalSize)*100, 2)\r\n| extend Iops = iif(todouble(volumes_information.m_TotalIops) < 0, todouble(0), todouble(volumes_information.m_TotalIops))\r\n| extend Throughput = iif(todouble(volumes_information.m_TotalThroughput) < 0, todouble(0), todouble(volumes_information.m_TotalThroughput))\r\n| extend AverageLatency = iif(todouble(volumes_information.m_AverageLatency) < 0, todouble(0), todouble(volumes_information.m_AverageLatency))\r\n| extend Name = tostring(volumes_information.m_Label)\r\n| extend ParentId = ClusterArmId, Id = strcat(ClusterArmId, \"/\", Name)\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend Volume = tostring(volumes_information.m_Label)\r\n| extend TotalIops = iif(todouble(volumes_information.m_TotalIops) < 0, todouble(0), todouble(volumes_information.m_TotalIops))\r\n| make-series TotalIopsTrend = sum(TotalIops) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId, Volume\r\n) on ClusterArmId, Volume\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend Volume = tostring(volumes_information.m_Label)\r\n| extend TotalThroughput = iif(todouble(volumes_information.m_TotalThroughput) < 0, todouble(0), todouble(volumes_information.m_TotalThroughput))\r\n| make-series TotalThroughputTrend = sum(TotalThroughput) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId, Volume\r\n) on ClusterArmId, Volume\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend Volume = tostring(volumes_information.m_Label)\r\n| extend AverageLatency = iif(todouble(volumes_information.m_AverageLatency) < 0, todouble(0), todouble(volumes_information.m_AverageLatency))\r\n| make-series AverageLatencyTrend = avg(AverageLatency) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId, Volume\r\n) on ClusterArmId, Volume\r\n| order by tolower(Volume) asc\r\n| union (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| mv-expand volumes_information\r\n| extend Iops = iif(todouble(volumes_information.m_TotalIops) < 0, todouble(0), todouble(volumes_information.m_TotalIops))\r\n| extend Throughput = iif(todouble(volumes_information.m_TotalThroughput) < 0, todouble(0), todouble(volumes_information.m_TotalThroughput))\r\n| extend AverageLatency = iif(todouble(volumes_information.m_AverageLatency) < 0, todouble(0), todouble(volumes_information.m_AverageLatency))\r\n| summarize Status = max(toint(volumes_information.m_StatusCategory)), TotalUsed = sum(todouble(volumes_information.m_SizeUsed)), TotalSize = sum(todouble(volumes_information.m_Size)), Iops = sum(Iops), Throughput = sum(Throughput), AverageLatency = max(AverageLatency), ClusterName = any(ClusterName), TimeGenerated = max(TimeGenerated) by ClusterArmId\r\n| extend ParentId = '', Name = ClusterArmId, Id = ClusterArmId, UsedSizeInPercentage = round(TotalUsed/TotalSize*100, 2)\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend TotalIops = iif(todouble(volumes_information.m_TotalIops) < 0, todouble(0), todouble(volumes_information.m_TotalIops))\r\n| make-series TotalIopsTrend = sum(TotalIops) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId\r\n) on ClusterArmId\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend TotalThroughput = iif(todouble(volumes_information.m_TotalThroughput) < 0, todouble(0), todouble(volumes_information.m_TotalThroughput))\r\n| make-series TotalThroughputTrend = sum(TotalThroughput) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId\r\n) on ClusterArmId\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend AverageLatency = iif(todouble(volumes_information.m_AverageLatency) < 0, todouble(0), todouble(volumes_information.m_AverageLatency))\r\n| make-series AverageLatencyTrend = avg(AverageLatency) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId\r\n) on ClusterArmId\r\n| order by tolower(ClusterName) asc)\r\n| project ParentId, Id, Name, Volume, LastUpdated = TimeGenerated, Status, volumes_information.m_Status[0], TotalSize, UsedSizeInPercentage, Iops, TotalIopsTrend, Throughput, TotalThroughputTrend, AverageLatency, AverageLatencyTrend",
                          "size": 3,
                          "showAnalytics": true,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "timeContextFromParameter": "timeRange",
                          "showRefreshButton": true,
                          "showExportToExcel": true,
                          "exportToExcelOptions": "all",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "ParentId",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Id",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Name",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkTarget": "Resource",
                                  "linkIsContextBlade": false,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "Volume",
                                "formatter": 5,
                                "formatOptions": {
                                  "aggregation": "Count"
                                }
                              },
                              {
                                "columnMatch": "LastUpdated",
                                "formatter": 6,
                                "dateFormat": {
                                  "showUtcTime": null,
                                  "formatName": "shortDateTimePattern"
                                }
                              },
                              {
                                "columnMatch": "Status",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "0",
                                      "representation": "success",
                                      "text": "Healthy"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "2",
                                      "text": "Warning"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "2",
                                      "representation": "critical",
                                      "text": "Critical"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "unknown",
                                      "text": "Other"
                                    }
                                  ],
                                  "aggregation": "Max"
                                }
                              },
                              {
                                "columnMatch": "volumes_information_m_Status_0",
                                "formatter": 5,
                                "formatOptions": {
                                  "aggregation": "Max"
                                }
                              },
                              {
                                "columnMatch": "TotalSize",
                                "formatter": 0,
                                "numberFormat": {
                                  "unit": 2,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "UsedSizeInPercentage",
                                "formatter": 4,
                                "formatOptions": {
                                  "min": 0,
                                  "max": 100,
                                  "palette": "greenRed",
                                  "aggregation": "Max",
                                  "compositeBarSettings": {
                                    "labelText": "",
                                    "columnSettings": [
                                      {
                                        "columnName": "size_usage",
                                        "color": "blue"
                                      },
                                      {
                                        "columnName": "size_available_percentage",
                                        "color": "gray"
                                      }
                                    ]
                                  },
                                  "customColumnWidthSetting": "163px"
                                },
                                "numberFormat": {
                                  "unit": 1,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "Iops",
                                "formatter": 0,
                                "formatOptions": {
                                  "aggregation": "Sum"
                                },
                                "numberFormat": {
                                  "unit": 31,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "TotalIopsTrend",
                                "formatter": 9,
                                "formatOptions": {
                                  "min": 0,
                                  "palette": "blue",
                                  "aggregation": "Sum"
                                }
                              },
                              {
                                "columnMatch": "Throughput",
                                "formatter": 0,
                                "formatOptions": {
                                  "aggregation": "Sum"
                                },
                                "numberFormat": {
                                  "unit": 11,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "TotalThroughputTrend",
                                "formatter": 9,
                                "formatOptions": {
                                  "min": 0,
                                  "palette": "blue",
                                  "aggregation": "Sum",
                                  "customColumnWidthSetting": "239px"
                                }
                              },
                              {
                                "columnMatch": "AverageLatency",
                                "formatter": 0,
                                "formatOptions": {
                                  "aggregation": "Max"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "AverageLatencyTrend",
                                "formatter": 9,
                                "formatOptions": {
                                  "min": 0,
                                  "palette": "blue",
                                  "aggregation": "Max",
                                  "customColumnWidthSetting": "241px"
                                }
                              },
                              {
                                "columnMatch": "size_available_percentage",
                                "formatter": 5,
                                "formatOptions": {
                                  "aggregation": "Max"
                                },
                                "numberFormat": {
                                  "unit": 1,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "ClusterArmId",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "ClusterName",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Volume1",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "TimeGenerated",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Volume2",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "TimeGenerated1",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Volume3",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "TimeGenerated2",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "volumes_information_m_Label",
                                "formatter": 0,
                                "formatOptions": {
                                  "aggregation": "Count"
                                }
                              }
                            ],
                            "filter": true,
                            "hierarchySettings": {
                              "idColumn": "Id",
                              "parentColumn": "ParentId",
                              "treeType": 0,
                              "expanderColumn": "Name",
                              "expandTopLevel": false
                            },
                            "labelSettings": [
                              {
                                "columnId": "ParentId"
                              },
                              {
                                "columnId": "Id"
                              },
                              {
                                "columnId": "Name",
                                "label": "Cluster > Volume"
                              },
                              {
                                "columnId": "Volume"
                              },
                              {
                                "columnId": "LastUpdated",
                                "label": "Last updated"
                              },
                              {
                                "columnId": "Status",
                                "label": "Volume Health"
                              },
                              {
                                "columnId": "volumes_information_m_Status_0",
                                "label": "State"
                              },
                              {
                                "columnId": "TotalSize",
                                "label": "Size"
                              },
                              {
                                "columnId": "UsedSizeInPercentage",
                                "label": "Usage"
                              },
                              {
                                "columnId": "Iops",
                                "label": "IOPS"
                              },
                              {
                                "columnId": "TotalIopsTrend",
                                "label": "Trend",
                                "comment": ""
                              },
                              {
                                "columnId": "Throughput"
                              },
                              {
                                "columnId": "TotalThroughputTrend",
                                "label": "Trend (B/s)",
                                "comment": ""
                              },
                              {
                                "columnId": "AverageLatency",
                                "label": "Average latency",
                                "comment": ""
                              },
                              {
                                "columnId": "AverageLatencyTrend",
                                "label": "Trend (s)",
                                "comment": ""
                              }
                            ]
                          }
                        },
                        "name": "Volume Grid View"
                      }
                    ]
                  },
                  "name": "Volume Group"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Drives in the selected clusters",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3001\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend description = parse_json(RenderedDescription)\r\n| extend DrivesHealthy = toint(description.m_totalDrivesHealthy)\r\n| extend DrivesUnhealthy = toint(description.m_totalDrivesUnhealthy)\r\n| extend DrivesWarning = toint(description.m_totalDrivesWarning)\r\n| extend DrivesUnknown = toint(description.m_totalDrivesUnknown)\r\n| extend DrivesTotal = toint(DrivesHealthy) + toint(DrivesUnhealthy) + toint(DrivesWarning) + toint(DrivesUnknown)\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| project ClusterName, ClusterArmId, DrivesHealthy, DrivesUnhealthy, DrivesWarning, DrivesUnknown, DrivesTotal\r\n| summarize Total = sum(DrivesTotal), Healthy = sum(DrivesHealthy), Warning = sum(DrivesWarning), Critical = sum(DrivesUnhealthy), Other = sum(DrivesUnknown)\r\n| evaluate narrow()\r\n| extend Column = iff(Column == \"Total\", \"Total drives\", Column)\r\n| project Column, tolong(Value)",
                          "size": 3,
                          "showAnalytics": true,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "timeContextFromParameter": "timeRange",
                          "showRefreshButton": true,
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "Column",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "none"
                              }
                            },
                            "rightContent": {
                              "columnMatch": "Column",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Healthy",
                                    "representation": "success",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Critical",
                                    "representation": "4",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Warning",
                                    "representation": "2",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Other",
                                    "representation": "Unknown",
                                    "text": ""
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "Blank",
                                    "text": ""
                                  }
                                ]
                              }
                            },
                            "showBorder": false,
                            "size": "auto"
                          }
                        },
                        "name": "Drive Tile"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3001\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend Description = parse_json(RenderedDescription)\r\n| extend DrivesHealthy = toint(Description.m_totalDrivesHealthy)\r\n| extend DrivesUnhealthy = toint(Description.m_totalDrivesUnhealthy)\r\n| extend DrivesWarning = toint(Description.m_totalDrivesWarning)\r\n| extend DrivesUnknown = toint(Description.m_totalDrivesUnknown)\r\n| extend DrivesTotal = DrivesHealthy + DrivesUnhealthy + DrivesWarning + DrivesUnknown\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| order by tolower(ClusterName) asc\r\n| project ClusterArmId, LastUpdated = TimeGenerated, DrivesHealthy, DrivesWarning, DrivesUnhealthy, DrivesUnknown, DrivesTotal, Healthy = strcat(tostring(DrivesHealthy),\"/\",tostring(DrivesTotal)), Warning = strcat(tostring(DrivesWarning),\"/\",tostring(DrivesTotal)), Critical = strcat(tostring(DrivesUnhealthy),\"/\",tostring(DrivesTotal)), Unknown = strcat(tostring(DrivesUnknown),\"/\",tostring(DrivesTotal))\r\n\r\n",
                          "size": 3,
                          "showAnalytics": true,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "timeContextFromParameter": "timeRange",
                          "showRefreshButton": true,
                          "showExportToExcel": true,
                          "exportToExcelOptions": "all",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "ClusterArmId",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkTarget": "Resource",
                                  "linkIsContextBlade": false,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "LastUpdated",
                                "formatter": 6,
                                "numberFormat": {
                                  "unit": 0,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false
                                  }
                                },
                                "dateFormat": {
                                  "showUtcTime": null,
                                  "formatName": "shortDateTimePattern"
                                }
                              },
                              {
                                "columnMatch": "DrivesHealthy",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "DrivesWarning",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "DrivesUnhealthy",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "DrivesUnknown",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "DrivesTotal",
                                "formatter": 22,
                                "formatOptions": {
                                  "compositeBarSettings": {
                                    "labelText": "[\"DrivesHealthy\"] of [\"DrivesTotal\"] healthy",
                                    "columnSettings": [
                                      {
                                        "columnName": "DrivesHealthy",
                                        "color": "green"
                                      },
                                      {
                                        "columnName": "DrivesUnhealthy",
                                        "color": "redBright"
                                      },
                                      {
                                        "columnName": "DrivesWarning",
                                        "color": "yellow"
                                      },
                                      {
                                        "columnName": "DrivesUnknown",
                                        "color": "gray"
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "columnMatch": "Unknown",
                                "formatter": 5
                              }
                            ],
                            "filter": true,
                            "labelSettings": [
                              {
                                "columnId": "ClusterArmId",
                                "label": "Cluster"
                              },
                              {
                                "columnId": "LastUpdated",
                                "label": "Last updated"
                              },
                              {
                                "columnId": "DrivesHealthy"
                              },
                              {
                                "columnId": "DrivesWarning"
                              },
                              {
                                "columnId": "DrivesUnhealthy"
                              },
                              {
                                "columnId": "DrivesUnknown"
                              },
                              {
                                "columnId": "DrivesTotal",
                                "label": "Total drives"
                              },
                              {
                                "columnId": "Healthy"
                              },
                              {
                                "columnId": "Warning"
                              },
                              {
                                "columnId": "Unknown"
                              }
                            ]
                          }
                        },
                        "name": "Drive Grid View"
                      }
                    ]
                  },
                  "name": "Drive Group"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "storage"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "storage group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3004\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend description = parse_json(RenderedDescription)\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend CpuUsage = todouble(description.m_cpuUsage)\r\n| make-series CpuUsageTrend = max(CpuUsage) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterName\r\n| order by ClusterName asc\r\n",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "CPU Usage Trend",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "linechart",
                    "graphSettings": {
                      "type": 0
                    },
                    "chartSettings": {
                      "yAxis": [
                        "CpuUsageTrend"
                      ],
                      "showLegend": true,
                      "showDataPoints": true,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          },
                          "missingSparkDataOption": "Average"
                        },
                        "max": 100
                      }
                    }
                  },
                  "name": "CPU Usage Chart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3004\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend description = parse_json(RenderedDescription)\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend AvgVolLatency = todouble(description.m_averageVolumeLatency)\r\n| make-series VolLatencyTrend = max(AvgVolLatency) default=0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterName\r\n| order by ClusterName asc\r\n",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "Average Volume Latency Trend",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "linechart",
                    "chartSettings": {
                      "yAxis": [
                        "VolLatencyTrend"
                      ],
                      "showLegend": true,
                      "showDataPoints": true,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 24,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          },
                          "missingSparkDataOption": "Average"
                        }
                      }
                    }
                  },
                  "name": "Average Volume Latency Chart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3004\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend description = parse_json(RenderedDescription)\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend TotalVolIops = todouble(description.m_totalVolumeIops)\r\n| make-series VolIopsTrend = max(TotalVolIops) default=0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterName\r\n| order by ClusterName asc\r\n",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "Volume IOPS Trend",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "linechart",
                    "chartSettings": {
                      "yAxis": [
                        "VolIopsTrend"
                      ],
                      "showLegend": true,
                      "showDataPoints": true,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 31,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          },
                          "missingSparkDataOption": "Average"
                        }
                      }
                    }
                  },
                  "name": "Volume IOPS Chart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3004\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend Description = parse_json(RenderedDescription)\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend ClusterArmId = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ArmId\"])\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend TotalVolThroughput =  todouble(Description.m_totalVolumeThroughput)\r\n| make-series VolThroughputTrend = max(TotalVolThroughput) default=0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterName\r\n| order by ClusterName asc",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "Volume Throughput Trend",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "linechart",
                    "chartSettings": {
                      "yAxis": [
                        "VolThroughputTrend"
                      ],
                      "showLegend": true,
                      "showDataPoints": true,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 11,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          }
                        }
                      }
                    }
                  },
                  "name": "Volume Throughput Chart"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "clusterPerformance"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "cluster performance"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<p> This view provides health, performance and usage insights about registered Azure Stack HCI, version 21H2 clusters that are connected to Azure and are enrolled in monitoring. This feature is available in preview. You will be billed based on the amount of data ingested into Log Analytics and your data retention settings. [Learn more about monitoring multiple clusters with Azure Stack HCI Insights ](https://aka.ms/hci-insights-docs)"
                  },
                  "name": "Getting Started Description"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "{Message} Monitored clusters\r\n"
                  },
                  "name": "Monitored Clusters"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| where id !in~ (dynamic([{clusters}]))\r\n| extend Status = iff(properties.status == 'NotYetRegistered', 0, iff(properties.status == 'Disconnected', 1, iff(properties.status == 'NotConnectedRecently', 2, iff(properties.status == 'ConnectedRecently', 3, -1))))\r\n| extend Nodes = parse_json(properties.reportedProperties.nodes)\r\n| mv-expand Nodes\r\n| extend OsVersion = tostring(Nodes.osVersion)\r\n| summarize arg_min(parse_version(OsVersion), OsVersion), RegistrationStatus = min(Status), ClusterName = any(name) by id\r\n| order by tolower(ClusterName) asc\r\n| project id, RegistrationStatus, OsVersion",
                    "size": 2,
                    "showAnalytics": true,
                    "title": "Unmonitored clusters",
                    "noDataMessage": "No unmonitored cluster associated with selected subscriptions.",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "id",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "RegistrationStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "4",
                                "text": "Not Registered"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "3",
                                "text": "Disconnected"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "warning",
                                "text": "Not Recently"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "success",
                                "text": "Connected"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "3",
                                "text": "Unknown"
                              }
                            ]
                          }
                        }
                      ],
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "id",
                          "label": "Cluster"
                        },
                        {
                          "columnId": "RegistrationStatus",
                          "label": "Azure connection status"
                        },
                        {
                          "columnId": "OsVersion",
                          "label": "OS version"
                        }
                      ]
                    },
                    "mapSettings": {
                      "locInfo": "AzureResource",
                      "locInfoColumn": "id"
                    }
                  },
                  "customWidth": "70",
                  "showPin": false,
                  "name": "Unmonitored"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "gettingStarted"
            },
            "name": "getting started group"
          },
          {
            "type": 1,
            "content": {
              "json": "## No clusters are selected.\r\nSelect one or more Azure Stack HCI clusters to monitor. If no HCI clusters appear, you may need to [enable HCI monitoring](https://aka.ms/enable-hci-monitoring)."
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedCluster",
                "comparison": "isEqualTo"
              },
              {
                "parameterName": "selectedTab",
                "comparison": "isNotEqualTo",
                "value": "gettingStarted"
              },
              {
                "parameterName": "selectedTab",
                "comparison": "isNotEqualTo",
                "value": "alerts"
              }
            ],
            "name": "No cluster text"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "subscription",
        "comparison": "isNotEqualTo"
      },
      "name": "Tabs Group"
    },
    {
      "type": 1,
      "content": {
        "json": "## No Subscriptions are selected.\r\nSelect one or more subscriptions to get started. If no subscriptions appear, we could not find any Azure Stack HCI cluster resources in your subscriptions and you may need to [update your default subscription filter](https://azure.microsoft.com/en-us/updates/updates-to-subscription-filtering/)."
      },
      "conditionalVisibility": {
        "parameterName": "subscription",
        "comparison": "isEqualTo"
      },
      "name": "No subscription text"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}