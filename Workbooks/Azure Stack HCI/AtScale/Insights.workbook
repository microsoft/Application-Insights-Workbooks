{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{subscription}"
        ],
        "parameters": [
          {
            "id": "2c3bd553-1307-4363-97c7-e2b1bc3d543e",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                }
              ]
            },
            "timeContext": {
              "durationMs": 14400000
            },
            "timeContextFromParameter": "timeRange"
          },
          {
            "id": "09a907b9-5b7b-42e2-93e1-e88ed2dbbff0",
            "version": "KqlParameterItem/1.0",
            "name": "subscription",
            "label": "Subscriptions",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| where type =~ 'microsoft.azurestackhci/clusters'\r\n| summarize by subscriptionId\r\n| union (Resources\r\n| where type =~ 'microsoft.azurestackhci/clusters'\r\n| summarize Count = count() by subscriptionId\r\n| top 1 by Count desc)\r\n| summarize Count = count() by subscriptionId\r\n| project value = subscriptionId, label = subscriptionId, selected = Count > 1",
            "crossComponentResources": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "10fd2df8-44a3-4c8f-ba3f-e4cfb94ae130",
            "version": "KqlParameterItem/1.0",
            "name": "ArcEnabledClusters",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "ExtensibilityResources \r\n| where type =~ 'microsoft.azurestackhci/clusters/arcSettings'\r\n| extend property = properties.aggregateState\r\n| where property == 'Connected' or property == 'PartiallyConnected'\r\n| extend clusters = extract(\"/[Ss]ubscriptions/([^/]+)/[Rr]esourceGroups/([^/]+)/[Pp]roviders/([^/]+)/[Cc]lusters/([^/]+)\", 0, id)\r\n| project clusters",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "a9a627fb-343a-4461-a7e5-a2609b603682",
            "version": "KqlParameterItem/1.0",
            "name": "AMAInstalledClusters",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "ExtensibilityResources \r\n| where type =~ 'microsoft.azurestackhci/clusters/arcSettings/extensions' \r\n| where  name == \"AzureMonitorWindowsAgent\"\r\n| extend clusters = extract(\"/[Ss]ubscriptions/([^/]+)/[Rr]esourceGroups/([^/]+)/[Pp]roviders/([^/]+)/[Cc]lusters/([^/]+)\", 0, id)\r\n| project clusters",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "0bd8be0a-5391-4e03-9b4b-5eb2643f9b73",
            "version": "KqlParameterItem/1.0",
            "name": "clusters",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\"\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId contains \"/Microsoft.AzureStackHCI/\"\r\n| where ClusterArmId in~ ({ArcEnabledClusters})\r\n| where ClusterArmId in~ ({AMAInstalledClusters})\r\n| where EventID in (\"3000\", \"3001\", \"3002\", \"3003\", \"3004\")\r\n| where TimeGenerated {timeRange:query}\r\n| distinct ClusterArmId\r\n| union (datatable (ClusterArmId:string)[\"*\"])",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 14400000
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions"
          },
          {
            "id": "194d34fb-ab23-4c89-b903-0c985acd3f60",
            "version": "KqlParameterItem/1.0",
            "name": "selectedRg",
            "label": "Resource groups",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| where id in~ (dynamic([{clusters}]))\r\n| extend rg = extract(\"/resourceGroups/([^/]+)\", 1, id)\r\n| distinct rg\r\n| order by tolower(rg) asc\r\n| project rg",
            "crossComponentResources": [
              "{subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 14400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "1cbeffb7-08e3-4e19-95b0-9639e9c8cd71",
            "version": "KqlParameterItem/1.0",
            "name": "selectedCluster",
            "label": "HCI clusters",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| where id in~ (dynamic([{clusters}]))\r\n| extend rg = extract(\"/resourceGroups/([^/]+)\", 1, id)\r\n| where rg in ({selectedRg})\r\n| order by tolower(name) asc\r\n| extend Rank = row_number()\r\n| project id, selected = Rank <= 10",
            "crossComponentResources": [
              "{subscription}"
            ],
            "typeSettings": {
              "limitSelectTo": 100,
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 14400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "0fd64f15-3e8b-4f65-b64b-759620b7eb3f",
            "version": "KqlParameterItem/1.0",
            "name": "Message",
            "type": 1,
            "query": "where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| summarize Total = count(), RegisteredClusters = countif(id in~ (dynamic([{clusters}])))\r\n| project Message = strcat(RegisteredClusters, ' monitored; ', Total - RegisteredClusters, ' unmonitored')",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "837cf92d-3c98-44df-9657-3545ee0c9301",
            "version": "KqlParameterItem/1.0",
            "name": "selectedTab",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "clusters",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "not set",
                  "resultValType": "static",
                  "resultVal": "gettingStarted"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "overview"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange"
          },
          {
            "id": "19a22d82-e997-4437-8b3c-423097ecce96",
            "version": "KqlParameterItem/1.0",
            "name": "lastCorrelationId",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend ClusterArmId = tostring(description.ArmId)\r\n| where ClusterArmId in~ ({selectedCluster})\r\n| where tostring(description.IsLastMessage) =~ 'true'\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| summarize arg_max(TimeGenerated, CorrelationId) by ClusterArmId\r\n| project lastCorrelationId = CorrelationId",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions"
          },
          {
            "id": "f1caf3c3-6bb2-4ae3-a874-b058f1c5da53",
            "version": "KqlParameterItem/1.0",
            "name": "healthyClusters",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend ClusterArmId = tostring(description.ArmId)\r\n| where description.CorrelationId in~ ({lastCorrelationId})\r\n| distinct ClusterArmId\r\n| union (datatable (ClusterArmId:string)[\"*\"])",
            "crossComponentResources": [
              "{subscription}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "name": "HCI Parameters",
      "styleSettings": {
        "margin": "10",
        "padding": "10"
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "99cd5df5-c4ca-465d-8aeb-0caf2ad03ff4",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Add to monitoring",
                  "subTarget": "gettingStarted",
                  "style": "link"
                },
                {
                  "id": "97fae118-0614-4397-99aa-45b2e4213754",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Cluster health",
                  "subTarget": "overview",
                  "preText": "Overview",
                  "style": "link"
                },
                {
                  "id": "15845ae5-0810-4099-8e00-56f1b8be0599",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Servers",
                  "subTarget": "server",
                  "style": "link"
                },
                {
                  "id": "5e6ba817-0355-406e-897f-e83d763f2d2a",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Virtual machines",
                  "subTarget": "virtualMachines",
                  "style": "link"
                },
                {
                  "id": "98d18adc-ac1d-4b2e-ba1f-de5734b33f77",
                  "cellValue": "selectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Storage",
                  "subTarget": "storage",
                  "style": "link"
                }
              ]
            },
            "name": "Tabs"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "### State of all the virtual machines in selected clusters\r\n<p>View the state of virtual machines running across monitored clusters—expand a cluster to see the state of VMs on individual servers. \r\n\r\n<p>**Other VMs** could be in one of the following states: Starting, Snapshotting, Saving, Stopping, Pausing, Resuming, Paused, Suspended, or Unknown.\r\n\r\n"
                  },
                  "name": "Virtual Machine Description"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3003\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| extend description = parse_json(RenderedDescription)\r\n| extend VmsUnknown = toint(description.m_totalVmsUnknown)\r\n| extend VmsRunning = toint(description.m_totalVmsRunning)\r\n| extend VmsStopped = toint(description.m_totalVmsStopped)\r\n| extend VmsFailed = toint(description.m_totalVmsFailed)\r\n| extend VmsPaused = toint(description.m_totalVmsPaused)\r\n| extend VmsSuspended = toint(description.m_totalVmsSuspended)\r\n| extend VmsStarting = toint(description.m_totalVmsStarting)\r\n| extend VmsSnapshoting = toint(description.m_totalVmsSnapshotting)\r\n| extend VmsSaving = toint(description.m_totalVmsSaving)\r\n| extend VmsStopping = toint(description.m_totalVmsStopping)\r\n| extend VmsPausing = toint(description.m_totalVmsPausing)\r\n| extend VmsResuming = toint(description.m_totalVmsResuming)\r\n| project VmsRunning, VmsStopped, VmsFailed, VmsOther = VmsUnknown + VmsStarting + VmsSnapshoting + VmsSaving + VmsStopping + VmsPausing + VmsResuming + VmsPaused + VmsSuspended\r\n| evaluate narrow()\r\n| project Column, tolong(Value)",
                    "size": 3,
                    "showAnalytics": true,
                    "title": "VM states",
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "piechart",
                    "chartSettings": {
                      "seriesLabelSettings": [
                        {
                          "seriesName": "VmsStopped",
                          "label": "Stopped VMs",
                          "color": "orange"
                        },
                        {
                          "seriesName": "VmsRunning",
                          "label": "Running VMs",
                          "color": "green"
                        },
                        {
                          "seriesName": "VmsFailed",
                          "label": "Failed VMs",
                          "color": "red"
                        },
                        {
                          "seriesName": "VmsOther",
                          "label": "Other VMs",
                          "color": "gray"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedTab",
                    "comparison": "isEqualTo",
                    "value": "virtualMachines"
                  },
                  "showPin": false,
                  "name": "Virtual Machine Chart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| mv-expand servers_information\r\n| extend VmsFailed = toint(servers_information.m_vm.m_totalVmsFailed)\r\n| extend VmsRunning = toint(servers_information.m_vm.m_totalVmsRunning)\r\n| extend VmsStopped = toint(servers_information.m_vm.m_totalVmsStopped)\r\n| extend VmsOther = toint(toint(servers_information.m_vm.m_totalVmsPaused) + toint(servers_information.m_vm.m_totalVmsPausing) + toint(servers_information.m_vm.m_totalVmsResuming) + toint(servers_information.m_vm.m_totalVmsSaving) + toint(servers_information.m_vm.m_totalVmsSnapshotting) + toint(servers_information.m_vm.m_totalVmsStarting) + toint(servers_information.m_vm.m_totalVmsStopping) + toint(servers_information.m_vm.m_totalVmsSuspended) + toint(servers_information.m_vm.m_totalVmsUnknown))\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend ParentId = ClusterArmId, Id = Nodename, MergeId = strcat(ClusterArmId, \"/\", Nodename)\r\n| order by tolower(Nodename) asc\r\n| union (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Other = toint(servers_information.m_vm.m_totalVmsPaused) + toint(servers_information.m_vm.m_totalVmsPausing) + toint(servers_information.m_vm.m_totalVmsResuming) + toint(servers_information.m_vm.m_totalVmsSaving) + toint(servers_information.m_vm.m_totalVmsSnapshotting) + toint(servers_information.m_vm.m_totalVmsStarting) + toint(servers_information.m_vm.m_totalVmsStopping) + toint(servers_information.m_vm.m_totalVmsSuspended) + toint(servers_information.m_vm.m_totalVmsUnknown)\r\n| summarize TimeGenerated = max(TimeGenerated), VmsRunning = toint(sum(toint(servers_information.m_vm.m_totalVmsRunning))), VmsStopped = toint(sum(toint(servers_information.m_vm.m_totalVmsStopped))), VmsFailed = toint(sum(toint(servers_information.m_vm.m_totalVmsFailed))), VmsOther = toint(sum(Other)), ClusterName = any(ClusterName) by ClusterArmId\r\n| extend ParentId = '', Id = ClusterArmId, MergeId = ClusterArmId\r\n| order by tolower(ClusterName) asc)\r\n| project ParentId, Id, MergeId, LastUpdated = TimeGenerated, VmsTotal = VmsFailed + VmsRunning + VmsStopped + VmsOther, VmsRunning, VmsStopped, VmsFailed, VmsOther",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ParentId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Id",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "VmsTotal",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"VmsRunning\"] of [\"VmsTotal\"] running",
                              "columnSettings": [
                                {
                                  "columnName": "VmsRunning",
                                  "color": "green"
                                },
                                {
                                  "columnName": "VmsFailed",
                                  "color": "red"
                                },
                                {
                                  "columnName": "VmsStopped",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "VmsOther",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Hostname",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 5
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "ParentId",
                        "treeType": 0,
                        "expanderColumn": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "VmsTotal",
                          "label": "Total VMs"
                        },
                        {
                          "columnId": "VmsRunning",
                          "label": "Running"
                        },
                        {
                          "columnId": "VmsStopped",
                          "label": "Stopped"
                        },
                        {
                          "columnId": "VmsFailed",
                          "label": "Failed"
                        },
                        {
                          "columnId": "VmsOther",
                          "label": "Other"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hide",
                    "comparison": "isEqualTo",
                    "value": "false"
                  },
                  "showPin": false,
                  "name": "Virtual Machines Grid View"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "ExtensibilityResources\r\n| where type =~ 'microsoft.azurestackhci/clusters/arcsettings'\r\n| where properties.aggregateState =~ 'connected'\r\n| extend ClusterArmId = extract(\"(.+)/[aA]rcSettings/default$\", 1, id)\r\n| extend node = properties.perNodeDetails\r\n| mv-expand node\r\n| where node.state =~ 'connected'\r\n| extend MergeId = strcat(ClusterArmId, \"/\", node.name)\r\n| project MergeId, ArcId = node.arcInstance\r\n",
                    "size": 4,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{subscription}"
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "hide",
                    "comparison": "isEqualTo",
                    "value": "false"
                  },
                  "name": "Arc View - VM"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\",\"mergeType\":\"leftouter\",\"leftTable\":\"Virtual Machines Grid View\",\"rightTable\":\"Arc View - VM\",\"leftColumn\":\"MergeId\",\"rightColumn\":\"MergeId\"}],\"projectRename\":[{\"originalName\":\"[Virtual Machines Grid View].ParentId\",\"mergedName\":\"ParentId\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Virtual Machines Grid View].Id\",\"mergedName\":\"Id\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Virtual Machines Grid View].MergeId\",\"mergedName\":\"MergeId\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Virtual Machines Grid View].LastUpdated\",\"mergedName\":\"LastUpdated\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Virtual Machines Grid View].VmsTotal\",\"mergedName\":\"VmsTotal\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Virtual Machines Grid View].VmsRunning\",\"mergedName\":\"VmsRunning\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Virtual Machines Grid View].VmsStopped\",\"mergedName\":\"VmsStopped\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Virtual Machines Grid View].VmsFailed\",\"mergedName\":\"VmsFailed\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Virtual Machines Grid View].VmsOther\",\"mergedName\":\"VmsOther\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Arc View - VM].MergeId\",\"mergedName\":\"MergeId\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Arc View - VM].ArcId\",\"mergedName\":\"ArcId\",\"fromId\":\"aac1f4c7-1fad-4970-a612-370caca2f1dc\"},{\"originalName\":\"[Added column]\",\"mergedName\":\"Name\",\"fromId\":null,\"isNewItem\":true,\"newItemData\":[{\"criteriaContext\":{\"leftOperand\":\"ArcId\",\"operator\":\"isNotNull\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"ArcId\"}},{\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"Id\"}}]}]}",
                    "size": 3,
                    "showAnalytics": true,
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 7,
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ParentId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Id",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "VmsTotal",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"VmsRunning\"] of [\"VmsTotal\"] running",
                              "columnSettings": [
                                {
                                  "columnName": "VmsRunning",
                                  "color": "green"
                                },
                                {
                                  "columnName": "VmsFailed",
                                  "color": "red"
                                },
                                {
                                  "columnName": "VmsStopped",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "VmsOther",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Hostname",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 5
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "ParentId",
                        "treeType": 0,
                        "expanderColumn": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "VmsTotal",
                          "label": "Total VMs"
                        },
                        {
                          "columnId": "VmsRunning",
                          "label": "Running"
                        },
                        {
                          "columnId": "VmsStopped",
                          "label": "Stopped"
                        },
                        {
                          "columnId": "VmsFailed",
                          "label": "Failed"
                        },
                        {
                          "columnId": "VmsOther",
                          "label": "Other"
                        },
                        {
                          "columnId": "Name",
                          "label": "Cluster > Server"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedTab",
                    "comparison": "isEqualTo",
                    "value": "virtualMachines"
                  },
                  "showPin": false,
                  "name": "Merge View - VM"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "virtualMachines"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "Virtual Machines Group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<p>View the health of servers within a cluster—expand a cluster to see individual servers. If your cluster is missing or showing the status **Other**, see the **Cluster health** tab for instructions.\r\n"
                  },
                  "name": "Overview Description"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId in~ ({lastCorrelationId})\r\n| where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Server'\r\n| extend Severity = toint(description.Fault.Severity)\r\n| extend Severity = case(Severity == 2, 3, Severity == 1, 2, Severity == 255, 1, 0)\r\n| extend Nodename = tostring(description.Fault.ObjectId)\r\n| extend NodeId = tolower(Nodename)\r\n| summarize Status = max(Severity) by NodeId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| summarize arg_max(TimeGenerated,*), ClusterName = any(ClusterName) by ClusterArmId\r\n| mv-expand servers_information\r\n| project ClusterName, ClusterArmId, Nodename = tostring(servers_information.m_name)\r\n| extend NodeId = tolower(Nodename)\r\n| join kind=leftouter Health on NodeId\r\n| extend Status = iff(isempty(Status), iff(ClusterArmId in~ ({healthyClusters}), 0, 1), Status)\r\n| extend ServerCritical = iif(Status == 3, 1, 0)\r\n| extend ServerWarning = iif(Status == 2, 1, 0)\r\n| extend ServerUnknown = iif(Status == 1, 1, 0)\r\n| summarize TotalServers = count(), Critical = sum(ServerCritical), Warning = sum(ServerWarning), Other = sum(ServerUnknown)\r\n| extend Healthy = TotalServers - (Critical + Warning + Other)\r\n| project TotalServers, Healthy, Warning, Critical, Other\r\n| evaluate narrow()\r\n| extend Column = iff(Column == \"TotalServers\", \"Total servers\", Column)\r\n| project Column, tolong(Value)",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Column",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "none"
                        }
                      },
                      "rightContent": {
                        "columnMatch": "Column",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Healthy",
                              "representation": "success",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Critical",
                              "representation": "4",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Warning",
                              "representation": "2",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Other",
                              "representation": "unknown",
                              "text": ""
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "Blank",
                              "text": ""
                            }
                          ]
                        }
                      },
                      "showBorder": false,
                      "size": "auto"
                    }
                  },
                  "name": "Servers Summary"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId in~ ({lastCorrelationId})\r\n| where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Server'\r\n| extend Severity = toint(description.Fault.Severity)\r\n| extend Severity = case(Severity == 2, 3, Severity == 1, 2, Severity == 255, 1, 0)\r\n| extend NodeId = tolower(tostring(description.Fault.ObjectId))\r\n| summarize HealthStatus = max(Severity) by NodeId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| top 100 by TimeGenerated desc\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend NodeId = tolower(Nodename)\r\n| join kind=leftouter Health on NodeId\r\n| extend HealthStatus = iff(isempty(HealthStatus), iff(ClusterArmId in~ ({healthyClusters}), 0, 1), HealthStatus)\r\n| extend HealthText = case(HealthStatus == 3, \"Critical\", HealthStatus == 2, \"Warning\", HealthStatus == 1, \"Other\", \"Healthy\")\r\n| extend ParentId = ClusterArmId, Id = Nodename, MergeId = strcat(ClusterArmId, \"/\", Nodename)\r\n| extend TotalProcessorUsed = todouble(servers_information.m_totalProcessorsUsedPercentage)\r\n| extend TotalProcessorAvailable = todouble(100 - TotalProcessorUsed)\r\n| extend UsedMemory = todecimal(servers_information.m_usedPhysicalMemoryInBytes), TotalMemory = todecimal(servers_information.m_totalPhysicalMemoryInBytes)\r\n| extend AvailableMemory = TotalMemory - UsedMemory\r\n| extend MemoryUsage = round(UsedMemory/TotalMemory*100, 0)\r\n| extend NodeState = toint(servers_information.m_status[0]), StatusInformation = toint(servers_information.m_status[1]), Uptime = servers_information.m_uptimeInSeconds\r\n| order by tolower(Nodename) asc\r\n| union (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| mv-expand servers_information\r\n| extend Nodename = tostring(servers_information.m_name)\r\n| extend NodeId = tolower(Nodename)\r\n| join kind=leftouter Health on NodeId\r\n| extend HealthStatus = iff(isempty(HealthStatus), iff(ClusterArmId in~ ({healthyClusters}), 0, 1), HealthStatus)\r\n| summarize UsedMemory = sum(todecimal(servers_information.m_usedPhysicalMemoryInBytes)), TotalMemory = sum(todecimal(servers_information.m_totalPhysicalMemoryInBytes)), HealthStatus = max(HealthStatus), StatusInformation = max(toint(servers_information.m_status[1])), TotalCpu = sum(todecimal(servers_information.m_totalClockSpeedInMHz)), UsedCpu = sum(todecimal(servers_information.m_totalClockSpeedInMHz) * todecimal(servers_information.m_totalProcessorsUsedPercentage) / 100), ClusterName = any(ClusterName), TotalNodes = count(), UpNodes = countif(toint(servers_information.m_status[0]) == 0), TotalWarning = countif(HealthStatus == 2), TotalCritical = countif(HealthStatus == 3), TotalUnknown = countif(HealthStatus == 1), TimeGenerated = max(TimeGenerated) by ClusterArmId\r\n| extend ParentId = '', Id = ClusterArmId, MergeId = ClusterArmId, NodeState = toint(4)\r\n| extend TotalProcessorUsed = todouble(round(UsedCpu/TotalCpu*100, 2))\r\n| extend TotalProcessorAvailable = todouble(round(100 - TotalProcessorUsed, 2))\r\n| extend AvailableMemory = TotalMemory - UsedMemory\r\n| extend MemoryUsage = round(UsedMemory/TotalMemory*100, 0)\r\n| extend HealthText = \"\"\r\n| extend HealthText = iff(TotalCritical > 0, strcat(tostring(TotalCritical), \" \", \"Critical\"), HealthText)\r\n| extend HealthText = iff(TotalWarning > 0, strcat(HealthText, iff(HealthText == \"\", \"\", \", \"), tostring(TotalWarning), \" \", \"Warning\"), HealthText)\r\n| extend HealthText = iff(TotalUnknown > 0, strcat(HealthText, iff(HealthText == \"\", \"\", \", \"), tostring(TotalUnknown), \" \", \"Other\"), HealthText)\r\n| extend TotalHealthy = TotalNodes - (TotalCritical + TotalWarning + TotalUnknown)\r\n| extend HealthText = iff(TotalHealthy > 0, strcat(HealthText, iff(HealthText == \"\", \"\", \", \"), tostring(TotalHealthy), \" \", \"Healthy\"), HealthText)\r\n| order by tolower(ClusterName) asc)\r\n| project ParentId, Id, MergeId, LastUpdated = TimeGenerated, HealthStatus, HealthText, NodeState, StatusInformation, Uptime = servers_information.m_uptimeInSeconds, TotalProcessorUsed, TotalProcessorAvailable, MemoryUsage, UsedMemory, AvailableMemory, TotalNodes, UpNodes",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ParentId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "HealthStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "4",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "Unknown",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "[\"HealthText\"]"
                              }
                            ],
                            "aggregation": "Max"
                          }
                        },
                        {
                          "columnMatch": "HealthText",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NodeState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "up",
                                "text": "Up"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "down",
                                "text": "Down"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "In Maintenance"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "pending",
                                "text": "Joining"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "4",
                                "representation": "Blank",
                                "text": "[\"UpNodes\"] of [\"TotalNodes\"] up"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": ""
                              }
                            ],
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": []
                            }
                          }
                        },
                        {
                          "columnMatch": "StatusInformation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Uptime",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalProcessorUsed",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalProcessorUsed\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "TotalProcessorUsed",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "TotalProcessorAvailable",
                                  "color": "gray"
                                }
                              ]
                            }
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalProcessorAvailable",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MemoryUsage",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"MemoryUsage\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "UsedMemory",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "AvailableMemory",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "UsedMemory",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailableMemory",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "UpNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "NetworkUsageTrend",
                          "formatter": 9,
                          "formatOptions": {
                            "min": 0,
                            "palette": "blue",
                            "aggregation": "Sum"
                          }
                        },
                        {
                          "columnMatch": "TotalVmsRunning",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalVmsRunning\"] of [\"TotalVms\"] running",
                              "columnSettings": [
                                {
                                  "columnName": "TotalVmsRunning",
                                  "color": "green"
                                },
                                {
                                  "columnName": "TotalVmsStopped",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "TotalVmsOther",
                                  "color": "gray"
                                },
                                {
                                  "columnName": "TotalVmsFailed",
                                  "color": "red"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalVmsStopped",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalVmsFailed",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalVmsOther",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Version",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}"
                              },
                              {
                                "operator": "startsWith",
                                "thresholdValue": "Difference",
                                "representation": "2",
                                "text": "{0}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 0,
                          "formatOptions": {
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "Hostname",
                          "formatter": 5,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": true,
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "TimeGenerated",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NetworkUsage",
                          "formatter": 0,
                          "formatOptions": {
                            "aggregation": "Sum"
                          },
                          "numberFormat": {
                            "unit": 11,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 2
                            }
                          }
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "ParentId",
                        "treeType": 0,
                        "expanderColumn": "Id"
                      },
                      "labelSettings": [
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "HealthStatus",
                          "label": "Server health"
                        },
                        {
                          "columnId": "NodeState",
                          "label": "Server state"
                        },
                        {
                          "columnId": "TotalProcessorUsed",
                          "label": "CPU usage"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hide",
                    "comparison": "isEqualTo",
                    "value": "false"
                  },
                  "name": "Clusters Grid View"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "ExtensibilityResources\r\n| where type =~ 'microsoft.azurestackhci/clusters/arcsettings'\r\n| where properties.aggregateState =~ 'connected'\r\n| extend ClusterArmId = extract(\"(.+)/[aA]rcSettings/default$\", 1, id)\r\n| extend node = properties.perNodeDetails\r\n| mv-expand node\r\n| where node.state =~ 'connected'\r\n| extend MergeId = strcat(ClusterArmId, \"/\", node.name)\r\n| project MergeId, ArcId = node.arcInstance\r\n",
                    "size": 4,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{subscription}"
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "hide",
                    "comparison": "isEqualTo",
                    "value": "false"
                  },
                  "name": "Arc View"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\",\"mergeType\":\"leftouter\",\"leftTable\":\"Clusters Grid View\",\"rightTable\":\"Arc View\",\"leftColumn\":\"MergeId\",\"rightColumn\":\"MergeId\"}],\"projectRename\":[{\"originalName\":\"[Clusters Grid View].ParentId\",\"mergedName\":\"ParentId\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].Name\",\"mergedName\":\"Name\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].Id\",\"mergedName\":\"Id\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].MergeId\",\"mergedName\":\"MergeId\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].LastUpdated\",\"mergedName\":\"LastUpdated\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].HealthStatus\",\"mergedName\":\"HealthStatus\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].HealthText\",\"mergedName\":\"HealthText\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].NodeState\",\"mergedName\":\"NodeState\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].StatusInformation\",\"mergedName\":\"StatusInformation\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].Uptime\",\"mergedName\":\"Uptime\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].TotalProcessorUsed\",\"mergedName\":\"TotalProcessorUsed\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].TotalProcessorAvailable\",\"mergedName\":\"TotalProcessorAvailable\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].MemoryUsage\",\"mergedName\":\"MemoryUsage\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].UsedMemory\",\"mergedName\":\"UsedMemory\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].AvailableMemory\",\"mergedName\":\"AvailableMemory\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].TotalNodes\",\"mergedName\":\"TotalNodes\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Clusters Grid View].UpNodes\",\"mergedName\":\"UpNodes\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Arc View].ArcId\",\"mergedName\":\"ArcId\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Arc View].MergeId\",\"mergedName\":\"MergeId\",\"fromId\":\"646fcb28-d7e6-408e-9db6-35fdcc7590d3\"},{\"originalName\":\"[Added column]\",\"mergedName\":\"Name\",\"fromId\":null,\"isNewItem\":true,\"newItemData\":[{\"criteriaContext\":{\"leftOperand\":\"ArcId\",\"operator\":\"isNotNull\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"ArcId\"}},{\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"Id\"}}]}]}",
                    "size": 3,
                    "showAnalytics": true,
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 7,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ParentId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Id",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "LastUpdated",
                          "formatter": 6,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal"
                            }
                          },
                          "dateFormat": {
                            "showUtcTime": null,
                            "formatName": "shortDateTimePattern"
                          }
                        },
                        {
                          "columnMatch": "HealthStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "4",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "Unknown",
                                "text": "[\"HealthText\"]"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "[\"HealthText\"]"
                              }
                            ],
                            "aggregation": "Max"
                          }
                        },
                        {
                          "columnMatch": "HealthText",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NodeState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "up",
                                "text": "Up"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "down",
                                "text": "Down"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "In Maintenance"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "pending",
                                "text": "Joining"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "4",
                                "representation": "Blank",
                                "text": "[\"UpNodes\"] of [\"TotalNodes\"] up"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": ""
                              }
                            ],
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": []
                            }
                          }
                        },
                        {
                          "columnMatch": "StatusInformation",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Uptime",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 24,
                            "options": {
                              "style": "decimal",
                              "useGrouping": true,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalProcessorUsed",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalProcessorUsed\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "TotalProcessorUsed",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "TotalProcessorAvailable",
                                  "color": "gray"
                                }
                              ]
                            }
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalProcessorAvailable",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "MemoryUsage",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"MemoryUsage\"] %",
                              "columnSettings": [
                                {
                                  "columnName": "UsedMemory",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "AvailableMemory",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "UsedMemory",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "AvailableMemory",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "UpNodes",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "NetworkUsageTrend",
                          "formatter": 9,
                          "formatOptions": {
                            "min": 0,
                            "palette": "blue",
                            "aggregation": "Sum"
                          }
                        },
                        {
                          "columnMatch": "TotalVmsRunning",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalVmsRunning\"] of [\"TotalVms\"] running",
                              "columnSettings": [
                                {
                                  "columnName": "TotalVmsRunning",
                                  "color": "green"
                                },
                                {
                                  "columnName": "TotalVmsStopped",
                                  "color": "orange"
                                },
                                {
                                  "columnName": "TotalVmsOther",
                                  "color": "gray"
                                },
                                {
                                  "columnName": "TotalVmsFailed",
                                  "color": "red"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalVmsStopped",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalVmsFailed",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalVmsOther",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Version",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Blank",
                                "text": "{0}"
                              },
                              {
                                "operator": "startsWith",
                                "thresholdValue": "Difference",
                                "representation": "2",
                                "text": "{0}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "ClusterName",
                          "formatter": 0,
                          "formatOptions": {
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "Hostname",
                          "formatter": 5,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": true,
                            "aggregation": "Count"
                          }
                        },
                        {
                          "columnMatch": "TimeGenerated",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "NetworkUsage",
                          "formatter": 0,
                          "formatOptions": {
                            "aggregation": "Sum"
                          },
                          "numberFormat": {
                            "unit": 11,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 2
                            }
                          }
                        }
                      ],
                      "filter": true,
                      "hierarchySettings": {
                        "idColumn": "Id",
                        "parentColumn": "ParentId",
                        "treeType": 0,
                        "expanderColumn": "Name"
                      },
                      "labelSettings": [
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "HealthStatus",
                          "label": "Server health"
                        },
                        {
                          "columnId": "NodeState",
                          "label": "Server state"
                        },
                        {
                          "columnId": "TotalProcessorUsed",
                          "label": "CPU usage"
                        },
                        {
                          "columnId": "MemoryUsage",
                          "label": "Memory usage"
                        },
                        {
                          "columnId": "Name",
                          "label": "Cluster > Server"
                        }
                      ]
                    }
                  },
                  "showPin": false,
                  "name": "Merge View"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "server"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "server group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "View the health of volumes across monitored clusters—expand a cluster to see the state of individual volumes."
                  },
                  "name": "storage text"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Volumes in the selected clusters",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId in~ ({lastCorrelationId})\r\n| where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n| extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n| extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n| extend Severity = toint(description.Fault.Severity)\r\n| extend Severity = iff(Severity > 2, -1, Severity)\r\n| summarize Status = max(Severity) by VolumeId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| project ClusterName, Status\r\n| extend VolumeHealthy = iif(Status == 0, 1, 0)\r\n| extend VolumeWarning = iif(Status == 1, 1, 0)\r\n| extend VolumeCritical = iif(Status == 2, 1, 0)\r\n| extend VolumeUnknown = iif(Status == -1, 1, 0)\r\n| summarize Total = count(), Healthy = sum(VolumeHealthy), Warning = sum(VolumeWarning), Critical = sum(VolumeCritical), Other = sum(VolumeUnknown)\r\n| evaluate narrow()\r\n| extend Column = iff(Column == \"Total\", \"Total volumes\", Column)\r\n| project Column, tolong(Value)",
                          "size": 3,
                          "showAnalytics": true,
                          "timeContextFromParameter": "timeRange",
                          "showRefreshButton": true,
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "Column",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "none"
                              }
                            },
                            "rightContent": {
                              "columnMatch": "Column",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Healthy",
                                    "representation": "success",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Critical",
                                    "representation": "critical",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Warning",
                                    "representation": "2",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Other",
                                    "representation": "Unknown",
                                    "text": ""
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "Blank",
                                    "text": ""
                                  }
                                ]
                              }
                            },
                            "showBorder": false,
                            "size": "auto"
                          }
                        },
                        "name": "Volume Tile"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId in~ ({lastCorrelationId})\r\n| where tostring(description.Fault.ObjectType) == 'Microsoft.Health.EntityType.Volume'\r\n| extend ObjectId = tolower(tostring(description.Fault.ObjectId))\r\n| extend VolumeId = extract(\"volume{([^}]+)}\", 1, ObjectId)\r\n| extend Severity = toint(description.Fault.Severity)\r\n| extend Severity = iff(Severity > 2, -1, Severity)\r\n| summarize Status = max(Severity) by VolumeId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| extend number_of_volumes = array_length(volumes_information)\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| extend Volume = tostring(volumes_information.m_Label)\r\n| extend HealthText = case(Status == 1, \"Warning\", Status == 2, \"Critical\", Status == -1, \"Other\", \"Healthy\")\r\n| extend TotalSize = todouble(volumes_information.m_Size)\r\n| extend UsedSizeInPercentage = round(todouble(volumes_information.m_SizeUsed)/todouble(TotalSize)*100, 2)\r\n| extend Iops = iif(todouble(volumes_information.m_TotalIops) < 0, todouble(0), todouble(volumes_information.m_TotalIops))\r\n| extend Throughput = iif(todouble(volumes_information.m_TotalThroughput) < 0, todouble(0), todouble(volumes_information.m_TotalThroughput))\r\n| extend AverageLatency = iif(todouble(volumes_information.m_AverageLatency) < 0, todouble(0), todouble(volumes_information.m_AverageLatency))\r\n| extend Name = tostring(volumes_information.m_Label)\r\n| extend ParentId = ClusterArmId, Id = strcat(ClusterArmId, \"/\", Name)\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend Volume = tostring(volumes_information.m_Label)\r\n| extend TotalIops = iif(todouble(volumes_information.m_TotalIops) < 0, todouble(0), todouble(volumes_information.m_TotalIops))\r\n| make-series TotalIopsTrend = sum(TotalIops) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId, Volume\r\n) on ClusterArmId, Volume\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend Volume = tostring(volumes_information.m_Label)\r\n| extend TotalThroughput = iif(todouble(volumes_information.m_TotalThroughput) < 0, todouble(0), todouble(volumes_information.m_TotalThroughput))\r\n| make-series TotalThroughputTrend = sum(TotalThroughput) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId, Volume\r\n) on ClusterArmId, Volume\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend Volume = tostring(volumes_information.m_Label)\r\n| extend AverageLatency = iif(todouble(volumes_information.m_AverageLatency) < 0, todouble(0), todouble(volumes_information.m_AverageLatency))\r\n| make-series AverageLatencyTrend = avg(AverageLatency) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId, Volume\r\n) on ClusterArmId, Volume\r\n| order by tolower(Volume) asc\r\n| union (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| summarize arg_max(TimeGenerated,*) by ClusterArmId\r\n| mv-expand volumes_information\r\n| extend VolumeId = tostring(volumes_information.m_Id)\r\n| join kind=leftouter Health on VolumeId\r\n| extend Iops = iif(todouble(volumes_information.m_TotalIops) < 0, todouble(0), todouble(volumes_information.m_TotalIops))\r\n| extend Throughput = iif(todouble(volumes_information.m_TotalThroughput) < 0, todouble(0), todouble(volumes_information.m_TotalThroughput))\r\n| extend AverageLatency = iif(todouble(volumes_information.m_AverageLatency) < 0, todouble(0), todouble(volumes_information.m_AverageLatency))\r\n| summarize Status = max(Status), TotalDrives = count(), TotalWarning = countif(Status == 1), TotalCritical = countif(Status == 2), TotalUnknown = countif(Status == -1), TotalUsed = sum(todouble(volumes_information.m_SizeUsed)), TotalSize = sum(todouble(volumes_information.m_Size)), Iops = sum(Iops), Throughput = sum(Throughput), AverageLatency = max(AverageLatency), ClusterName = any(ClusterName), TimeGenerated = max(TimeGenerated) by ClusterArmId\r\n| extend HealthText = \"\"\r\n| extend HealthText = iff(TotalCritical > 0, strcat(tostring(TotalCritical), \" \", \"Critical\"), HealthText)\r\n| extend HealthText = iff(TotalWarning > 0, strcat(HealthText, iff(isempty(HealthText), \", \", \"\"), tostring(TotalWarning), \" Warning\"), HealthText)\r\n| extend HealthText = iff(TotalUnknown > 0, strcat(HealthText, iff(isempty(HealthText), \", \", \"\"), tostring(TotalUnknown), \" Other\"), HealthText)\r\n| extend TotalHealthy = TotalDrives - (TotalCritical + TotalWarning + TotalUnknown)\r\n| extend HealthText = iff(TotalHealthy > 0, strcat(HealthText, iff(HealthText == \"\", \"\", \", \"), tostring(TotalHealthy), \" \", \"Healthy\"), HealthText)\r\n| extend ParentId = '', Name = ClusterArmId, Id = ClusterArmId, UsedSizeInPercentage = round(TotalUsed/TotalSize*100, 2)\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend TotalIops = iif(todouble(volumes_information.m_TotalIops) < 0, todouble(0), todouble(volumes_information.m_TotalIops))\r\n| make-series TotalIopsTrend = sum(TotalIops) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId\r\n) on ClusterArmId\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend TotalThroughput = iif(todouble(volumes_information.m_TotalThroughput) < 0, todouble(0), todouble(volumes_information.m_TotalThroughput))\r\n| make-series TotalThroughputTrend = sum(TotalThroughput) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId\r\n) on ClusterArmId\r\n| join (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3002\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend volumes_information = parse_json(RenderedDescription).VolumeList\r\n| mv-expand volumes_information\r\n| extend AverageLatency = iif(todouble(volumes_information.m_AverageLatency) < 0, todouble(0), todouble(volumes_information.m_AverageLatency))\r\n| make-series AverageLatencyTrend = avg(AverageLatency) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step 1h by ClusterArmId\r\n) on ClusterArmId\r\n| order by tolower(ClusterName) asc)\r\n| project ParentId, Id, Name, Volume, LastUpdated = TimeGenerated, Status, HealthText, volumes_information.m_Status[0], TotalSize, UsedSizeInPercentage, Iops, TotalIopsTrend, Throughput, TotalThroughputTrend, AverageLatency, AverageLatencyTrend",
                          "size": 3,
                          "showAnalytics": true,
                          "timeContextFromParameter": "timeRange",
                          "showRefreshButton": true,
                          "showExportToExcel": true,
                          "exportToExcelOptions": "all",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "ParentId",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Id",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Name",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkTarget": "Resource",
                                  "subTarget": "insights",
                                  "linkIsContextBlade": false,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "Volume",
                                "formatter": 5,
                                "formatOptions": {
                                  "aggregation": "Count"
                                }
                              },
                              {
                                "columnMatch": "LastUpdated",
                                "formatter": 6,
                                "dateFormat": {
                                  "showUtcTime": null,
                                  "formatName": "shortDateTimePattern"
                                }
                              },
                              {
                                "columnMatch": "Status",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "0",
                                      "representation": "success",
                                      "text": "[\"HealthText\"]"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "2",
                                      "text": "[\"HealthText\"]"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "2",
                                      "representation": "critical",
                                      "text": "[\"HealthText\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "unknown",
                                      "text": "[\"HealthText\"]"
                                    }
                                  ],
                                  "aggregation": "Max"
                                }
                              },
                              {
                                "columnMatch": "HealthText",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "volumes_information_m_Status_0",
                                "formatter": 5,
                                "formatOptions": {
                                  "aggregation": "Max"
                                }
                              },
                              {
                                "columnMatch": "TotalSize",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "13.7143ch"
                                },
                                "numberFormat": {
                                  "unit": 2,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "UsedSizeInPercentage",
                                "formatter": 4,
                                "formatOptions": {
                                  "min": 0,
                                  "max": 100,
                                  "palette": "greenRed",
                                  "aggregation": "Max",
                                  "compositeBarSettings": {
                                    "labelText": "",
                                    "columnSettings": [
                                      {
                                        "columnName": "size_usage",
                                        "color": "blue"
                                      },
                                      {
                                        "columnName": "size_available_percentage",
                                        "color": "gray"
                                      }
                                    ]
                                  },
                                  "customColumnWidthSetting": "163px"
                                },
                                "numberFormat": {
                                  "unit": 1,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "Iops",
                                "formatter": 0,
                                "formatOptions": {
                                  "aggregation": "Sum",
                                  "customColumnWidthSetting": "11.4286ch"
                                },
                                "numberFormat": {
                                  "unit": 31,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "TotalIopsTrend",
                                "formatter": 9,
                                "formatOptions": {
                                  "min": 0,
                                  "palette": "blue",
                                  "aggregation": "Sum"
                                }
                              },
                              {
                                "columnMatch": "Throughput",
                                "formatter": 0,
                                "formatOptions": {
                                  "aggregation": "Sum",
                                  "customColumnWidthSetting": "19.2857ch"
                                },
                                "numberFormat": {
                                  "unit": 11,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "TotalThroughputTrend",
                                "formatter": 9,
                                "formatOptions": {
                                  "min": 0,
                                  "palette": "blue",
                                  "aggregation": "Sum",
                                  "customColumnWidthSetting": "239px"
                                }
                              },
                              {
                                "columnMatch": "AverageLatency",
                                "formatter": 0,
                                "formatOptions": {
                                  "aggregation": "Max"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "AverageLatencyTrend",
                                "formatter": 9,
                                "formatOptions": {
                                  "min": 0,
                                  "palette": "blue",
                                  "aggregation": "Max",
                                  "customColumnWidthSetting": "241px"
                                }
                              },
                              {
                                "columnMatch": "Resiliency",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "0",
                                      "representation": "unknown",
                                      "text": "Unknown"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "text": "Simple"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "text": "Simple"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "2",
                                      "text": "Single Parity"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "3",
                                      "text": "Dual Parity"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "4",
                                      "text": "Two Way Mirror"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "5",
                                      "text": "Three Way Mirror"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "6",
                                      "text": "MRT"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "7",
                                      "text": "Nested Parity"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "8",
                                      "text": "Nested Miror"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "9",
                                      "text": "Nested MRT"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "size_available_percentage",
                                "formatter": 5,
                                "formatOptions": {
                                  "aggregation": "Max"
                                },
                                "numberFormat": {
                                  "unit": 1,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "ClusterArmId",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "ClusterName",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Volume1",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "TimeGenerated",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Volume2",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "TimeGenerated1",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Volume3",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "TimeGenerated2",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "volumes_information_m_Label",
                                "formatter": 0,
                                "formatOptions": {
                                  "aggregation": "Count"
                                }
                              }
                            ],
                            "filter": true,
                            "hierarchySettings": {
                              "idColumn": "Id",
                              "parentColumn": "ParentId",
                              "treeType": 0,
                              "expanderColumn": "Name",
                              "expandTopLevel": false
                            },
                            "labelSettings": [
                              {
                                "columnId": "Name",
                                "label": "Cluster > Volume"
                              },
                              {
                                "columnId": "LastUpdated",
                                "label": "Last updated"
                              },
                              {
                                "columnId": "Status",
                                "label": "Volume health"
                              },
                              {
                                "columnId": "volumes_information_m_Status_0",
                                "label": "State"
                              },
                              {
                                "columnId": "TotalSize",
                                "label": "Size"
                              },
                              {
                                "columnId": "UsedSizeInPercentage",
                                "label": "Usage"
                              },
                              {
                                "columnId": "Iops",
                                "label": "IOPS"
                              },
                              {
                                "columnId": "TotalIopsTrend",
                                "label": "Trend",
                                "comment": ""
                              },
                              {
                                "columnId": "TotalThroughputTrend",
                                "label": "Trend (B/s)",
                                "comment": ""
                              },
                              {
                                "columnId": "AverageLatency",
                                "label": "Average latency",
                                "comment": ""
                              },
                              {
                                "columnId": "AverageLatencyTrend",
                                "label": "Trend (s)",
                                "comment": ""
                              }
                            ]
                          }
                        },
                        "name": "Volume Grid View"
                      }
                    ]
                  },
                  "name": "Volume Group"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Drives in the selected clusters",
                    "expandable": true,
                    "expanded": true,
                    "items": [
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "parameters": [
                            {
                              "id": "41001970-0db6-4610-bfcc-a87aa8ffa664",
                              "version": "KqlParameterItem/1.0",
                              "name": "correlationId",
                              "type": 2,
                              "multiSelect": true,
                              "quote": "'",
                              "delimiter": ",",
                              "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3001\" \r\n| where TimeGenerated {timeRange:query}\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend Description = parse_json(RenderedDescription)\r\n| where tostring(Description.m_isLastElement) == \"true\"\r\n| extend CorrelationId = tostring(Description.m_correlationId)\r\n| summarize arg_max(TimeGenerated, CorrelationId) by ClusterArmId\r\n| project CorrelationId;",
                              "crossComponentResources": [
                                "{subscription}"
                              ],
                              "isHiddenWhenLocked": true,
                              "typeSettings": {
                                "additionalResourceOptions": [
                                  "value::all"
                                ],
                                "showDefault": false
                              },
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeRange",
                              "defaultValue": "value::all",
                              "queryType": 0,
                              "resourceType": "microsoft.resources/subscriptions"
                            },
                            {
                              "id": "41af6bbc-6bd5-45b7-80dd-64f555766a8a",
                              "version": "KqlParameterItem/1.0",
                              "name": "totalDrives",
                              "type": 1,
                              "isRequired": true,
                              "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3001\"\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend Description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(Description.m_correlationId)\r\n| where CorrelationId in~ ({correlationId})\r\n| extend drives_information = Description.m_drives\r\n| where array_length(drives_information) > 0\r\n| mv-expand drives_information\r\n| summarize Total = count()",
                              "crossComponentResources": [
                                "{subscription}"
                              ],
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeRange",
                              "queryType": 0,
                              "resourceType": "microsoft.resources/subscriptions"
                            }
                          ],
                          "style": "pills",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions"
                        },
                        "name": "Drive Parameters"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId in~ ({lastCorrelationId})\r\n| where tostring(description.Fault.RootObjectType) == 'Microsoft.Health.EntityType.PhysicalDisk'\r\n| extend DriveId = tostring(description.Fault.RootObjectId)\r\n| extend Severity = toint(description.Fault.Severity)\r\n| summarize Total = {totalDrives}, Critical = countif(Severity == 2), Warning = countif(Severity == 1), Other = countif(Severity == 255)\r\n| project Total, Healthy = Total - (Critical + Warning + Other), Warning, Critical, Other\r\n| evaluate narrow()",
                          "size": 3,
                          "showAnalytics": true,
                          "timeContextFromParameter": "timeRange",
                          "showRefreshButton": true,
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "Column",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "none"
                              }
                            },
                            "rightContent": {
                              "columnMatch": "Column",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Healthy",
                                    "representation": "success",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Critical",
                                    "representation": "critical",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Warning",
                                    "representation": "2",
                                    "text": ""
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Other",
                                    "representation": "Unknown",
                                    "text": ""
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "Blank",
                                    "text": ""
                                  }
                                ]
                              }
                            },
                            "showBorder": false,
                            "size": "auto"
                          }
                        },
                        "name": "Drive Tile"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId in~ ({lastCorrelationId})\r\n| where tostring(description.Fault.RootObjectType) == 'Microsoft.Health.EntityType.PhysicalDisk'\r\n| extend DriveId = tostring(description.Fault.RootObjectId)\r\n| extend Severity = toint(description.Fault.Severity)\r\n| extend Severity = iff(Severity > 2, -1, Severity)\r\n| summarize Status = max(Severity) by DriveId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3001\"\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend Description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(Description.m_correlationId)\r\n| where CorrelationId in~ ({correlationId})\r\n| extend drives_information = Description.m_drives\r\n| where array_length(drives_information) > 0\r\n| mv-expand drives_information\r\n| extend DriveId = tostring(drives_information.m_uniqueId)\r\n| join kind=leftouter Health on DriveId\r\n| extend HealthText = case(Status == 1, \"Warning\", Status == 2, \"Critical\", Status == -1, \"Other\", \"Healthy\")\r\n| extend TotalCapacity = tolong(drives_information.m_sizeInBytes)\r\n| extend AvailableCapacity = TotalCapacity - tolong(drives_information.m_sizeUsedInBytes)\r\n| extend Name = DriveId\r\n| extend ParentId = ClusterArmId, Id = strcat(ClusterArmId, \"/\", DriveId)\r\n| union (Event\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3001\"\r\n| extend ClusterArmId = _ResourceId\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClsuterData = parse_xml(EventData)\r\n| extend ClusterName = tostring(ClsuterData.DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend Description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(Description.m_correlationId)\r\n| where CorrelationId in~ ({correlationId})\r\n| extend drives_information = Description.m_drives\r\n| where array_length(drives_information) > 0\r\n| mv-expand drives_information\r\n| extend DriveId = tostring(drives_information.m_uniqueId)\r\n| join kind=leftouter Health on DriveId\r\n| extend TotalCapacity = tolong(drives_information.m_sizeInBytes)\r\n| extend AvailableCapacity = TotalCapacity - tolong(drives_information.m_sizeUsedInBytes)\r\n| summarize Status = max(Status), TotalDrives = count(), TotalWarning = countif(Status == 1), TotalCritical = countif(Status == 2), TotalUnknown = countif(Status == -1), TotalCapacity = sum(TotalCapacity), AvailableCapacity = sum(AvailableCapacity), ClusterName = any(ClusterName), TimeGenerated = max(TimeGenerated) by ClusterArmId\r\n| extend HealthText = \"\"\r\n| extend HealthText = iff(TotalCritical > 0, strcat(tostring(TotalCritical), \" \", \"Critical\"), HealthText)\r\n| extend HealthText = iff(TotalWarning > 0, strcat(HealthText, iff(isempty(HealthText), \", \", \"\"), tostring(TotalWarning), \" Warning\"), HealthText)\r\n| extend HealthText = iff(TotalUnknown > 0, strcat(HealthText, iff(isempty(HealthText), \", \", \"\"), tostring(TotalUnknown), \" Other\"), HealthText)\r\n| extend TotalHealthy = TotalDrives - (TotalCritical + TotalWarning + TotalUnknown)\r\n| extend HealthText = iff(TotalHealthy > 0, strcat(HealthText, iff(HealthText == \"\", \"\", \", \"), tostring(TotalHealthy), \" \", \"Healthy\"), HealthText)\r\n| extend ParentId = '', Name = ClusterArmId, Id = ClusterArmId\r\n| order by tolower(ClusterName) asc)\r\n| project ParentId, Id, Name, LastUpdated = TimeGenerated, HealthText, Status, AvailableCapacity, TotalCapacity, CanPool = iff(tobool(drives_information.m_canPool), \"Yes\", \"No\")",
                          "size": 3,
                          "showAnalytics": true,
                          "timeContextFromParameter": "timeRange",
                          "showRefreshButton": true,
                          "showExportToExcel": true,
                          "exportToExcelOptions": "all",
                          "queryType": 0,
                          "resourceType": "microsoft.resources/subscriptions",
                          "crossComponentResources": [
                            "{subscription}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "ParentId",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Id",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Name",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkTarget": "Resource",
                                  "subTarget": "insights",
                                  "linkIsContextBlade": false,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "LastUpdated",
                                "formatter": 6
                              },
                              {
                                "columnMatch": "HealthText",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Status",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "0",
                                      "representation": "success",
                                      "text": "[\"HealthText\"]"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "2",
                                      "text": "[\"HealthText\"]"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "2",
                                      "representation": "4",
                                      "text": "[\"HealthText\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "unknown",
                                      "text": "[\"HealthText\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "AvailableCapacity",
                                "formatter": 1,
                                "numberFormat": {
                                  "unit": 2,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 2
                                  }
                                }
                              },
                              {
                                "columnMatch": "TotalCapacity",
                                "formatter": 1,
                                "numberFormat": {
                                  "unit": 2,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 2
                                  }
                                }
                              }
                            ],
                            "filter": true,
                            "hierarchySettings": {
                              "idColumn": "Id",
                              "parentColumn": "ParentId",
                              "treeType": 0,
                              "expanderColumn": "Name"
                            },
                            "labelSettings": [
                              {
                                "columnId": "Name",
                                "label": "Cluster > Drive"
                              },
                              {
                                "columnId": "LastUpdated",
                                "label": "Last updated"
                              },
                              {
                                "columnId": "AvailableCapacity",
                                "label": "Available capacity"
                              },
                              {
                                "columnId": "TotalCapacity",
                                "label": "Total capacity"
                              },
                              {
                                "columnId": "CanPool",
                                "label": "Can pool"
                              }
                            ]
                          }
                        },
                        "name": "Drive Query"
                      }
                    ]
                  },
                  "name": "Drive Group"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "storage"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "storage group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<p>View the clusters running on the latest Azure Stack HCI version in your subscription that aren’t monitored yet. To start monitoring a cluster, select it to open that cluster, and then go to **Capabilities > Insights**. If you don’t see your cluster, make sure it’s connected recently to Azure.\r\n\r\n[How much will this cost?](https://docs.microsoft.com/azure-stack/hci/manage/monitor-azure-portal#azure-monitor-pricing)"
                  },
                  "name": "Getting Started Description"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### {Message}\r\n"
                  },
                  "name": "Monitored Clusters"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Resources\r\n| where type =~ 'Microsoft.AzureStackHCI/clusters'\r\n| where properties.status !in ('Disconnected', 'NotYetRegistered')\r\n| where id !in~ (dynamic([{clusters}]))\r\n| extend Status = iff(properties.status == 'NotYetRegistered', 0, iff(properties.status == 'Disconnected', 1, iff(properties.status == 'NotConnectedRecently', 2, iff(properties.status == 'ConnectedRecently', 3, -1))))\r\n| extend Nodes = parse_json(properties.reportedProperties.nodes)\r\n| mv-expand Nodes\r\n| extend OsVersion = tostring(Nodes.osVersion)\r\n| summarize arg_min(parse_version(OsVersion), OsVersion), RegistrationStatus = min(Status), ClusterName = any(name), Identity = any(identity), Capabilities = any(properties.reportedProperties.supportedCapabilities) by id\r\n| order by tolower(ClusterName) asc\r\n| join kind=leftouter (ExtensibilityResources\r\n| where type startswith 'microsoft.azurestackhci/clusters/'\r\n| extend ResType = 'unknown'\r\n| extend ResType = iff(type endswith '/arcsettings' and name =~ 'default', 'arc', ResType)\r\n| extend ResType = iff(type endswith '/extensions' and name =~ 'AzureMonitorWindowsAgent', 'ext', ResType)\r\n| where ResType != 'unknown'\r\n| extend id = extract(\"^(.+)/[aA]rcSettings/\", 1, id)\r\n| extend IsExtInstalled = iff(ResType == 'ext' and properties.provisioningState == \"Succeeded\" and properties.aggregateState == \"Creating\", true, false)\r\n| extend IsArcEnabled = iff(ResType == 'arc' and (properties.aggregateState =~ \"Connected\" or properties.aggregateState == \"PartiallyConnected\"), true, false)\r\n| summarize IsExtInstalled = max(IsExtInstalled), IsArcEnabled = max(IsArcEnabled) by id\r\n) on id\r\n| join (Resources) on id\r\n| extend Message = \"Enable\"\r\n| extend Message = iff(IsExtInstalled == false, Message, \"AMA extension is installed\")\r\n| extend Message = iff(IsArcEnabled, Message, \"Arc is not enabled\")\r\n| extend Identity = todynamic(Identity)\r\n| extend IsMsiEnabled = iff(isempty(Identity.principalId) or isempty(Identity.tenantId) or Capabilities !contains \"ManagedIdentity\", false, true)\r\n| extend Message = iff(IsMsiEnabled, Message, \"MSI is not enabled\")\r\n| extend Is22H2 = iff(parse_version(OsVersion) < parse_version(\"10.0.20349\"), false, true)\r\n| extend Message = iff(Is22H2, Message, \"OS Version should be 22H2 or newer\")\r\n| project id, RegistrationStatus, OsVersion, Monitoring = Message, Enable = iff(Is22H2 and IsMsiEnabled and IsExtInstalled == false and IsArcEnabled, dynamic(\"link\"),  dynamic(null))",
                    "size": 2,
                    "showAnalytics": true,
                    "title": "Unmonitored clusters",
                    "noDataMessage": "No unmonitored cluster associated with selected subscriptions.",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "exportToExcelOptions": "all",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "id",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "RegistrationStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "4",
                                "text": "Not Registered"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "3",
                                "text": "Disconnected"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "warning",
                                "text": "Not Recently"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "success",
                                "text": "Connected"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "3",
                                "text": "Unknown"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Monitoring",
                          "formatter": 5,
                          "formatOptions": {
                            "linkColumn": "Enable",
                            "linkTarget": "OpenBlade",
                            "linkIsContextBlade": true,
                            "bladeOpenContext": {
                              "bladeName": "ConfigureAMAInsights.ReactView",
                              "extensionName": "microsoft_azurestackhci_portalextension",
                              "bladeParameters": [
                                {
                                  "name": "resourceId",
                                  "source": "column",
                                  "value": "id"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "Enable",
                          "formatter": 5
                        }
                      ],
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "id",
                          "label": "Cluster"
                        },
                        {
                          "columnId": "RegistrationStatus",
                          "label": "Azure connection status"
                        },
                        {
                          "columnId": "OsVersion",
                          "label": "OS version"
                        }
                      ]
                    },
                    "mapSettings": {
                      "locInfo": "AzureResource",
                      "locInfoColumn": "id"
                    }
                  },
                  "customWidth": "70",
                  "showPin": false,
                  "name": "Unmonitored"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "gettingStarted"
            },
            "name": "getting started group"
          },
          {
            "type": 1,
            "content": {
              "json": "## No clusters are selected.\r\nSelect one or more Azure Stack HCI clusters to monitor. If no HCI clusters appear, you may need to [enable HCI monitoring](https://aka.ms/enable-hci-monitoring)."
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedCluster",
                "comparison": "isEqualTo"
              },
              {
                "parameterName": "selectedTab",
                "comparison": "isNotEqualTo",
                "value": "gettingStarted"
              },
              {
                "parameterName": "selectedTab",
                "comparison": "isNotEqualTo",
                "value": "alerts"
              }
            ],
            "name": "No cluster text"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "If your cluster is missing or showing the status **Other**, go to the **Log Analytics workspace** used for the cluster and make sure that the **Agent configuration** is capturing data from the **microsoft-windows-health/operational** log. Also make sure the clusters have connected recently to Azure and check that the clusters aren’t filtered out in this workbook. [Learn more](https://aka.ms/enable-hci-monitoring)"
                  },
                  "name": "overview text"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId in~ ({lastCorrelationId})\r\n| extend ClusterArmId = tolower(tostring(description.ArmId))\r\n| extend Severity = iff(isempty(description.Fault), 0, toint(description.Fault.Severity))\r\n| extend Severity = case(Severity == 2, 3, Severity == 1, 2, Severity == 255, 1, 0)\r\n| summarize Status = max(Severity) by ClusterArmId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\" \r\n| extend ClusterArmId = tolower(_ResourceId)\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| mv-expand servers_information\r\n| summarize TotalServers = count(), ClusterName = any(ClusterName) by ClusterArmId\r\n| join kind = leftouter Health on ClusterArmId\r\n| extend Status = iff(isempty(Status), iff(ClusterArmId in~ ({healthyClusters}), 0, 1), Status)\r\n| sort by tolower(ClusterName) asc\r\n| extend ServerCritical = iif(Status == 3, 1, 0)\r\n| extend ServerWarning = iif(Status == 2, 1, 0)\r\n| extend ServerUnknown = iif(Status == 1, 1, 0)\r\n| summarize TotalClusters = count(), Critical = sum(ServerCritical), Warning = sum(ServerWarning), Other = sum(ServerUnknown)\r\n| extend Healthy = TotalClusters - (Critical + Warning + Other)\r\n| project TotalClusters, Healthy, Warning, Critical, Other\r\n| evaluate narrow()\r\n| extend Column = iff(Column == \"TotalClusters\", \"Total clusters\", Column)\r\n| project Column, tolong(Value)",
                    "size": 3,
                    "timeContextFromParameter": "timeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Column",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "none"
                        }
                      },
                      "rightContent": {
                        "columnMatch": "Column",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Healthy",
                              "representation": "success",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Warning",
                              "representation": "2",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Critical",
                              "representation": "4",
                              "text": ""
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Other",
                              "representation": "unknown",
                              "text": ""
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "Blank",
                              "text": ""
                            }
                          ]
                        }
                      },
                      "showBorder": false
                    }
                  },
                  "name": "cluster health query"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let Health = Event\r\n| where EventLog =~ \"Microsoft-Windows-Health/Operational\"\r\n| extend description = parse_json(RenderedDescription)\r\n| extend CorrelationId = tostring(description.CorrelationId)\r\n| where CorrelationId in~ ({lastCorrelationId})\r\n| extend ClusterArmId = tolower(tostring(description.ArmId))\r\n| extend Severity = iff(isempty(description.Fault), 0, toint(description.Fault.Severity))\r\n| extend Severity = case(Severity == 2, 3, Severity == 1, 2, Severity == 255, 1, 0)\r\n| extend Type = extract(\"([^\\\\.]+)$\", 1, tostring(description.Fault.ObjectType))\r\n| summarize Status = max(Severity), LastUpdated = max(TimeGenerated), Type = makeset(Type) by ClusterArmId;\r\n\r\nEvent\r\n| where EventLog =~ \"Microsoft-Windows-SDDC-Management/Operational\" and EventID == \"3000\"\r\n| extend ClusterArmId = tolower(_ResourceId)\r\n| where ClusterArmId in~ ({selectedCluster:query})\r\n| extend ClusterName = tostring(parse_xml(EventData).DataItem.UserData.EventData[\"ClusterName\"])\r\n| extend servers_information = parse_json(RenderedDescription).m_servers\r\n| summarize arg_max(TimeGenerated,*) by ClusterName\r\n| mv-expand servers_information\r\n| summarize TotalServers = count(), ClusterName = any(ClusterName) by ClusterArmId\r\n| join kind = leftouter Health on ClusterArmId\r\n| extend Status = iff(isempty(Status), iff(ClusterArmId in~ ({healthyClusters}), 0, 1), Status)\r\n| sort by tolower(ClusterName) asc\r\n| extend Type = strcat_array(Type, \", \")\r\n| extend Type = iff(isempty(Type), \"-\", Type)\r\n| project ClusterArmId, LastUpdated, Status, Type, TotalServers",
                    "size": 3,
                    "showAnalytics": true,
                    "timeContextFromParameter": "timeRange",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.resources/subscriptions",
                    "crossComponentResources": [
                      "{subscription}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ClusterArmId",
                          "formatter": 13,
                          "formatOptions": {
                            "linkColumn": "ClusterArmId",
                            "linkTarget": "Resource",
                            "subTarget": "insights",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "2",
                                "text": "Warning"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "3",
                                "representation": "4",
                                "text": "Critical"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "unknown",
                                "text": "Other"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "Healthy"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Message",
                          "formatter": 5
                        }
                      ],
                      "rowLimit": 10000,
                      "filter": true,
                      "labelSettings": [
                        {
                          "columnId": "ClusterArmId",
                          "label": "Cluster"
                        },
                        {
                          "columnId": "LastUpdated",
                          "label": "Last updated"
                        },
                        {
                          "columnId": "Type",
                          "label": "Faulting resource"
                        },
                        {
                          "columnId": "TotalServers",
                          "label": "Total servers"
                        }
                      ]
                    },
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "columnMatch": "ClusterName",
                        "formatter": 1,
                        "formatOptions": {
                          "linkTarget": "WorkbookTemplate",
                          "linkIsContextBlade": false,
                          "workbookContext": {
                            "componentIdSource": "column",
                            "componentId": "ClusterArmId",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Stack HCI/SingleCluster",
                            "typeSource": "workbook",
                            "gallerySource": "workbook",
                            "locationSource": "default"
                          }
                        }
                      },
                      "centerContent": {
                        "columnMatch": "TotalServers",
                        "formatter": 1,
                        "formatOptions": {
                          "linkTarget": "WorkbookTemplate",
                          "workbookContext": {
                            "componentIdSource": "column",
                            "componentId": "ClusterArmId",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Stack HCI/SingleCluster",
                            "typeSource": "workbook",
                            "gallerySource": "workbook",
                            "locationSource": "default"
                          }
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal",
                            "maximumFractionDigits": 2,
                            "maximumSignificantDigits": 3
                          }
                        }
                      },
                      "nodeIdField": "ClusterName",
                      "graphOrientation": 3,
                      "showOrientationToggles": false,
                      "nodeSize": null,
                      "staticNodeSize": 100,
                      "colorSettings": {
                        "nodeColorField": "ClusterStatus",
                        "type": 3,
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "1",
                            "representation": "yellow"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "2",
                            "representation": "red"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "-1",
                            "representation": "gray"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null,
                            "representation": "green"
                          }
                        ]
                      },
                      "hivesMargin": 5
                    }
                  },
                  "name": "cluster query"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "overview"
              },
              {
                "parameterName": "selectedCluster",
                "comparison": "isNotEqualTo"
              }
            ],
            "name": "overview group"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "subscription",
        "comparison": "isNotEqualTo"
      },
      "name": "Tabs Group"
    },
    {
      "type": 1,
      "content": {
        "json": "## No Subscriptions are selected.\r\nSelect one or more subscriptions to get started. If no subscriptions appear, we could not find any Azure Stack HCI cluster resources in your subscriptions and you may need to [update your default subscription filter](https://azure.microsoft.com/en-us/updates/updates-to-subscription-filtering/)."
      },
      "conditionalVisibility": {
        "parameterName": "subscription",
        "comparison": "isEqualTo"
      },
      "name": "No subscription text"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}