{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "a861c073-a5d8-4ce3-8a95-0948337bd6f7",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type startswith 'Microsoft.DesktopVirtualization/'\r\n    | summarize Count = count() by subscriptionId\r\n    | order by Count desc\r\n    | extend Rank = row_number()\r\n    | project value = subscriptionId, label = subscriptionId, selected = Rank == 1",
            "crossComponentResources": [
              "value::selected"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "5dd6a071-7171-4843-8fe7-6aad6e176328",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceGroups",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| where type contains  \"desktopvirtualization\"\r\n| summarize Count = count() by resourceGroup\r\n| project Label = resourceGroup, Id = resourceGroup, Selected = Count >= 0",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "5d486243-b2b5-4d23-86ca-169b5545288c",
            "version": "KqlParameterItem/1.0",
            "name": "HostPools",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| where type == \"microsoft.desktopvirtualization/hostpools\" and resourceGroup in ({ResourceGroups})",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "150b58c9-d5b2-47ef-8d7e-713a58694b09",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ]
            },
            "value": {
              "durationMs": 172800000
            }
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "customWidth": "50",
      "name": "ConnectionReliabilityParameters",
      "styleSettings": {
        "maxWidth": "60ch"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{HostPools}"
        ],
        "parameters": [
          {
            "id": "27d1f0cb-f151-4368-8ffa-b2ab1ed7676a",
            "version": "KqlParameterItem/1.0",
            "name": "WindowEnd",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "HostPools",
                  "operator": "isNotNull",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "{TimeRange:endISO}"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{TimeRange:endISO}"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "WindowStart",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "HostPools",
                  "operator": "isNotNull",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "{TimeRange:startISO}"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "{TimeRange:startISO}"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "b368baf2-afa5-402f-b959-40b90224075e"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.desktopvirtualization/hostpools"
      },
      "name": "parameters - 12"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let WindowStart = todatetime(\"{WindowStart}\");\r\nlet WindowEnd = todatetime(\"{WindowEnd}\");\r\nlet WindowSize = max_of({TimeRange:grain}/3, 20s);\r\nWVDConnections\r\n| where (State == \"Started\" and TimeGenerated between(WindowStart..WindowEnd)) or (State == \"Completed\" and TimeGenerated > WindowStart) or (State == \"Connected\" and TimeGenerated between(WindowStart..WindowEnd))\r\n| summarize StartDate = minif(TimeGenerated, State == \"Started\"), EndDate = minif(TimeGenerated, State == \"Completed\"), ConnectedTime = minif(TimeGenerated, State == \"Connected\"), UserName = take_any(UserName), SessionHostName = take_any(SessionHostName) by CorrelationId\r\n| where isnotempty(ConnectedTime)\r\n| project CorrelationId, UserName, StartDate, EndDate = coalesce(EndDate, now()), SessionHostName, ConnectedTime\r\n| where EndDate > WindowStart and ConnectedTime < WindowEnd\r\n| join kind=leftouter\r\n(\r\n    WVDErrors\r\n    | where TimeGenerated > WindowStart \r\n    | summarize FirstError = min(TimeGenerated) by CorrelationId, HasErrors=True\r\n) on CorrelationId\r\n| extend Probe=range(WindowStart, WindowEnd, WindowSize), EndDate=coalesce(FirstError, EndDate) // If it has errors, take time of first error as endtime\r\n| mv-apply Probe to typeof(datetime) on\r\n(\r\n    where (Probe between (StartDate .. EndDate) or (EndDate between(Probe..(WindowSize+Probe))))\r\n    | extend ConnectionContainsProbe = Probe between(StartDate..EndDate), ConnectionEndedHere=EndDate between(Probe .. (WindowSize + Probe))\r\n    | where ConnectionContainsProbe\r\n)\r\n| extend ErrorMarker=(ConnectionEndedHere and HasErrors)\r\n| extend ActiveConnection=ConnectionContainsProbe and not(ErrorMarker)\r\n| summarize Errors=dcountif(CorrelationId, ErrorMarker), Total=dcountif(CorrelationId, ConnectionContainsProbe), HostErrors=dcountif(tostring(SessionHostName), ErrorMarker) by Probe\r\n| extend Connections=Total-Errors // since errors are reported after connections\r\n| project Connections, Errors, Total, Drop=(100.0*Errors/Total), Hosts=HostErrors, Probe, ProbeBefore=(Probe-WindowSize-1s), ProbeAfter=(Probe+WindowSize+1s), WindowStart, WindowEnd\r\n| sort by Errors desc, Drop desc\r\n| take 20",
        "size": 0,
        "title": "Top 20  disconnection events",
        "exportedParameters": [
          {
            "fieldName": "ProbeBefore",
            "parameterName": "ProbeBefore",
            "parameterType": 1,
            "defaultValue": "-1"
          },
          {
            "fieldName": "ProbeAfter",
            "parameterName": "ProbeAfter",
            "parameterType": 1,
            "defaultValue": "-1"
          },
          {
            "fieldName": "Probe",
            "parameterName": "ProbeTime",
            "parameterType": 1
          }
        ],
        "queryType": 0,
        "resourceType": "microsoft.desktopvirtualization/hostpools",
        "crossComponentResources": [
          "{HostPools}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Connections",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"Errors\"] / [\"Total\"]",
                  "columnSettings": [
                    {
                      "columnName": "Errors",
                      "color": "redBright"
                    },
                    {
                      "columnName": "Connections",
                      "color": "green"
                    }
                  ]
                },
                "customColumnWidthSetting": "113px"
              }
            },
            {
              "columnMatch": "Errors",
              "formatter": 5
            },
            {
              "columnMatch": "Total",
              "formatter": 5
            },
            {
              "columnMatch": "Drop",
              "formatter": 8,
              "formatOptions": {
                "min": 0,
                "max": 50,
                "palette": "yellowOrangeRed",
                "customColumnWidthSetting": "10ch"
              },
              "numberFormat": {
                "unit": 1,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 0
                }
              }
            },
            {
              "columnMatch": "Hosts",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "magenta",
                "customColumnWidthSetting": "10ch"
              }
            },
            {
              "columnMatch": "Probe",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "20ch"
              }
            },
            {
              "columnMatch": "ProbeBefore",
              "formatter": 5
            },
            {
              "columnMatch": "ProbeAfter",
              "formatter": 5
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 5
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 5
            }
          ]
        }
      },
      "customWidth": "31",
      "name": "AndesProspector",
      "styleSettings": {
        "maxWidth": "470px"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let WindowStart = todatetime(\"{WindowStart}\");\r\nlet WindowEnd = todatetime(\"{WindowEnd}\");\r\nlet WindowSize = max_of({TimeRange:grain}/3, 20s);\r\nlet ProbeBefore = todatetime(\"{ProbeBefore}\");\r\nlet ProbeAfter = todatetime(\"{ProbeAfter}\");\r\nWVDConnections\r\n| where (State == \"Started\" and TimeGenerated between(WindowStart..WindowEnd)) or (State == \"Completed\" and TimeGenerated > WindowStart) or (State == \"Connected\" and TimeGenerated between(WindowStart..WindowEnd))\r\n| summarize StartDate = minif(TimeGenerated, State == \"Started\"), EndDate = minif(TimeGenerated, State == \"Completed\"), ConnectedTime = minif(TimeGenerated, State == \"Connected\"), UserName = take_any(UserName), SessionHostName = take_any(SessionHostName) by CorrelationId\r\n| where isnotempty(ConnectedTime)\r\n| project CorrelationId, UserName, StartDate, EndDate = coalesce(EndDate, now()), SessionHostName, ConnectedTime\r\n| where EndDate > WindowStart and ConnectedTime < WindowEnd\r\n| join kind=leftouter\r\n(\r\n    WVDErrors\r\n    | where TimeGenerated > WindowStart \r\n    | summarize FirstError = min(TimeGenerated) by CorrelationId\r\n) on CorrelationId\r\n| extend Probe=range(WindowStart, WindowEnd, WindowSize), EndDate=coalesce(FirstError, EndDate), HasErrors=isnotempty(FirstError)\r\n| mv-apply Probe to typeof(datetime) on\r\n(\r\n    where (Probe between (StartDate .. EndDate) or (EndDate between(Probe..(WindowSize+Probe))))\r\n    | extend ConnectionContainsProbe = Probe between(StartDate..EndDate), ConnectionEndedHere=EndDate between(Probe .. (WindowSize + Probe)))\r\n    | where ConnectionContainsProbe\r\n| extend ErrorMarker = (ConnectionEndedHere and HasErrors)               // Denotes that this connection will be rendered as an error in this time probe\r\n| extend ActiveConnection = ConnectionContainsProbe and not(ErrorMarker) // Denotes that this connection will be rendered as an active connection in this time probe\r\n| extend IsHighlighted = Probe between(ProbeBefore..ProbeAfter) or \"{ProbeBefore}\"==\"-1\" // If time slice is selected, highlight it, otherwise highlight everything\r\n| make-series Error=dcountif(CorrelationId, ErrorMarker and IsHighlighted), Connection=dcountif(CorrelationId, ActiveConnection and IsHighlighted),\r\n              ErrorDim=dcountif(CorrelationId, ErrorMarker and not(IsHighlighted)), ConnectionDim=dcountif(CorrelationId, ActiveConnection and not(IsHighlighted))\r\n default=0 on Probe from WindowStart to WindowEnd step WindowSize\r\n\r\n",
        "size": 0,
        "aggregation": 5,
        "title": "Concurrent connection graph with disconnects",
        "queryType": 0,
        "resourceType": "microsoft.desktopvirtualization/hostpools",
        "crossComponentResources": [
          "{HostPools}"
        ],
        "visualization": "barchart",
        "chartSettings": {
          "showMetrics": false,
          "seriesLabelSettings": [
            {
              "seriesName": "Error",
              "color": "redBright"
            },
            {
              "seriesName": "Connection",
              "color": "green"
            },
            {
              "seriesName": "ErrorDim",
              "color": "brown"
            },
            {
              "seriesName": "ConnectionDim",
              "color": "greenDarkDark"
            }
          ]
        }
      },
      "customWidth": "69",
      "name": "AndesMainChart"
    },
    {
      "type": 1,
      "content": {
        "json": "# &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ⬆️\r\n## &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; To begin, select a time slice\r\n## &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; from the Top 20 disconnection events"
      },
      "conditionalVisibility": {
        "parameterName": "ProbeTime",
        "comparison": "isEqualTo"
      },
      "name": "TimeSliceSelectionInstructions",
      "styleSettings": {
        "padding": "20px"
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": []
      },
      "name": "PreventUnderflowSeparatorGroup1"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n    {\\r\\n        \\\"label\\\": \\\"Subscription\\\",\\r\\n        \\\"value\\\": \\\"ArmPathSubscriptionId\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"Resource\\\"\\r\\n    },    \\r\\n    {\\r\\n        \\\"label\\\": \\\"Resource group\\\",\\r\\n        \\\"value\\\": \\\"ArmPathResourceGroupName\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"Resource\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"label\\\": \\\"Host pool\\\",\\r\\n        \\\"value\\\": \\\"ArmPathHostPoolName\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"Resource\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"label\\\": \\\"Transport\\\",\\r\\n        \\\"value\\\": \\\"UdpType\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"Connection\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"label\\\": \\\"Session host\\\",\\r\\n        \\\"value\\\": \\\"SessionHostName\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"VM\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"label\\\": \\\"Session host IP/16\\\",\\r\\n        \\\"value\\\": \\\"SessionHostIPAddress\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"World\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"label\\\": \\\"Client type\\\",\\r\\n        \\\"value\\\": \\\"ClientType\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"App\\\"\\r\\n    },\\r\\n\\t{\\r\\n        \\\"label\\\": \\\"Client version\\\",\\r\\n        \\\"value\\\": \\\"ClientVersion\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"App\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"label\\\": \\\"Client IP/16\\\",\\r\\n        \\\"value\\\": \\\"ClientIPAddress\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"World\\\"\\r\\n    }, \\r\\n    {\\r\\n        \\\"label\\\": \\\"Gateway region\\\",\\r\\n        \\\"value\\\": \\\"GatewayRegion\\\",\\r\\n\\t\\t\\\"icon\\\": \\\"World\\\"\\r\\n    }\\r\\n]\",\"transformers\":null}",
        "size": 0,
        "title": "Pivot disconnects by",
        "exportFieldName": "value",
        "exportParameterName": "DisconnectPivot",
        "queryType": 8,
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "icon",
            "formatter": 18,
            "formatOptions": {
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "==",
                  "thresholdValue": "World",
                  "representation": "Globe",
                  "text": "[\"label\"]"
                },
                {
                  "operator": "==",
                  "thresholdValue": "VM",
                  "representation": "ResourceFlat",
                  "text": "[\"label\"]"
                },
                {
                  "operator": "==",
                  "thresholdValue": "Resource",
                  "representation": "ResourceFlat",
                  "text": "[\"label\"]"
                },
                {
                  "operator": "==",
                  "thresholdValue": "Connection",
                  "representation": "Connect",
                  "text": "[\"label\"]"
                },
                {
                  "operator": "==",
                  "thresholdValue": "App",
                  "representation": "Code",
                  "text": "[\"label\"]"
                },
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "Expand",
                  "text": "[\"label\"]"
                }
              ]
            }
          },
          "secondaryContent": {
            "columnMatch": "value"
          },
          "showBorder": true,
          "size": "full"
        }
      },
      "conditionalVisibility": {
        "parameterName": "ProbeTime",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "100",
      "name": "PivotByTiles",
      "styleSettings": {
        "maxWidth": "250px"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n# &nbsp; ⬅️ &nbsp; Choose a pivot to continue\r\n\r\n# &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dissecting the disconnection event"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "DisconnectPivot",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "ProbeTime",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "60",
      "name": "RankedGroupedErrorsLayoutPlaceholder"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let WindowStart = todatetime(\"{WindowStart}\");\r\nlet WindowEnd = todatetime(\"{WindowEnd}\");\r\nlet WindowSize = max_of({TimeRange:grain}/3, 20s);\r\nlet Probe=todatetime(\"{ProbeTime}\");\r\nWVDConnections\r\n| where (State == \"Started\" and TimeGenerated between(WindowStart..WindowEnd)) or (State == \"Completed\" and TimeGenerated > WindowStart) or (State == \"Connected\" and TimeGenerated between(WindowStart..WindowEnd))\r\n| summarize StartDate = minif(TimeGenerated, State == \"Started\"), EndDate = minif(TimeGenerated, State == \"Completed\"), ConnectedTime = minif(TimeGenerated, State == \"Connected\"), UserName = take_any(UserName), SessionHostName = tostring(take_any(SessionHostName)),  ClientVersion = tostring(take_any(ClientVersion)),ClientType = take_any(ClientType), GatewayRegion = tostring(take_any(GatewayRegion)), ClientIPAddress = take_any(ClientIPAddress), SessionHostIPAddress = take_any(SessionHostIPAddress), _ResourceId = take_any(_ResourceId), UdpUse = take_any(UdpUse) by CorrelationId\r\n| where isnotempty(ConnectedTime)\r\n| project CorrelationId, UserName, StartDate, EndDate = coalesce(EndDate, now()), SessionHostName, ConnectedTime, ClientVersion, ClientType, GatewayRegion, ClientIPAddress, SessionHostIPAddress, _ResourceId, UdpUse\r\n| where EndDate > WindowStart and ConnectedTime < WindowEnd\r\n| parse _ResourceId with \"/subscriptions/\" ArmPathSubscriptionId \"/resourcegroups/\" ResourceGroupName  \"/hostpools/\" ArmPathHostPoolName\r\n| extend ArmPathResourceGroupName =  tostring(split(ResourceGroupName, \"/\")[0])\r\n| extend UdpType = case(UdpUse == 0, \"NotUsed\", \r\n                        UdpUse == 1, \"ShortpathPrivate\", // The user connection is using RDP Shortpath for managed networks.\r\n                        UdpUse == 2, \"ShortpathPublic\", // The user connection is using RDP Shortpath for public networks directly using STUN.\r\n                        UdpUse == 4, \"Relay\", // The user connection is using RDP Shortpath for public networks indirectly using TURN.\r\n                        \"Unknown\") // For any other value, the user connection isn't using RDP Shortpath and is connected using TCP.\r\n| extend ClientTypeFull = ClientType, ClientType=replace(\"com.microsoft.rdc.\", \"\", ClientType), ClientIPAddressFull = ClientIPAddress, ClientIPAddress = iif(ClientIPAddress contains \":\", \"<IPv6>\", format_ipv4_mask(ClientIPAddress, 16)),  SessionHostIPAddressFull = SessionHostIPAddress, SessionHostIPAddress = format_ipv4_mask(SessionHostIPAddress, 16)\r\n| extend Pivot = iif(\"ArmPathHostPoolName\" == \"{DisconnectPivot}\", strcat(ArmPathResourceGroupName, \"/\", {DisconnectPivot}) , tostring({DisconnectPivot}))\r\n| extend PivotValue = iif(\"ClientType\" == \"{DisconnectPivot}\", ClientTypeFull, iif(\"ClientIPAddress\" == \"{DisconnectPivot}\", ClientIPAddressFull, iff(\"SessionHostIPAddress\" == \"{DisconnectPivot}\", SessionHostIPAddressFull, Pivot)))\r\n| join kind=leftouter\r\n(\r\n    WVDErrors\r\n    | where TimeGenerated > WindowStart\r\n    | summarize FirstError = min(TimeGenerated) by CorrelationId, HasErrors=True\r\n) on CorrelationId\r\n| extend EndDate=coalesce(FirstError, EndDate), HasErrors=coalesce(HasErrors, False) // If it has errors, take time of first error as endtime\r\n| extend ConnectionEndedHere=EndDate between(Probe..(WindowSize+Probe))\r\n| where (StartDate <= Probe and Probe <= EndDate)\r\n| extend ConnectionResult=iif(HasErrors and ConnectionEndedHere, \"ErrorConnection\", \"SuccessConnection\")\r\n| summarize Connections=dcountif(CorrelationId, ConnectionResult == \"SuccessConnection\"), Disconnected=dcountif(CorrelationId, ConnectionResult == \"ErrorConnection\") by Pivot, PivotColumn=\"{DisconnectPivot}\",  PivotValue\r\n| sort by Disconnected desc\r\n| extend Drop=100.0*Disconnected/(Connections+Disconnected), Total=Connections+Disconnected\r\n| extend Title = strcat(\"Filter for \", Pivot, \", details of time slice for \")\r\n",
        "size": 0,
        "showAnalytics": true,
        "title": "Pivoted events",
        "exportedParameters": [
          {
            "fieldName": "PivotValue",
            "parameterName": "PivotValue",
            "defaultValue": "All"
          },
          {
            "fieldName": "Title",
            "parameterName": "Title",
            "parameterType": 1,
            "defaultValue": "Details of time slice for"
          }
        ],
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.desktopvirtualization/hostpools",
        "crossComponentResources": [
          "{HostPools}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Pivot",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "25ch"
              }
            },
            {
              "columnMatch": "PivotColumn",
              "formatter": 5
            },
            {
              "columnMatch": "PivotValue",
              "formatter": 5
            },
            {
              "columnMatch": "Connections",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"Disconnected\"] / [\"Total\"]",
                  "columnSettings": [
                    {
                      "columnName": "Disconnected",
                      "color": "redBright"
                    },
                    {
                      "columnName": "Connections",
                      "color": "green"
                    }
                  ]
                }
              }
            },
            {
              "columnMatch": "Disconnected",
              "formatter": 5
            },
            {
              "columnMatch": "Drop",
              "formatter": 8,
              "formatOptions": {
                "max": 50,
                "palette": "yellowOrangeRed",
                "customColumnWidthSetting": "10ch"
              },
              "numberFormat": {
                "unit": 1,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 0
                }
              }
            },
            {
              "columnMatch": "Total",
              "formatter": 5
            },
            {
              "columnMatch": "Title",
              "formatter": 5
            },
            {
              "columnMatch": "ArmPathResourceGroupName",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "36.1429ch"
              }
            },
            {
              "columnMatch": "ArmPathSubscriptionId",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "37.7143ch"
              }
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ProbeTime",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "DisconnectPivot",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "30",
      "name": "PivotedDisconnectsTable"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let GetPrettyError=(ErrorName:string, ErrorCode:string)\r\n{\r\n    iif(ErrorName !in ('', '<>'), strcat(ErrorName, ' (', ErrorCode, ')'), ErrorCode)\r\n};\r\nlet GetErrorSource=(ErrorSource:string, ErrorReportedBy:string)\r\n{\r\n    iif(ErrorSource == ErrorReportedBy, ErrorSource, strcat(ErrorSource, ' (reported by ', ErrorReportedBy, ')'))\r\n};\r\n\r\nlet WindowStart = todatetime(\"{WindowStart}\");\r\nlet WindowEnd = todatetime(\"{WindowEnd}\");\r\nlet WindowSize = max_of({TimeRange:grain}/3, 20s);\r\nlet Probe=todatetime(\"{ProbeTime}\");\r\nWVDConnections\r\n| where (State == \"Started\" and TimeGenerated between(WindowStart..WindowEnd)) or (State == \"Completed\" and TimeGenerated > WindowStart) or (State == \"Connected\" and TimeGenerated between(WindowStart..WindowEnd))\r\n| summarize StartDate = minif(TimeGenerated, State == \"Started\"), EndDate = minif(TimeGenerated, State == \"Completed\"), ConnectedTime = minif(TimeGenerated, State == \"Connected\"), UserName = take_any(UserName), SessionHostName = tostring(take_any(SessionHostName)),  ClientVersion = tostring(take_any(ClientVersion)),ClientType = take_any(ClientType), GatewayRegion = tostring(take_any(GatewayRegion)), ClientIPAddress = take_any(ClientIPAddress), SessionHostIPAddress = take_any(SessionHostIPAddress), _ResourceId = take_any(_ResourceId), UdpUse = take_any(UdpUse) by CorrelationId\r\n| where isnotempty(ConnectedTime)\r\n| project CorrelationId, UserName, StartDate, EndDate = coalesce(EndDate, now()), SessionHostName, ConnectedTime, ClientVersion, ClientType, GatewayRegion, ClientIPAddress, SessionHostIPAddress, _ResourceId, UdpUse\r\n| where EndDate > WindowStart and ConnectedTime < WindowEnd\r\n| parse _ResourceId with \"/subscriptions/\" ArmPathSubscriptionId \"/resourcegroups/\" ResourceGroupName  \"/hostpools/\" ArmPathHostPoolName\r\n| extend ArmPathResourceGroupName =  tostring(split(ResourceGroupName, \"/\")[0])\r\n| extend UdpType = case(UdpUse == 0, \"NotUsed\", \r\n                        UdpUse == 1, \"ShortpathPrivate\", // The user connection is using RDP Shortpath for managed networks.\r\n                        UdpUse == 2, \"ShortpathPublic\", // The user connection is using RDP Shortpath for public networks directly using STUN.\r\n                        UdpUse == 4, \"Relay\", // The user connection is using RDP Shortpath for public networks indirectly using TURN.\r\n                        \"Unknown\") // For any other value, the user connection isn't using RDP Shortpath and is connected using TCP.\r\n| extend Pivot = iif(\"{PivotValue}\" != \"All\", \"{PivotValue}\", \"\")\r\n| extend DisconnectPivot = iif(\"ArmPathHostPoolName\" == \"{DisconnectPivot}\", strcat(ArmPathResourceGroupName, \"/\", {DisconnectPivot}) , tostring({DisconnectPivot}))\r\n| where (\"{PivotValue}\" == \"All\") or DisconnectPivot == Pivot\r\n| extend ClientType=replace(\"com.microsoft.rdc.\", \"\", ClientType), ClientIPAddress = format_ipv4_mask(ClientIPAddress, 16), SessionHostIPAddress = format_ipv4_mask(SessionHostIPAddress, 16)\r\n| join kind=inner\r\n(\r\n    WVDErrors\r\n    | where TimeGenerated > WindowStart\r\n    | extend ErrorKey=strcat(Source, \"\\\\\", ServiceError, \"\\\\\", CodeSymbolic, \":\", Code) //ErrorOperation, \"\\\\\", \r\n    | summarize take_any(Time=TimeGenerated, Message, *) by CorrelationId, Source, Operation, CodeSymbolic, Code, ServiceError, Error=GetPrettyError(CodeSymbolic, Code), ErrorKey\r\n) on CorrelationId\r\n| sort by CorrelationId asc, ServiceError desc, ErrorKey asc\r\n| extend rn=row_number(1, prev(CorrelationId) != CorrelationId)\r\n| as AllErrors\r\n| join kind=inner\r\n(\r\n    AllErrors\r\n    | summarize TotalErrors=count(), ErrorList = array_sort_asc(make_list(ErrorKey)), (min_Time, Error)=arg_min(Time, Error) by CorrelationId\r\n    | extend Fingerprint = substring(hash_sha1(strcat_array(ErrorList, \";\")), 0, 16)\r\n) on CorrelationId\r\n| extend EndDate=coalesce(min_Time, EndDate)\r\n| where EndDate between(Probe..(WindowSize+Probe))\r\n| where (StartDate <= Probe and Probe <= EndDate)\r\n| summarize take_any(*), Users=dcount(UserName), Hosts=dcount(SessionHostName) by Fingerprint, rn\r\n| extend Id=iif(rn == 1, CorrelationId, strcat(CorrelationId, \"-\", rn))\r\n| extend ParentId=iif(rn == 1, \"\", CorrelationId) // Create root node\r\n| sort by Hosts desc, Users desc, rn asc\r\n| extend Title = Error\r\n| project Id, ParentId, ServiceError, Source, Operation, Error, Message, Users, Hosts, Kind=iif(ServiceError==\"True\", \"Service\", \"Deployment\"), Title\r\n\r\n",
        "size": 0,
        "showAnalytics": true,
        "title": "Disconnects by error",
        "exportedParameters": [
          {
            "fieldName": "Error",
            "parameterName": "ConnectionError",
            "defaultValue": "all errors"
          },
          {
            "fieldName": "Title",
            "parameterName": "TitleForDetailsOfTimeSliceChart",
            "parameterType": 1,
            "defaultValue": "all errors"
          }
        ],
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.desktopvirtualization/hostpools",
        "crossComponentResources": [
          "{HostPools}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Id",
              "formatter": 5
            },
            {
              "columnMatch": "ParentId",
              "formatter": 5
            },
            {
              "columnMatch": "ServiceError",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "True",
                    "representation": "2",
                    "text": "[\"Error\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "[\"Error\"]"
                  }
                ],
                "customColumnWidthSetting": "54.2857ch"
              },
              "tooltipFormat": {
                "tooltip": "[\"Kind\"] error"
              }
            },
            {
              "columnMatch": "Source",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "GenericDetails",
                "linkIsContextBlade": true,
                "customColumnWidthSetting": "25.4286ch"
              }
            },
            {
              "columnMatch": "Operation",
              "formatter": 5
            },
            {
              "columnMatch": "Error",
              "formatter": 5
            },
            {
              "columnMatch": "Message",
              "formatter": 5
            },
            {
              "columnMatch": "Users",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "turquoise"
              }
            },
            {
              "columnMatch": "Hosts",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "magenta"
              }
            },
            {
              "columnMatch": "Kind",
              "formatter": 5
            },
            {
              "columnMatch": "Title",
              "formatter": 5
            }
          ],
          "rowLimit": 1000,
          "hierarchySettings": {
            "idColumn": "Id",
            "parentColumn": "ParentId",
            "treeType": 0,
            "expanderColumn": "ServiceError",
            "expandTopLevel": true
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ProbeTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "DisconnectPivot",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "53",
      "name": "RankedGroupedErrors"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": []
      },
      "name": "PreventUnderflowSeparatorGroup2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let WindowStart = todatetime(\"{WindowStart}\");\r\nlet WindowEnd = todatetime(\"{WindowEnd}\");\r\nlet WindowSize = max_of({TimeRange:grain}/3, 20s);\r\nlet Probe=todatetime(\"{ProbeTime}\");\r\nlet GetPrettyError=(ErrorName:string, ErrorCode:string)\r\n{\r\n    iif(ErrorName !in ('', '<>'), strcat(ErrorName, ' (', ErrorCode, ')'), ErrorCode)\r\n};\r\nWVDConnections\r\n| where (State == \"Started\" and TimeGenerated between(WindowStart..WindowEnd)) or (State == \"Completed\" and TimeGenerated > WindowStart) or (State == \"Connected\" and TimeGenerated between(WindowStart..WindowEnd))\r\n| summarize StartDate = minif(TimeGenerated, State == \"Started\"), EndDate = minif(TimeGenerated, State == \"Completed\"), ConnectedTime = minif(TimeGenerated, State == \"Connected\"), UserName = take_any(UserName), SessionHostName = tostring(take_any(SessionHostName)),  ClientVersion = tostring(take_any(ClientVersion)),ClientType = take_any(ClientType), GatewayRegion = tostring(take_any(GatewayRegion)), ClientIPAddress = take_any(ClientIPAddress), SessionHostIPAddress = take_any(SessionHostIPAddress), _ResourceId = take_any(_ResourceId), UdpUse = take_any(UdpUse) by CorrelationId\r\n| where isnotempty(ConnectedTime)\r\n| project CorrelationId, UserName, StartDate, EndDate = coalesce(EndDate, now()), SessionHostName, ConnectedTime, ClientVersion, ClientType, GatewayRegion, ClientIPAddress, SessionHostIPAddress, _ResourceId, UdpUse\r\n| where EndDate > WindowStart and ConnectedTime < WindowEnd\r\n| extend Duration = EndDate - StartDate\r\n| parse _ResourceId with \"/subscriptions/\" ArmPathSubscriptionId \"/resourcegroups/\" ResourceGroupName  \"/hostpools/\" ArmPathHostPoolName\r\n| extend ArmPathResourceGroupName =  tostring(split(ResourceGroupName, \"/\")[0])\r\n| extend UdpType = case(UdpUse == 0, \"NotUsed\", \r\n                        UdpUse == 1, \"ShortpathPrivate\", // The user connection is using RDP Shortpath for managed networks.\r\n                        UdpUse == 2, \"ShortpathPublic\", // The user connection is using RDP Shortpath for public networks directly using STUN.\r\n                        UdpUse == 4, \"Relay\", // The user connection is using RDP Shortpath for public networks indirectly using TURN.\r\n                        \"Unknown\") // For any other value, the user connection isn't using RDP Shortpath and is connected using TCP.\r\n| extend Pivot = iif(\"{PivotValue}\" != \"All\", \"{PivotValue}\", \"\")\r\n| extend DisconnectPivot = iif(\"ArmPathHostPoolName\" == \"{DisconnectPivot}\", strcat(ArmPathResourceGroupName, \"/\", {DisconnectPivot}) , tostring({DisconnectPivot}))\r\n| where (\"{PivotValue}\" == \"All\") or DisconnectPivot == Pivot\r\n| join kind=leftouter\r\n(\r\n    WVDErrors\r\n    | where TimeGenerated > WindowStart\r\n    | extend Error = GetPrettyError(CodeSymbolic, Code)\r\n    | where (\"{ConnectionError}\" == \"all errors\") or Error == \"{ConnectionError}\"\r\n    | summarize FirstError = min(TimeGenerated) by CorrelationId, HasErrors=True\r\n) on CorrelationId\r\n| extend EndDate=coalesce(FirstError, EndDate), HasErrors=coalesce(HasErrors, False) // If it has errors, take time of first error as endtime\r\n| extend ConnectionEndedHere=EndDate between(Probe..(WindowSize+Probe))\r\n| where (StartDate <= Probe and Probe <= EndDate)\r\n| sort by HasErrors desc, ConnectionEndedHere desc, EndDate asc\r\n| extend Index=row_number(1) \r\n| project Index, CorrelationId, StartDate, EndDate, Outcome=iif(HasErrors and ConnectionEndedHere, \"Disconnected\", \"Continued\"), bin(Duration, 1s), UserName, SessionHostName\r\n| extend IfKeeps = iff((\"{ConnectionError}\" == \"all errors\"), \"True\", iff((Outcome == \"Disconnected\"), \"True\", \"False\"))\r\n| where IfKeeps == \"True\"\r\n| project-away IfKeeps\r\n| sort by Index asc",
        "size": 2,
        "aggregation": 5,
        "showAnalytics": true,
        "title": "{Title} {TitleForDetailsOfTimeSliceChart}",
        "exportFieldName": "CorrelationId",
        "exportParameterName": "ActivityIdErrors",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.desktopvirtualization/hostpools",
        "crossComponentResources": [
          "{HostPools}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Index",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "6.5ch"
              }
            },
            {
              "columnMatch": "CorrelationId",
              "formatter": 5
            },
            {
              "columnMatch": "StartDate",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "22ch"
              }
            },
            {
              "columnMatch": "EndDate",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "21ch"
              }
            },
            {
              "columnMatch": "Outcome",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Disconnected",
                    "representation": "failed",
                    "text": "[\"Duration\"]"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Continued",
                    "representation": "success",
                    "text": "[\"Duration\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "14ch"
              }
            },
            {
              "columnMatch": "Duration",
              "formatter": 5
            },
            {
              "columnMatch": "UserName",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "19ch"
              }
            },
            {
              "columnMatch": "SessionHostName",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "23ch"
              }
            }
          ],
          "rowLimit": 1000,
          "filter": true
        },
        "sortBy": [],
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "Error",
              "color": "red"
            },
            {
              "seriesName": "Connection",
              "color": "green"
            },
            {
              "seriesName": "ErrorDim",
              "color": "redDark"
            },
            {
              "seriesName": "ConnectionDim",
              "color": "greenDarkDark"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ProbeTime",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "DisconnectPivot",
          "comparison": "isNotEqualTo"
        }
      ],
      "customWidth": "46",
      "name": "DisconnectionListSample"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let GetPrettyError=(ErrorName:string, ErrorCode:string)\r\n{\r\n    iif(ErrorName !in ('', '<>'), strcat(ErrorName, ' (', ErrorCode, ')'), ErrorCode)\r\n};\r\nlet WindowStart = todatetime(\"{WindowStart}\");\r\nWVDCheckpoints\r\n| where CorrelationId == \"{ActivityIdErrors}\" and TimeGenerated > WindowStart\r\n| project CorrelationId, TimeGenerated, Kind=\"Checkpoint\", Source, Information=Name, Details=replace(\"{}\", \"\", tostring(Parameters))\r\n| union\r\n(\r\n    WVDErrors\r\n    | where \"{ActivityIdErrors}\" == CorrelationId\r\n    | project CorrelationId, TimeGenerated, Kind=iif(ServiceError == \"True\", \"Error (Service)\", \"Error (Deployment)\"), Source, Information = GetPrettyError(CodeSymbolic, Code), Details=Message\r\n    | distinct *\r\n)\r\n| project-away CorrelationId\r\n| extend Details=todynamic(Details)\r\n| sort by TimeGenerated asc\r\n",
        "size": 2,
        "showAnalytics": true,
        "title": "Details for connection {ActivityIdErrors}",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.desktopvirtualization/hostpools",
        "crossComponentResources": [
          "{HostPools}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "TimeGenerated",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "22ch"
              }
            },
            {
              "columnMatch": "Kind",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Checkpoint",
                    "representation": "Normal",
                    "text": "[\"Source\"]"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Error (Deployment)",
                    "representation": "3",
                    "text": "[\"Source\"]"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Error (Service)",
                    "representation": "Important",
                    "text": "[\"Source\"]"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Error",
                    "representation": "3",
                    "text": "[\"Source\"]"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "Blank",
                    "text": "{0}{1}"
                  }
                ],
                "customColumnWidthSetting": "18.7143ch"
              },
              "tooltipFormat": {
                "tooltip": "[\"Kind\"]"
              }
            },
            {
              "columnMatch": "Source",
              "formatter": 5,
              "formatOptions": {
                "customColumnWidthSetting": "13.1429ch"
              }
            },
            {
              "columnMatch": "Name",
              "formatter": 5
            },
            {
              "columnMatch": "Information",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "37.1429ch"
              }
            },
            {
              "columnMatch": "Details",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "46ch"
              }
            },
            {
              "columnMatch": "Parameters",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "CellDetails",
                "linkIsContextBlade": true
              }
            },
            {
              "columnMatch": "CorrelationId",
              "formatter": 1
            }
          ],
          "filter": true
        },
        "sortBy": []
      },
      "conditionalVisibility": {
        "parameterName": "ActivityIdErrors",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "54",
      "name": "DetailsCorrelationUser_Group",
      "styleSettings": {
        "padding": "10px"
      }
    }
  ],
  "fallbackResourceIds": [
    "azure monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}