{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::selected"
            ],
            "value": null,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "NSGs in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'\r\n| distinct Subscription_g, SubscriptionName_s\r\n| project Subscription_g, SubscriptionName_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where Subscription_g in~ ({subscriptions})\r\n| project rgName = tostring(split(Name_s,'/')[0]), Subscription_g\r\n| distinct rgName, Subscription_g\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "vnets",
            "label": "VNet",
            "type": 2,
            "description": "Select one or more virtual networks",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualNetwork'\r\n| where Subscription_g in~ ({subscriptions})\r\n| where tostring(split(Name_s, '/')[0]) in~ ({resourceGroups})\r\n| project vnetId = strcat(Subscription_g, '/', Name_s )\r\n| distinct vnetId\r\n| project vnetName = tostring(split(vnetId, '/')[2])\r\n| project value = vnetName, label = vnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "subnets",
            "label": "Subnet",
            "type": 2,
            "description": "Select one or more subnets",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualSubnetwork'\r\n| where Subscription_g in~ ({subscriptions})\r\n| where tostring(split(Name_s, '/')[0]) in~ ({resourceGroups})\r\n| project subnetId = strcat(Subscription_g, '/', Name_s)\r\n| distinct subnetId\r\n| project subnetName = tostring(split(subnetId, '/')[3])\r\n| project value = subnetName, label = subnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "632f19d9-96f0-40a7-99dc-84046caf1341",
            "version": "KqlParameterItem/1.0",
            "name": "vms",
            "label": "VM",
            "type": 2,
            "description": "Select one or more VMs",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL \r\n| where SubType_s  == 'Topology' and ResourceType == 'NetworkInterface'\r\n| where Subscription_g in~ ({subscriptions})\r\n| extend VirtualMachineNameSplit  = split(VirtualMachine_s, '/')\r\n| where tostring(VirtualMachineNameSplit[0]) in~ ({resourceGroups})\r\n| extend subnetworkSplit = split(Subnetwork_s, '/')            \r\n| where tostring(subnetworkSplit[1]) in~ ({vnets})\r\n| where tostring(subnetworkSplit[2]) in~ ({subnets})\r\n| where isnotempty(tostring(VirtualMachineNameSplit[1]))\r\n| project vmId = strcat(Subscription_g, '/',VirtualMachineNameSplit[0], '/', subnetworkSplit [1], '/', subnetworkSplit[2], '/', VirtualMachineNameSplit[1])\r\n| distinct vmId\r\n| project vmName = tostring(split(vmId, '/')[4])\r\n| project value = vmName, label = vmName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2897635e-45da-4414-aa92-780491a3517d",
            "version": "KqlParameterItem/1.0",
            "name": "ips",
            "label": "IP",
            "type": 2,
            "description": "Select one or more IPs",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s  == 'Topology' and ResourceType == 'NetworkInterface'\r\n| where Subscription_g in~ ({subscriptions})\r\n| extend VirtualMachineNameSplit = split(VirtualMachine_s, '/')\r\n| extend vmName = tostring(VirtualMachineNameSplit[1])\r\n| where tostring(split(Name_s, '/')[0]) in~ ({resourceGroups})\r\n| extend subnetworkSplit = split(Subnetwork_s, '/')\r\n| where tostring(subnetworkSplit[1]) in~ ({vnets})\r\n| where tostring(subnetworkSplit[2]) in~ ({subnets})\r\n| where vmName in~ ({vms})\r\n| where isnotempty(vmName)\r\n| mv-expand privateIP = split(PrivateIPAddresses_s, ' '), publicIP = split(PublicIPAddresses_s, ' ') to typeof(string)\r\n| extend privateIPId = iif(isempty(privateIP), '', strcat(Subscription_g, '/', VirtualMachineNameSplit[0], '/',  subnetworkSplit[1], '/', subnetworkSplit[2], '/', vmName, '/', privateIP))\r\n| extend publicIPId = iif(isempty(publicIP), '', strcat(Subscription_g, '/',VirtualMachineNameSplit[0], '/' , subnetworkSplit[1], '/', subnetworkSplit[2], '/', vmName, '/', publicIP))\r\n| distinct privateIPId, publicIPId\r\n| mv-expand IPId = pack_array(privateIPId, publicIPId) to typeof(string)\r\n| where isnotempty(IPId)\r\n| project IP = tostring(split(IPId, '/')[5])\r\n| project value = IP, label = IP, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let subnetsList = dynamic(['']); AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s) | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0),           BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0),           AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),          BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),          AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0),          BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0),          AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0),          BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0) | extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0),          BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0),          AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0),          BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0),          AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0),          BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0),          AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0),          BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0) | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s) | summarize AllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),              AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),             AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),             AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),             AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)             by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound) | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred | extend FlowCount = max_of(Inbound, Outbound) | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) | extend hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s) | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string) | extend splittedHostEndPoint = split(hostEndPoint, '#') | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2]) | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP) | summarize TotalTraffic = sum(FlowCount) by hostEndPoint | where TotalTraffic > 0 | top 5 by TotalTraffic | join kind=inner( AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s) | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s) | summarize AllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d)  by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,FlowStartTime_t,VM1_s,VM2_s | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound) | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred | extend FlowCount = max_of(Inbound, Outbound) | extend hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)  | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string) | summarize TotalTrafficHourly = sum(FlowCount) by hostEndPoint, bin(FlowStartTime_t, 1h) ) on hostEndPoint | project hostEndPoint, FlowStartTime_t, TotalTrafficHourly | sort by hostEndPoint, FlowStartTime_t",
        "size": 0,
        "aggregation": 2,
        "showAnnotations": true,
        "showAnalytics": true,
        "title": "Time trending chart for top 5 talking hosts",
        "noDataMessage": "No results",
        "timeContext": {
          "durationMs": 86400000
        },
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "FlowStartTime_t",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "FlowStartTime_t",
            "sortOrder": 1
          }
        ],
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/npm-windowssvr#10.10.40.5",
              "color": "redBright"
            },
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/er-labvm01#10.10.40.4",
              "color": "yellow"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.5",
              "color": "green"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.4",
              "color": "blueDark"
            },
            {
              "seriesName": "558f48f5-8789-4a28-b05b-956596d499af#runnersrgac/runnersvm#10.0.0.4",
              "color": "pink"
            }
          ]
        }
      },
      "showPin": true,
      "name": "Time trending chart for top 5 talking hosts"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let subnetsList = dynamic(['']); AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')  | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s) | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s) | summarize AllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d)             by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s, isMaliciousFlow, Subnet1_s, Subnet2_s | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound) | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred | extend FlowCount = max_of(Inbound, Outbound) | extend hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s) | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string) | extend splittedHostEndPoint = split(hostEndPoint, '#') | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2]) | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP) | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s) | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\") | extend AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),           AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0), BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0)  | summarize AllowedInboundFlow = sum(AllowedInboundFlow), BlockedInboundFlow = sum(BlockedInboundFlow),              AllowedOutboundFlow = sum(AllowedOutboundFlow), BlockedOutboundFlow = sum(BlockedOutboundFlow),              AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)), BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),              AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)), BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),              TotalFlow = sum(FlowCount) by IP, VM, Subnet, Subscription | where TotalFlow > 0 | sort by TotalFlow desc | extend TotalInbound = strcat(tostring(AllowedInboundFlow + BlockedInboundFlow), \" (\", tostring(AllowedInboundFlow), \"/\", tostring(BlockedInboundFlow), \")\"),          TotalOutbound =  strcat(tostring(AllowedOutboundFlow + BlockedOutboundFlow), \" (\", tostring(AllowedOutboundFlow), \"/\", tostring(BlockedOutboundFlow), \")\"),          InboundMalicious = strcat(tostring(AllowedInboundMaliciousFlow + BlockedInboundMaliciousFlow), \" (\", tostring(AllowedInboundMaliciousFlow), \"/\", tostring(BlockedInboundMaliciousFlow), \")\"),           OutboundMalicious = strcat(tostring(AllowedOutboundMaliciousFlow + BlockedOutboundMaliciousFlow), \" (\", tostring(AllowedOutboundMaliciousFlow), \"/\", tostring(BlockedOutboundMaliciousFlow), \")\") | project IP, VM, Subnet, Subscription, TotalFlow, TotalInbound, TotalOutbound, InboundMalicious, OutboundMalicious",
        "size": 0,
        "aggregation": 2,
        "showAnnotations": true,
        "showAnalytics": true,
        "title": "Details of top talking hosts",
        "noDataMessage": "No results",
        "timeContext": {
          "durationMs": 86400000
        },
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Subscription",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "TotalFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AllowedInboundFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "BlockedInboundFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AllowedOutboundFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "BlockedOutboundFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AllowedInboundMaliciousFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "BlockedInboundMaliciousFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AllowedOutboundMaliciousFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "BlockedOutboundMaliciousFlow",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Allowed Inbound",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalTraffic",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "$gen_number_TotalFlow_4",
              "sortOrder": 2
            }
          ],
          "labelSettings": [
            {
              "columnId": "IP"
            },
            {
              "columnId": "VM"
            },
            {
              "columnId": "Subnet"
            },
            {
              "columnId": "Subscription"
            },
            {
              "columnId": "TotalFlow",
              "label": "Total Traffic"
            },
            {
              "columnId": "TotalInbound",
              "label": "Total Inbound (allowed/blocked)"
            },
            {
              "columnId": "TotalOutbound",
              "label": "Total Outbound (allowed/blocked)"
            },
            {
              "columnId": "InboundMalicious",
              "label": "Inbound Malicious (allowed/blocked)"
            },
            {
              "columnId": "OutboundMalicious",
              "label": "Outbound Malicious (allowed/blocked)"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "$gen_number_TotalFlow_4",
            "sortOrder": 2
          }
        ],
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "IP",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "TotalFlow",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/npm-windowssvr#10.10.40.5",
              "color": "redBright"
            },
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/er-labvm01#10.10.40.4",
              "color": "yellow"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.5",
              "color": "green"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.4",
              "color": "blueDark"
            },
            {
              "seriesName": "558f48f5-8789-4a28-b05b-956596d499af#runnersrgac/runnersvm#10.0.0.4",
              "color": "pink"
            }
          ]
        },
        "mapSettings": {
          "locInfo": "LatLong",
          "sizeSettings": "TotalFlow",
          "sizeAggregation": "Sum",
          "legendMetric": "TotalFlow",
          "legendAggregation": "Sum",
          "itemColorSettings": {
            "type": "heatmap",
            "colorAggregation": "Sum",
            "nodeColorField": "TotalFlow",
            "heatmapPalette": "greenRed"
          }
        }
      },
      "showPin": true,
      "name": "Details of top talking hosts"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}