{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "042c4aca-7514-4fe0-852a-55bf59b7f0ab",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalFlowlogCheck",
            "type": 1,
            "description": "Time scope filter for flowlog",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "id": "53f8d464-cc4e-4906-86e7-3c90800ed609",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalTopologyCheck",
            "type": 1,
            "description": "Time scope filter for topology",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalBothCheck",
            "type": 1,
            "description": "Time scope filter for flowlog and topology",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))), TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))))"
                }
              }
            ],
            "id": "2ac37ba0-68aa-42e8-a0e2-a1b42f357b56"
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": null,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'\r\n| distinct Subscription_g, SubscriptionName_s\r\n| project Subscription_g, SubscriptionName_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a16ef52-9f5d-459b-987e-0b75297860ad",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionsCheck",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions}))"
                }
              }
            ]
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where {subscriptionsCheck}\r\n| project rgName = tostring(split(Name_s,'/')[0]), Subscription_g\r\n| distinct rgName, Subscription_g\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "96e71097-a8c9-4b64-903c-26a51bac174c",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupsCheck",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))"
                }
              }
            ]
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "vnets",
            "label": "VNet",
            "type": 2,
            "description": "Select one or more virtual networks",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualNetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck} \r\n| project vnetId = strcat(Subscription_g, '/', Name_s )\r\n| distinct vnetId\r\n| project vnetName = tostring(split(vnetId, '/')[2])\r\n| project value = vnetName, label = vnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "subnets",
            "label": "Subnet",
            "type": 2,
            "description": "Select one or more subnets",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualSubnetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| project subnetId = strcat(Subscription_g, '/', Name_s)\r\n| distinct subnetId\r\n| project subnetName = tostring(split(subnetId, '/')[3])\r\n| project value = subnetName, label = subnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "553b6a62-5413-4f6f-b50f-bd2db686aa33",
            "version": "KqlParameterItem/1.0",
            "name": "portRange",
            "label": "Ports range",
            "type": 2,
            "description": "Select one or more ports range",
            "isRequired": true,
            "multiSelect": true,
            "quote": "",
            "delimiter": ",",
            "query": "datatable (id: int)\r\n[0,\r\n1,\r\n2,\r\n3,\r\n4,\r\n5,\r\n6,\r\n7,\r\n8,\r\n9,\r\n10,\r\n11,\r\n12,\r\n13,\r\n14,\r\n15,\r\n16,\r\n17,\r\n18,\r\n19,\r\n20,\r\n21,\r\n22,\r\n23,\r\n24,\r\n25,\r\n26,\r\n27,\r\n28,\r\n29,\r\n30,\r\n31,\r\n32,\r\n33,\r\n34,\r\n35,\r\n36,\r\n37,\r\n38,\r\n39,\r\n40,\r\n41,\r\n42,\r\n43,\r\n44,\r\n45,\r\n46,\r\n47,\r\n48,\r\n49,\r\n50,\r\n51,\r\n52,\r\n53,\r\n54,\r\n55,\r\n56,\r\n57,\r\n58,\r\n59,\r\n60,\r\n61,\r\n62,\r\n63,\r\n64,\r\n65]\r\n| project value = strcat(tostring(id*1000), '-', tostring(min_of(65535, id*1000+999))), label = strcat(tostring(id*1000), '-', tostring(min_of(65535, id*1000+999))), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d3fdad7c-ad8e-4dc2-a63b-152ab1fe1089",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionCheckLine",
            "type": 1,
            "description": "Subscription filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "subscriptions",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "subscriptions",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where SrcSubscription_g in~ ({subscriptions}) or DestSubscription_g in~ ({subscriptions})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupCheckLine",
            "type": 1,
            "description": "Resource group filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "resourceGroups",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "resourceGroups",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "da86b1fc-68b0-4ff6-a943-844c7129c533"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "vnetCheckLine",
            "type": 1,
            "description": "Vnet filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "vnets",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "vnets",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "62bbfd85-d61e-4e0a-ae87-76f18f88329e"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "subnetCheckLine",
            "type": 1,
            "description": "Subnet filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "subnets",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "subnets",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "c98d5497-b386-462c-8b81-998d8d10f5f4"
          },
          {
            "id": "00c4e41b-02a9-439e-962f-86137d0d6dcc",
            "version": "KqlParameterItem/1.0",
            "name": "portRangeCheckLine",
            "type": 1,
            "description": "Port range filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "portRange",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "portRange",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| extend portRangeList = split(\"{portRange}\", ',') | mv-expand portRangeList to typeof(string) | extend portRangeBegin = toint(split(portRangeList, '-')[0]), portRangeEnd = toint(split(portRangeList, '-')[1]) | where portRangeBegin <= portToCheck and portToCheck <= portRangeEnd"
                }
              }
            ]
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Filters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "c973b119-cf4d-462f-b450-d7e5f78add4d",
            "version": "KqlParameterItem/1.0",
            "name": "thousandUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "K"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a2ca6b76-958e-4362-8fa9-937954ce8c7d",
            "version": "KqlParameterItem/1.0",
            "name": "millionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "M"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "2187717d-ce29-4f0b-a3cc-b7c559f34092",
            "version": "KqlParameterItem/1.0",
            "name": "billionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "B"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "fd412543-04e8-4545-bbd0-0531b02536c2",
            "version": "KqlParameterItem/1.0",
            "name": "trillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "t"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "6a6400a0-c770-4f09-b760-d1deaf8a4973",
            "version": "KqlParameterItem/1.0",
            "name": "quadrillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "q"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Constants"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Time trending chart for top 5 L7 protocols"
      },
      "name": "text - 8"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "8a4902b7-b0a6-4949-92b4-910cef05f453",
            "version": "KqlParameterItem/1.0",
            "name": "sortUnit",
            "label": "Units in",
            "type": 2,
            "description": "This unit will be used to get the top 5 IPs.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 3"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "8340f941-9688-4c62-9074-543636f115cb",
            "version": "KqlParameterItem/1.0",
            "name": "top5Protocols",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// dropdown\r\nNTANetAnalytics_CL\r\n| where {timeIntervalFlowlogCheck}\r\n| where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n// filter begins\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n{subscriptionCheckLine}\r\n| extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n{resourceGroupCheckLine}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n{vnetCheckLine}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n{subnetCheckLine}\r\n| extend portToCheck = DestPort_d\r\n{portRangeCheckLine}\r\n// filter ends\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\nAllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\nAllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\nAllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\nAllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\nAllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\nAllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\nAllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIP_s, SrcSubscription_g, SrcNIC_s, DestIP_s, DestSubscription_g, DestNIC_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion, L7Protocol_s\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| summarize \r\ntotalInbound = sum(Inbound),\r\ntotalBytes = sum(BytesCount), InboundBytesAtDest = sum(InboundBytesAtDest), OutboundBytesAtDest = sum(OutboundBytesAtDest),\r\ntotalPackets = sum(PacketsCount), InboundPacketsAtDest = sum(InboundPacketsAtDest), OutboundPacketsAtDest = sum(OutboundPacketsAtDest)\r\nby L7Protocol_s, DestPort_d\r\n| extend TotalTraffic = iff('{sortUnit:value}' =~ 'bytes', totalBytes, iff('{sortUnit:value}' =~ 'packets', totalPackets, tolong(totalInbound)))\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| project value =  toint(DestPort_d), label = strcat(L7Protocol_s, '#', toint(DestPort_d)), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a050abd6-c366-4fc9-b1aa-f309acafa79c",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "parameters - 18"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// chart\r\nNTANetAnalytics_CL\r\n| where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n// filter begins\r\n| where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n{subscriptionCheckLine}\r\n| extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n{resourceGroupCheckLine}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n{vnetCheckLine}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n{subnetCheckLine}\r\n| extend protocolInfo = strcat(toint(DestPort_d))\r\n| where protocolInfo in ({top5Protocols})\r\n// filter ends\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0),\r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\nAllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\nAllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\nAllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\nAllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\nAllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\nAllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\nAllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIP_s, SrcSubscription_g, SrcNIC_s, DestIP_s, DestSubscription_g, DestNIC_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion, FlowStartTime_t, protocolInfo\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| summarize totalInbound = sum(iff('{sortUnit:value}' =~ 'bytes', InboundBytesAtDest, iff('{sortUnit:value}' =~ 'packets', InboundPacketsAtDest, tolong(Inbound)))) by protocolInfo, todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})",
        "size": 0,
        "aggregation": 2,
        "showAnnotations": true,
        "showAnalytics": true,
        "noDataMessage": "No data to display",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "FlowStartTime_t",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "FlowStartTime_t",
            "sortOrder": 1
          }
        ],
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/npm-windowssvr#10.10.40.5",
              "color": "redBright"
            },
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/er-labvm01#10.10.40.4",
              "color": "yellow"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.5",
              "color": "green"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.4",
              "color": "blueDark"
            },
            {
              "seriesName": "558f48f5-8789-4a28-b05b-956596d499af#runnersrgac/runnersvm#10.0.0.4",
              "color": "pink"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "top5Protocols",
        "comparison": "isNotEqualTo"
      },
      "showPin": true,
      "name": "Time trending chart for top 5 L7 protocols"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top 5 L7 protocols"
      },
      "name": "text - 9"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "3df6c05c-9526-4072-842e-519cf239bf35",
            "version": "KqlParameterItem/1.0",
            "name": "displayUnit",
            "label": "Units in",
            "type": 2,
            "description": "The traffic will be shown in this unit.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 3 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' {thousandUnit}'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' {millionUnit}'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' {billionUnit}'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' {trillionUnit}'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' {quadrillionUnit}'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    | extend portToCheck = DestPort_d\r\n    {portRangeCheckLine}\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\n    AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by SrcIP_s, SrcSubscription_g, SrcNIC_s, DestIP_s, DestSubscription_g, DestNIC_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion, isMaliciousFlow, L7Protocol_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize \r\n    //\r\n    totalAllowedInbound = sum(AllowedInbound), \r\n    totalBlockedInbound = sum(BlockedInbound), \r\n    totalInboundMalicious = sum(iif(isMaliciousFlow, tolong(Inbound), 0)), \r\n    totalAllowedInboundMalicious = sum(iif(isMaliciousFlow, tolong(AllowedInbound), 0)), \r\n    totalBlockededInboundMalicious = sum(iif(isMaliciousFlow, tolong(BlockedInbound), 0)), \r\n    totalInbound = sum(Inbound),\r\n    TotalFlow = sum(FlowCount),\r\n    //\r\n    totalAllowedInboundBytes = sum(AllowedInboundBytesAtDest), \r\n    totalBlockedInboundBytes = sum(BlockedInboundBytesAtDest), \r\n    totalInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(InboundBytesAtDest), 0)), \r\n    totalAllowedInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(AllowedInboundBytesAtDest), 0)), \r\n    totalBlockededInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(BlockedInboundBytesAtDest), 0)), \r\n    totalAllowedOutboundBytes = sum(AllowedOutboundBytesAtDest), \r\n    totalBlockedOutboundBytes = sum(BlockedOutboundBytesAtDest), \r\n    totalOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(OutboundBytesAtDest), 0)), \r\n    totalAllowedOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(AllowedOutboundBytesAtDest), 0)), \r\n    totalBlockededOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(BlockedOutboundBytesAtDest), 0)), \r\n    totalInboundBytesAtDest = sum(InboundBytesAtDest), \r\n    totalOutboundBytesAtDest = sum(OutboundBytesAtDest),\r\n    TotalBytes = sum(BytesCount),\r\n    //\r\n    totalAllowedInboundPackets = sum(AllowedInboundPacketsAtDest), \r\n    totalBlockedInboundPackets = sum(BlockedInboundPacketsAtDest), \r\n    totalInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(InboundPacketsAtDest), 0)), \r\n    totalAllowedInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(AllowedInboundPacketsAtDest), 0)), \r\n    totalBlockededInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(BlockedInboundPacketsAtDest), 0)), \r\n    totalAllowedOutboundPackets = sum(AllowedOutboundPacketsAtDest), \r\n    totalBlockedOutboundPackets = sum(BlockedOutboundPacketsAtDest), \r\n    totalOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(OutboundPacketsAtDest), 0)), \r\n    totalAllowedOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(AllowedOutboundPacketsAtDest), 0)), \r\n    totalBlockededOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(BlockedOutboundPacketsAtDest), 0)), \r\n    totalInboundPackets = sum(InboundPacketsAtDest), \r\n    totalOutboundPackets = sum(OutboundPacketsAtDest),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by L7Protocol_s, DestPort_d\r\n    | extend TotalTraffic = iff('{sortUnit:value}' =~ 'bytes', TotalBytes, iff('{sortUnit:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TotalTraffic > 0\r\n    | project L7Protocol_s, DestPort_d, protocolInfo = strcat(L7Protocol_s, '#', toint(DestPort_d)), trafficForSorting = TotalTraffic,\r\n    totalInbound = iff('{displayUnit:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalOutboundBytesAtDest, 3), ' Ingress : ', format_bytes(totalInboundBytesAtDest, 3)), iff('{displayUnit:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalInboundPackets, 3)), ValueWithUnit(totalInbound, 3))),\r\n    allowedInbound = iff('{displayUnit:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalAllowedOutboundBytes, 3), ' Ingress : ', format_bytes(totalAllowedInboundBytes, 3)), iff('{displayUnit:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalAllowedOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalAllowedInboundPackets, 3)), ValueWithUnit(totalAllowedInbound, 3))),\r\n    blockedInbound = iff('{displayUnit:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalBlockedOutboundBytes, 3), ' Ingress : ', format_bytes(totalBlockedInboundBytes, 3)), iff('{displayUnit:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalBlockedOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalBlockedInboundPackets, 3)), ValueWithUnit(totalBlockedInbound, 3))),\r\n    totalMalicious = iff('{displayUnit:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalInboundMaliciousBytes, 3)), iff('{displayUnit:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalInboundMaliciousPackets, 3)), ValueWithUnit(totalInboundMalicious, 3))),\r\n    allowedMalicious = iff('{displayUnit:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalAllowedOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalAllowedInboundMaliciousBytes, 3)), iff('{displayUnit:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalAllowedOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalAllowedInboundMaliciousPackets, 3)), ValueWithUnit(totalAllowedInboundMalicious, 3))),\r\n    blockedMalicious = iff('{displayUnit:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalBlockededOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalBlockededInboundMaliciousBytes, 3)), iff('{displayUnit:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalBlockededOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalBlockededInboundMaliciousPackets, 3)), ValueWithUnit(totalBlockededInboundMalicious, 3)));\r\nlet topTalking = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    | extend portToCheck = DestPort_d\r\n    {portRangeCheckLine}\r\n    // filter ends\r\n    | extend protocolInfo = strcat(L7Protocol_s, '#', toint(DestPort_d))\r\n    | where isnotempty(DestVM_s)\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\n    AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by SrcIP_s, SrcSubscription_g, SrcNIC_s, DestIP_s, DestSubscription_g, DestNIC_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion, DestVM_s, protocolInfo\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize totalTraffic = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by host = strcat(DestSubscription_g, '#', DestVM_s, '#', DestIP_s), protocolInfo\r\n    | top-nested of protocolInfo by max(1), top-nested 3 of host by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(host, '#')[2],' (',split(split(host, '#')[1], '/')[1],')')), ', ') by protocolInfo\r\n    | project protocolInfo, topTalkingPairs;\r\nlet topMalicious = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    | extend portToCheck = DestPort_d\r\n    {portRangeCheckLine}\r\n    // filter ends\r\n    | extend protocolInfo = strcat(L7Protocol_s, '#', toint(DestPort_d))\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | extend MaliciousIp = iif(isnotempty(DestVM_s), SrcIP_s, DestIP_s)\r\n    | summarize totalMalicious = iff('{sortUnit:value}' =~ 'bytes', sum(BytesDestToSrc_d + BytesSrcToDest_d), iff('{sortUnit:value}' =~ 'packets', sum(PacketsDestToSrc_d + PacketsSrcToDest_d), sum(AllowedOutFlows_d + DeniedOutFlows_d + AllowedInFlows_d + DeniedInFlows_d)))\r\n    by MaliciousIp, Country_s, protocolInfo\r\n    | top-nested of protocolInfo by max(1), top-nested 3 of partnerInfo = strcat(MaliciousIp, '#', Country_s) by max(totalMalicious)\r\n    | project protocolInfo, partnerInfo\r\n    | summarize topMaliciousPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by protocolInfo\r\n    | project protocolInfo, topMaliciousPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.protocolInfo == $right.protocolInfo\r\n| join kind=leftouter topMalicious on $left.protocolInfo == $right.protocolInfo\r\n| sort by trafficForSorting desc\r\n| project L7Protocol_s, DestPort_d, topTalkingPairs, topMaliciousPairs, totalInbound, allowedInbound, blockedInbound, totalMalicious, allowedMalicious, blockedMalicious",
        "size": 0,
        "showAnalytics": true,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "L7Protocol_s",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "4%"
              }
            },
            {
              "columnMatch": "DestPort_d",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "4%"
              }
            },
            {
              "columnMatch": "topTalkingPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "18%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "topMaliciousPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "8%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "totalInbound",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "allowedInbound",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "blockedInbound",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalMalicious",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "allowedMalicious",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "blockedMalicious",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "protocolInfo",
              "formatter": 5
            },
            {
              "columnMatch": "trafficForSorting",
              "formatter": 5
            },
            {
              "columnMatch": "protocolInfo2",
              "formatter": 5
            },
            {
              "columnMatch": "protocolInfo1",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "L7Protocol_s",
              "label": "L7 Protocol"
            },
            {
              "columnId": "DestPort_d",
              "label": "L7 protocols/dst port"
            },
            {
              "columnId": "topTalkingPairs",
              "label": "Top IPs receiving traffic on Port"
            },
            {
              "columnId": "topMaliciousPairs",
              "label": "Top malicious IP"
            },
            {
              "columnId": "totalInbound",
              "label": "Total inbound"
            },
            {
              "columnId": "allowedInbound",
              "label": "Allowed inbound"
            },
            {
              "columnId": "blockedInbound",
              "label": "Blocked inbound"
            },
            {
              "columnId": "totalMalicious",
              "label": "Total malicious"
            },
            {
              "columnId": "allowedMalicious",
              "label": "Allowed malicious"
            },
            {
              "columnId": "blockedMalicious",
              "label": "Blocked malicious"
            }
          ]
        }
      },
      "showPin": true,
      "name": "Details of top 5 L7 protocols"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}