{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "042c4aca-7514-4fe0-852a-55bf59b7f0ab",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalFlowlogCheck",
            "type": 1,
            "description": "Time scope filter for flowlog",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "id": "53f8d464-cc4e-4906-86e7-3c90800ed609",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalTopologyCheck",
            "type": 1,
            "description": "Time scope filter for topology",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalBothCheck",
            "type": 1,
            "description": "Time scope filter for flowlog and topology",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))), TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))))"
                }
              }
            ],
            "id": "2789eac4-1d01-4930-9db6-e1ff84200cba"
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": null,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'\r\n| distinct Subscription_g, SubscriptionName_s\r\n| project Subscription_g, SubscriptionName_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a16ef52-9f5d-459b-987e-0b75297860ad",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionsCheck",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions}))"
                }
              }
            ]
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where {subscriptionsCheck}\r\n| project rgName = tostring(split(Name_s,'/')[0]), Subscription_g\r\n| distinct rgName, Subscription_g\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "96e71097-a8c9-4b64-903c-26a51bac174c",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupsCheck",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))"
                }
              }
            ]
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "vnets",
            "label": "VNet",
            "type": 2,
            "description": "Select one or more VNet",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL \r\n| where {timeIntervalTopologyCheck}\r\n| where ResourceType == 'VirtualNetwork' and DiscoveryRegion_s == Region_s\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| distinct Name_s\r\n| project value = split(Name_s, '/')[1], label = split(Name_s, '/')[1], selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "resourceRules",
            "label": "Rule name",
            "type": 2,
            "description": "Select one or more rules",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL \r\n| where {timeIntervalTopologyCheck}\r\n| where ResourceType == 'VirtualNetwork' and DiscoveryRegion_s == Region_s\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| where \"{vnets}\" == \"'*'\" or tostring(split(Name_s, '/')[1]) in~ ({vnets})\r\n| distinct Name_s\r\n| extend fullRuleName = strcat(split(Name_s, '/')[1], '/', split(Name_s, '/')[2])\r\n| project value = split(Name_s, '/')[2], label = fullRuleName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d3fdad7c-ad8e-4dc2-a63b-152ab1fe1089",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionCheckLine",
            "type": 1,
            "description": "Subscription filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "subscriptions",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "subscriptions",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where SrcSubscription_g in~ ({subscriptions}) or DestSubscription_g in~ ({subscriptions})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupCheckLine",
            "type": 1,
            "description": "Resource group filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "resourceGroups",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "resourceGroups",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "da86b1fc-68b0-4ff6-a943-844c7129c533"
          },
          {
            "id": "26ae65fd-6405-4a9b-bc10-b3da092ddafc",
            "version": "KqlParameterItem/1.0",
            "name": "vnetCheckLine",
            "type": 1,
            "description": "VNet filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "vnets",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "vnets",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where vnetToCheck in~ ({vnets})"
                }
              }
            ]
          },
          {
            "id": "9dac5953-bf90-4160-89ac-11469af8eada",
            "version": "KqlParameterItem/1.0",
            "name": "resourceRuleCheckLine",
            "type": 1,
            "description": "Resource rule filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "resourceRules",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "resourceRules",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where resourceRuleToCheck in~ ({resourceRules})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Checks"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "c973b119-cf4d-462f-b450-d7e5f78add4d",
            "version": "KqlParameterItem/1.0",
            "name": "thousandUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "K"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a2ca6b76-958e-4362-8fa9-937954ce8c7d",
            "version": "KqlParameterItem/1.0",
            "name": "millionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "M"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "2187717d-ce29-4f0b-a3cc-b7c559f34092",
            "version": "KqlParameterItem/1.0",
            "name": "billionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "B"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "fd412543-04e8-4545-bbd0-0531b02536c2",
            "version": "KqlParameterItem/1.0",
            "name": "trillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "t"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "6a6400a0-c770-4f09-b760-d1deaf8a4973",
            "version": "KqlParameterItem/1.0",
            "name": "quadrillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "q"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Constants"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "fd9e1ff9-a35c-4a95-845d-d8c6ed101a73",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "parameters - 8"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "a4684f60-090d-49b2-87ed-6fb2418b2627",
            "cellValue": "tabSelected",
            "linkTarget": "parameter",
            "linkLabel": "VNet",
            "subTarget": "0",
            "style": "link"
          },
          {
            "id": "01204408-fc23-4863-96d5-f20efc14f5c5",
            "cellValue": "tabSelected",
            "linkTarget": "parameter",
            "linkLabel": "Resource Rules",
            "subTarget": "1",
            "style": "link"
          }
        ]
      },
      "name": "links - 7"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Time trending chart for hits of VNets"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "text - 16"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "665a3061-2f01-48b6-bf5d-446ec203607a",
            "version": "KqlParameterItem/1.0",
            "name": "SortUnit",
            "label": "Units in ",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 1"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "eac5273f-d0b5-4f33-93e9-a68e6989dc65",
            "version": "KqlParameterItem/1.0",
            "name": "top5VNets",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTANetAnalytics_CL\r\n| where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n// filter begins\r\n| where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n{subscriptionCheckLine}\r\n| extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n{resourceGroupCheckLine}\r\n| extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n| extend VNetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n{vnetCheckLine}\r\n{resourceRuleCheckLine}\r\n// filter ends\r\n| extend traffic = iff('{SortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{SortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n| summarize TotalTraffic  = sum(traffic) by TargetResourceId_s\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| project value = TargetResourceId_s, label = TargetResourceId_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "-1"
      },
      "name": "parameters - 2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "NTANetAnalytics_CL\r\n| where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n// filter begins\r\n| where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n{subscriptionCheckLine}\r\n| extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n{resourceGroupCheckLine}\r\n| where TargetResourceId_s in~ ({top5VNets})\r\n// filter ends\r\n| extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n| extend TargetResourceName = tostring(split(TargetResourceId_s,\"/\")[2])\r\n| summarize sum(iff('{SortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{SortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by TargetResourceName, todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "No data to display",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "top5VNets",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "vnets",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "resourceRules",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Time trending chart for hits of VNets"
    },
    {
      "type": 1,
      "content": {
        "json": "No data to display",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "top5VNets",
          "comparison": "isEqualTo"
        }
      ],
      "name": "No data to display - VNets chart"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top VNets"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "text - 15"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "af7d8004-a964-45f8-9639-6e15d9e7273e",
            "version": "KqlParameterItem/1.0",
            "name": "DisplayUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Units in "
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 11 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' {thousandUnit}'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' {millionUnit}'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' {billionUnit}'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' {trillionUnit}'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' {quadrillionUnit}'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'Denied')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection_s == 'Inbound' and FlowStatus_s == 'Allowed', tolong(AllowedInFlows_d), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection_s == 'Inbound' and FlowStatus_s == 'Denied', tolong(DeniedInFlows_d), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection_s == 'Outbound' and FlowStatus_s == 'Allowed', tolong(AllowedOutFlows_d), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection_s == 'Outbound' and FlowStatus_s == 'Denied', tolong(DeniedOutFlows_d), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(BytesDestToSrc_d), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(BytesDestToSrc_d), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(BytesSrcToDest_d), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(BytesSrcToDest_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(PacketsDestToSrc_d), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(PacketsDestToSrc_d), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(PacketsSrcToDest_d), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(PacketsSrcToDest_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{SortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{SortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n    | summarize \r\n    totalAllowedInboundFlows = sum(AllowedInbound), \r\n    totalBlockedInboundFlows = sum(BlockedInbound), \r\n    totalAllowedOutboundFlows = sum(AllowedOutbound), \r\n    totalBlockedOutboundFlows = sum(BlockedOutbound), \r\n    totalMaliciousAllowedInboundFlows = sum(MaliciousAllowedInboundFlows), \r\n    totalMaliciousBlockedInboundFlows = sum(MaliciousBlockedInboundFlows), \r\n    totalMaliciousAllowedOutboundFlows = sum(MaliciousAllowedOutboundFlows), \r\n    totalMaliciousBlockedOutboundFlows = sum(MaliciousBlockedOutboundFlows),\r\n    //\r\n    totalAllowedInboundBytes = sum(AllowedInboundBytes), \r\n    totalBlockedInboundBytes = sum(BlockedInboundBytes), \r\n    totalAllowedOutboundBytes = sum(AllowedOutboundBytes), \r\n    totalBlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    totalMaliciousAllowedInboundBytes = sum(MaliciousAllowedInboundBytes), \r\n    totalMaliciousBlockedInboundBytes= sum(MaliciousBlockedInboundBytes), \r\n    totalMaliciousAllowedOutboundBytes = sum(MaliciousAllowedOutboundBytes), \r\n    totalMaliciousBlockedOutboundBytes = sum(MaliciousBlockedOutboundBytes),\r\n    //\r\n    totalAllowedInboundPackets = sum(AllowedInboundPackets), \r\n    totalBlockedInboundPackets = sum(BlockedInboundPackets), \r\n    totalAllowedOutboundPackets = sum(AllowedOutboundPackets), \r\n    totalBlockedOutboundPackets = sum(BlockedOutboundPackets), \r\n    totalMaliciousAllowedInboundPackets = sum(MaliciousAllowedInboundPackets), \r\n    totalMaliciousBlockedInboundPackets = sum(MaliciousBlockedInboundPackets), \r\n    totalMaliciousAllowedOutboundPackets = sum(MaliciousAllowedOutboundPackets), \r\n    totalMaliciousBlockedOutboundPackets = sum(MaliciousBlockedOutboundPackets),\r\n    TotalTraffic  = sum(traffic)\r\n    by TargetResourceId_s\r\n    | where TotalTraffic > 0\r\n    | project TargetResourceId_s, trafficForSorting = TotalTraffic,\r\n    vnetName = split(TargetResourceId_s, '/')[2],\r\n    totalHits = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(TotalTraffic, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(TotalTraffic, 3), ValueWithUnit(TotalTraffic, 3))),\r\n    totalInboundAllowed = iff('{DisplayUnit:value}' =~ 'bytes', totalAllowedInboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalAllowedInboundPackets, totalAllowedInboundFlows)),\r\n    totalInboundBlocked = iff('{DisplayUnit:value}' =~ 'bytes', totalBlockedInboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalBlockedInboundPackets, totalBlockedInboundFlows)),\r\n    totalInbound = iff('{DisplayUnit:value}' =~ 'bytes', totalAllowedInboundBytes+totalBlockedInboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalAllowedInboundPackets+totalBlockedInboundPackets, totalAllowedInboundFlows+totalBlockedInboundFlows)),\r\n    totalInboundAllowedBenign = iff('{DisplayUnit:value}' =~ 'bytes', totalAllowedInboundBytes-totalMaliciousAllowedInboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalAllowedInboundPackets-totalMaliciousAllowedInboundPackets, totalAllowedInboundFlows-totalMaliciousAllowedInboundFlows)),\r\n    totalInboundAllowedMalicious = iff('{DisplayUnit:value}' =~ 'bytes', totalMaliciousAllowedInboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalMaliciousAllowedInboundPackets, totalMaliciousAllowedInboundFlows)),\r\n    totalInboundBlockedBenign = iff('{DisplayUnit:value}' =~ 'bytes', totalBlockedInboundBytes-totalMaliciousBlockedInboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalBlockedInboundPackets-totalMaliciousBlockedInboundPackets, totalBlockedInboundFlows-totalMaliciousBlockedInboundFlows)),\r\n    totalInboundBlockedMalicious = iff('{DisplayUnit:value}' =~ 'bytes', totalMaliciousBlockedInboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalMaliciousBlockedInboundPackets, totalMaliciousBlockedInboundFlows)),\r\n    totalOutboundAllowed = iff('{DisplayUnit:value}' =~ 'bytes', totalAllowedOutboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalAllowedOutboundPackets, totalAllowedOutboundFlows)),\r\n    totalOutboundBlocked = iff('{DisplayUnit:value}' =~ 'bytes', totalBlockedOutboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalBlockedOutboundPackets, totalBlockedOutboundFlows)),\r\n    totalOutbound = iff('{DisplayUnit:value}' =~ 'bytes', totalAllowedOutboundBytes+totalBlockedOutboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalAllowedOutboundPackets+totalBlockedOutboundPackets, totalAllowedOutboundFlows+totalBlockedOutboundFlows)),\r\n    totalOutboundAllowedBenign = iff('{DisplayUnit:value}' =~ 'bytes', totalAllowedOutboundBytes-totalMaliciousAllowedOutboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalAllowedOutboundPackets-totalMaliciousAllowedOutboundPackets, totalAllowedOutboundFlows-totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundAllowedMalicious = iff('{DisplayUnit:value}' =~ 'bytes', totalMaliciousAllowedOutboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalMaliciousAllowedOutboundPackets, totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundBlockedBenign = iff('{DisplayUnit:value}' =~ 'bytes', totalBlockedOutboundBytes-totalMaliciousBlockedOutboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalBlockedOutboundPackets-totalMaliciousBlockedOutboundPackets, totalBlockedOutboundFlows-totalMaliciousBlockedOutboundFlows)),\r\n    totalOutboundBlockedMalicious = iff('{DisplayUnit:value}' =~ 'bytes', totalMaliciousBlockedOutboundBytes, iff('{DisplayUnit:value}' =~ 'packets', totalMaliciousBlockedOutboundPackets, totalMaliciousBlockedOutboundFlows))\r\n    | extend\r\n    totalInboundAllowedFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowed, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowed, 3), ValueWithUnit(totalInboundAllowed, 3))),\r\n    totalInboundBlockedFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundBlocked, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlocked, 3), ValueWithUnit(totalInboundBlocked, 3))),\r\n    totalInboundFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalInbound, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInbound, 3), ValueWithUnit(totalInbound, 3))),\r\n    totalInboundAllowedBenignFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowedBenign, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedBenign, 3), ValueWithUnit(totalInboundAllowedBenign, 3))),\r\n    totalInboundAllowedMaliciousFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowedMalicious, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedMalicious, 3), ValueWithUnit(totalInboundAllowedMalicious, 3))),\r\n    totalInboundBlockedBenignFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundBlockedBenign, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedBenign, 3), ValueWithUnit(totalInboundBlockedBenign, 3))),\r\n    totalInboundBlockedMaliciousFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundBlockedMalicious, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedMalicious, 3), ValueWithUnit(totalInboundBlockedMalicious, 3))),\r\n    totalOutboundAllowedFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowed, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowed, 3), ValueWithUnit(totalOutboundAllowed, 3))),\r\n    totalOutboundBlockedFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlocked, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlocked, 3), ValueWithUnit(totalOutboundBlocked, 3))),\r\n    totalOutboundFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalOutbound, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutbound, 3), ValueWithUnit(totalOutbound, 3))),\r\n    totalOutboundAllowedBenignFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowedBenign, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedBenign, 3), ValueWithUnit(totalOutboundAllowedBenign, 3))),\r\n    totalOutboundAllowedMaliciousFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowedMalicious, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedMalicious, 3), ValueWithUnit(totalOutboundAllowedMalicious, 3))),\r\n    totalOutboundBlockedBenignFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlockedBenign, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedBenign, 3), ValueWithUnit(totalOutboundBlockedBenign, 3))),\r\n    totalOutboundBlockedMaliciousFormatted = iff('{DisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlockedMalicious, 3), iff('{DisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedMalicious, 3), ValueWithUnit(totalOutboundBlockedMalicious, 3)));\r\n// -----\r\nlet chatTable = NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend flowCount = tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d), byteCount = tolong(BytesDestToSrc_d + BytesSrcToDest_d), packetCount = tolong(PacketsDestToSrc_d + PacketsSrcToDest_d)\r\n    | extend SourceHost = iif(isnotempty(SrcVM_s), strcat(SrcSubscription_g, '/', SrcVM_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | extend DestinationHost = iif(isnotempty(DestVM_s), strcat(DestSubscription_g, '/', DestVM_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, TargetResourceId_s;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nlet topTalkingTable =\r\n    chatTableWithRownumber\r\n    | join kind = leftouter (chatTableWithRownumber)\r\n    on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.TargetResourceId_s == $right.TargetResourceId_s\r\n    | where isnull(rownHash1) or (rownHash < rownHash1)\r\n    | extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n    | extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n    | extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n    | project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{SortUnit:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{SortUnit:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), TargetResourceId_s\r\n    | top-nested of TargetResourceId_s by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by TargetResourceId_s\r\n    | project TargetResourceId_s, topTalkingPairs;\r\n// -----\r\nlet TopRules = NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | summarize totalHits = sum(iff('{SortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{SortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by ACLRule_s, TargetResourceId_s\r\n    | top-nested of TargetResourceId_s by max(1), top-nested 3 of ACLRule_s by max(totalHits)\r\n    | extend RuleId = strcat(TargetResourceId_s, '/', ACLRule_s);\r\nlet PriorityTable = NTATopologyDetails_CL \r\n    | where ResourceType == 'VirtualNetwork'\r\n    | project RuleId = strcat(Subscription_g, '/', Name_s), Priority_d\r\n    | distinct RuleId, Priority_d;\r\nlet topRulesTable = \r\n    TopRules\r\n    | join kind=leftouter PriorityTable on ($left.RuleId == $right.RuleId)\r\n    | summarize topRules = strcat_array(make_list(strcat(ACLRule_s, '(', tolong(Priority_d), ')')), ', ') by TargetResourceId_s\r\n    | project TargetResourceId_s, topRules;\r\n// -----\r\nlet topMaliciousTable = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(DestVM_s), DestIP_s, SrcIP_s)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(DestVM_s), strcat(DestSubscription_g, '/', DestVM_s), strcat(SrcSubscription_g, '/', SrcVM_s))\r\n    | summarize totalMalicious = sum(iff('{SortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{SortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, TargetResourceId_s\r\n    | top-nested of TargetResourceId_s by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n    | summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by TargetResourceId_s\r\n    | project TargetResourceId_s, topIpInfo;\r\n// -----\r\ncommon\r\n| join kind=leftouter topTalkingTable on $left.TargetResourceId_s == $right.TargetResourceId_s\r\n| join kind=leftouter topRulesTable on $left.TargetResourceId_s == $right.TargetResourceId_s\r\n| join kind=leftouter topMaliciousTable on $left.TargetResourceId_s == $right.TargetResourceId_s\r\n| sort by trafficForSorting desc\r\n| project TargetResourceId_s, vnetName, totalHits, totalInboundAllowed, totalInboundBlocked, totalInbound, totalInboundAllowedBenign, totalInboundAllowedMalicious, totalInboundBlockedBenign, totalInboundBlockedMalicious, totalOutboundAllowed, totalOutboundBlocked, totalOutbound, totalOutboundAllowedBenign, totalOutboundAllowedMalicious, totalOutboundBlockedBenign, totalOutboundBlockedMalicious, totalInboundAllowedFormatted, totalInboundBlockedFormatted, totalInboundFormatted, totalInboundAllowedBenignFormatted, totalInboundAllowedMaliciousFormatted, totalInboundBlockedBenignFormatted, totalInboundBlockedMaliciousFormatted, totalOutboundAllowedFormatted, totalOutboundBlockedFormatted, totalOutboundFormatted, totalOutboundAllowedBenignFormatted, totalOutboundAllowedMaliciousFormatted, totalOutboundBlockedBenignFormatted, totalOutboundBlockedMaliciousFormatted, topTalkingPairs, topRules, topIpInfo\r\n| project  vnetName, topRules, topTalkingPairs, topIpInfo, totalHits, totalInbound, totalInboundAllowed, totalInboundBlocked, totalInboundAllowedBenign, totalInboundAllowedMalicious, totalInboundBlockedBenign, totalInboundBlockedMalicious, totalOutbound, totalOutboundAllowed, totalOutboundBlocked, totalOutboundAllowedBenign, totalOutboundAllowedMalicious, totalOutboundBlockedBenign, totalOutboundBlockedMalicious, totalInboundAllowedFormatted, totalInboundBlockedFormatted, totalInboundFormatted, totalInboundAllowedBenignFormatted, totalInboundAllowedMaliciousFormatted, totalInboundBlockedBenignFormatted, totalInboundBlockedMaliciousFormatted, totalOutboundAllowedFormatted, totalOutboundBlockedFormatted, totalOutboundFormatted, totalOutboundAllowedBenignFormatted, totalOutboundAllowedMaliciousFormatted, totalOutboundBlockedBenignFormatted, totalOutboundBlockedMaliciousFormatted\r\n",
        "size": 0,
        "showAnalytics": true,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "vnetName",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topRules",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topTalkingPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "topIpInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "totalHits",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "5%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "totalInbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundFormatted\"] ([\"totalInboundAllowedFormatted\"]/[\"totalInboundBlockedFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "totalInboundAllowed",
                      "color": "blue"
                    },
                    {
                      "columnName": "totalInboundBlocked",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalInboundAllowed",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundAllowedBenignFormatted\"]/[\"totalInboundAllowedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "totalInboundAllowedBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "totalInboundAllowedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalInboundBlocked",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundBlockedBenignFormatted\"]/[\"totalInboundBlockedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "totalInboundBlockedBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "totalInboundBlockedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalInboundAllowedBenign",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedBenign",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundFormatted\"] ([\"totalOutboundAllowedFormatted\"]/[\"totalOutboundBlockedFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "totalOutboundAllowed",
                      "color": "blue"
                    },
                    {
                      "columnName": "totalOutboundBlocked",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalOutboundAllowed",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundAllowedBenignFormatted\"]/[\"totalOutboundAllowedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "totalOutboundAllowedBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "totalOutboundAllowedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalOutboundBlocked",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundBlockedBenignFormatted\"]/[\"totalOutboundBlockedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "totalOutboundBlockedBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "totalOutboundBlockedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "5%"
              }
            },
            {
              "columnMatch": "totalOutboundAllowedBenign",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedBenign",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedMaliciousFormatted",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "vnetName",
              "label": "VNet name"
            },
            {
              "columnId": "topRules",
              "label": "Top rules (priority)"
            },
            {
              "columnId": "topTalkingPairs",
              "label": "Top talking pair"
            },
            {
              "columnId": "topIpInfo",
              "label": "Top IPs talking to malicious IPs"
            },
            {
              "columnId": "totalHits",
              "label": "Total hits"
            },
            {
              "columnId": "totalInbound",
              "label": "Total inbound (allowed/blocked)"
            },
            {
              "columnId": "totalInboundAllowed",
              "label": "Inbound allowed (benign/malicious)"
            },
            {
              "columnId": "totalInboundBlocked",
              "label": "Inbound blocked (benign/malicious)"
            },
            {
              "columnId": "totalOutbound",
              "label": "Total outbound (allowed/blocked)"
            },
            {
              "columnId": "totalOutboundAllowed",
              "label": "Outbound allowed (benign/malicious)"
            },
            {
              "columnId": "totalOutboundBlocked",
              "label": "Outbound blocked (benign/malicious)"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "vnets",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "resourceRules",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Details of top VNets"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Time trending chart for hits of VNet rules"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "text - 17"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "849868f8-8dc0-4327-a1bb-c560fa9ad376",
            "version": "KqlParameterItem/1.0",
            "name": "RulesSortUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Units in"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 6"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f788d551-c65d-4ad2-85ad-740c91e73c39",
            "version": "KqlParameterItem/1.0",
            "name": "top5Rules",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTANetAnalytics_CL\r\n| where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n// filter begins\r\n| where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n{subscriptionCheckLine}\r\n| extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n{resourceGroupCheckLine}\r\n| extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n| extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n{vnetCheckLine}\r\n{resourceRuleCheckLine}\r\n// filter ends\r\n| extend traffic = iff('{RulesSortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{RulesSortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n| summarize TotalTraffic = sum(traffic) by TargetResourceId_s, ACLRule_s, FlowDirection_s\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n| project value = completeRule, label = completeRule, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "-1"
      },
      "name": "parameters - 4"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "NTANetAnalytics_CL\r\n| where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n// filter begins\r\n| where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n{subscriptionCheckLine}\r\n| extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n{resourceGroupCheckLine}\r\n| extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n| where completeRule in~ ({top5Rules})\r\n| extend RuleName = strcat(ACLRule_s,\" (\",tostring(split(TargetResourceId_s,\"/\")[2]),\")\")\r\n// filter end\r\n| summarize sum(iff('{RulesSortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{RulesSortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by RuleName, todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "No data to display",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "top5Rules",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "vnets",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "resourceRules",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Time trending chart for hits of resource rules"
    },
    {
      "type": 1,
      "content": {
        "json": "No data to display",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelection",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "top5Rules",
          "comparison": "isEqualTo"
        }
      ],
      "name": "No data to display - Rules chart"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top 5 VNet rules"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "text - 18"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "c2f3ed12-7885-4ab0-806a-3863bc763e7c",
            "version": "KqlParameterItem/1.0",
            "name": "RulesDisplayUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Units in"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 11"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' {thousandUnit}'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' {millionUnit}'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' {billionUnit}'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' {trillionUnit}'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' {quadrillionUnit}'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'Denied')\r\n    | extend Flows = tolong(AllowedInFlows_d + DeniedInFlows_d + AllowedOutFlows_d + DeniedOutFlows_d)\r\n    | extend MaliciousAllowedFlows = iif(isMaliciousFlow and not(isBlocked), Flows, 0), MaliciousBlockedFlows = iif(isMaliciousFlow and isBlocked, Flows, 0)\r\n    | extend Bytes = tolong(BytesDestToSrc_d + BytesSrcToDest_d)\r\n    | extend MaliciousAllowedBytes = iif(isMaliciousFlow and not(isBlocked), Bytes, 0), MaliciousBlockedBytes = iif(isMaliciousFlow and isBlocked, Bytes, 0)\r\n    | extend Packets = tolong(PacketsDestToSrc_d + PacketsSrcToDest_d)\r\n    | extend MaliciousAllowedPackets = iif(isMaliciousFlow and not(isBlocked), Packets, 0), MaliciousBlockedPackets = iif(isMaliciousFlow and isBlocked, Packets, 0)\r\n    | summarize \r\n    totalMaliciousAllowedFlows = sum(MaliciousAllowedFlows), totalMaliciousBlockedFlows = sum(MaliciousBlockedFlows), TotalFlows = sum(Flows),\r\n    totalMaliciousAllowedBytes = sum(MaliciousAllowedBytes), totalMaliciousBlockedBytes = sum(MaliciousBlockedBytes), TotalBytes = sum(Bytes),\r\n    totalMaliciousAllowedPackets = sum(MaliciousAllowedPackets), totalMaliciousBlockedPackets = sum(MaliciousBlockedPackets), TotalPackets = sum(Packets),\r\n    TotalTrafficSorting = sum(iff('{RulesSortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{RulesSortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))),\r\n    TotalTrafficDisplay = sum(iff('{RulesDisplayUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{RulesDisplayUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d))))\r\n    by completeRule, FlowDirection_s, FlowStatus_s\r\n    | where TotalTrafficSorting > 0\r\n    | project \r\n    trafficForSorting = TotalTrafficSorting,\r\n    ruleName = split(completeRule, '/')[3],\r\n    access = iff(FlowStatus_s == 'Allowed', 'Allow', iff(FlowStatus_s == 'Denied', 'Deny', '')),\r\n    ruleType = iff(FlowDirection_s == 'Inbound', 'Inbound', iff(FlowDirection_s == 'Outbound', 'Outbound', '')),\r\n    vnet = split(completeRule, '/')[2],\r\n    hits = iff('{RulesDisplayUnit:value}' =~ 'bytes', format_bytes(TotalTrafficDisplay, 3), ValueWithUnit(TotalTrafficDisplay, 3)),\r\n    MaliciousAllowedDenied = strcat(iff('{RulesDisplayUnit:value}' =~ 'bytes', format_bytes(totalMaliciousAllowedBytes, 3), iff('{RulesDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalMaliciousAllowedPackets, 3), ValueWithUnit(totalMaliciousAllowedFlows, 3))), '/', iff('{RulesDisplayUnit:value}' =~ 'bytes', format_bytes(totalMaliciousBlockedBytes, 3), iff('{RulesDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalMaliciousBlockedPackets, 3), ValueWithUnit(totalMaliciousBlockedFlows, 3)))),\r\n    completeRule;\r\nlet topMaliciousTable = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(DestVM_s), DestIP_s, SrcIP_s)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(DestVM_s), strcat(DestSubscription_g, '/', DestVM_s), strcat(SrcSubscription_g, '/', SrcVM_s))\r\n    | summarize totalMalicious = sum(iff('{RulesSortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{RulesSortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, completeRule\r\n    | top-nested of completeRule by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n    | summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by completeRule\r\n    | project completeRule, topIpInfo;\r\nlet topTalkingTable = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | where not(IsFlowCapturedAtUDRHop_b)\r\n    | extend NIC = iif(FlowDirection_s == 'Outbound', SrcNIC_s, DestNIC_s)\r\n    | summarize totalTraffic = sum(iff('{RulesSortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{RulesSortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by NIC, completeRule\r\n    | top-nested of completeRule by max(1), top-nested 3 of vnetInfo = tostring(split(NIC, '/')[1]) by max(totalTraffic)\r\n    | summarize topvnetInfo = strcat_array(make_list(vnetInfo), ', ') by completeRule\r\n    | project completeRule, topvnetInfo;\r\nlet topSubnetTable = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | where not(IsFlowCapturedAtUDRHop_b)\r\n    | extend Subnet = iif(FlowDirection_s == 'Outbound', SrcSubnet_s, DestSubnet_s)\r\n    | summarize totalTraffic = sum(iff('{RulesSortUnit:value}' =~ 'bytes', tolong(BytesDestToSrc_d + BytesSrcToDest_d), iff('{RulesSortUnit:value}' =~ 'packets', tolong(PacketsDestToSrc_d + PacketsSrcToDest_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by Subnet, completeRule\r\n    | top-nested of completeRule by max(1), top-nested 3 of subnetInfo = tostring(split(Subnet, '/')[2]) by max(totalTraffic)\r\n    | summarize topSubnetInfo = strcat_array(make_list(subnetInfo), ', ') by completeRule\r\n    | project completeRule, topSubnetInfo;\r\nlet chatTable = NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend completeRule = strcat(TargetResourceId_s, '/', ACLRule_s)\r\n    | extend vnetToCheck = split(completeRule, '/')[2], RuleToCheck = split(completeRule, '/')[3]\r\n    {vnetCheckLine}\r\n    {resourceRuleCheckLine}\r\n    // filter ends\r\n    | extend flowCount = tolong(AllowedInFlows_d + DeniedInFlows_d + AllowedOutFlows_d + DeniedOutFlows_d), byteCount = tolong(BytesDestToSrc_d + BytesSrcToDest_d), packetCount = tolong(PacketsDestToSrc_d + PacketsSrcToDest_d)\r\n    | extend SourceHost = iif(isnotempty(SrcVM_s), strcat(SrcSubscription_g, '/', SrcVM_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | extend DestinationHost = iif(isnotempty(DestVM_s), strcat(DestSubscription_g, '/', DestVM_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, completeRule;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nlet topTalkingPairTable = \r\n    chatTableWithRownumber\r\n    | join kind = leftouter (chatTableWithRownumber) on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.completeRule == $right.completeRule\r\n    | where isnull(rownHash1) or (rownHash < rownHash1)\r\n    | extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n    | extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n    | extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n    | project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{RulesSortUnit:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{RulesSortUnit:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), completeRule\r\n    | top-nested of completeRule by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by completeRule\r\n    | project completeRule, topTalkingPairs;\r\nlet priorityTable = \r\n    NTATopologyDetails_CL\r\n    | where {timeIntervalTopologyCheck}\r\n    | where ResourceType == 'VirtualNetwork'\r\n    | project RuleId = strcat(Subscription_g, '/', Name_s), Priority_d\r\n    | distinct RuleId, Priority_d;\r\ncommon\r\n| join kind=leftouter topTalkingTable on $left.completeRule == $right.completeRule\r\n| join kind=leftouter topSubnetTable on $left.completeRule == $right.completeRule\r\n| join kind=leftouter topTalkingPairTable on $left.completeRule == $right.completeRule\r\n| join kind=leftouter topMaliciousTable on $left.completeRule == $right.completeRule\r\n| join kind=leftouter priorityTable on $left.completeRule == $right.RuleId\r\n| sort by trafficForSorting desc\r\n| project ruleName, vnet, topTalkingPairs, topSubnetInfo, topvnetInfo, hits, topIpInfo, MaliciousAllowedDenied\r\n",
        "size": 0,
        "showAnalytics": true,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ruleName",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "accessPriority",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "ruleType",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "vnets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topTalkingPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "topSubnetInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "topVNetInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "hits",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topIpInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "MaliciousAllowedDenied",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "trafficForSorting",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "ruleName",
              "label": "Rule name"
            },
            {
              "columnId": "topTalkingPairs",
              "label": "Top talking pair"
            },
            {
              "columnId": "topSubnetInfo",
              "label": "Top Associated subnets"
            },
            {
              "columnId": "hits",
              "label": "Hits"
            },
            {
              "columnId": "topIpInfo",
              "label": "Top IPs talking to malicious IPs"
            },
            {
              "columnId": "MaliciousAllowedDenied",
              "label": "Malicious (Allowed/Denied)"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "resourceRules",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "vnets",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Details of top 5 rules"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}