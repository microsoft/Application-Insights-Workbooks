{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "042c4aca-7514-4fe0-852a-55bf59b7f0ab",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalFlowlogCheck",
            "type": 1,
            "description": "Time scope filter for flowlog",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "id": "53f8d464-cc4e-4906-86e7-3c90800ed609",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalTopologyCheck",
            "type": 1,
            "description": "Time scope filter for topology",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalBothCheck",
            "type": 1,
            "description": "Time scope filter for flowlog and topology",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))), TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))))"
                }
              }
            ],
            "id": "2789eac4-1d01-4930-9db6-e1ff84200cba"
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": null,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'\r\n| distinct Subscription_g, SubscriptionName_s\r\n| project Subscription_g, SubscriptionName_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a16ef52-9f5d-459b-987e-0b75297860ad",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionsCheck",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions}))"
                }
              }
            ]
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where {subscriptionsCheck}\r\n| project rgName = tostring(split(Name_s,'/')[0]), Subscription_g\r\n| distinct rgName, Subscription_g\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "96e71097-a8c9-4b64-903c-26a51bac174c",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupsCheck",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))"
                }
              }
            ]
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "vnets",
            "label": "VNet",
            "type": 2,
            "description": "Select one or more virtual networks",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualNetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck} \r\n| project vnetId = strcat(Subscription_g, '/', Name_s )\r\n| distinct vnetId\r\n| project vnetName = tostring(split(vnetId, '/')[2])\r\n| project value = vnetName, label = vnetName, selected = 1s",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "subnets",
            "label": "Subnet",
            "type": 2,
            "description": "Select one or more subnets",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualSubnetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| project subnetId = strcat(Subscription_g, '/', Name_s)\r\n| distinct subnetId\r\n| project subnetName = tostring(split(subnetId, '/')[3])\r\n| project value = subnetName, label = subnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "632f19d9-96f0-40a7-99dc-84046caf1341",
            "version": "KqlParameterItem/1.0",
            "name": "vms",
            "label": "VM",
            "type": 2,
            "description": "Select one or more VMs",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  == 'Topology' and ResourceType == 'NetworkInterface'\r\n| where {subscriptionsCheck}\r\n| extend VirtualMachineNameSplit  = split(VirtualMachine_s, '/')\r\n| extend rgToCheck = tostring(VirtualMachineNameSplit[0])\r\n| where {resourceGroupsCheck}\r\n| extend subnetworkSplit = split(Subnetwork_s, '/')            \r\n| where iff(\"{vnets}\" == \"'*'\", true, tostring(subnetworkSplit[1]) in~ ({vnets}))\r\n| where iff(\"{subnets}\" == \"'*'\", true, tostring(subnetworkSplit[2]) in~ ({subnets}))\r\n| where isnotempty(tostring(VirtualMachineNameSplit[1]))\r\n| project vmId = strcat(Subscription_g, '/',VirtualMachineNameSplit[0], '/', subnetworkSplit [1], '/', subnetworkSplit[2], '/', VirtualMachineNameSplit[1])\r\n| distinct vmId\r\n| project vmName = tostring(split(vmId, '/')[4])\r\n| project value = vmName, label = vmName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2897635e-45da-4414-aa92-780491a3517d",
            "version": "KqlParameterItem/1.0",
            "name": "ips",
            "label": "IP",
            "type": 2,
            "description": "Select one or more IPs",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  == 'Topology' and ResourceType == 'NetworkInterface'\r\n| where {subscriptionsCheck}\r\n| extend VirtualMachineNameSplit = split(VirtualMachine_s, '/')\r\n| extend vmName = tostring(VirtualMachineNameSplit[1])\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| extend subnetworkSplit = split(Subnetwork_s, '/')\r\n| where iff(\"{vnets}\" == \"'*'\", true, tostring(subnetworkSplit[1]) in~ ({vnets}))\r\n| where iff(\"{subnets}\" == \"'*'\", true, tostring(subnetworkSplit[2]) in~ ({subnets}))\r\n| where iff(\"{vms}\" == \"'*'\", true, vmName in~ ({vms}))\r\n| where isnotempty(vmName)\r\n| mv-expand privateIP = split(PrivateIPAddresses_s, ' '), publicIP = split(PublicIPAddresses_s, ' ') to typeof(string)\r\n| extend privateIPId = iif(isempty(privateIP), '', strcat(Subscription_g, '/', VirtualMachineNameSplit[0], '/',  subnetworkSplit[1], '/', subnetworkSplit[2], '/', vmName, '/', privateIP))\r\n| extend publicIPId = iif(isempty(publicIP), '', strcat(Subscription_g, '/',VirtualMachineNameSplit[0], '/' , subnetworkSplit[1], '/', subnetworkSplit[2], '/', vmName, '/', publicIP))\r\n| distinct privateIPId, publicIPId\r\n| mv-expand IPId = pack_array(privateIPId, publicIPId) to typeof(string)\r\n| where isnotempty(IPId)\r\n| project IP = tostring(split(IPId, '/')[5])\r\n| project value = IP, label = IP, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d3fdad7c-ad8e-4dc2-a63b-152ab1fe1089",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionCheckLine",
            "type": 1,
            "description": "Subscription filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "subscriptions",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "subscriptions",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where SrcSubscription_g in~ ({subscriptions}) or DestSubscription_g in~ ({subscriptions})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupCheckLine",
            "type": 1,
            "description": "Resource group filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "resourceGroups",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "resourceGroups",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "da86b1fc-68b0-4ff6-a943-844c7129c533"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "vnetCheckLine",
            "type": 1,
            "description": "Vnet filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "vnets",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "vnets",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "62bbfd85-d61e-4e0a-ae87-76f18f88329e"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "subnetCheckLine",
            "type": 1,
            "description": "Subnet filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "subnets",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "subnets",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "c98d5497-b386-462c-8b81-998d8d10f5f4"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "vmCheckLine",
            "type": 1,
            "description": "VM filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "vms",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "vms",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where vmToCheck in~ ({vms})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "9a7f3087-8f44-4605-a11f-b30bef6a2612"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "ipCheckLine",
            "type": 1,
            "description": "IP filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "ips",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "ips",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where ipToCheck in~ ({ips})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "14578e5b-2647-4839-99b7-e20cd9c8a5ca"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "parameters - skip line"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "c973b119-cf4d-462f-b450-d7e5f78add4d",
            "version": "KqlParameterItem/1.0",
            "name": "thousandUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "K"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a2ca6b76-958e-4362-8fa9-937954ce8c7d",
            "version": "KqlParameterItem/1.0",
            "name": "millionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "M"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "2187717d-ce29-4f0b-a3cc-b7c559f34092",
            "version": "KqlParameterItem/1.0",
            "name": "billionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "B"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "fd412543-04e8-4545-bbd0-0531b02536c2",
            "version": "KqlParameterItem/1.0",
            "name": "trillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "t"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "6a6400a0-c770-4f09-b760-d1deaf8a4973",
            "version": "KqlParameterItem/1.0",
            "name": "quadrillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "q"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Constants"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Time trending chart for top 5 talking IPs"
      },
      "name": "text - 8"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "8a4902b7-b0a6-4949-92b4-910cef05f453",
            "version": "KqlParameterItem/1.0",
            "name": "sortUnit",
            "label": "Units in",
            "type": 2,
            "description": "This unit will be used to get the top 5 IPs.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 3"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "8340f941-9688-4c62-9074-543636f115cb",
            "version": "KqlParameterItem/1.0",
            "name": "top5Hosts",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// top 5  hosts filter query\r\n\r\n\r\n// dropdown parameter\r\nNTANetAnalytics_CL\r\n| where {timeIntervalFlowlogCheck}\r\n| where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n//\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n{subscriptionCheckLine}\r\n| extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n{resourceGroupCheckLine}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n{vnetCheckLine}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n{subnetCheckLine}\r\n//\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\nAllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\nAllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\nAllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\nAllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\nAllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\nAllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\nAllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)   \r\nby SrcIP_s, SrcSubscription_g, SrcNIC_s, DestIP_s, DestSubscription_g, DestNIC_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion, SrcVM_s, DestVM_s\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| extend hostEndPoint1 = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s), hostEndPoint2 = strcat(DestSubscription_g, '#', DestVM_s, '#', DestIP_s)\r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n| extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n| where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n//\r\n| extend vmToCheck = split(VM, '/')[1], ipToCheck = IP\r\n{vmCheckLine}\r\n{ipCheckLine}\r\n//\r\n| summarize TotalTraffic = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by hostEndPoint\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| project hostEndPoint, TotalTraffic, select = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a050abd6-c366-4fc9-b1aa-f309acafa79c",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "description": "Binning time for charts",
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "-1"
      },
      "name": "parameters - 18"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// line chart\r\nNTANetAnalytics_CL\r\n| where {timeIntervalFlowlogCheck}\r\n| where SubType_s == 'FlowLog' and  FASchemaVersion_s == '3'\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| extend hostEndPoint1 = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s), hostEndPoint2 = strcat(DestSubscription_g, '#', DestVM_s, '#', DestIP_s) \r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| where hostEndPoint in ({top5Hosts:value})\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\nAllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\nAllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\nAllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\nAllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\nAllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\nAllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\nAllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby hostEndPoint, FlowStartTime_t\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| summarize TotalTrafficHourly = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by hostEndPoint, bin(FlowStartTime_t, {binningTime})\r\n| extend ip = tostring(split(hostEndPoint,\"#\")[2])\r\n| project ip, FlowStartTime_t, TotalTrafficHourly\r\n| sort by ip, FlowStartTime_t",
        "size": 0,
        "aggregation": 2,
        "showAnnotations": true,
        "showAnalytics": true,
        "noDataMessage": "No data to display",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "FlowStartTime_t",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "FlowStartTime_t",
            "sortOrder": 1
          }
        ],
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/npm-windowssvr#10.10.40.5",
              "color": "redBright"
            },
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/er-labvm01#10.10.40.4",
              "color": "yellow"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.5",
              "color": "green"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.4",
              "color": "blueDark"
            },
            {
              "seriesName": "558f48f5-8789-4a28-b05b-956596d499af#runnersrgac/runnersvm#10.0.0.4",
              "color": "pink"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "top5Hosts",
        "comparison": "isNotEqualTo"
      },
      "showPin": true,
      "name": "Time trending chart for top 5 talking IPs"
    },
    {
      "type": 1,
      "content": {
        "json": "No data to display",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "top5Hosts",
        "comparison": "isEqualTo"
      },
      "name": "No data to display - TopTalkingHosts Chart"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top 5 talking IPs"
      },
      "name": "text - 9"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "3df6c05c-9526-4072-842e-519cf239bf35",
            "version": "KqlParameterItem/1.0",
            "name": "displayUnit",
            "label": "Units in",
            "type": 2,
            "description": "The traffic will be shown in this unit.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 3 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' {thousandUnit}'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' {millionUnit}'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' {billionUnit}'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' {trillionUnit}'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' {quadrillionUnit}'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics_CL\r\n    | where {timeIntervalFlowlogCheck}\r\n    | where SubType_s == 'FlowLog' and  FASchemaVersion_s == '3'\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    //\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)                                                   \r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIP_s, SrcSubscription_g, SrcNIC_s, DestIP_s, DestSubscription_g, DestNIC_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,SrcVM_s,DestVM_s, isMaliciousFlow, SrcSubnet_s, DestSubnet_s\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(DestSubscription_g, '#', DestVM_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    //\r\n    | extend vmToCheck = split(VM, '/')[1], ipToCheck = IP\r\n    {vmCheckLine}\r\n    {ipCheckLine}\r\n    //\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet_s, DestSubnet_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{sortUnit:value}' =~ 'bytes', TotalBytes, iff('{sortUnit:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{displayUnit:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{displayUnit:value}' =~ 'bytes', AllowedInboundBytes, iff('{displayUnit:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{displayUnit:value}' =~ 'bytes', BlockedInboundBytes, iff('{displayUnit:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{displayUnit:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{displayUnit:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{displayUnit:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{displayUnit:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{displayUnit:value}' =~ 'bytes', AllowedOutboundBytes, iff('{displayUnit:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{displayUnit:value}' =~ 'bytes', BlockedOutboundBytes, iff('{displayUnit:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{displayUnit:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{displayUnit:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{displayUnit:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{displayUnit:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    NTANetAnalytics_CL\r\n    | where {timeIntervalFlowlogCheck}\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    //\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(DestSubscription_g, '#', DestVM_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    //\r\n    | extend vmToCheck = split(VM, '/')[1], ipToCheck = IP\r\n    {vmCheckLine}\r\n    {ipCheckLine}\r\n    //\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet_s, DestSubnet_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType_s == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' ')), iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(DestVM_s), DestVM_s, iff(direction == 'Destination' and isnotempty(SrcVM_s), SrcVM_s, iff(isAzurePublicFlow, AzureRegion_s, Country_s)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIP_s, SrcSubscription_g, SrcNIC_s, DestIP_s, DestSubscription_g, DestNIC_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,partnerIP,partnerHost, SrcVM_s,DestVM_s, SrcSubnet_s, DestSubnet_s\r\n    by partnerIP, partnerHost, hostEndPoint, direction, SrcSubnet_s, DestSubnet_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s), \r\n    // hostEndPoint2 = strcat(DestSubscription_g, '#', DestVM_s, '#', DestIP_s)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", SrcSubnet_s, DestSubnet_s)\r\n    | summarize totalTraffic = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    NTANetAnalytics_CL \r\n    | where {timeIntervalFlowlogCheck}\r\n    | where SubType_s == 'FlowLog' and  FASchemaVersion_s == '3'\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    //\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(DestSubscription_g, '#', DestVM_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    //\r\n    | extend vmToCheck = split(VM, '/')[1], ipToCheck = IP\r\n    {vmCheckLine}\r\n    {ipCheckLine}\r\n    //\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet_s, DestSubnet_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIP_s, SrcIP_s)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows_d, AllowedInFlows_d + DeniedInFlows_d) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows_d, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesDestToSrc_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(BytesSrcToDest_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesDestToSrc_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(BytesSrcToDest_d), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsDestToSrc_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(PacketsSrcToDest_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsDestToSrc_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(PacketsSrcToDest_d), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country_s, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country_s) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| sort by trafficForSorting desc\r\n| project IP, VM, Subnet, Subscription, topTalkingPairs, topTalkingPairs1, TotalTraffic, \r\nTotalInbound, AllowedInbound, AllowedInboundFormatted, BlockedInbound, BlockedInboundFormatted, \r\nAllowedInboundBenign, AllowedInboundBenignFormatted, AllowedInboundMalicious, AllowedInboundMaliciousFormatted,\r\nBlockedInboundBenign, BlockedInboundBenignFormatted, BlockedInboundMalicious, BlockedInboundMaliciousFormatted,\r\nTotalOutbound, AllowedOutbound, AllowedOutboundFormatted, BlockedOutbound, BlockedOutboundFormatted,\r\nAllowedOutboundBenign, AllowedOutboundBenignFormatted, AllowedOutboundMalicious, AllowedOutboundMaliciousFormatted,\r\nBlockedOutboundBenign, BlockedOutboundBenignFormatted, BlockedOutboundMalicious, BlockedOutboundMaliciousFormatted",
        "size": 0,
        "showAnalytics": true,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "IP",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "VM",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "Subnet",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "Subscription",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true,
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topTalkingPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "topTalkingPairs1",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "TotalTraffic",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "TotalInbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"TotalInbound\"] ([\"AllowedInboundFormatted\"]/[\"BlockedInboundFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "AllowedInbound",
                      "color": "blue"
                    },
                    {
                      "columnName": "BlockedInbound",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "AllowedInbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"AllowedInboundBenignFormatted\"]/[\"AllowedInboundMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "AllowedInboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "AllowedInboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "AllowedInboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"BlockedInboundBenignFormatted\"]/[\"BlockedInboundMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "BlockedInboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "BlockedInboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "BlockedInboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedInboundBenign",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedInboundBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedInboundMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedInboundMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInboundBenign",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInboundBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInboundMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInboundMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "TotalOutbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"TotalOutbound\"] ([\"AllowedOutboundFormatted\"]/[\"BlockedOutboundFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "AllowedOutbound",
                      "color": "blue"
                    },
                    {
                      "columnName": "BlockedOutbound",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "AllowedOutbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"AllowedOutboundBenignFormatted\"]/[\"AllowedOutboundMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "AllowedOutboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "AllowedOutboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "7%"
              }
            },
            {
              "columnMatch": "AllowedOutboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"BlockedOutboundBenignFormatted\"]/[\"BlockedOutboundMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "BlockedOutboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "BlockedOutboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                }
              }
            },
            {
              "columnMatch": "BlockedOutboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedOutboundBenign",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedOutboundBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedOutboundMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedOutboundMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutboundBenign",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutboundBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutboundMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutboundMaliciousFormatted",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "IP",
              "label": "VM IP"
            },
            {
              "columnId": "VM",
              "label": "VM name"
            },
            {
              "columnId": "TotalInbound",
              "label": "Total inbound (allowed/blocked)"
            },
            {
              "columnId": "TotalOutbound",
              "label": "Total outbound (allowed/blocked)"
            }
          ]
        },
        "sortBy": []
      },
      "showPin": true,
      "name": "Details of top 5 talking IPs"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}