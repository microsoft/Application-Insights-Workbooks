{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": null,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where SubType == 'StatusMessage' and ComponentType == 'Topology'\r\n| distinct Subscription, SubscriptionName\r\n| project Subscription, SubscriptionName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions}))\r\n| project rgName = tostring(split(Name,'/')[0]), Subscription\r\n| distinct rgName, Subscription\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "acls",
            "label": "ACL",
            "type": 2,
            "description": "Select one or more Access Control Lists",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where AzureResourceType == 'NetworkSecurityGroup' and DiscoveryRegion == Region\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions}))\r\n| extend rgToCheck = tostring(split(Name, '/')[0])\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))\r\n| distinct Name\r\n| project value = split(Name, '/')[1], label = split(Name, '/')[1], selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "resourceRules",
            "label": "Rule name",
            "type": 2,
            "description": "Select one or more rules",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where AzureResourceType == 'NetworkSecurityGroupRule' and DiscoveryRegion == Region\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions}))\r\n| extend rgToCheck = tostring(split(Name, '/')[0])\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))\r\n| where \"{acls}\" == \"'*'\" or tostring(split(Name, '/')[1]) in~ ({acls})\r\n| distinct Name\r\n| extend fullRuleName = strcat(split(Name, '/')[1], '/', split(Name, '/')[2])\r\n| project value = split(Name, '/')[2], label = fullRuleName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "a4684f60-090d-49b2-87ed-6fb2418b2627",
            "cellValue": "tabSelected",
            "linkTarget": "parameter",
            "linkLabel": "ACLs",
            "subTarget": "0",
            "style": "link"
          },
          {
            "id": "01204408-fc23-4863-96d5-f20efc14f5c5",
            "cellValue": "tabSelected",
            "linkTarget": "parameter",
            "linkLabel": "ACL Rules",
            "subTarget": "1",
            "style": "link"
          }
        ]
      },
      "name": "links - 7"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Time trending chart for hits of ACLs"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "text - 16"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "665a3061-2f01-48b6-bf5d-446ec203607a",
            "version": "KqlParameterItem/1.0",
            "name": "graphUnit",
            "label": "Units in ",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 1"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "eac5273f-d0b5-4f33-93e9-a68e6989dc65",
            "version": "KqlParameterItem/1.0",
            "name": "top5ACLs",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n// filter begins\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend completeRule = strcat(AclGroup, '/', AclRule)\r\n| extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n| where iff(\"{acls}\" == \"'*'\", true, aclToCheck in~ ({acls}))\r\n| where iff(\"{resourceRules}\" == \"'*'\", true, resourceRuleToCheck in~ ({resourceRules}))\r\n// filter ends\r\n| extend traffic = iff('{graphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{graphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n| summarize TotalTraffic  = sum(traffic) by AclGroup\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| project value = AclGroup, label = AclGroup, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fd9e1ff9-a35c-4a95-845d-d8c6ed101a73",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "-1"
      },
      "name": "parameters - 2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n// filter begins\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| where AclGroup in~ ({top5ACLs})\r\n// filter ends\r\n| extend completeRule = strcat(AclGroup, '/', AclRule)\r\n| extend TargetResourceName = iff(isempty(tostring(split(AclGroup,\"/\")[2])),AclGroup,tostring(split(AclGroup,\"/\")[8]))\r\n| summarize sum(iff('{graphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{graphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by TargetResourceName, todatetime(ceiling(FlowStartTime / {binningTime}) * {binningTime})",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "No data to display",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "timechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "top5ACLs",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "acls",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "resourceRules",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Time trending chart for hits of ACLs"
    },
    {
      "type": 1,
      "content": {
        "json": "No data to display",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "top5ACLs",
          "comparison": "isEqualTo"
        }
      ],
      "name": "No data to display - ACLs chart"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top ACLs"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "text - 15"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "af7d8004-a964-45f8-9639-6e15d9e7273e",
            "version": "KqlParameterItem/1.0",
            "name": "gridUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Units in ",
            "value": "bytes"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 11 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow'), isBlocked  = (FlowStatus == 'Denied')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Allowed', tolong(AllowedInFlows), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Denied', tolong(DeniedInFlows), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Allowed', tolong(AllowedOutFlows), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Denied', tolong(DeniedOutFlows), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(PacketsSrcToDest), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{graphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{graphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n    | summarize \r\n    totalAllowedInboundFlows = sum(AllowedInbound), \r\n    totalBlockedInboundFlows = sum(BlockedInbound), \r\n    totalAllowedOutboundFlows = sum(AllowedOutbound), \r\n    totalBlockedOutboundFlows = sum(BlockedOutbound), \r\n    totalMaliciousAllowedInboundFlows = sum(MaliciousAllowedInboundFlows), \r\n    totalMaliciousBlockedInboundFlows = sum(MaliciousBlockedInboundFlows), \r\n    totalMaliciousAllowedOutboundFlows = sum(MaliciousAllowedOutboundFlows), \r\n    totalMaliciousBlockedOutboundFlows = sum(MaliciousBlockedOutboundFlows),\r\n    //\r\n    totalAllowedInboundBytes = sum(AllowedInboundBytes), \r\n    totalBlockedInboundBytes = sum(BlockedInboundBytes), \r\n    totalAllowedOutboundBytes = sum(AllowedOutboundBytes), \r\n    totalBlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    totalMaliciousAllowedInboundBytes = sum(MaliciousAllowedInboundBytes), \r\n    totalMaliciousBlockedInboundBytes= sum(MaliciousBlockedInboundBytes), \r\n    totalMaliciousAllowedOutboundBytes = sum(MaliciousAllowedOutboundBytes), \r\n    totalMaliciousBlockedOutboundBytes = sum(MaliciousBlockedOutboundBytes),\r\n    //\r\n    totalAllowedInboundPackets = sum(AllowedInboundPackets), \r\n    totalBlockedInboundPackets = sum(BlockedInboundPackets), \r\n    totalAllowedOutboundPackets = sum(AllowedOutboundPackets), \r\n    totalBlockedOutboundPackets = sum(BlockedOutboundPackets), \r\n    totalMaliciousAllowedInboundPackets = sum(MaliciousAllowedInboundPackets), \r\n    totalMaliciousBlockedInboundPackets = sum(MaliciousBlockedInboundPackets), \r\n    totalMaliciousAllowedOutboundPackets = sum(MaliciousAllowedOutboundPackets), \r\n    totalMaliciousBlockedOutboundPackets = sum(MaliciousBlockedOutboundPackets),\r\n    TotalTraffic  = sum(traffic)\r\n    by AclGroup\r\n    | where TotalTraffic > 0\r\n    | project AclGroup, trafficForSorting = TotalTraffic,\r\n    aclName = iff(isempty(tostring(split(AclGroup,\"/\")[2])),AclGroup,tostring(split(AclGroup,\"/\")[8])),\r\n    totalHits = iff('{gridUnit:value}' =~ 'bytes', format_bytes(TotalTraffic, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(TotalTraffic, 3), ValueWithUnit(TotalTraffic, 3))),\r\n    totalInboundAllowed = iff('{gridUnit:value}' =~ 'bytes', totalAllowedInboundBytes, iff('{gridUnit:value}' =~ 'packets', totalAllowedInboundPackets, totalAllowedInboundFlows)),\r\n    totalInboundBlocked = iff('{gridUnit:value}' =~ 'bytes', totalBlockedInboundBytes, iff('{gridUnit:value}' =~ 'packets', totalBlockedInboundPackets, totalBlockedInboundFlows)),\r\n    totalInbound = iff('{gridUnit:value}' =~ 'bytes', totalAllowedInboundBytes+totalBlockedInboundBytes, iff('{gridUnit:value}' =~ 'packets', totalAllowedInboundPackets+totalBlockedInboundPackets, totalAllowedInboundFlows+totalBlockedInboundFlows)),\r\n    totalInboundAllowedBenign = iff('{gridUnit:value}' =~ 'bytes', totalAllowedInboundBytes-totalMaliciousAllowedInboundBytes, iff('{gridUnit:value}' =~ 'packets', totalAllowedInboundPackets-totalMaliciousAllowedInboundPackets, totalAllowedInboundFlows-totalMaliciousAllowedInboundFlows)),\r\n    totalInboundAllowedMalicious = iff('{gridUnit:value}' =~ 'bytes', totalMaliciousAllowedInboundBytes, iff('{gridUnit:value}' =~ 'packets', totalMaliciousAllowedInboundPackets, totalMaliciousAllowedInboundFlows)),\r\n    totalInboundBlockedBenign = iff('{gridUnit:value}' =~ 'bytes', totalBlockedInboundBytes-totalMaliciousBlockedInboundBytes, iff('{gridUnit:value}' =~ 'packets', totalBlockedInboundPackets-totalMaliciousBlockedInboundPackets, totalBlockedInboundFlows-totalMaliciousBlockedInboundFlows)),\r\n    totalInboundBlockedMalicious = iff('{gridUnit:value}' =~ 'bytes', totalMaliciousBlockedInboundBytes, iff('{gridUnit:value}' =~ 'packets', totalMaliciousBlockedInboundPackets, totalMaliciousBlockedInboundFlows)),\r\n    totalOutboundAllowed = iff('{gridUnit:value}' =~ 'bytes', totalAllowedOutboundBytes, iff('{gridUnit:value}' =~ 'packets', totalAllowedOutboundPackets, totalAllowedOutboundFlows)),\r\n    totalOutboundBlocked = iff('{gridUnit:value}' =~ 'bytes', totalBlockedOutboundBytes, iff('{gridUnit:value}' =~ 'packets', totalBlockedOutboundPackets, totalBlockedOutboundFlows)),\r\n    totalOutbound = iff('{gridUnit:value}' =~ 'bytes', totalAllowedOutboundBytes+totalBlockedOutboundBytes, iff('{gridUnit:value}' =~ 'packets', totalAllowedOutboundPackets+totalBlockedOutboundPackets, totalAllowedOutboundFlows+totalBlockedOutboundFlows)),\r\n    totalOutboundAllowedBenign = iff('{gridUnit:value}' =~ 'bytes', totalAllowedOutboundBytes-totalMaliciousAllowedOutboundBytes, iff('{gridUnit:value}' =~ 'packets', totalAllowedOutboundPackets-totalMaliciousAllowedOutboundPackets, totalAllowedOutboundFlows-totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundAllowedMalicious = iff('{gridUnit:value}' =~ 'bytes', totalMaliciousAllowedOutboundBytes, iff('{gridUnit:value}' =~ 'packets', totalMaliciousAllowedOutboundPackets, totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundBlockedBenign = iff('{gridUnit:value}' =~ 'bytes', totalBlockedOutboundBytes-totalMaliciousBlockedOutboundBytes, iff('{gridUnit:value}' =~ 'packets', totalBlockedOutboundPackets-totalMaliciousBlockedOutboundPackets, totalBlockedOutboundFlows-totalMaliciousBlockedOutboundFlows)),\r\n    totalOutboundBlockedMalicious = iff('{gridUnit:value}' =~ 'bytes', totalMaliciousBlockedOutboundBytes, iff('{gridUnit:value}' =~ 'packets', totalMaliciousBlockedOutboundPackets, totalMaliciousBlockedOutboundFlows))\r\n    | extend\r\n    totalInboundAllowedFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowed, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowed, 3), ValueWithUnit(totalInboundAllowed, 3))),\r\n    totalInboundBlockedFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalInboundBlocked, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlocked, 3), ValueWithUnit(totalInboundBlocked, 3))),\r\n    totalInboundFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalInbound, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalInbound, 3), ValueWithUnit(totalInbound, 3))),\r\n    totalInboundAllowedBenignFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowedBenign, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedBenign, 3), ValueWithUnit(totalInboundAllowedBenign, 3))),\r\n    totalInboundAllowedMaliciousFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowedMalicious, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedMalicious, 3), ValueWithUnit(totalInboundAllowedMalicious, 3))),\r\n    totalInboundBlockedBenignFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalInboundBlockedBenign, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedBenign, 3), ValueWithUnit(totalInboundBlockedBenign, 3))),\r\n    totalInboundBlockedMaliciousFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalInboundBlockedMalicious, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedMalicious, 3), ValueWithUnit(totalInboundBlockedMalicious, 3))),\r\n    totalOutboundAllowedFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowed, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowed, 3), ValueWithUnit(totalOutboundAllowed, 3))),\r\n    totalOutboundBlockedFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlocked, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlocked, 3), ValueWithUnit(totalOutboundBlocked, 3))),\r\n    totalOutboundFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalOutbound, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalOutbound, 3), ValueWithUnit(totalOutbound, 3))),\r\n    totalOutboundAllowedBenignFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowedBenign, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedBenign, 3), ValueWithUnit(totalOutboundAllowedBenign, 3))),\r\n    totalOutboundAllowedMaliciousFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowedMalicious, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedMalicious, 3), ValueWithUnit(totalOutboundAllowedMalicious, 3))),\r\n    totalOutboundBlockedBenignFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlockedBenign, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedBenign, 3), ValueWithUnit(totalOutboundBlockedBenign, 3))),\r\n    totalOutboundBlockedMaliciousFormatted = iff('{gridUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlockedMalicious, 3), iff('{gridUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedMalicious, 3), ValueWithUnit(totalOutboundBlockedMalicious, 3)));\r\n// -----\r\nlet chatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend flowCount = tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows), byteCount = tolong(BytesDestToSrc + BytesSrcToDest), packetCount = tolong(PacketsDestToSrc + PacketsSrcToDest)\r\n    | extend SourceHost = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', SrcVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | extend DestinationHost = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, AclGroup;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nlet topTalkingTable =\r\n    chatTableWithRownumber\r\n    | join kind = leftouter (chatTableWithRownumber)\r\n    on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.AclGroup == $right.AclGroup\r\n    | where isnull(rownHash1) or (rownHash < rownHash1)\r\n    | extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n    | extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n    | extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n    | project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{graphUnit:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{graphUnit:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), AclGroup\r\n    | top-nested of AclGroup by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by AclGroup\r\n    | project AclGroup, topTalkingPairs;\r\n// -----\r\nlet TopRules = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | summarize totalHits = sum(iff('{graphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{graphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by AclRule, AclGroup\r\n    | top-nested of AclGroup by max(1), top-nested 3 of AclRule by max(totalHits)\r\n    | extend RuleId = strcat(AclGroup, '/', AclRule);\r\nlet priorityTable = \r\n    NTATopologyDetails\r\n    | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | where AzureResourceType == 'NetworkSecurityGroupRule'\r\n    | extend rule = split(Name, '/')\r\n    | project RuleId = strcat('/subscriptions/',Subscription, '/resourcegroups/', tostring(rule[0]),'/providers/microsoft.network/networksecuritygroups/',tostring(rule[1]),'/',tostring(rule[2])), Priority\r\n    | distinct RuleId, Priority;\r\nlet topRulesTable = \r\n    TopRules\r\n    | join kind=leftouter priorityTable on ($left.RuleId == $right.RuleId)\r\n    | summarize topRules = strcat_array(make_list(strcat(AclRule, '(', tolong(Priority), ')')), ', ') by AclGroup\r\n    | project AclGroup, topRules;\r\n// -----\r\nlet topMaliciousTable = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType == 'MaliciousFlow'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(DestVm), DestIp, SrcIp)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), strcat(SrcSubscription, '/', SrcVm))\r\n    | summarize totalMalicious = sum(iff('{graphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{graphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, AclGroup\r\n    | top-nested of AclGroup by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n    | summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by AclGroup\r\n    | project AclGroup, topIpInfo;\r\n// -----\r\ncommon\r\n| join kind=leftouter topTalkingTable on $left.AclGroup == $right.AclGroup\r\n| join kind=leftouter topRulesTable on $left.AclGroup == $right.AclGroup\r\n| join kind=leftouter topMaliciousTable on $left.AclGroup == $right.AclGroup\r\n| sort by trafficForSorting desc\r\n| project AclGroup, aclName, totalHits, totalInboundAllowed, totalInboundBlocked, totalInbound, totalInboundAllowedBenign, totalInboundAllowedMalicious, totalInboundBlockedBenign, totalInboundBlockedMalicious, totalOutboundAllowed, totalOutboundBlocked, totalOutbound, totalOutboundAllowedBenign, totalOutboundAllowedMalicious, totalOutboundBlockedBenign, totalOutboundBlockedMalicious, totalInboundAllowedFormatted, totalInboundBlockedFormatted, totalInboundFormatted, totalInboundAllowedBenignFormatted, totalInboundAllowedMaliciousFormatted, totalInboundBlockedBenignFormatted, totalInboundBlockedMaliciousFormatted, totalOutboundAllowedFormatted, totalOutboundBlockedFormatted, totalOutboundFormatted, totalOutboundAllowedBenignFormatted, totalOutboundAllowedMaliciousFormatted, totalOutboundBlockedBenignFormatted, totalOutboundBlockedMaliciousFormatted, topTalkingPairs, topRules, topIpInfo\r\n| project  aclName, topRules, topTalkingPairs, topIpInfo, totalHits, totalInbound, totalInboundAllowed, totalInboundBlocked, totalInboundAllowedBenign, totalInboundAllowedMalicious, totalInboundBlockedBenign, totalInboundBlockedMalicious, totalOutbound, totalOutboundAllowed, totalOutboundBlocked, totalOutboundAllowedBenign, totalOutboundAllowedMalicious, totalOutboundBlockedBenign, totalOutboundBlockedMalicious, totalInboundAllowedFormatted, totalInboundBlockedFormatted, totalInboundFormatted, totalInboundAllowedBenignFormatted, totalInboundAllowedMaliciousFormatted, totalInboundBlockedBenignFormatted, totalInboundBlockedMaliciousFormatted, totalOutboundAllowedFormatted, totalOutboundBlockedFormatted, totalOutboundFormatted, totalOutboundAllowedBenignFormatted, totalOutboundAllowedMaliciousFormatted, totalOutboundBlockedBenignFormatted, totalOutboundBlockedMaliciousFormatted",
        "size": 0,
        "showAnalytics": true,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "topRules",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topTalkingPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "topIpInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "totalHits",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "5%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "totalInbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundFormatted\"] ([\"totalInboundAllowedFormatted\"]/[\"totalInboundBlockedFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "totalInboundAllowed",
                      "color": "blue"
                    },
                    {
                      "columnName": "totalInboundBlocked",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalInboundAllowed",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundAllowedBenignFormatted\"]/[\"totalInboundAllowedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "totalInboundAllowedBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "totalInboundAllowedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalInboundBlocked",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundBlockedBenignFormatted\"]/[\"totalInboundBlockedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "totalInboundBlockedBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "totalInboundBlockedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalInboundAllowedBenign",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedBenign",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundFormatted\"] ([\"totalOutboundAllowedFormatted\"]/[\"totalOutboundBlockedFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "totalOutboundAllowed",
                      "color": "blue"
                    },
                    {
                      "columnName": "totalOutboundBlocked",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalOutboundAllowed",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundAllowedBenignFormatted\"]/[\"totalOutboundAllowedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "totalOutboundAllowedBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "totalOutboundAllowedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "totalOutboundBlocked",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundBlockedBenignFormatted\"]/[\"totalOutboundBlockedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "totalOutboundBlockedBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "totalOutboundBlockedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "5%"
              }
            },
            {
              "columnMatch": "totalOutboundAllowedBenign",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedBenign",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "ACLName",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "aclName",
              "label": "ACL Name"
            },
            {
              "columnId": "topRules",
              "label": "Top rules (priority)"
            },
            {
              "columnId": "topTalkingPairs",
              "label": "Top talking pair"
            },
            {
              "columnId": "topIpInfo",
              "label": "Top IPs talking to malicious IPs"
            },
            {
              "columnId": "totalHits",
              "label": "Total hits"
            },
            {
              "columnId": "totalInbound",
              "label": "Total inbound (allowed/blocked)"
            },
            {
              "columnId": "totalInboundAllowed",
              "label": "Inbound allowed (benign/malicious)"
            },
            {
              "columnId": "totalInboundBlocked",
              "label": "Inbound blocked (benign/malicious)"
            },
            {
              "columnId": "totalOutbound",
              "label": "Total outbound (allowed/blocked)"
            },
            {
              "columnId": "totalOutboundAllowed",
              "label": "Outbound allowed (benign/malicious)"
            },
            {
              "columnId": "totalOutboundBlocked",
              "label": "Outbound blocked (benign/malicious)"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "acls",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "resourceRules",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Details of top ACLs"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Time trending chart for hits of ACL rules"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "text - 17"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "849868f8-8dc0-4327-a1bb-c560fa9ad376",
            "version": "KqlParameterItem/1.0",
            "name": "rulesGraphUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Units in"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 6"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f788d551-c65d-4ad2-85ad-740c91e73c39",
            "version": "KqlParameterItem/1.0",
            "name": "top5Rules",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n// filter begins\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend completeRule = strcat(AclGroup, '/', AclRule)\r\n| extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n| where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n| where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n// filter ends\r\n| extend traffic = iff('{rulesGraphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{rulesGraphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n| summarize TotalTraffic = sum(traffic) by AclGroup, AclRule, FlowDirection\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| extend completeRule = strcat(AclGroup, '/', AclRule)\r\n| project value = completeRule, label = completeRule, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "-1"
      },
      "name": "parameters - 4"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n// filter begins\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend completeRule = strcat(AclGroup, '/', AclRule)\r\n| where completeRule in~ ({top5Rules})\r\n| extend RuleName = strcat(AclRule,\" (\",tostring(split(AclGroup,\"/\")[2]),\"/\",tostring(split(AclGroup,\"/\")[4]),\")\")\r\n// filter end\r\n| summarize sum(iff('{rulesGraphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{rulesGraphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by RuleName, todatetime(ceiling(FlowStartTime / {binningTime}) * {binningTime})",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "No data to display",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "top5Rules",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "acls",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "resourceRules",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Time trending chart for hits of resource rules"
    },
    {
      "type": 1,
      "content": {
        "json": "No data to display",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelection",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "top5Rules",
          "comparison": "isEqualTo"
        }
      ],
      "name": "No data to display - Rules chart"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top 5 ACL rules"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "text - 18"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "c2f3ed12-7885-4ab0-806a-3863bc763e7c",
            "version": "KqlParameterItem/1.0",
            "name": "rulesGridUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Units in",
            "value": "bytes"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 11"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow'), isBlocked  = (FlowStatus == 'Denied')\r\n    | extend Flows = tolong(AllowedInFlows + DeniedInFlows + AllowedOutFlows + DeniedOutFlows)\r\n    | extend MaliciousAllowedFlows = iif(isMaliciousFlow and not(isBlocked), Flows, 0), MaliciousBlockedFlows = iif(isMaliciousFlow and isBlocked, Flows, 0)\r\n    | extend Bytes = tolong(BytesDestToSrc + BytesSrcToDest)\r\n    | extend MaliciousAllowedBytes = iif(isMaliciousFlow and not(isBlocked), Bytes, 0), MaliciousBlockedBytes = iif(isMaliciousFlow and isBlocked, Bytes, 0)\r\n    | extend Packets = tolong(PacketsDestToSrc + PacketsSrcToDest)\r\n    | extend MaliciousAllowedPackets = iif(isMaliciousFlow and not(isBlocked), Packets, 0), MaliciousBlockedPackets = iif(isMaliciousFlow and isBlocked, Packets, 0)\r\n    | summarize \r\n    totalMaliciousAllowedFlows = sum(MaliciousAllowedFlows), totalMaliciousBlockedFlows = sum(MaliciousBlockedFlows), TotalFlows = sum(Flows),\r\n    totalMaliciousAllowedBytes = sum(MaliciousAllowedBytes), totalMaliciousBlockedBytes = sum(MaliciousBlockedBytes), TotalBytes = sum(Bytes),\r\n    totalMaliciousAllowedPackets = sum(MaliciousAllowedPackets), totalMaliciousBlockedPackets = sum(MaliciousBlockedPackets), TotalPackets = sum(Packets),\r\n    TotalTrafficSorting = sum(iff('{rulesGraphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{rulesGraphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))),\r\n    TotalTrafficDisplay = sum(iff('{rulesGridUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{rulesGridUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows))))\r\n    by completeRule, FlowDirection, FlowStatus\r\n    | where TotalTrafficSorting > 0\r\n    | project \r\n    trafficForSorting = TotalTrafficSorting,\r\n    ruleName = iff((array_length(split(completeRule,\"/\")) == 10),tostring(split(completeRule,\"/\")[9]),tostring(split(completeRule,\"/\")[1])),\r\n    access = iff(FlowStatus == 'Allowed', 'Allow', iff(FlowStatus == 'Denied', 'Deny', '')),\r\n    ruleType = iff(FlowDirection == 'Inbound', 'Inbound', iff(FlowDirection == 'Outbound', 'Outbound', '')),\r\n    acl = iff(isempty(tostring(split(completeRule,\"/\")[2])),completeRule,tostring(split(completeRule,\"/\")[8])),\r\n    hits = iff('{rulesGridUnit:value}' =~ 'bytes', format_bytes(TotalTrafficDisplay, 3), ValueWithUnit(TotalTrafficDisplay, 3)),\r\n    MaliciousAllowedDenied = strcat(iff('{rulesGridUnit:value}' =~ 'bytes', format_bytes(totalMaliciousAllowedBytes, 3), iff('{rulesGridUnit:value}' =~ 'packets', ValueWithUnit(totalMaliciousAllowedPackets, 3), ValueWithUnit(totalMaliciousAllowedFlows, 3))), '/', iff('{rulesGridUnit:value}' =~ 'bytes', format_bytes(totalMaliciousBlockedBytes, 3), iff('{rulesGridUnit:value}' =~ 'packets', ValueWithUnit(totalMaliciousBlockedPackets, 3), ValueWithUnit(totalMaliciousBlockedFlows, 3)))),\r\n    completeRule;\r\nlet topMaliciousTable = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType == 'MaliciousFlow'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(DestVm), DestIp, SrcIp)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), strcat(SrcSubscription, '/', SrcVm))\r\n    | summarize totalMalicious = sum(iff('{rulesGraphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{rulesGraphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, completeRule\r\n    | top-nested of completeRule by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n    | summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by completeRule\r\n    | project completeRule, topIpInfo;\r\nlet topTalkingTable = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | where not(IsFlowCapturedAtUdrHop)\r\n    | extend NIC = iif(FlowDirection == 'Outbound', SrcNic, DestNic)\r\n    | summarize totalTraffic = sum(iff('{rulesGraphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{rulesGraphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by NIC, completeRule\r\n    | top-nested of completeRule by max(1), top-nested 3 of aclInfo = tostring(split(NIC, '/')[1]) by max(totalTraffic)\r\n    | summarize topaclInfo = strcat_array(make_list(aclInfo), ', ') by completeRule\r\n    | project completeRule, topaclInfo;\r\nlet topSubnetTable = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | where not(IsFlowCapturedAtUdrHop)\r\n    | extend Subnet = iif(FlowDirection == 'Outbound', SrcSubnet, DestSubnet)\r\n    | summarize totalTraffic = sum(iff('{rulesGraphUnit:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{rulesGraphUnit:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by Subnet, completeRule\r\n    | top-nested of completeRule by max(1), top-nested 3 of subnetInfo = tostring(split(Subnet, '/')[2]) by max(totalTraffic)\r\n    | summarize topSubnetInfo = strcat_array(make_list(subnetInfo), ', ') by completeRule\r\n    | project completeRule, topSubnetInfo;\r\nlet chatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeRule = strcat(AclGroup, '/', AclRule)\r\n    | extend aclToCheck = split(completeRule, '/')[2], resourceRuleToCheck = split(completeRule, '/')[3]\r\n    | where iff(\"{acls}\" == \"'*'\", true, (aclToCheck in~ ({acls})))\r\n    | where iff(\"{resourceRules}\" == \"'*'\", true, (resourceRuleToCheck in~ ({resourceRules})))\r\n    // filter ends\r\n    | extend flowCount = tolong(AllowedInFlows + DeniedInFlows + AllowedOutFlows + DeniedOutFlows), byteCount = tolong(BytesDestToSrc + BytesSrcToDest), packetCount = tolong(PacketsDestToSrc + PacketsSrcToDest)\r\n    | extend SourceHost = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', SrcVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | extend DestinationHost = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, completeRule;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nlet topTalkingPairTable = \r\n    chatTableWithRownumber\r\n    | join kind = leftouter (chatTableWithRownumber) on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.completeRule == $right.completeRule\r\n    | where isnull(rownHash1) or (rownHash < rownHash1)\r\n    | extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n    | extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n    | extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n    | project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{rulesGraphUnit:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{rulesGraphUnit:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), completeRule\r\n    | top-nested of completeRule by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by completeRule\r\n    | project completeRule, topTalkingPairs;\r\nlet priorityTable = \r\n    NTATopologyDetails\r\n    | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | where AzureResourceType == 'NetworkSecurityGroupRule'\r\n    | extend rule = split(Name, '/')\r\n    | project RuleId = strcat('/subscriptions/',Subscription, '/resourcegroups/', tostring(rule[0]),'/providers/microsoft.network/networksecuritygroups/',tostring(rule[1]),'/',tostring(rule[2])), Priority\r\n    | distinct RuleId, Priority;\r\ncommon\r\n| join kind=leftouter topTalkingTable on $left.completeRule == $right.completeRule\r\n| join kind=leftouter topSubnetTable on $left.completeRule == $right.completeRule\r\n| join kind=leftouter topTalkingPairTable on $left.completeRule == $right.completeRule\r\n| join kind=leftouter topMaliciousTable on $left.completeRule == $right.completeRule\r\n| join kind=leftouter priorityTable on $left.completeRule == $right.RuleId\r\n| sort by trafficForSorting desc\r\n| project ruleName, accessPriority = strcat(access, '/', tolong(Priority)), ruleType, acl, topTalkingPairs, topSubnetInfo, topaclInfo, hits, topIpInfo, MaliciousAllowedDenied\r\n",
        "size": 0,
        "showAnalytics": true,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ruleName",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "accessPriority",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "ruleType",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topTalkingPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "topSubnetInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "hits",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topIpInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "MaliciousAllowedDenied",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "vnets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topVNetInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "trafficForSorting",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "ruleName",
              "label": "Rule name"
            },
            {
              "columnId": "accessPriority",
              "label": "Access Priority"
            },
            {
              "columnId": "ruleType",
              "label": "Rule Type"
            },
            {
              "columnId": "acl",
              "label": "ACL"
            },
            {
              "columnId": "topTalkingPairs",
              "label": "Top talking pair"
            },
            {
              "columnId": "topSubnetInfo",
              "label": "Top Associated subnets"
            },
            {
              "columnId": "topaclInfo",
              "label": "Top ACL Info"
            },
            {
              "columnId": "hits",
              "label": "Hits"
            },
            {
              "columnId": "topIpInfo",
              "label": "Top IPs talking to malicious IPs"
            },
            {
              "columnId": "MaliciousAllowedDenied",
              "label": "Malicious (Allowed/Denied)"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "resourceRules",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "acls",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Details of top 5 rules"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}