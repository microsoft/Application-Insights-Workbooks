{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": false
            },
            "value": {
              "durationMs": 86400000
            }
          },
          {
            "id": "042c4aca-7514-4fe0-852a-55bf59b7f0ab",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalFlowlogCheck",
            "type": 1,
            "description": "Time scope filter for flowlog",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "id": "53f8d464-cc4e-4906-86e7-3c90800ed609",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalTopologyCheck",
            "type": 1,
            "description": "Time scope filter for topology",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalBothCheck",
            "type": 1,
            "description": "Time scope filter for flowlog and topology",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))), TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))))"
                }
              }
            ],
            "id": "2789eac4-1d01-4930-9db6-e1ff84200cba"
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": null,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "NSGs in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'\r\n| distinct Subscription_g, SubscriptionName_s\r\n| project Subscription_g, SubscriptionName_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a16ef52-9f5d-459b-987e-0b75297860ad",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionsCheck",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions}))"
                }
              }
            ]
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where {subscriptionsCheck}\r\n| project rgName = tostring(split(Name_s,'/')[0]), Subscription_g\r\n| distinct rgName, Subscription_g\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "96e71097-a8c9-4b64-903c-26a51bac174c",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupsCheck",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))"
                }
              }
            ]
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "vnets",
            "label": "VNet",
            "type": 2,
            "description": "Select one or more virtual networks",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualNetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck} \r\n| project vnetId = strcat(Subscription_g, '/', Name_s )\r\n| distinct vnetId\r\n| project vnetName = tostring(split(vnetId, '/')[2])\r\n| project value = vnetName, label = vnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "subnets",
            "label": "Subnet",
            "type": 2,
            "description": "Select one or more subnets",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualSubnetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| project subnetId = strcat(Subscription_g, '/', Name_s)\r\n| distinct subnetId\r\n| project subnetName = tostring(split(subnetId, '/')[3])\r\n| project value = subnetName, label = subnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "parameters - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "d3fdad7c-ad8e-4dc2-a63b-152ab1fe1089",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionCheckLine",
            "type": 1,
            "description": "Subscription filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "subscriptions",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "subscriptions",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where SrcSubscription_g in~ ({subscriptions}) or DestSubscription_g in~ ({subscriptions})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupCheckLine",
            "type": 1,
            "description": "Resource group filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "resourceGroups",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "resourceGroups",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "da86b1fc-68b0-4ff6-a943-844c7129c533"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "vnetCheckLine",
            "type": 1,
            "description": "Vnet filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "vnets",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "vnets",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "62bbfd85-d61e-4e0a-ae87-76f18f88329e"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "subnetCheckLine",
            "type": 1,
            "description": "Subnet filter",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "subnets",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "subnets",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "*",
                  "resultValType": "static",
                  "resultVal": "// skip"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            },
            "id": "c98d5497-b386-462c-8b81-998d8d10f5f4"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Checks"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "c973b119-cf4d-462f-b450-d7e5f78add4d",
            "version": "KqlParameterItem/1.0",
            "name": "thousandUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "K"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a2ca6b76-958e-4362-8fa9-937954ce8c7d",
            "version": "KqlParameterItem/1.0",
            "name": "millionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "M"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "2187717d-ce29-4f0b-a3cc-b7c559f34092",
            "version": "KqlParameterItem/1.0",
            "name": "billionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "B"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "fd412543-04e8-4545-bbd0-0531b02536c2",
            "version": "KqlParameterItem/1.0",
            "name": "trillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "t"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "6a6400a0-c770-4f09-b760-d1deaf8a4973",
            "version": "KqlParameterItem/1.0",
            "name": "quadrillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "q"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Constants"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top IPs sending traffic to Internet"
      },
      "name": "text - 5"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "de721aa6-0b89-465a-976c-56ac0283d568",
            "version": "KqlParameterItem/1.0",
            "name": "displayUnit",
            "label": "Units in",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 7"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' {thousandUnit}'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' {millionUnit}'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' {billionUnit}'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' {trillionUnit}'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' {quadrillionUnit}'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    | where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic') and isnotempty(SrcVM_s)\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'Denied')\r\n    | summarize \r\n    TotalAllowedOutFlows = sum(AllowedOutFlows_d), \r\n    TotalDeniededOutFlows = sum(DeniedOutFlows_d), \r\n    MaliciousAllowedOutFlows = sum(iif(isMaliciousFlow, tolong(AllowedOutFlows_d), 0)), \r\n    MaliciousDeniedOutFlows = sum(iif(isMaliciousFlow, tolong(DeniedOutFlows_d), 0)), \r\n    TotalAllowedOutBytes = sum(iif(isBlocked, 0, tolong(BytesSrcToDest_d))), \r\n    MaliciousAllowedOutBytes = sum(iif(not(isBlocked) and isMaliciousFlow, tolong(BytesSrcToDest_d), 0)), \r\n    TotalAllowedInBytes = sum(iif(isBlocked, 0, tolong(BytesDestToSrc_d))), \r\n    MaliciousAllowedInBytes = sum(iif(not(isBlocked) and isMaliciousFlow, tolong(BytesDestToSrc_d), 0)), \r\n    TotalAllowedOutPackets = sum(iif(isBlocked, 0, tolong(PacketsSrcToDest_d))), \r\n    MaliciousAllowedOutPackets = sum(iif(not(isBlocked) and isMaliciousFlow, tolong(PacketsSrcToDest_d), 0)), \r\n    TotalAllowedInPackets = sum(iif(isBlocked, 0, tolong(PacketsDestToSrc_d))), \r\n    MaliciousAllowedInPackets = sum(iif(not(isBlocked) and isMaliciousFlow, tolong(PacketsDestToSrc_d), 0))                                                 \r\n    by SrcIP_s, SrcSubnet_s, SrcVM_s, SrcSubscription_g\r\n    | where TotalAllowedOutFlows > 0\r\n    | project SrcIP_s, VNet = split(SrcSubnet_s, '/')[1], resourceGroup = split(SrcSubnet_s, '/')[0], SrcVM_s, SrcSubscription_g, trafficForSorting = TotalAllowedOutFlows,\r\n    hostInfo = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s),\r\n    hostIP = strcat(SrcIP_s, ' (', split(SrcVM_s, '/')[1], ')'),\r\n    TotalAllowedOutFlows = ValueWithUnit(TotalAllowedOutFlows, 3),\r\n    TotalDeniededOutFlows = ValueWithUnit(TotalDeniededOutFlows, 3),\r\n    MaliciousAllowedOutFlows = ValueWithUnit(MaliciousAllowedOutFlows, 3),\r\n    MaliciousDeniedOutFlows = ValueWithUnit(MaliciousDeniedOutFlows, 3),\r\n    TotalAllowedOutBytes = format_bytes(TotalAllowedOutBytes, 3),\r\n    MaliciousAllowedOutBytes = format_bytes(MaliciousAllowedOutBytes, 3),\r\n    TotalAllowedInBytes = format_bytes(TotalAllowedInBytes, 3),\r\n    MaliciousAllowedInBytes = format_bytes(MaliciousAllowedInBytes, 3),\r\n    TotalAllowedOutPackets = ValueWithUnit(TotalAllowedOutPackets, 3),\r\n    MaliciousAllowedOutPackets = ValueWithUnit(MaliciousAllowedOutPackets, 3),\r\n    TotalAllowedInPackets = ValueWithUnit(TotalAllowedInPackets, 3),\r\n    MaliciousAllowedInPackets = ValueWithUnit(MaliciousAllowedInPackets, 3)\r\n    | extend \r\n    outbound = iff('{displayUnit:value}' =~ 'bytes', strcat('Allowed (In/Out) : ', TotalAllowedInBytes, '/', TotalAllowedOutBytes), iff('{displayUnit:value}' =~ 'packets', strcat('Allowed (In/Out) : ', TotalAllowedInPackets, '/', TotalAllowedOutPackets), strcat(TotalAllowedOutFlows, '/', TotalDeniededOutFlows))),\r\n    outboundMalicious = iff('{displayUnit:value}' =~ 'bytes', strcat('Allowed (In/Out) : ', MaliciousAllowedInBytes, '/', MaliciousAllowedOutBytes), iff('{displayUnit:value}' =~ 'packets', strcat('Allowed (In/Out) : ', MaliciousAllowedInPackets, '/', MaliciousAllowedOutPackets), strcat(MaliciousAllowedOutFlows, '/', MaliciousDeniedOutFlows)));\r\nlet topologyTable = \r\nNTATopologyDetails_CL| \r\nextend subscriptionName = SubscriptionName_s;\r\n//| where isnotempty(subscriptionName);\r\nlet topOtherSideTable =\r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    | where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    // filter ends\r\n    | extend hostInfo = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s)\r\n    | summarize TotalAllowedOutFlows = sum(AllowedOutFlows_d) by OtherSide = iif(isnotempty(Country_s), Country_s, AzureRegion_s), hostInfo\r\n    | top-nested of hostInfo by max(1), top-nested 3 of OtherSide by max(TotalAllowedOutFlows)\r\n    | project hostInfo, OtherSide\r\n    | summarize topOtherSide = strcat_array(make_list(OtherSide), ', ') by hostInfo\r\n    | project hostInfo, topOtherSide;\r\nlet topPortTable = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    | where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    // filter ends\r\n    | extend hostInfo = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s)\r\n    | extend portInfo = strcat(toint(DestPort_d), '#', L7Protocol_s)\r\n    | summarize TotalAllowedOutFlows = sum(AllowedOutFlows_d) by portInfo, hostInfo\r\n    | top-nested of hostInfo by max(1), top-nested 3 of portInfo by max(TotalAllowedOutFlows)\r\n    | project hostInfo, portInfo\r\n    | summarize topPortInfo = strcat_array(make_list(strcat(split(portInfo, '#')[0], '(', split(portInfo, '#')[1], ')')), ', ') by hostInfo\r\n    | project hostInfo, topPortInfo;\r\nlet topMaliciousTable = \r\n    NTANetAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and FASchemaVersion_s == '3'\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    // filter begins\r\n    | where {timeIntervalFlowlogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    {subscriptionCheckLine}\r\n    | extend Subnet1Split = split(SrcSubnet_s, '/'), Subnet2Split = split(DestSubnet_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    {resourceGroupCheckLine}\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    {vnetCheckLine}\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    {subnetCheckLine}\r\n    // filter ends\r\n    | extend \r\n    hostInfo1 = strcat(SrcSubscription_g, '#', SrcVM_s, '#', SrcIP_s), \r\n    hostInfo2 = strcat(SrcSubscription_g, '#', SrcVM_s, '#', DestIP_s)\r\n    | mv-expand hostInfo = pack_array(hostInfo1, hostInfo2) to typeof(string)\r\n    | extend splittedHostInfo = split(hostInfo, '#')\r\n    | extend IP = iif(DestIP_s == splittedHostInfo[2], SrcIP_s, iif(SrcIP_s == splittedHostInfo, DestIP_s, ''))\r\n    | where isnotempty(IP)\r\n    | extend IPInfo = strcat(IP, '#', Country_s)\r\n    | summarize TotalAllowedOutFlows = sum(AllowedOutFlows_d) by IPInfo, hostInfo\r\n    | top-nested of hostInfo by max(1), top-nested 3 of IPInfo by max(TotalAllowedOutFlows)\r\n    | project hostInfo, IPInfo\r\n    | summarize topIPInfo = strcat_array(make_list(strcat(split(IPInfo, '#')[0], '(', split(IPInfo, '#')[1], ')')), ', ') by hostInfo\r\n    | project hostInfo, topIPInfo;\r\n\r\n\r\ncommon\r\n| join kind=leftouter topOtherSideTable on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topPortTable on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMaliciousTable on $left.hostInfo == $right.hostInfo\r\n| join kind=inner topologyTable on $left.SrcSubscription_g==$right.Subscription_g\r\n| sort by trafficForSorting desc\r\n| project hostIP, topPortInfo, topOtherSide, outbound, topIPInfo, outboundMalicious, VNet, resourceGroup, SrcSubscription_g, Subscription=subscriptionName",
        "size": 0,
        "showAnalytics": true,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "hostIP",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topPortInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "topOtherSide",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "outbound",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "topIPInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "outboundMalicious",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "Subnet",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "VNet",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "resourceGroup",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "SrcSubscription_g",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": null,
                "showIcon": true,
                "customColumnWidthSetting": "10%"
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "hostIP",
              "label": "Host IP"
            },
            {
              "columnId": "topPortInfo",
              "label": "Top destination ports"
            },
            {
              "columnId": "topOtherSide",
              "label": "Top countries/Azure regions"
            },
            {
              "columnId": "outbound",
              "label": "Outbound (Allowed/Blocked)"
            },
            {
              "columnId": "topIPInfo",
              "label": "Top communicating malicious IPs"
            },
            {
              "columnId": "outboundMalicious",
              "label": "Outbound malicious (Allowed/Blocked)"
            },
            {
              "columnId": "resourceGroup",
              "label": "Resource group"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "vnets",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "subnets",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Details of top IPs sending traffic to Internet"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}