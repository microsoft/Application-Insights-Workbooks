{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": null,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where SubType == 'StatusMessage' and ComponentType == 'Topology'\r\n| distinct Subscription, SubscriptionName\r\n| project Subscription, SubscriptionName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "455f0b99-1b9a-4e7f-aeb5-42dd9cd01b07",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions}))\r\n| project rgName = tostring(split(Name,'/')[0]), Subscription\r\n| distinct rgName, Subscription\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "vnets",
            "label": "VNet",
            "type": 2,
            "description": "Select one or more virtual networks",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where SubType =='Topology' and AzureResourceType == 'VirtualNetwork'\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions}))\r\n| extend rgToCheck = tostring(split(Name, '/')[0])\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))\r\n| project vnetId = strcat(Subscription, '/', Name )\r\n| distinct vnetId\r\n| project vnetName = tostring(split(vnetId, '/')[2])\r\n| project value = vnetName, label = vnetName, selected = 1s",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "subnets",
            "label": "Subnet",
            "type": 2,
            "description": "Select one or more subnets",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTATopologyDetails\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where SubType  =='Topology' and AzureResourceType == 'VirtualSubnetwork'\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions}))\r\n| extend rgToCheck = tostring(split(Name, '/')[0])\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))\r\n| project subnetId = strcat(Subscription, '/', Name)\r\n| distinct subnetId\r\n| project subnetName = tostring(split(subnetId, '/')[3])\r\n| project value = subnetName, label = subnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "84091ccc-1280-42f6-a2a1-650fbc70e83b",
            "version": "KqlParameterItem/1.0",
            "name": "endpoint1",
            "label": "Endpoint 1",
            "type": 2,
            "description": "Select one host to see where it is sending or receiving traffic",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "let subscriptionSelected = (subscription: string) {iff(\"{subscriptions}\" == \"'*'\", true, subscription in~ ({subscriptions}))};\r\nlet rgSelected = (rg: string) {iff(\"{resourceGroups}\" == \"'*'\", true, rg in~ ({resourceGroups}))};\r\nlet vnetSelected = (vnet: string) {iff(\"{vnets}\" == \"'*'\", true, vnet in~ ({vnets}))};\r\nlet subnetSelected = (subnet: string) {iff(\"{subnets}\" == \"'*'\", true, subnet in~ ({subnets}))};\r\nlet hostEndpointSelected = (subscription: string, rg:string, vnet:string, subnet:string) {subscriptionSelected(subscription) and rgSelected(rg) and vnetSelected(vnet) and subnetSelected(subnet)};\r\nlet flowLogIPs = NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n| where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))), TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))))\r\n| project \r\nSrcIp = iff(hostEndpointSelected(SrcSubscription, split(SrcSubnet, '/')[0], split(SrcSubnet, '/')[1], split(SrcSubnet, '/')[2]), SrcIp, ''), \r\nDestIp = iff(hostEndpointSelected(SrcSubscription, split(DestSubnet, '/')[0], split(DestSubnet, '/')[1], split(DestSubnet, '/')[2]), DestIp, '')\r\n| distinct SrcIp, DestIp\r\n| project IPsArray = pack_array(SrcIp, DestIp)\r\n| mv-expand InternalIP = IPsArray to typeof(string)\r\n| where isnotempty(InternalIP)\r\n| distinct InternalIP;\r\nlet topologyIPs = NTATopologyDetails\r\n| where SubType == 'Topology' and AzureResourceType == 'NetworkInterface'\r\n| where hostEndpointSelected(Subscription, split(Name, '/')[0], split(Subnetwork, '/')[1], split(Subnetwork, '/')[2])\r\n| distinct PrivateIpAddresses\r\n| extend IPsArray = split(PrivateIpAddresses, ' ')\r\n| mv-expand InternalIP = IPsArray to typeof(string)\r\n| where isnotempty(InternalIP)\r\n| distinct InternalIP;\r\nflowLogIPs | union topologyIPs\r\n| distinct InternalIP\r\n| project value = InternalIP, label = InternalIP, selected = 1\r\n",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "4720c96d-4798-4c79-851f-dab3ff416763",
            "version": "KqlParameterItem/1.0",
            "name": "endpoint2",
            "label": "Endpoint 2",
            "type": 2,
            "description": "Select the endpoints to see the traffic between selected endpoints and the endpoint 1",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "let subscriptionSelected = (subscription: string) {iff(\"{subscriptions}\" == \"'*'\", true, subscription in~ ({subscriptions}))};\r\nlet rgSelected = (rg: string) {iff(\"{resourceGroups}\" == \"'*'\", true, rg in~ ({resourceGroups}))};\r\nlet vnetSelected = (vnet: string) {iff(\"{vnets}\" == \"'*'\", true, vnet in~ ({vnets}))};\r\nlet subnetSelected = (subnet: string) {iff(\"{subnets}\" == \"'*'\", true, subnet in~ ({subnets}))};\r\nlet hostEndpointSelected = (subscription: string, rg:string, vnet:string, subnet:string) {subscriptionSelected(subscription) and rgSelected(rg) and vnetSelected(vnet) and subnetSelected(subnet)};\r\nlet ipSelected = (ip: string) {iff(\"{endpoint1}\" == \"'*'\", true, ip in~ ({endpoint1}))};\r\nNTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n| where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| project endpoint2List = array_concat(\r\niff(iff(\"{endpoint1}\" == \"'*'\", hostEndpointSelected(SrcSubscription, split(SrcSubnet, '/')[0], split(SrcSubnet, '/')[1], split(SrcSubnet, '/')[2]), ipSelected(SrcIp)), iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')), dynamic([''])),\r\niff(iff(\"{endpoint1}\" == \"'*'\", hostEndpointSelected(DestSubscription, split(DestSubnet, '/')[0], split(DestSubnet, '/')[1], split(DestSubnet, '/')[2]), ipSelected(DestIp)), iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')), dynamic(['']))\r\n), countryOrRegion = iff(FlowType =~ 'AzurePublic', AzureRegion, iff(FlowType in~ ('ExternalPublic', 'MaliciousFlow'), Country, ''))\r\n| mv-expand endpoint2 = endpoint2List to typeof(string)\r\n| where isnotempty(endpoint2)\r\n| extend ip = tostring(split(endpoint2, '|')[0])\r\n| distinct ip, countryOrRegion\r\n| project value = ip, label = strcat(ip, iff(isnotempty(countryOrRegion), strcat(' (', countryOrRegion, ')'), '')), selected = 1\r\n\r\n\r\n",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "a4684f60-090d-49b2-87ed-6fb2418b2627",
            "cellValue": "tabSelected",
            "linkTarget": "parameter",
            "linkLabel": "Internal conversations",
            "subTarget": "0",
            "style": "link"
          },
          {
            "id": "01204408-fc23-4863-96d5-f20efc14f5c5",
            "cellValue": "tabSelected",
            "linkTarget": "parameter",
            "linkLabel": "External conversations",
            "subTarget": "1",
            "style": "link"
          }
        ]
      },
      "name": "links - 7"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Time trending chart for top 5 internal chatty conversations"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "text - 15"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "665a3061-2f01-48b6-bf5d-446ec203607a",
            "version": "KqlParameterItem/1.0",
            "name": "internalGraphUnit",
            "label": "Units in",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 1"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "eac5273f-d0b5-4f33-93e9-a68e6989dc65",
            "version": "KqlParameterItem/1.0",
            "name": "top5Internal",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "let ChatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType !in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic', 'Unknown')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    | where iff(\"{vnets}\" == \"'*'\", true, (vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})))\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    | where iff(\"{subnets}\" == \"'*'\", true, (subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})))\r\n    | where iff(\"{endpoint1}\" == \"'*'\", true, SrcIp in ({endpoint1}) or DestIp in ({endpoint1})) and iff(\"{endpoint2}\" == \"'*'\", true, SrcIp in ({endpoint2}) or DestIp in ({endpoint2}))\r\n    // filter ends\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), \r\n    AllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows), \r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest), \r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, SrcSubnet, DestSubnet\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize TotalFlow = sum(FlowCount), TotalBytes = sum(BytesCount), TotalPackets = sum(PacketsCount)\r\n    by SrcSubscription, SrcSubnet, SrcIp, DestSubscription, DestSubnet, DestIp\r\n    | extend endPoint1 = strcat(SrcSubscription, '#', SrcSubnet, '#', SrcIp), endPoint2 = strcat(DestSubscription, '#', DestSubnet, '#', DestIp)\r\n    | extend endPoint1Hash = hash(endPoint1), endPoint2Hash = hash(endPoint2);\r\nlet FinalChatty = ChatTable\r\n    | join kind=leftouter ChatTable on ($left.endPoint1 == $right.endPoint2) and ($left.endPoint2 == $right.endPoint1)\r\n    | where isempty(endPoint11) or (endPoint1Hash > endPoint2Hash);\r\nFinalChatty\r\n| project endPoint1, endPoint2, TotalTraffic = iff('{internalGraphUnit:value}' =~ 'bytes', TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), iff('{internalGraphUnit:value}' =~ 'packets', TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1)))))\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| project value = strcat(endPoint1, ' - ', endPoint2), label = strcat(endPoint1, ' - ', endPoint2), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fd9e1ff9-a35c-4a95-845d-d8c6ed101a73",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "-1"
      },
      "name": "parameters - 2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n| where FlowType !in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic', 'Unknown')\r\n// filter begins\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where iff(\"{vnets}\" == \"'*'\", true, (vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})))\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where iff(\"{subnets}\" == \"'*'\", true, (subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})))\r\n| extend endPointSrc = strcat(SrcSubscription, '#', SrcSubnet, '#', SrcIp), endPointDest = strcat(DestSubscription, '#', DestSubnet, '#', DestIp)\r\n| extend rowInfo = strcat(endPointSrc, ' - ', endPointDest)\r\n| where rowInfo in ({top5Internal})\r\n// filter ends\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), \r\nAllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, FlowStartTime, SrcSubnet, DestSubnet, rowInfo\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| extend IP = strcat(SrcIp,\"-\",DestIp)\r\n| summarize TotalTraffic = sum(iff('{internalGraphUnit:value}' =~ 'bytes', BytesCount, iff('{internalGraphUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by todatetime(ceiling(FlowStartTime / {binningTime}) * {binningTime}), IP",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "No data to display",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "endpoint1",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "endpoint2",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "top5Internal",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Time trending chart for top 5 internal chatty conversations"
    },
    {
      "type": 1,
      "content": {
        "json": "No data to disaplay",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "top5Internal",
          "comparison": "isEqualTo"
        }
      ],
      "name": "No data to display - Internal Conversations chart"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top 5 chatty internal conversations"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "text - 16"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "60a14a88-bf13-4802-9534-38fc889c602e",
            "version": "KqlParameterItem/1.0",
            "name": "internalGridUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "Units in"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 10"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet ChatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType !in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic', 'Unknown')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    | where iff(\"{vnets}\" == \"'*'\", true, (vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})))\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    | where iff(\"{subnets}\" == \"'*'\", true, (subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})))\r\n    | where iff(\"{endpoint1}\" == \"'*'\", true, SrcIp in ({endpoint1}) or DestIp in ({endpoint1})) and iff(\"{endpoint2}\" == \"'*'\", true, SrcIp in ({endpoint2}) or DestIp in ({endpoint2}))\r\n    // filter ends\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), \r\n    AllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows), \r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest), \r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, SrcSubnet, DestSubnet\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize TotalFlow = sum(FlowCount), TotalBytes = sum(BytesCount), TotalPackets = sum(PacketsCount)\r\n    by SrcSubscription, SrcSubnet, SrcIp, DestSubscription, DestSubnet, DestIp\r\n    | extend endPoint1 = strcat(SrcSubscription, '#', SrcSubnet, '#', SrcIp), endPoint2 = strcat(DestSubscription, '#', DestSubnet, '#', DestIp)\r\n    | extend endPoint1Hash = hash(endPoint1), endPoint2Hash = hash(endPoint2);\r\nlet FinalChatty = ChatTable\r\n    | join kind=leftouter ChatTable on ($left.endPoint1 == $right.endPoint2) and ($left.endPoint2 == $right.endPoint1)\r\n    | where isempty(endPoint11) or (endPoint1Hash > endPoint2Hash);\r\nFinalChatty\r\n| project endPoint1, endPoint2, TotalTrafficSorting = iff('{internalGraphUnit:value}' =~ 'bytes', TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), iff('{internalGraphUnit:value}' =~ 'packets', TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))))), TotalFlow, TotalFlow1, TotalBytes, TotalBytes1, TotalPackets, TotalPackets1\r\n| where TotalTrafficSorting > 0\r\n| sort by TotalTrafficSorting desc\r\n| extend splitEndPoint1 = split(endPoint1, '#'), splitEndPoint2 = split(endPoint2, '#')\r\n| project \r\nip1ip2 = strcat(splitEndPoint1[2], ' - ', splitEndPoint2[2]),\r\nsubnetOfIp1 = splitEndPoint1[1],\r\nsubnetOfIp2 = splitEndPoint2[1],\r\nsubscriptionOfIp1 = splitEndPoint1[0],\r\nsubscriptionOfIp2 = splitEndPoint2[0],\r\ntotalTraffic = iff('{internalGridUnit:value}' =~ 'bytes', format_bytes(TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{internalGridUnit:value}' =~ 'packets', ValueWithUnit(TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3))),\r\ntrafficFromIp1ToIp2 = iff('{internalGridUnit:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{internalGridUnit:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(tolong(TotalFlow), 3))),\r\ntrafficFromIp2ToIp1 = iff('{internalGridUnit:value}' =~ 'bytes', format_bytes(iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{internalGridUnit:value}' =~ 'packets', ValueWithUnit(iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3)))\r\n",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "The query returned no results",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ip1ip2",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "subnetOfIp1",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "14%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "subnetOfIp2",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "14%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "subscriptionOfIp1",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": null,
                "showIcon": true,
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "subscriptionOfIp2",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": null,
                "showIcon": true,
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "totalTraffic",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "trafficFromIp1ToIp2",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "trafficFromIp2ToIp1",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "12%"
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "ip1ip2",
              "label": "IP1 - IP2"
            },
            {
              "columnId": "subnetOfIp1",
              "label": "Subnet of IP1"
            },
            {
              "columnId": "subnetOfIp2",
              "label": "Subnet of IP2"
            },
            {
              "columnId": "subscriptionOfIp1",
              "label": "Subscription of IP1"
            },
            {
              "columnId": "subscriptionOfIp2",
              "label": "Subscription of IP2"
            },
            {
              "columnId": "totalTraffic",
              "label": "Total traffic"
            },
            {
              "columnId": "trafficFromIp1ToIp2",
              "label": "Traffic from IP1 to IP2"
            },
            {
              "columnId": "trafficFromIp2ToIp1",
              "label": "Traffic from IP2 to IP1"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "endpoint1",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "endpoint2",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Details of top 5 chatty internal conversations"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Time trending chart for top 5 external chatty conversations"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "text - 17"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "849868f8-8dc0-4327-a1bb-c560fa9ad376",
            "version": "KqlParameterItem/1.0",
            "name": "externalGraphUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Units in"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 6"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f788d551-c65d-4ad2-85ad-740c91e73c39",
            "version": "KqlParameterItem/1.0",
            "name": "top5External",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "let ChatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    | where iff(\"{vnets}\" == \"'*'\", true, (vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})))\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    | where iff(\"{subnets}\" == \"'*'\", true, (subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})))\r\n    // filter ends\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows)\r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend isDirectionSrc = isnotempty(SrcVm)\r\n    | extend OtherSideString = iff(FlowType == 'AzurePublic', 'Azure Region', 'Country')\r\n    | mv-expand SrcIP = iif(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')) to typeof(string)\r\n    | mv-expand DestIP = iif(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')) to typeof(string)\r\n    | extend Subnet1 = iif(isDirectionSrc, SrcSubnet, OtherSideString), Subnet2 = iif(not(isDirectionSrc), DestSubnet, OtherSideString), Subscription1 = iif(isDirectionSrc, SrcSubscription, OtherSideString), Subscription2 = iif(not(isDirectionSrc), DestSubscription, OtherSideString)\r\n    | where isnotempty(Subscription1) and isnotempty(Subnet1) and isnotempty(SrcIP)\r\n    | where isnotempty(Subscription2) and isnotempty(Subnet2) and isnotempty(DestIP)\r\n    | where iff(\"{endpoint1}\" == \"'*'\", true, SrcIP in ({endpoint1}) or DestIP in ({endpoint1})) and iff(\"{endpoint2}\" == \"'*'\", true, SrcIP in ({endpoint2}) or DestIP in ({endpoint2}))\r\n    | summarize TotalFlow = sum(FlowCount), TotalBytes = sum(BytesCount), TotalPackets = sum(PacketsCount)\r\n    by Subscription1, Subnet1, SrcIP = tostring(split(SrcIP, '|')[0]), Subscription2, Subnet2, DestIP = tostring(split(DestIP, '|')[0])\r\n    | extend endPoint1 = strcat(Subscription1, '#', Subnet1, '#', SrcIP), endPoint2 = strcat(Subscription2, '#', Subnet2, '#', DestIP)\r\n    | extend endPoint1Hash = hash(endPoint1), endPoint2Hash = hash(endPoint2);\r\nlet FinalChatty = ChatTable\r\n    | join kind=leftouter ChatTable on ($left.endPoint1 == $right.endPoint2) and ($left.endPoint2 == $right.endPoint1)\r\n    | where isempty(endPoint11) or (endPoint1Hash > endPoint2Hash);\r\nFinalChatty\r\n| project endPoint1, endPoint2, TotalTraffic = iff('{externalGraphUnit:value}' =~ 'bytes', TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), iff('{externalGraphUnit:value}' =~ 'packets', TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1)))))\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| project value = strcat(endPoint1, ' - ', endPoint2), label = strcat(endPoint1, ' - ', endPoint2), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "-1"
      },
      "name": "parameters - 4"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n| where FlowType in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where iff(\"{vnets}\" == \"'*'\", true, (vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})))\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where iff(\"{subnets}\" == \"'*'\", true, (subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})))\r\n// filter ends\r\n| extend isDirectionSrc = isnotempty(SrcVm)\r\n| extend OtherSideString = iff(FlowType == 'AzurePublic', 'Azure Region', 'Country')\r\n| mv-expand SrcIP = iif(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' '))\r\n| mv-expand DestIP = iif(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' '))\r\n| extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0]), Subnet1 = iif(isDirectionSrc, SrcSubnet, OtherSideString), Subnet2 = iif(not(isDirectionSrc), DestSubnet, OtherSideString), Subscription1 = iif(isDirectionSrc, SrcSubscription, OtherSideString), Subscription2 = iif(not(isDirectionSrc), DestSubscription, OtherSideString)\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0)\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows)\r\n| extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| extend endPointSrc = strcat(Subscription1, '#', Subnet1, '#', SrcIP), endPointDest = strcat(Subscription2, '#', Subnet2, '#', DestIP)\r\n| extend rowInfo1 = strcat(endPointSrc, ' - ', endPointDest), rowInfo2 = strcat(endPointDest, ' - ', endPointSrc)\r\n| where rowInfo1 in ({top5External}) or rowInfo2 in ({top5External})\r\n| extend IP = strcat(SrcIP,\"-\",DestIP)\r\n| summarize TotalTraffic = sum(iff('{externalGraphUnit:value}' =~ 'bytes', BytesCount, iff('{externalGraphUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by todatetime(ceiling(FlowStartTime / {binningTime}) * {binningTime}), IP\r\n",
        "size": 0,
        "showAnalytics": true,
        "noDataMessage": "No data to display",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "top5External",
          "comparison": "isNotEqualTo"
        }
      ],
      "showPin": true,
      "name": "Time trending chart for top 5 external chatty conversations"
    },
    {
      "type": 1,
      "content": {
        "json": "No data to disaplay",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "tabSelected",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "top5External",
          "comparison": "isEqualTo"
        }
      ],
      "name": "No data to display - External Conversation Chart"
    },
    {
      "type": 1,
      "content": {
        "json": "##### Details of top 5 chatty external conversations"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "text - 18"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "f95d79ed-3f9f-44dd-9165-0930837aba31",
            "version": "KqlParameterItem/1.0",
            "name": "externalGridUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "Units in"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 11"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet ChatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    | where iff(\"{vnets}\" == \"'*'\", true, (vnet1ToCheck in~ ({vnets}) or vnet2ToCheck in~ ({vnets})))\r\n    | extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n    | where iff(\"{subnets}\" == \"'*'\", true, (subnet1ToCheck in~ ({subnets}) or subnet2ToCheck in~ ({subnets})))\r\n    // filter ends\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0)\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows)\r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend isDirectionSrc = isnotempty(SrcVm)\r\n    | extend OtherSideString = iff(FlowType == 'AzurePublic', 'Azure Region', 'Country')\r\n    | mv-expand SrcIP = iif(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')) to typeof(string)\r\n    | mv-expand DestIP = iif(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')) to typeof(string)\r\n    | extend Subnet1 = iif(isDirectionSrc, SrcSubnet, OtherSideString), Subnet2 = iif(not(isDirectionSrc), DestSubnet, OtherSideString), Subscription1 = iif(isDirectionSrc, SrcSubscription, OtherSideString), Subscription2 = iif(not(isDirectionSrc), DestSubscription, OtherSideString)\r\n    | where isnotempty(Subscription1) and isnotempty(Subnet1) and isnotempty(SrcIP)\r\n    | where isnotempty(Subscription2) and isnotempty(Subnet2) and isnotempty(DestIP)\r\n    | where iff(\"{endpoint1}\" == \"'*'\", true, SrcIP in ({endpoint1}) or DestIP in ({endpoint1})) and iff(\"{endpoint2}\" == \"'*'\", true, SrcIP in ({endpoint2}) or DestIP in ({endpoint2}))\r\n    | summarize TotalFlow = sum(FlowCount), TotalBytes = sum(BytesCount), TotalPackets = sum(PacketsCount)\r\n    by Subscription1, Subnet1, SrcIP = tostring(split(SrcIP, '|')[0]), Subscription2, Subnet2, DestIP = tostring(split(DestIP, '|')[0])\r\n    | extend endPoint1 = strcat(Subscription1, '#', Subnet1, '#', SrcIP), endPoint2 = strcat(Subscription2, '#', Subnet2, '#', DestIP)\r\n    | extend endPoint1Hash = hash(endPoint1), endPoint2Hash = hash(endPoint2);\r\nlet FinalChatty = ChatTable\r\n    | join kind=leftouter ChatTable on ($left.endPoint1 == $right.endPoint2) and ($left.endPoint2 == $right.endPoint1)\r\n    | where isempty(endPoint11) or (endPoint1Hash > endPoint2Hash);\r\nFinalChatty\r\n| project endPoint1, endPoint2, TotalTrafficSorting = iff('{externalGraphUnit:value}' =~ 'bytes', TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), iff('{externalGraphUnit:value}' =~ 'packets', TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))))), TotalFlow, TotalFlow1, TotalBytes, TotalBytes1, TotalPackets, TotalPackets1\r\n| where TotalTrafficSorting > 0\r\n| sort by TotalTrafficSorting desc\r\n| extend splitEndPoint1 = split(endPoint1, '#'), splitEndPoint2 = split(endPoint2, '#')\r\n| project \r\nip1ip2 = strcat(splitEndPoint1[2], ' - ', splitEndPoint2[2]),\r\nsubnetOfIp1 = splitEndPoint1[1],\r\nsubnetOfIp2 = splitEndPoint2[1],\r\nsubscriptionOfIp1 = splitEndPoint1[0],\r\nsubscriptionOfIp2 = splitEndPoint2[0],\r\ntotalTraffic = iff('{externalGridUnit:value}' =~ 'bytes', format_bytes(TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{externalGridUnit:value}' =~ 'packets', ValueWithUnit(TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3))),\r\ntrafficFromIp1ToIp2 = iff('{externalGridUnit:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{externalGridUnit:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(tolong(TotalFlow), 3))),\r\ntrafficFromIp2ToIp1 = iff('{externalGridUnit:value}' =~ 'bytes', format_bytes(iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{externalGridUnit:value}' =~ 'packets', ValueWithUnit(iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3)))",
        "size": 0,
        "showAnalytics": true,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ip1ip2",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "subnetOfIp1",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "14%"
              }
            },
            {
              "columnMatch": "subnetOfIp2",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "14%"
              }
            },
            {
              "columnMatch": "subscriptionOfIp1",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": null,
                "showIcon": true,
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "subscriptionOfIp2",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": null,
                "showIcon": true,
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "totalTraffic",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "trafficFromIp1ToIp2",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "12%"
              }
            },
            {
              "columnMatch": "trafficFromIp2ToIp1",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "12%"
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "ip1ip2",
              "label": "IP1 - IP2"
            },
            {
              "columnId": "subnetOfIp1",
              "label": "Subnet of IP1"
            },
            {
              "columnId": "subnetOfIp2",
              "label": "Subnet of IP2"
            },
            {
              "columnId": "subscriptionOfIp1",
              "label": "Subscription of IP1"
            },
            {
              "columnId": "subscriptionOfIp2",
              "label": "Subscription of IP2"
            },
            {
              "columnId": "totalTraffic",
              "label": "Total traffic"
            },
            {
              "columnId": "trafficFromIp1ToIp2",
              "label": "Traffic from IP1 to IP2"
            },
            {
              "columnId": "trafficFromIp2ToIp1",
              "label": "Traffic from IP2 to IP1"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "showPin": true,
      "name": "Details of top 5 chatty external conversations"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}