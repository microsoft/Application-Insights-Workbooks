{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "value::all"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time Interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "530edde2-9bce-4a98-9e2c-97f6f22b46df",
            "version": "KqlParameterItem/1.0",
            "name": "FlowType",
            "label": "Flow Type",
            "type": 2,
            "description": "Select a type of Flowlog",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"both\", \"label\":\"NSG and VNet flow logs\", \"selected\":true },\r\n    { \"value\":\"NSG\", \"label\":\"NSG flow logs\" },\r\n    { \"value\":\"VNet\", \"label\":\"VNet flow logs\" }\r\n]"
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics Workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null
          },
          {
            "id": "ed680843-d803-4a08-9608-27b729cd537d",
            "version": "KqlParameterItem/1.0",
            "name": "Units",
            "label": "Display Unit",
            "type": 2,
            "description": "Display units for analysis of your traffic flows.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]"
          },
          {
            "id": "f3c20382-2b69-4d56-911b-0d9fee794a9c",
            "version": "KqlParameterItem/1.0",
            "name": "isNSGTopologySchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (AzureNetworkAnalytics_CL | take 1 | project isPresent = iff(iscolumnexists('DiscoveryRegion_s'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "84e0ab54-be7e-454d-b382-624f4c18d5b9",
            "version": "KqlParameterItem/1.0",
            "name": "isNSGFlowSchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (AzureNetworkAnalytics_CL | take 1 | project isPresent = iff(iscolumnexists('AllowedInFlows_d'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "isVNetTopologySchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (NTATopologyDetails | take 1 | project isPresent = iff(iscolumnexists('DiscoveryRegion'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "397f54e8-ba8e-4388-a81b-9ad843e6e917",
            "version": "KqlParameterItem/1.0",
            "name": "isVNetFlowSchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (NTANetAnalytics | getschema | summarize c=count() | project isPresent = iff(c > 0, 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "68b61813-1d25-4ca9-8aa9-8d5eda677cad",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "b7dde97a-9bd6-4040-a677-afdc4b94fff8",
            "version": "KqlParameterItem/1.0",
            "name": "wsId",
            "type": 1,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId == {workspace}\r\n| project wsId = tostring(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceId)\r\n| distinct wsId",
            "crossComponentResources": [
              "value::all"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null
          },
          {
            "id": "7128c3cf-b7e3-4136-9e86-18b3e091d6a0",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalMilliSeconds",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "timeInterval",
                  "operator": "isNotNull",
                  "rightValType": "param",
                  "resultValType": "expression",
                  "resultVal": "{timeInterval:seconds}*1000"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "86400000"
                }
              }
            ]
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "MainParameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{workspace}"
              ],
              "parameters": [
                {
                  "id": "3a316914-57a8-40de-b308-1d5abc01ec76",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueryTopologyType",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "NSG",
                        "resultValType": "static",
                        "resultVal": "{isNSGTopologySchemaPresent},NSG"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "VNet",
                        "resultValType": "static",
                        "resultVal": "{isVNetTopologySchemaPresent},VNet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "{isNSGTopologySchemaPresent},NSG,{isVNetTopologySchemaPresent},VNet"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "QueryFlowType",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "NSG",
                        "resultValType": "static",
                        "resultVal": "{isNSGFlowSchemaPresent},NSG"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "VNet",
                        "resultValType": "static",
                        "resultVal": "{isVNetFlowSchemaPresent},VNet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "{isNSGFlowSchemaPresent},NSG,{isVNetFlowSchemaPresent},VNet"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "4901189b-4da9-4a8d-aaa1-d428aa3f734f"
                },
                {
                  "id": "b1715201-f711-4a92-bf97-4720b2e295c7",
                  "version": "KqlParameterItem/1.0",
                  "name": "SubscriptionQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology' | distinct Subscription_g, SubscriptionName_s | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology' | distinct Subscription, SubscriptionName | project Subscription, SubscriptionName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology' | distinct Subscription, SubscriptionName | project Subscription, SubscriptionName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology' | distinct Subscription_g, SubscriptionName_s | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": " let nsg = AzureNetworkAnalytics_CL  | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'      | distinct Subscription_g, SubscriptionName_s      | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s;   let vnet = NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology'    | distinct Subscription, SubscriptionName    | project Subscription, SubscriptionName;   nsg | union vnet | distinct Subscription, SubscriptionName, selected =1;"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "2868d085-4cca-4e79-93a2-d27006b832c6",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopologyConditionVNet",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "NTATopologyDetails \r\n| extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where timecheck\r\n| where SubType == 'StatusMessage' and ComponentType =='Topology' and Status =='Completed' \r\n| project Subscription, DiscoveryRegion, TimeProcessed \r\n| where isnotempty(Subscription) and isnotempty(DiscoveryRegion) and isnotempty(TimeProcessed)\r\n| summarize arg_max(TimeProcessed, *) by Subscription \r\n| project value = strcat(Subscription, ',', DiscoveryRegion, ',', TimeProcessed), selected = 1;",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "TopologyConditionNSG",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "query": "AzureNetworkAnalytics_CL \r\n| where SubType_s == 'StatusMessage' and ComponentType_s =='Topology' and Status_s =='Completed' \r\n| project Subscription_g, DiscoveryRegion_s, TimeProcessed_t\r\n| where isnotempty(Subscription_g) and isnotempty(DiscoveryRegion_s) and isnotempty(TimeProcessed_t)\r\n| summarize arg_max(TimeProcessed_t, *) by Subscription_g \r\n| project value = strcat(Subscription_g, ',', DiscoveryRegion_s, ',', TimeProcessed_t), selected = 1;",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "id": "1e310513-a332-4175-85a8-844c28aa5f2a"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "timeInterval",
              "comparison": "isEqualTo",
              "value": "set"
            },
            "name": "parameters - 9"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "a24b1d2a-f7b6-439d-8e05-945ca7444e43",
                  "version": "KqlParameterItem/1.0",
                  "name": "subscriptions",
                  "label": "Discovered Subscriptions",
                  "type": 2,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{SubscriptionQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "20fbdbdd-cd15-43a4-9c33-e7bfc3f86811",
                  "version": "KqlParameterItem/1.0",
                  "name": "RGQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1; let vnet = NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1; nsg | union vnet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "0ebfeaf0-fcaa-4500-8f59-1b34f60d43f8",
                  "version": "KqlParameterItem/1.0",
                  "name": "resourceGroups",
                  "type": 2,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{RGQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "label": "Resource Groups"
                },
                {
                  "id": "a77b3434-bfad-4c58-b15d-9b753a55993c",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveRegionsQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t  between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | extend     SrcRegion = iif(isnotempty(Subnet1_s), Region1_s, ''),     DestRegion = iif(isnotempty(Subnet2_s), Region2_s, '') | mv-expand Region = pack_array(SrcRegion, DestRegion) | where isnotempty(Region) | distinct tostring(Region)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3' and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | extend     SrcRegion = iif(isnotempty(SrcSubnet), SrcRegion, ''),     DestRegion = iif(isnotempty(DestSubnet), DestRegion, '') | mv-expand Region = pack_array(SrcRegion, DestRegion) | where isnotempty(Region) | distinct tostring(Region)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": " NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3' and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | extend     SrcRegion = iif(isnotempty(SrcSubnet), SrcRegion, ''),     DestRegion = iif(isnotempty(DestSubnet), DestRegion, '') | mv-expand Region = pack_array(SrcRegion, DestRegion) | where isnotempty(Region) | distinct tostring(Region)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": " AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t  between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | extend     SrcRegion = iif(isnotempty(Subnet1_s), Region1_s, ''),     DestRegion = iif(isnotempty(Subnet2_s), Region2_s, '') | mv-expand Region = pack_array(SrcRegion, DestRegion) | where isnotempty(Region) | distinct tostring(Region)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'      and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t  between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))   | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))   | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')  | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]  | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))  | extend SrcRegion = iif(isnotempty(Subnet1_s), Region1_s, ''),          DestRegion = iif(isnotempty(Subnet2_s), Region2_s, '')  | mv-expand Region = pack_array(SrcRegion, DestRegion)  | where isnotempty(Region) | distinct tostring(Region);  let vnet = NTANetAnalytics | where SubType == 'FlowLog'      and FaSchemaVersion == '3' and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))  | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups})))  | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')  | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]  | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))  | extend     SrcRegion = iif(isnotempty(SrcSubnet), SrcRegion, ''),     DestRegion = iif(isnotempty(DestSubnet), DestRegion, '')  | mv-expand Region = pack_array(SrcRegion, DestRegion)  | where isnotempty(Region)  | distinct tostring(Region);  nsg | union vnet  | distinct Region"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "af9f98ed-1785-4cb6-8858-bce375001702",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveRegions",
                  "label": "Active Regions",
                  "type": 2,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{ActiveRegionsQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "SubscriptionQueryToRun",
              "comparison": "isNotEqualTo",
              "value": "false"
            },
            "name": "parameters - 9 - Copy"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "7c3190fa-789b-432c-8542-01e475a9d980",
                  "version": "KqlParameterItem/1.0",
                  "name": "isSubRGSet",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "resourceGroups",
                        "operator": "isNotNull",
                        "rightValType": "param",
                        "resultValType": "expression",
                        "resultVal": "true"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - 4"
          },
          {
            "type": 1,
            "content": {
              "json": "We could not find any data in this workspace for selected time interval. Try after 20-30 mins.\r\n 1. Please try changing the time interval for current workspace selection.\r\n 2. Select a different workspace or try after 20-30 mins.\r\n 3. Please try changing the Flowlog Type for current workspace selection.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "SubscriptionQueryToRun",
              "comparison": "isEqualTo",
              "value": "false"
            },
            "name": "InfoBubble"
          }
        ],
        "exportParameters": true
      },
      "name": "Filters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "2ac12674-b6e7-4dda-8e9a-1440dfe41cac",
                  "version": "KqlParameterItem/1.0",
                  "name": "DeployedRegionsQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | distinct Region_s | count "
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology'| extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | distinct Region | count "
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology'| extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | distinct Region | count "
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | distinct Region_s | count "
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where SubType_s == 'Topology' | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | distinct Region_s | project Region = Region_s; let vnet = NTATopologyDetails | where SubType == 'Topology'| extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | distinct Region; nsg | union vnet | distinct Region | count "
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "7923b732-7667-4f97-b0da-0c5cd63175ac",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveRegionsQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t  between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | extend     SrcRegion = iif(isnotempty(Subnet1_s), Region1_s, ''),     DestRegion = iif(isnotempty(Subnet2_s), Region2_s, '') | mv-expand Region = pack_array(SrcRegion, DestRegion) | where isnotempty(Region) | distinct tostring(Region)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3' and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | extend     SrcRegion = iif(isnotempty(SrcSubnet), SrcRegion, ''),     DestRegion = iif(isnotempty(DestSubnet), DestRegion, '') | mv-expand Region = pack_array(SrcRegion, DestRegion) | where isnotempty(Region) | distinct tostring(Region)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": " NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3' and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | extend     SrcRegion = iif(isnotempty(SrcSubnet), SrcRegion, ''),     DestRegion = iif(isnotempty(DestSubnet), DestRegion, '') | mv-expand Region = pack_array(SrcRegion, DestRegion) | where isnotempty(Region) | distinct tostring(Region)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": " AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t  between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | extend     SrcRegion = iif(isnotempty(Subnet1_s), Region1_s, ''),     DestRegion = iif(isnotempty(Subnet2_s), Region2_s, '') | mv-expand Region = pack_array(SrcRegion, DestRegion) | where isnotempty(Region) | distinct tostring(Region)"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'      and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t  between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))   | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))   | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')  | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]  | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))  | extend SrcRegion = iif(isnotempty(Subnet1_s), Region1_s, ''),          DestRegion = iif(isnotempty(Subnet2_s), Region2_s, '')  | mv-expand Region = pack_array(SrcRegion, DestRegion)  | where isnotempty(Region) | distinct tostring(Region);  let vnet = NTANetAnalytics | where SubType == 'FlowLog'      and FaSchemaVersion == '3' and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))  | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups})))  | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')  | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]  | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))  | extend     SrcRegion = iif(isnotempty(SrcSubnet), SrcRegion, ''),     DestRegion = iif(isnotempty(DestSubnet), DestRegion, '')  | mv-expand Region = pack_array(SrcRegion, DestRegion)  | where isnotempty(Region)  | distinct tostring(Region);  nsg | union vnet  | distinct Region"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalTAEnabledRegionsQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2])) | where ResourceType == 'NetworkSecurityGroup'     and DiscoveryRegion_s == Region_s     and IsFlowEnabled_b == true | distinct Region_s | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2])) | where AzureResourceType == 'NetworkSecurityGroup'     and DiscoveryRegion == Region     and IsFlowEnabled == true | distinct Region | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2])) | where AzureResourceType == 'NetworkSecurityGroup'     and DiscoveryRegion == Region     and IsFlowEnabled == true | distinct Region | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2])) | where ResourceType == 'NetworkSecurityGroup'     and DiscoveryRegion_s == Region_s     and IsFlowEnabled_b == true | distinct Region_s | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where SubType_s == 'Topology' | extend topologycondition = split('{TopologyConditionNSG}',',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2])) | where ResourceType == 'NetworkSecurityGroup'     and DiscoveryRegion_s == Region_s     and IsFlowEnabled_b == true | project Region = Region_s; let vnet = NTATopologyDetails | where SubType == 'Topology' | extend TopologyConditionVNet = split('{TopologyConditionVNet}',',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2])) | where AzureResourceType == 'NetworkSecurityGroup'     and DiscoveryRegion == Region     and IsFlowEnabled == true | project Region; nsg | union vnet | distinct Region | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "818a480d-3605-4447-a0b6-141183769fce"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousRegionsQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where FlowType_s == 'MaliciousFlow' | where AllowedInFlows_d > 0 or AllowedOutFlows_d > 0 | extend Region = iff(isnotempty(Region1_s), Region1_s, Region2_s) | distinct Region | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3' and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where FlowType == 'MaliciousFlow' | where AllowedInFlows > 0 or AllowedOutFlows > 0 | extend Region = iff(isnotempty(SrcRegion), SrcRegion, DestRegion) | distinct Region | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3' and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where FlowType == 'MaliciousFlow' | where AllowedInFlows > 0 or AllowedOutFlows > 0 | extend Region = iff(isnotempty(SrcRegion), SrcRegion, DestRegion) | distinct Region | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where FlowType_s == 'MaliciousFlow' | where AllowedInFlows_d > 0 or AllowedOutFlows_d > 0 | extend Region = iff(isnotempty(Region1_s), Region1_s, Region2_s) | distinct Region | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where FlowType_s == 'MaliciousFlow' | where AllowedInFlows_d > 0 or AllowedOutFlows_d > 0 | extend Region = iff(isnotempty(Region1_s), Region1_s, Region2_s) | distinct Region; let vnet = NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3' and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where FlowType == 'MaliciousFlow' | where AllowedInFlows > 0 or AllowedOutFlows > 0 | extend Region = iff(isnotempty(SrcRegion), SrcRegion, DestRegion) | distinct Region; nsg | union vnet | distinct Region | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "7bb714b4-d0b7-4fb1-8f6f-1b3851ab6a03"
                },
                {
                  "id": "6bde1378-fad8-4680-a500-064278343a95",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalVirtualNetworksQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType == 'VirtualNetwork' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2])) | where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions})) | distinct Name_s | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' and AzureResourceType == 'VirtualNetwork' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2])) | where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions})) | distinct Name | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' and AzureResourceType == 'VirtualNetwork' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2])) | where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions})) | distinct Name | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType == 'VirtualNetwork' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2])) | where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions})) | distinct Name_s | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'Topology' and ResourceType == 'VirtualNetwork'     | extend topologycondition = split('{TopologyConditionNSG}', ',')     | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions}))     | project Name = strcat(Subscription_g, \"/\", Name_s); let vnet = NTATopologyDetails     | where SubType == 'Topology' and AzureResourceType == 'VirtualNetwork'     | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',')     | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2]))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions}))     | project Name = strcat(Subscription, \"/\", Name); nsg | union vnet | distinct Name | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "22cb41e5-78ee-420a-b0bd-f2cf6c1bac59",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveVNetsQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | mv-expand Subnet = pack_array(strcat(Subscription1_g, '/', Subnet1_s), strcat(Subscription2_g, '/', Subnet2_s)) | extend SubnetSplit = split(Subnet, '/') | where array_length(SubnetSplit) == 4 | where FlowType_s != 'InterVNet' | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1], '/', SubnetSplit[2]) | distinct tostring(VNet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | mv-expand Subnet = pack_array(strcat(SrcSubscription, '/', SrcSubnet), strcat(DestSubscription, '/', DestSubnet)) | extend SubnetSplit = split(Subnet, '/') | where array_length(SubnetSplit) == 4 | where FlowType != 'InterVNet' | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1], '/', SubnetSplit[2]) | distinct tostring(VNet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | mv-expand Subnet = pack_array(strcat(SrcSubscription, '/', SrcSubnet), strcat(DestSubscription, '/', DestSubnet)) | extend SubnetSplit = split(Subnet, '/') | where array_length(SubnetSplit) == 4 | where FlowType != 'InterVNet' | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1], '/', SubnetSplit[2]) | distinct tostring(VNet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | mv-expand Subnet = pack_array(strcat(Subscription1_g, '/', Subnet1_s), strcat(Subscription2_g, '/', Subnet2_s)) | extend SubnetSplit = split(Subnet, '/') | where array_length(SubnetSplit) == 4 | where FlowType_s != 'InterVNet' | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1], '/', SubnetSplit[2]) | distinct tostring(VNet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | mv-expand Subnet = pack_array(strcat(Subscription1_g, '/', Subnet1_s), strcat(Subscription2_g, '/', Subnet2_s))     | extend SubnetSplit = split(Subnet, '/')     | where array_length(SubnetSplit) == 4     | where FlowType_s != 'InterVNet'     | project VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1], '/', SubnetSplit[2]); let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | mv-expand Subnet = pack_array(strcat(SrcSubscription, '/', SrcSubnet), strcat(DestSubscription, '/', DestSubnet))     | extend SubnetSplit = split(Subnet, '/')     | where array_length(SubnetSplit) == 4     | where FlowType != 'InterVNet'     | project VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1], '/', SubnetSplit[2]); nsg | union vnet | distinct tostring(VNet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "4c86de02-2d61-4f6d-8071-c08c6dcfa5fa",
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousVNetsQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s == 'MaliciousFlow' and AllowedInFlows_d > 0 | extend SubnetSplit = split(Subnet2_s, '/') | where array_length(SubnetSplit) == 3 | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1]) | distinct VNet, Subscription2_g | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType == 'MaliciousFlow' and AllowedInFlows > 0 | extend SubnetSplit = split(DestSubnet, '/') | where array_length(SubnetSplit) == 3 | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1]) | distinct VNet, DestSubscription | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType == 'MaliciousFlow' and AllowedInFlows > 0 | extend SubnetSplit = split(DestSubnet, '/') | where array_length(SubnetSplit) == 3 | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1]) | distinct VNet, DestSubscription | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s == 'MaliciousFlow' and AllowedInFlows_d > 0 | extend SubnetSplit = split(Subnet2_s, '/') | where array_length(SubnetSplit) == 3 | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1]) | distinct VNet, Subscription2_g | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s == 'MaliciousFlow' and AllowedInFlows_d > 0     | extend SubnetSplit = split(Subnet2_s, '/')     | where array_length(SubnetSplit) == 3     | extend         VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1]),         DestSubscription = Subscription2_g; let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType == 'MaliciousFlow' and AllowedInFlows > 0     | extend SubnetSplit = split(DestSubnet, '/')     | where array_length(SubnetSplit) == 3     | extend VNet = strcat(SubnetSplit[0], '/', SubnetSplit[1]); nsg | union vnet | distinct VNet, DestSubscription | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "1e94583a-d2c1-4965-b7f6-841d38865baa",
                  "version": "KqlParameterItem/1.0",
                  "name": "OnPremConnectionQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType_s in ('S2S', 'P2S') | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType in ('S2S', 'P2S') | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType in ('S2S', 'P2S') | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType_s in ('S2S', 'P2S') | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S')     | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/'))     | where array_length(SubnetSplit) == 3     | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1])     | where FlowType_s in ('S2S', 'P2S'); let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S')     | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/'))     | where array_length(SubnetSplit) == 3     | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1])     | where FlowType in ('S2S', 'P2S'); nsg | union vnet | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "4c18144f-9f27-425e-9df1-1b2751aa7a39",
                  "version": "KqlParameterItem/1.0",
                  "name": "AzureRegionsConnectionQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType_s == 'AzurePublic' | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType == 'AzurePublic' | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType == 'AzurePublic' | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType_s == 'AzurePublic' | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S')     | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/'))     | where array_length(SubnetSplit) == 3     | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1])     | where FlowType_s == 'AzurePublic'; let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S')     | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/'))     | where array_length(SubnetSplit) == 3     | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1])     | where FlowType == 'AzurePublic'; nsg | union vnet | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "c15e0a2e-6294-4f22-9790-b2f3fb13de66",
                  "version": "KqlParameterItem/1.0",
                  "name": "PublicIPsConnectionQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType_s in ('ExternalPublic', 'MaliciousFlow') | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType in ('ExternalPublic', 'MaliciousFlow') | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType in ('ExternalPublic', 'MaliciousFlow') | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S') | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/')) | where array_length(SubnetSplit) == 3 | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1]) | where FlowType_s in ('ExternalPublic', 'MaliciousFlow') | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S')     | extend SubnetSplit = iff(isnotempty(Subnet1_s), split(Subnet1_s, '/'), split(Subnet2_s, '/'))     | where array_length(SubnetSplit) == 3     | extend VNet = strcat(iff(isnotempty(Subnet1_s), Subscription1_g, Subscription2_g), '/', SubnetSplit[0], '/', SubnetSplit[1])     | where FlowType_s in ('ExternalPublic', 'MaliciousFlow'); let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow', 'S2S', 'P2S')     | extend SubnetSplit = iff(isnotempty(SrcSubnet), split(SrcSubnet, '/'), split(DestSubnet, '/'))     | where array_length(SubnetSplit) == 3     | extend VNet = strcat(iff(isnotempty(SrcSubnet), SrcSubscription, DestSubscription), '/', SubnetSplit[0], '/', SubnetSplit[1])     | where FlowType in ('ExternalPublic', 'MaliciousFlow'); nsg | union vnet | distinct VNet | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "0851d493-1a6d-4327-8677-fcd547b8dae1",
                  "version": "KqlParameterItem/1.0",
                  "name": "PortsGettingTrafficQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') and isnotempty(VM2_s) | where AllowedInFlows_d > 0 | distinct Subscription2_g, VM2_s, DestPort_d | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') and isnotempty(DestVm) | where AllowedInFlows > 0 | distinct DestSubscription, DestVm, DestPort | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') and isnotempty(DestVm) | where AllowedInFlows > 0 | distinct DestSubscription, DestVm, DestPort | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') and isnotempty(VM2_s) | where AllowedInFlows_d > 0 | distinct Subscription2_g, VM2_s, DestPort_d | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') and isnotempty(VM2_s)     | where AllowedInFlows_d > 0     | project Subscription = Subscription2_g, VM = VM2_s, DestPort = toint(DestPort_d); let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') and isnotempty(DestVm)     | where AllowedInFlows > 0     | project Subscription = DestSubscription, VM = DestVm, DestPort; nsg | union vnet | distinct Subscription, VM, DestPort | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "cb650c92-8916-412e-bbe2-0505ef14060d",
                  "version": "KqlParameterItem/1.0",
                  "name": "VMsSendingTrafficQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') | where isnotempty(VM1_s) and AllowedOutFlows_d > 0 | distinct VM1_s, Subscription1_g | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') | where isnotempty(SrcVm) and AllowedOutFlows > 0 | distinct SrcVm, SrcSubscription | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') | where isnotempty(SrcVm) and AllowedOutFlows > 0 | distinct SrcVm, SrcSubscription | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow') | where isnotempty(VM1_s) and AllowedOutFlows_d > 0 | distinct VM1_s, Subscription1_g | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow')     | where isnotempty(VM1_s) and AllowedOutFlows_d > 0     | project VM = VM1_s, Subscription = Subscription1_g; let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType in ('AzurePublic', 'ExternalPublic', 'MaliciousFlow')     | where isnotempty(SrcVm) and AllowedOutFlows > 0     | project VM = SrcVm, Subscription = SrcSubscription; nsg | union vnet | distinct Subscription, VM | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "AzurePublicIPInfoQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'AzurePublic' | distinct IP_s, FlowType_s | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'AzurePublic' | distinct Ip, FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'AzurePublic' | distinct Ip, FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'AzurePublic' | distinct IP_s, FlowType_s | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'AzurePublic' | project IP = IP_s, FlowType = FlowType_s; let vnet = NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'AzurePublic' | distinct IP = Ip, FlowType; nsg | union vnet | distinct IP, FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "acb5c6a4-4edd-4577-9788-b0887b631100"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "ExternalIPsInfoQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'ExternalPublic'     or FlowType_s == 'AzurePublic'     or FlowType_s == 'MaliciousFlow' | distinct IP_s, FlowType_s | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'ExternalPublic' | distinct Ip, FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'ExternalPublic' | distinct Ip, FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'ExternalPublic'     or FlowType_s == 'AzurePublic'     or FlowType_s == 'MaliciousFlow' | distinct IP_s, FlowType_s | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'ExternalPublic' | project IP = IP_s, FlowType = FlowType_s; let vnet = NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'ExternalPublic' | project IP = Ip, FlowType; nsg | union vnet | distinct IP, FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "ae8c7944-1e1c-4560-98c0-4d9c0ff75525"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "MaliciousIPInfoQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'MaliciousFlow' | distinct IP_s, FlowType_s | summarize total = count() | project iff(total >0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'MaliciousFlow' | distinct Ip, FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'MaliciousFlow' | distinct Ip, FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'MaliciousFlow' | distinct IP_s, FlowType_s | summarize total = count() | project iff(total >0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalyticsIPDetails_CL | where SubType_s == 'FlowLog' and FlowIntervalStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType_s == 'MaliciousFlow' | project IP = IP_s, FlowType = FlowType_s; let vnet = NTAIpDetails | where SubType == 'FlowLog' and FlowIntervalStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where FlowType == 'MaliciousFlow' | project IP = Ip, FlowType; nsg | union vnet | distinct IP,FlowType | summarize total = count() | project iff(total>0, tostring(total),'0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "id": "721b01d8-357a-4565-bf40-9edaa5214d38"
                },
                {
                  "id": "ff05d971-a98f-472e-b6ec-f7bbdf5fd1cc",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalVirtualSubnetworksQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType == 'VirtualSubnetwork' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' and AzureResourceType == 'VirtualSubnetwork' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' and AzureResourceType == 'VirtualSubnetwork' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType == 'VirtualSubnetwork' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'Topology' and ResourceType == 'VirtualSubnetwork'     | extend topologycondition = split('{TopologyConditionNSG}', ',')     | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions}))     | project Name = strcat(Subscription_g, \"/\", Name_s); let vnet = NTATopologyDetails     | where SubType == 'Topology' and AzureResourceType == 'VirtualSubnetwork'     | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',')     | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions}))     | project Name = strcat(Subscription, \"/\", Name); nsg | union vnet | distinct Name | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "39342071-1369-40a5-8999-e7ca9c1e8401",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveSubnetworksQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | mv-expand Subnet = pack_array(strcat(Subscription1_g, '/', Subnet1_s), strcat(Subscription2_g, '/', Subnet2_s)) | extend SubnetSplit = split(Subnet, '/') | where array_length(SubnetSplit) == 4 | where FlowType_s != 'InterVNet' | distinct tostring(Subnet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | mv-expand Subnet = pack_array(strcat(SrcSubscription, '/', SrcSubnet), strcat(DestSubscription, '/', DestSubnet)) | extend SubnetSplit = split(Subnet, '/') | where array_length(SubnetSplit) == 4 | where FlowType != 'InterVNet' | distinct tostring(Subnet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | mv-expand Subnet = pack_array(strcat(SrcSubscription, '/', SrcSubnet), strcat(DestSubscription, '/', DestSubnet)) | extend SubnetSplit = split(Subnet, '/') | where array_length(SubnetSplit) == 4 | where FlowType != 'InterVNet' | distinct tostring(Subnet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | mv-expand Subnet = pack_array(strcat(Subscription1_g, '/', Subnet1_s), strcat(Subscription2_g, '/', Subnet2_s)) | extend SubnetSplit = split(Subnet, '/') | where array_length(SubnetSplit) == 4 | where FlowType_s != 'InterVNet' | distinct tostring(Subnet) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | mv-expand Subnet = pack_array(strcat(Subscription1_g, '/', Subnet1_s), strcat(Subscription2_g, '/', Subnet2_s))     | extend SubnetSplit = split(Subnet, '/')     | where array_length(SubnetSplit) == 4     | where FlowType_s != 'InterVNet'     | project Name = tostring(Subnet); let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | mv-expand Subnet = pack_array(strcat(SrcSubscription, '/', SrcSubnet), strcat(DestSubscription, '/', DestSubnet))     | extend SubnetSplit = split(Subnet, '/')     | where array_length(SubnetSplit) == 4     | where FlowType != 'InterVNet'     | project Name = tostring(Subnet); nsg | union vnet | distinct Name | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "c6e0cbfc-1c6c-44f6-ba86-6488cddb853d",
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousSubnetworksQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s == 'MaliciousFlow' and AllowedInFlows_d > 0 | distinct Subnet2_s, Subscription2_g | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType == 'MaliciousFlow' and AllowedInFlows > 0 | distinct DestSubnet, DestSubscription | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType == 'MaliciousFlow' and AllowedInFlows > 0 | distinct DestSubnet, DestSubscription | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s == 'MaliciousFlow' and AllowedInFlows_d > 0 | distinct Subnet2_s, Subscription2_g | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s == 'MaliciousFlow' and AllowedInFlows_d > 0     | distinct Subnet = Subnet2_s, Subscription = Subscription2_g; let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType == 'MaliciousFlow' and AllowedInFlows > 0     | distinct Subnet = DestSubnet, Subscription = DestSubscription; nsg | union vnet | distinct Subnet, Subscription | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "84030ef5-cf39-4295-b1da-8cf57bba4ac3",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalAppGatewayQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType == 'ApplicationGateway' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' and AzureResourceType == 'ApplicationGateway' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' and AzureResourceType == 'ApplicationGateway' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType == 'ApplicationGateway' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'Topology' and ResourceType == 'ApplicationGateway'     | extend topologycondition = split('{TopologyConditionNSG}', ',')     | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions}))     | project Name = Name_s; let vnet = NTATopologyDetails     | where SubType == 'Topology' and AzureResourceType == 'ApplicationGateway'     | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',')     | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions}))     | project Name; nsg | union vnet | distinct Name | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "c164f633-7f15-4ba8-9e82-dc75c472af78",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveAppGatewayQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | mv-expand ApplicationGateway = pack_array(ApplicationGateway1_s, ApplicationGateway2_s) to typeof(string) | where isnotempty(ApplicationGateway) and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway' | extend AppGwSplit = split(ApplicationGateway, '/') | where array_length(AppGwSplit) == 3 | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | mv-expand ApplicationGateway = pack_array(SrcApplicationGateway, DestApplicationGateway) to typeof(string) | where isnotempty(ApplicationGateway) and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway' | extend AppGwSplit = split(ApplicationGateway, '/') | where array_length(AppGwSplit) == 3 | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | mv-expand ApplicationGateway = pack_array(SrcApplicationGateway, DestApplicationGateway) to typeof(string) | where isnotempty(ApplicationGateway) and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway' | extend AppGwSplit = split(ApplicationGateway, '/') | where array_length(AppGwSplit) == 3 | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | mv-expand ApplicationGateway = pack_array(ApplicationGateway1_s, ApplicationGateway2_s) to typeof(string) | where isnotempty(ApplicationGateway) and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway' | extend AppGwSplit = split(ApplicationGateway, '/') | where array_length(AppGwSplit) == 3 | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | mv-expand ApplicationGateway = pack_array(ApplicationGateway1_s, ApplicationGateway2_s) to typeof(string)     | where isnotempty(ApplicationGateway) and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway'     | extend AppGwSplit = split(ApplicationGateway, '/')     | where array_length(AppGwSplit) == 3     | project ApplicationGateway; let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | mv-expand ApplicationGateway = pack_array(SrcApplicationGateway, DestApplicationGateway) to typeof(string)     | where isnotempty(ApplicationGateway) and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway'     | extend AppGwSplit = split(ApplicationGateway, '/')     | where array_length(AppGwSplit) == 3     | project ApplicationGateway; nsg | union vnet | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "b0d29cfa-7d85-4754-b092-ff6205b4693a",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalLoadBalancersQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType == 'LoadBalancer' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' and AzureResourceType == 'LoadBalancer' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2])) | where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where SubType == 'Topology' and AzureResourceType == 'LoadBalancer' | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',') | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2])) | where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'Topology' and ResourceType == 'LoadBalancer' | extend topologycondition = split('{TopologyConditionNSG}', ',') | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions})) | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryTopologyType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'Topology' and ResourceType == 'LoadBalancer'     | extend topologycondition = split('{TopologyConditionNSG}', ',')     | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region_s in~ ({ActiveRegions}))     | project Name = Name_s; let vnet = NTATopologyDetails     | where SubType == 'Topology' and AzureResourceType == 'LoadBalancer'     | extend TopologyConditionVNet = split('{TopologyConditionVNet}', ',')     | where (Subscription == tostring(TopologyConditionVNet[0]) and DiscoveryRegion == tostring(TopologyConditionVNet[1]) and TimeProcessed == tostring(TopologyConditionVNet[2]))| where iff(\"{ActiveRegions}\" == \"'*'\", true, Region in~ ({ActiveRegions}))     | project Name; nsg | union vnet | distinct Name | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "b901a901-779b-41ce-8760-622e7a646b9c",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveLoadBalancerQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | mv-expand LoadBalancer = pack_array(LoadBalancer1_s, LoadBalancer2_s) to typeof(string) | where isnotempty(LoadBalancer) | extend LbSplit = split(LoadBalancer, '/') | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | mv-expand LoadBalancer = pack_array(SrcLoadBalancer, DestLoadBalancer) to typeof(string) | where isnotempty(LoadBalancer) | extend LbSplit = split(LoadBalancer, '/') | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | mv-expand LoadBalancer = pack_array(SrcLoadBalancer, DestLoadBalancer) to typeof(string) | where isnotempty(LoadBalancer) | extend LbSplit = split(LoadBalancer, '/') | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | mv-expand LoadBalancer = pack_array(LoadBalancer1_s, LoadBalancer2_s) to typeof(string) | where isnotempty(LoadBalancer) | extend LbSplit = split(LoadBalancer, '/') | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | mv-expand LoadBalancer = pack_array(LoadBalancer1_s, LoadBalancer2_s) to typeof(string)     | where isnotempty(LoadBalancer)     | extend LbSplit = split(LoadBalancer, '/')     | project LoadBalancer; let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | mv-expand LoadBalancer = pack_array(SrcLoadBalancer, DestLoadBalancer) to typeof(string)     | where isnotempty(LoadBalancer)     | extend LbSplit = split(LoadBalancer, '/')     | project LoadBalancer; nsg | union vnet | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "8666ab81-5e58-4098-a0e6-145fb90daa4d",
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousAppGatewaysQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s == 'MaliciousFlow' | mv-expand ApplicationGateway = pack_array(ApplicationGateway1_s, ApplicationGateway2_s) to typeof(string) | where isnotempty(ApplicationGateway)     and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway'     and (AllowedInFlows_d + AllowedOutFlows_d) > 0 | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType == 'MaliciousFlow' | mv-expand ApplicationGateway = pack_array(SrcApplicationGateway, DestApplicationGateway) to typeof(string) | where isnotempty(ApplicationGateway)     and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway'     and (AllowedInFlows + AllowedOutFlows) > 0 | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups}))) | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType == 'MaliciousFlow' | mv-expand ApplicationGateway = pack_array(SrcApplicationGateway, DestApplicationGateway) to typeof(string) | where isnotempty(ApplicationGateway)     and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway'     and (AllowedInFlows + AllowedOutFlows) > 0 | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s == 'MaliciousFlow' | mv-expand ApplicationGateway = pack_array(ApplicationGateway1_s, ApplicationGateway2_s) to typeof(string) | where isnotempty(ApplicationGateway)     and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway'     and (AllowedInFlows_d + AllowedOutFlows_d) > 0 | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s == 'MaliciousFlow'     | mv-expand ApplicationGateway = pack_array(ApplicationGateway1_s, ApplicationGateway2_s) to typeof(string)     | where isnotempty(ApplicationGateway)         and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway'         and (AllowedInFlows_d + AllowedOutFlows_d) > 0     | project ApplicationGateway; let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType == 'MaliciousFlow'     | mv-expand ApplicationGateway = pack_array(SrcApplicationGateway, DestApplicationGateway) to typeof(string)     | where isnotempty(ApplicationGateway)         and ApplicationGateway !endswith 'Unknown-RG/Unknown-ApplicationGateway'         and (AllowedInFlows + AllowedOutFlows) > 0     | project ApplicationGateway; nsg | union vnet | distinct ApplicationGateway | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "fe09fe40-1843-46a4-a877-aa8e9dcf0476",
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousLoadBalancersQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s == 'MaliciousFlow' | mv-expand LoadBalancer = pack_array(LoadBalancer1_s, LoadBalancer2_s) to typeof(string) | where isnotempty(LoadBalancer) and (AllowedInFlows_d + AllowedOutFlows_d) > 0 | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType == 'MaliciousFlow' | mv-expand LoadBalancer = pack_array(SrcLoadBalancer, DestLoadBalancer) to typeof(string) | where isnotempty(LoadBalancer) and (AllowedInFlows + AllowedOutFlows) > 0 | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTANetAnalytics | where SubType == 'FlowLog'     and FaSchemaVersion == '3'     and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{resourceGroups}\" == \"'*'\", true, (SrcSubscription in~ ({resourceGroups}) or DestSubscription in~ ({resourceGroups}))) | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions}))) | where FlowType == 'MaliciousFlow' | mv-expand LoadBalancer = pack_array(SrcLoadBalancer, DestLoadBalancer) to typeof(string) | where isnotempty(LoadBalancer) and (AllowedInFlows + AllowedOutFlows) > 0 | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where SubType_s == 'FlowLog'     and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')     and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}')) | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions}))) | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/') | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0] | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))| where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions}))) | where FlowType_s == 'MaliciousFlow' | mv-expand LoadBalancer = pack_array(LoadBalancer1_s, LoadBalancer2_s) to typeof(string) | where isnotempty(LoadBalancer) and (AllowedInFlows_d + AllowedOutFlows_d) > 0 | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL     | where SubType_s == 'FlowLog'         and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')         and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))     | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (Region1_s in~ ({ActiveRegions}) or Region2_s in~ ({ActiveRegions})))     | where FlowType_s == 'MaliciousFlow'     | mv-expand LoadBalancer = pack_array(LoadBalancer1_s, LoadBalancer2_s) to typeof(string)     | where isnotempty(LoadBalancer) and (AllowedInFlows_d + AllowedOutFlows_d) > 0     | project LoadBalancer; let vnet = NTANetAnalytics     | where SubType == 'FlowLog'         and FaSchemaVersion == '3'         and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))     | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))     | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')     | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]     | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))     | where iff(\"{ActiveRegions}\" == \"'*'\", true, (SrcRegion in~ ({ActiveRegions}) or DestRegion in~ ({ActiveRegions})))     | where FlowType == 'MaliciousFlow'     | mv-expand LoadBalancer = pack_array(SrcLoadBalancer, DestLoadBalancer) to typeof(string)     | where isnotempty(LoadBalancer) and (AllowedInFlows + AllowedOutFlows) > 0     | project LoadBalancer; nsg | union vnet | distinct LoadBalancer | summarize total = count() | project iff(total > 0, tostring(total), '0')"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "isSubRGSet",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "parameters - 9 - Copy - Copy"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{workspace}"
              ],
              "parameters": [
                {
                  "id": "0decb1ba-a445-47aa-ac81-568d8c3480cb",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalRegionsCount",
                  "label": "Total Regions",
                  "type": 1,
                  "query": "let value = '59';\r\nprint value",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "b8306f10-2997-4d24-a6ab-9cbe5efc98b6",
                  "version": "KqlParameterItem/1.0",
                  "name": "DeployedRegionsCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "query": "{DeployedRegionsQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "55d26690-f201-4c8b-ac03-6b2ff38a5a6d",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveRegionsCount",
                  "label": "Active Regions",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "query": "{ActiveRegionsQueryToRun}\r\n| summarize total = count()\r\n| project iff(total>0, tostring(total),'0')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "e10842a0-e5f6-4d2b-910e-cec280064584",
                  "version": "KqlParameterItem/1.0",
                  "name": "InactiveRegionsCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "DeployedRegionsCount",
                        "operator": ">",
                        "rightValType": "static",
                        "rightVal": "0",
                        "resultValType": "expression",
                        "resultVal": "{DeployedRegionsCount} - {ActiveRegionsCount}"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "param"
                      }
                    }
                  ]
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalTAEnabledRegions",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{TotalTAEnabledRegionsQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "id": "659889dd-3f7e-4505-bdb2-bc3373d07f4f"
                },
                {
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalMalicousRegions",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{AllowedMaliciousRegionsQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "id": "ec371d2f-c10e-4c88-9308-68eef0cbae72"
                },
                {
                  "id": "34501be7-7b90-4eae-be60-33574d9bcc74",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalVirtualNetworksCount",
                  "type": 1,
                  "query": "{TotalVirtualNetworksQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "1c41f8b6-446a-4c7a-bc50-c81c611bfd54",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveVirtualNetworksCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{ActiveVNetsQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "a8abb027-ec8b-4e3a-9ce1-4602a97561d9",
                  "version": "KqlParameterItem/1.0",
                  "name": "InactiveVirtualNetoworksCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "TotalVirtualNetworksCount",
                        "operator": ">",
                        "rightValType": "static",
                        "rightVal": "0",
                        "resultValType": "expression",
                        "resultVal": "{TotalVirtualNetworksCount} - {ActiveVirtualNetworksCount}"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "param"
                      }
                    }
                  ]
                },
                {
                  "id": "417ee766-5074-45d1-b431-547c87daabb1",
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousVNetsCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{AllowedMaliciousVNetsQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "4c645c3f-b375-4a4c-8bac-e5a469775c40",
                  "version": "KqlParameterItem/1.0",
                  "name": "OnPremConnectionCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{OnPremConnectionQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "3b20b45b-5c98-461d-abfc-1cb35ad40c13",
                  "version": "KqlParameterItem/1.0",
                  "name": "AzureRegionsConnectionsCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{AzureRegionsConnectionQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "d1af8085-7dfd-45ec-8f64-eb68ab2a94b2",
                  "version": "KqlParameterItem/1.0",
                  "name": "PublicIPsConnectionsCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{PublicIPsConnectionQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "6994a2f2-1e86-48d6-89b3-fecb2e1b6918",
                  "version": "KqlParameterItem/1.0",
                  "name": "PortsGettingTrafficCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{PortsGettingTrafficQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "87fad3f4-2d08-4118-a166-ee3efbd95d99",
                  "version": "KqlParameterItem/1.0",
                  "name": "VMsSendingTrafficCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{VMsSendingTrafficQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "0539ba53-92b5-423b-aca3-710f4493bdac",
                  "version": "KqlParameterItem/1.0",
                  "name": "AzurePublicIPCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{AzurePublicIPInfoQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "abdcf550-0e2c-4779-929f-dcc7a9eb7aaa",
                  "version": "KqlParameterItem/1.0",
                  "name": "ExternalIPsCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{ExternalIPsInfoQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "0849f250-e9a2-4862-a704-25df2773d5e3",
                  "version": "KqlParameterItem/1.0",
                  "name": "MaliciousIPsCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{MaliciousIPInfoQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "8305cf77-350e-41cf-8d9c-8c63031f56b7",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalVirtualSubnetworksCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{TotalVirtualSubnetworksQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "554fdbe6-f681-4314-99aa-03f20a1c39e0",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveSubnetworksCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{ActiveSubnetworksQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "2df69193-fcd3-4be8-b90a-6c58d3f915b5",
                  "version": "KqlParameterItem/1.0",
                  "name": "InactiveSubnetworksCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "TotalVirtualSubnetworksCount",
                        "operator": ">",
                        "rightValType": "static",
                        "rightVal": "0",
                        "resultValType": "expression",
                        "resultVal": "{TotalVirtualSubnetworksCount} - {ActiveSubnetworksCount}"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "rightValType": "param",
                        "resultValType": "param"
                      }
                    }
                  ]
                },
                {
                  "id": "60f53ecf-8415-4953-a728-2015b2811aee",
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousSubnetworksCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{AllowedMaliciousSubnetworksQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "1678264e-fa32-41eb-81ab-c86745dc8b00",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalAppGatewayCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{TotalAppGatewayQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "e1a2d24d-63ac-459d-8719-88e53c321a93",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveAppGatewayCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{ActiveAppGatewayQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "a20fb537-7183-40a6-85c3-7af1d17f473a",
                  "version": "KqlParameterItem/1.0",
                  "name": "TotalLoadBalancerCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{TotalLoadBalancersQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "b6d0fbbc-a7d0-4e73-b83d-6e422038562e",
                  "version": "KqlParameterItem/1.0",
                  "name": "ActiveLoadBalancerCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{ActiveLoadBalancerQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "06aa7f30-5581-4cb7-a81e-d9e304336e2a",
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousAppGatewaysCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{AllowedMaliciousAppGatewaysQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "fdd21046-bb0b-42b3-afba-c690269d9926",
                  "version": "KqlParameterItem/1.0",
                  "name": "AllowedMaliciousLoadBalancersCount",
                  "type": 1,
                  "description": "VNets in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "query": "{AllowedMaliciousLoadBalancersQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "SubscriptionQueryToRun",
              "comparison": "isNotEqualTo",
              "value": "false"
            },
            "name": "parameters - 9 - Copy - Copy - Copy"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "resourceGroups",
          "comparison": "isNotEqualTo",
          "value": "set"
        },
        {
          "parameterName": "subscriptions",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "QueryChoice"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### Deployed Azure Regions\r\n Number of Azure regions where your resources are discovered out of all Azure regions\r\n\r\n| | \r\n| --- | --- |\r\n| Total Azure Regions | {TotalRegionsCount} |\r\n| Total Deployed Regions | {DeployedRegionsCount} |\r\n| Active | {ActiveRegionsCount} |\r\n| Inactive | {InactiveRegionsCount} |\r\n| Traffic Analytics Enabled &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; | {TotalTAEnabledRegions} |\r\n| Allowed Malicious | {TotalMalicousRegions} |"
            },
            "customWidth": "50",
            "name": "Deployed Azure Regions"
          },
          {
            "type": 1,
            "content": {
              "json": "### Talking to Internet\r\nSummarization of ports receiving traffic from Internet and VMs sending traffic to Internet\r\n\r\n|  |\r\n| --- | --- |\r\n| Ports receiving traffic from Internet | {PortsGettingTrafficCount} |\r\n| VMs sending traffic to Internet | {VMsSendingTrafficCount} |\r\n"
            },
            "customWidth": "50",
            "name": "Talking to Internet"
          },
          {
            "type": 1,
            "content": {
              "json": "### Virtual Networks\r\nSummarized information about virtual networks in your deployments.\r\n\r\n|  |\r\n| --- | --- |\r\n| Active | {ActiveVirtualNetworksCount} |\r\n| Inactive | {InactiveVirtualNetoworksCount} |\r\n| Allowed Malicious | {AllowedMaliciousVNetsCount} |\r\n| Total VirtualNetworks &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;  | {TotalVirtualNetworksCount} |"
            },
            "customWidth": "50",
            "name": "Virtual Networks"
          },
          {
            "type": 1,
            "content": {
              "json": "### Public IP information\r\nSummarization of public IPs interacting with your network during the selected time interval\r\n\r\n| |\r\n| --- | --- |\r\n| External IPs &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; | {ExternalIPsCount} |\r\n| Azure Public IPs &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;| {AzurePublicIPCount} |\r\n| Malicious IPs &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;| {MaliciousIPsCount} |\r\n"
            },
            "customWidth": "50",
            "name": "Public IP information"
          },
          {
            "type": 1,
            "content": {
              "json": "### Virtual Subnetworks\r\nSummarized information about virtual subnetworks in your deployments\r\n\r\n| |\r\n| --- | --- |\r\n| Active | {ActiveSubnetworksCount} |\r\n| Inactive | {InactiveSubnetworksCount} |\r\n| Allowed Malicious &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | {AllowedMaliciousSubnetworksCount} |\r\n| Total Regions | {TotalVirtualSubnetworksCount} |"
            },
            "customWidth": "50",
            "name": "Virtual Subnetworks"
          },
          {
            "type": 1,
            "content": {
              "json": "### External connections\r\n\r\n| |\r\n| --- | --- |\r\n| On-Premises &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;| {OnPremConnectionCount} |\r\n| Azure regions &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;| {AzureRegionsConnectionsCount} |\r\n| Public IPs &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;| {PublicIPsConnectionsCount} |\r\n"
            },
            "customWidth": "50",
            "name": "External connections"
          },
          {
            "type": 1,
            "content": {
              "json": "### Resources\r\n\r\n|  |\r\n| --- | --- |\r\n| Active/total load balancers | {ActiveLoadBalancerCount} / {TotalLoadBalancerCount} |\r\n| Active/total app gateways | {ActiveAppGatewayCount} / {TotalAppGatewayCount} |\r\n| Load balancers with malicious flows | {AllowedMaliciousLoadBalancersCount} |\r\n| App gateways with malicious flows | {AllowedMaliciousAppGatewaysCount} |\r\n"
            },
            "customWidth": "50",
            "name": "Resources"
          }
        ]
      },
      "customWidth": "50",
      "name": "YourEnv"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### GeoMap View"
            },
            "name": "text - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "//includes resources like nsg, vnet, subnets, nic, VMs, LBs, VNetPeering; not included - nsgrules, lbrules, route and route table...\r\nlet regions = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n        and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n        and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend\r\n    SrcRegion = iif(isnotempty(Subnet1_s), Region1_s, ''),\r\n    DestRegion = iif(isnotempty(Subnet2_s), Region2_s, '')\r\n| mv-expand Region = pack_array(SrcRegion, DestRegion)\r\n| where isnotempty(Region)\r\n| distinct tostring(Region)\r\n| project ActiveRegions = Region;\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'Topology'\r\n| where Region_s in (regions)\r\n| where ResourceType !contains \"rule\" and ResourceType !contains \"route\"\r\n| extend Region = Region_s\r\n| summarize count() by Region",
              "size": 3,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{workspace}"
              ],
              "visualization": "map",
              "mapSettings": {
                "locInfo": "AzureLoc",
                "locInfoColumn": "Region_s",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "defaultSize": 60,
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "nodeColorField": "count_",
                  "colorAggregation": "Sum",
                  "type": "heatmap",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "FlowType",
              "comparison": "isEqualTo",
              "value": "NSG"
            },
            "name": "GeoMapNSGQuery"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "//includes resources like nsg, vnet, subnets, nic, VMs, LBs, VNetPeering; not included - nsgrules, lbrules, route and route table...\r\nlet regions = NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3' and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend\r\n    SrcRegion = iif(isnotempty(SrcSubnet), SrcRegion, ''),\r\n    DestRegion = iif(isnotempty(DestSubnet), DestRegion, '')\r\n| mv-expand Region = pack_array(SrcRegion, DestRegion)\r\n| where isnotempty(Region)\r\n| distinct tostring(Region)\r\n| project ActiveRegions = Region;\r\nNTATopologyDetails\r\n| where Region in (regions)\r\n| where AzureResourceType !contains \"rule\" and AzureResourceType !contains \"route\"\r\n| summarize count() by Region ",
              "size": 3,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{workspace}"
              ],
              "visualization": "map",
              "mapSettings": {
                "locInfo": "AzureLoc",
                "locInfoColumn": "Region",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "defaultSize": 60,
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "nodeColorField": "count_",
                  "colorAggregation": "Sum",
                  "type": "heatmap",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "FlowType",
              "comparison": "isEqualTo",
              "value": "VNet"
            },
            "name": "GeoMapVNetQuery"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"c37d0eea-6a5f-4344-a908-e2149f4874be\",\"mergeType\":\"union\",\"leftTable\":\"GeoMapNSGQuery\",\"rightTable\":\"GeoMapVNetQuery\"}],\"projectRename\":[{\"originalName\":\"[GeoMapNSGQuery].Region_s\",\"mergedName\":\"Region_s\",\"fromId\":\"c37d0eea-6a5f-4344-a908-e2149f4874be\"},{\"originalName\":\"[GeoMapNSGQuery].count_\",\"mergedName\":\"count_\",\"fromId\":\"c37d0eea-6a5f-4344-a908-e2149f4874be\"},{\"originalName\":\"[GeoMapVNetQuery].Region\",\"mergedName\":\"Region\",\"fromId\":\"c37d0eea-6a5f-4344-a908-e2149f4874be\"},{\"originalName\":\"Region_s\",\"mergedName\":\"Region_s\",\"fromId\":\"unknown\"},{\"originalName\":\"count_\",\"mergedName\":\"count_\",\"fromId\":\"unknown\"},{\"originalName\":\"Region\",\"mergedName\":\"Region\",\"fromId\":\"unknown\"}]}",
              "size": 0,
              "queryType": 7,
              "visualization": "map",
              "mapSettings": {
                "locInfo": "AzureLoc",
                "locInfoColumn": "Region",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "nodeColorField": "count_",
                  "colorAggregation": "Sum",
                  "type": "heatmap",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "FlowType",
              "comparison": "isEqualTo",
              "value": "NSG and VNet"
            },
            "showPin": false,
            "name": "GeoMapUnionQuery"
          }
        ]
      },
      "customWidth": "50",
      "name": "GeoMap"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}