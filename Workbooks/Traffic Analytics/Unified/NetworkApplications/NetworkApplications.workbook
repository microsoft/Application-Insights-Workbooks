{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "value::all"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time Interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "530edde2-9bce-4a98-9e2c-97f6f22b46df",
            "version": "KqlParameterItem/1.0",
            "name": "FlowType",
            "label": "Flow Type",
            "type": 2,
            "description": "Select a type of Flowlog",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"both\", \"label\":\"NSG and VNet flow logs\", \"selected\":true },\r\n    { \"value\":\"nsg\", \"label\":\"NSG flow logs\" },\r\n    { \"value\":\"vnet\", \"label\":\"VNet flow logs\" }\r\n]"
          },
          {
            "id": "77ad4c7e-43bf-4d7f-a48c-fad9dfc9b708",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics Workspace",
            "type": 5,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true and properties.provisioningState == \"Succeeded\"\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8]), selected = 1",
            "crossComponentResources": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null
          },
          {
            "id": "ed680843-d803-4a08-9608-27b729cd537d",
            "version": "KqlParameterItem/1.0",
            "name": "Units",
            "label": "Display Unit",
            "type": 2,
            "description": "Display units for analysis of your traffic flows.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]"
          },
          {
            "id": "f3c20382-2b69-4d56-911b-0d9fee794a9c",
            "version": "KqlParameterItem/1.0",
            "name": "isNSGTopologySchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (AzureNetworkAnalytics_CL | take 1 | project isPresent = iff(iscolumnexists('DiscoveryRegion_s'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "84e0ab54-be7e-454d-b382-624f4c18d5b9",
            "version": "KqlParameterItem/1.0",
            "name": "isNSGFlowSchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (AzureNetworkAnalytics_CL | take 1 | project isPresent = iff(iscolumnexists('AllowedInFlows_d'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "isVNetTopologySchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (NTATopologyDetails | take 1 | project isPresent = iff(iscolumnexists('DiscoveryRegion'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "397f54e8-ba8e-4388-a81b-9ad843e6e917",
            "version": "KqlParameterItem/1.0",
            "name": "isVNetFlowSchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (NTANetAnalytics | take 1 | project isPresent = iff(iscolumnexists('AllowedInFlows'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fd9e1ff9-a35c-4a95-845d-d8c6ed101a73",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "MainParameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "3a316914-57a8-40de-b308-1d5abc01ec76",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueryType",
                  "type": 1,
                  "description": "Select type of Query",
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "nsg",
                        "resultValType": "static",
                        "resultVal": "{isNSGTopologySchemaPresent},NSG"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "vnet",
                        "resultValType": "static",
                        "resultVal": "{isVNetTopologySchemaPresent},VNet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "{isNSGTopologySchemaPresent},NSG,{isVNetTopologySchemaPresent},VNet"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "b1715201-f711-4a92-bf97-4720b2e295c7",
                  "version": "KqlParameterItem/1.0",
                  "name": "SubscriptionQueryToRun",
                  "type": 1,
                  "description": "Subscription dropdown query",
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology' | distinct Subscription_g, SubscriptionName_s | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology' | distinct Subscription, SubscriptionName | project Subscription, SubscriptionName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology' | distinct Subscription, SubscriptionName | project Subscription, SubscriptionName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology' | distinct Subscription_g, SubscriptionName_s | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": " let nsg = AzureNetworkAnalytics_CL  | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'      | distinct Subscription_g, SubscriptionName_s      | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s;   let vnet = NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology'    | distinct Subscription, SubscriptionName    | project Subscription, SubscriptionName;   nsg | union vnet | distinct Subscription, SubscriptionName, selected =1;"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "2868d085-4cca-4e79-93a2-d27006b832c6",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopologyConditionVNet",
                  "type": 1,
                  "description": "Topology condition check",
                  "isRequired": true,
                  "query": "NTATopologyDetails \r\n| extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where timecheck\r\n| where SubType == 'StatusMessage' and ComponentType =='Topology' and Status =='Completed' \r\n| project Subscription, DiscoveryRegion, TimeProcessed \r\n| where isnotempty(Subscription) and isnotempty(DiscoveryRegion) and isnotempty(TimeProcessed)\r\n| summarize arg_max(TimeProcessed, *) by Subscription \r\n| project value = strcat(Subscription, ',', DiscoveryRegion, ',', TimeProcessed), selected = 1;",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "1e310513-a332-4175-85a8-844c28aa5f2a",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopologyConditionNSG",
                  "type": 1,
                  "description": "Topology Condition Check",
                  "query": "AzureNetworkAnalytics_CL \r\n| where SubType_s == 'StatusMessage' and ComponentType_s =='Topology' and Status_s =='Completed' \r\n| project Subscription_g, DiscoveryRegion_s, TimeProcessed_t\r\n| where isnotempty(Subscription_g) and isnotempty(DiscoveryRegion_s) and isnotempty(TimeProcessed_t)\r\n| summarize arg_max(TimeProcessed_t, *) by Subscription_g \r\n| project value = strcat(Subscription_g, ',', DiscoveryRegion_s, ',', TimeProcessed_t), selected = 1;",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "16b899ae-5d18-4bea-8b92-021686bac208",
                  "version": "KqlParameterItem/1.0",
                  "name": "isFlowAvailable",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "{isNSGFlowSchemaPresent},false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG",
                        "resultValType": "static",
                        "resultVal": "false,false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "false,{isVNetFlowSchemaPresent}"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,VNet",
                        "resultValType": "static",
                        "resultVal": "false,false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "{isNSGFlowSchemaPresent},{isVNetFlowSchemaPresent}"
                      }
                    }
                  ]
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "timeInterval",
              "comparison": "isEqualTo",
              "value": "set"
            },
            "name": "QueryConditions"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "a24b1d2a-f7b6-439d-8e05-945ca7444e43",
                  "version": "KqlParameterItem/1.0",
                  "name": "subscriptions",
                  "label": "Discovered Subscriptions",
                  "type": 2,
                  "description": "NSGs in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{SubscriptionQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "20fbdbdd-cd15-43a4-9c33-e7bfc3f86811",
                  "version": "KqlParameterItem/1.0",
                  "name": "RGQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1; let vnet = NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1; nsg | union vnet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "0ebfeaf0-fcaa-4500-8f59-1b34f60d43f8",
                  "version": "KqlParameterItem/1.0",
                  "name": "resourceGroups",
                  "label": "Resource Groups",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{RGQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "SubscriptionQueryToRun",
              "comparison": "isNotEqualTo",
              "value": "false"
            },
            "name": "ScopeFilters"
          },
          {
            "type": 1,
            "content": {
              "json": "We could not find any data in this workspace for selected time interval. Try after 20-30 mins.\r\n 1. Please try changing the time interval for current workspace selection.\r\n 2. Select a different workspace or try after 20-30 mins.\r\n 3. Please try changing the Flowlog Type for current workspace selection.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SubscriptionQueryToRun",
                "comparison": "isEqualTo",
                "value": "false"
              },
              {
                "parameterName": "QueryType",
                "comparison": "isEqualTo"
              }
            ],
            "name": "InfoBubble"
          },
          {
            "type": 1,
            "content": {
              "json": "We could not find any data in this workspace for selected time interval. Try after 20-30 mins.\r\n 1. Please try changing the time interval for current workspace selection.\r\n 2. Select a different workspace or try after 20-30 mins.\r\n 3. Please try changing the Flowlog Type for current workspace selection.\r\n 4. Please check if the workspace resource exists.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "QueryType",
              "comparison": "isEqualTo"
            },
            "name": "InfoBubble - Copy"
          }
        ],
        "exportParameters": true
      },
      "name": "Filters"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Looks like we have only resources data (Topology) and no flow info for the selected workspace. <a href = >Learn more. </a>\r\nNavigate to Your Environmnet to see your resources data.",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "isFlowAvailable",
        "comparison": "isEqualTo",
        "value": "false,false"
      },
      "name": "TopologyInfoBubble"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trafficDistributionVPNGwS2SAndInterVNet =\r\n    (AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology'\r\n        and ResourceType == 'VirtualNetworkGatewayConnection'\r\n        and ConnectionType_s in ('Vnet2Vnet', 'IPsec')\r\n        and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | extend ConnectionName = strcat(Subscription_g, '/', Name_s)\r\n    | distinct ConnectionName, VirtualNetworkGateway1_s, VirtualNetworkGateway2_s)\r\n    | mv-expand Gateway = pack_array(VirtualNetworkGateway1_s, VirtualNetworkGateway2_s) to typeof(string)\r\n    | where isnotempty(Gateway)\r\n    | join kind = inner\r\n        (AzureNetworkAnalytics_CL\r\n        | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n        and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n        | where FlowType_s in ('S2S', 'InterVNet') and ConnectionType_s == 'VpnGateway')\r\n        on $left.ConnectionName == $right.ConnectionName_s\r\n    | extend Direction = iif((FlowType_s == 'InterVNet') or (FlowType_s != 'InterVNet' and isnotempty(VM1_s)), 'Source', 'Destination');\r\nlet trafficDistributionVPNGwP2S =\r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where FlowType_s == 'P2S' and ConnectionType_s == 'VpnGateway'\r\n    | extend Gateway = substring(ConnectionName_s, 0, indexof_regex(ConnectionName_s, '_[^_]+$'))\r\n    | extend Direction = iif(isnotempty(VM1_s), 'Source', 'Destination');\r\nlet common = trafficDistributionVPNGwS2SAndInterVNet\r\n    | union trafficDistributionVPNGwP2S\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(InboundBytes_d), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(InboundBytes_d), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(OutboundBytes_d), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(OutboundBytes_d), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(InboundBytes_d), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(InboundBytes_d), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(OutboundBytes_d), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(OutboundBytes_d), 0)\r\n    | extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(InboundPackets_d), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(InboundPackets_d), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(OutboundPackets_d), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(OutboundPackets_d), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(InboundPackets_d), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(InboundPackets_d), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(OutboundPackets_d), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n        AllowedInbound = tolong(sum(AllowedInFlows_d)),\r\n        BlockedInbound = tolong(sum(DeniedInFlows_d)),\r\n        AllowedOutbound = tolong(sum(AllowedOutFlows_d)),\r\n        BlockedOutbound = tolong(sum(DeniedOutFlows_d)),\r\n        AllowedInboundBytesAtSrc = tolong(sum(AllowedInboundBytesAtSrc)),\r\n        BlockedInboundBytesAtSrc = tolong(sum(BlockedInboundBytesAtSrc)),\r\n        AllowedOutboundBytesAtSrc = tolong(sum(AllowedOutboundBytesAtSrc)),\r\n        BlockedOutboundBytesAtSrc = tolong(sum(BlockedOutboundBytesAtSrc)),\r\n        AllowedInboundBytesAtDest = tolong(sum(AllowedInboundBytesAtDest)),\r\n        BlockedInboundBytesAtDest = tolong(sum(BlockedInboundBytesAtDest)),\r\n        AllowedOutboundBytesAtDest = tolong(sum(AllowedOutboundBytesAtDest)),\r\n        BlockedOutboundBytesAtDest = tolong(sum(BlockedOutboundBytesAtDest)),\r\n        AllowedInboundPacketsAtSrc = tolong(sum(AllowedInboundPacketsAtSrc)),\r\n        BlockedInboundPacketsAtSrc = tolong(sum(BlockedInboundPacketsAtSrc)),\r\n        AllowedOutboundPacketsAtSrc = tolong(sum(AllowedOutboundPacketsAtSrc)),\r\n        BlockedOutboundPacketsAtSrc = tolong(sum(BlockedOutboundPacketsAtSrc)),\r\n        AllowedInboundPacketsAtDest = tolong(sum(AllowedInboundPacketsAtDest)),\r\n        BlockedInboundPacketsAtDest = tolong(sum(BlockedInboundPacketsAtDest)),\r\n        AllowedOutboundPacketsAtDest = tolong(sum(AllowedOutboundPacketsAtDest)),\r\n        BlockedOutboundPacketsAtDest = tolong(sum(BlockedOutboundPacketsAtDest))\r\n        by\r\n        SrcIP_s,\r\n        Subscription1_g,\r\n        NIC1_s,\r\n        DestIP_s,\r\n        Subscription2_g,\r\n        NIC2_s,\r\n        FlowDirection_s,\r\n        L4Protocol_s,\r\n        DestPort_d,\r\n        CountryOrRegion,\r\n        Direction,\r\n        Gateway, \r\n        isMaliciousFlow\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend\r\n        AllowedInbound = iif(Direction == 'Destination', tolong(AllowedInbound), 0),\r\n        BlockedInbound = iif(Direction == 'Destination', tolong(BlockedInbound), 0),\r\n        AllowedOutbound = iif(Direction == 'Source', tolong(AllowedOutbound_inferred), 0),\r\n        BlockedOutbound = iif(Direction == 'Source', tolong(BlockedOutbound), 0)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(Direction == 'Source', tolong(AllowedInboundBytesAtSrc), tolong(AllowedInboundBytesAtDest)),\r\n        BlockedInboundBytes = iif(Direction == 'Source', tolong(BlockedInboundBytesAtSrc), tolong(BlockedInboundBytesAtDest)),\r\n        AllowedOutboundBytes = iif(Direction == 'Source', tolong(AllowedOutboundBytesAtSrc_inferred), tolong(AllowedOutboundBytesAtDest_inferred)),\r\n        BlockedOutboundBytes = iif(Direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(Direction == 'Source', tolong(AllowedInboundPacketsAtSrc), tolong(AllowedInboundPacketsAtDest)),\r\n        BlockedInboundPackets = iif(Direction == 'Source', tolong(BlockedInboundPacketsAtSrc), tolong(BlockedInboundPacketsAtDest)),\r\n        AllowedOutboundPackets = iif(Direction == 'Source', tolong(AllowedOutboundPacketsAtSrc_inferred), tolong(AllowedOutboundPacketsAtDest_inferred)),\r\n        BlockedOutboundPackets = iif(Direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | extend trafficForSorting = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytes) + tolong(AllowedOutboundBytes),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytes) + tolong(BlockedOutboundBytes)\r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPackets) + tolong(AllowedOutboundPackets),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPackets) + tolong(BlockedOutboundPackets)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by Gateway\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        common\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        common\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        common\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        common\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                    "size": 3,
                    "noDataMessage": "The Application Insights resource you selected has no data.",
                    "timeContextFromParameter": "timeInterval",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "ColumnName",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "Total Traffic of all IPs"
                        }
                      },
                      "subtitleContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "rightContent": {
                        "columnMatch": "totalTraffic",
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Column2",
                        "formatter": 1
                      },
                      "showBorder": false,
                      "sortCriteriaField": "ColumnName",
                      "sortOrderField": 2,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "nsg"
                  },
                  "name": "VPNDistributionNSG"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trafficDistributionVPNGwS2SAndInterVNet =\r\n    (NTATopologyDetails\r\n    | where SubType == 'Topology'\r\n        and AzureResourceType == 'VirtualNetworkGatewayConnection'\r\n        and ConnectionType in ('Vnet2Vnet', 'IPsec')\r\n        //and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | extend ConnectionName = strcat(Subscription, '/', Name)\r\n    | distinct ConnectionName, VirtualNetworkGateway1, VirtualNetworkGateway2)\r\n    | mv-expand Gateway = pack_array(VirtualNetworkGateway1, VirtualNetworkGateway2) to typeof(string)\r\n    | where isnotempty(Gateway)\r\n    | join kind = inner\r\n        (NTANetAnalytics\r\n        | where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n        and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n        | where FlowType in ('S2S', 'InterVNet') and ConnectionType == 'VpnGateway')\r\n        on ConnectionName\r\n    | extend Direction = iif((FlowType == 'InterVNet') or (FlowType != 'InterVNet' and isnotempty(SrcVm)), 'Source', 'Destination');\r\nlet trafficDistributionVPNGwP2S =\r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and (FaSchemaVersion == '3') //and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where FlowType == 'P2S' and ConnectionType == 'VpnGateway'\r\n    | extend Gateway = substring(ConnectionName, 0, indexof_regex(ConnectionName, '_[^_]+$'))\r\n    | extend Direction = iif(isnotempty(SrcVm), 'Source', 'Destination');\r\nlet common = trafficDistributionVPNGwS2SAndInterVNet\r\n    | union trafficDistributionVPNGwP2S\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus == 'A' and FlowDirection == 'O', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus == 'D' and FlowDirection == 'O', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus == 'A' and FlowDirection == 'O', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus == 'D' and FlowDirection == 'O', tolong(BytesSrcToDest), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus == 'A' and FlowDirection == 'I', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus == 'D' and FlowDirection == 'I', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus == 'A' and FlowDirection == 'I', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus == 'D' and FlowDirection == 'I', tolong(BytesSrcToDest), 0)\r\n    | extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus == 'A' and FlowDirection == 'O', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus == 'D' and FlowDirection == 'O', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'A' and FlowDirection == 'O', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'D' and FlowDirection == 'O', tolong(PacketsSrcToDest), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus == 'A' and FlowDirection == 'I', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus == 'D' and FlowDirection == 'I', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus == 'A' and FlowDirection == 'I', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus == 'D' and FlowDirection == 'I', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n        AllowedInbound = sum(AllowedInFlows),\r\n        BlockedInbound = sum(DeniedInFlows),\r\n        AllowedOutbound = sum(AllowedOutFlows),\r\n        BlockedOutbound = sum(DeniedOutFlows),\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIp,\r\n        SrcSubscription,\r\n        SrcNic,\r\n        DestIp,\r\n        DestSubscription,\r\n        DestNic,\r\n        FlowDirection,\r\n        L4Protocol,\r\n        DestPort,\r\n        CountryOrRegion,\r\n        Direction,\r\n        Gateway,\r\n        isMaliciousFlow\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend\r\n        AllowedInbound = iif(Direction == 'Destination', tolong(AllowedInbound), 0),\r\n        BlockedInbound = iif(Direction == 'Destination', tolong(BlockedInbound), 0),\r\n        AllowedOutbound = iif(Direction == 'Source', tolong(AllowedOutbound_inferred), 0),\r\n        BlockedOutbound = iif(Direction == 'Source', tolong(BlockedOutbound), 0)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(Direction == 'Source', tolong(AllowedInboundBytesAtSrc), tolong(AllowedInboundBytesAtDest)),\r\n        BlockedInboundBytes = iif(Direction == 'Source', tolong(BlockedInboundBytesAtSrc), tolong(BlockedInboundBytesAtDest)),\r\n        AllowedOutboundBytes = iif(Direction == 'Source', tolong(AllowedOutboundBytesAtSrc_inferred), tolong(AllowedOutboundBytesAtDest_inferred)),\r\n        BlockedOutboundBytes = iif(Direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(Direction == 'Source', tolong(AllowedInboundPacketsAtSrc), tolong(AllowedInboundPacketsAtDest)),\r\n        BlockedInboundPackets = iif(Direction == 'Source', tolong(BlockedInboundPacketsAtSrc), tolong(BlockedInboundPacketsAtDest)),\r\n        AllowedOutboundPackets = iif(Direction == 'Source', tolong(AllowedOutboundPacketsAtSrc_inferred), tolong(AllowedOutboundPacketsAtDest_inferred)),\r\n        BlockedOutboundPackets = iif(Direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | extend trafficForSorting = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytes) + tolong(AllowedOutboundBytes),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytes) + tolong(BlockedOutboundBytes)\r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPackets) + tolong(AllowedOutboundPackets),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPackets) + tolong(BlockedOutboundPackets)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by Gateway\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        common\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        common\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        common\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        common\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                    "size": 3,
                    "noDataMessage": "The Application Insights resource you selected has no data.",
                    "timeContextFromParameter": "timeInterval",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "ColumnName",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "Total Traffic of all IPs"
                        }
                      },
                      "subtitleContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "rightContent": {
                        "columnMatch": "totalTraffic",
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Column2",
                        "formatter": 1
                      },
                      "showBorder": false,
                      "sortCriteriaField": "ColumnName",
                      "sortOrderField": 2,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "vnet"
                  },
                  "name": "VPNDistributionVNet"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trafficDistributionVPNGwS2SAndInterVNet =\r\n    (AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology'\r\n        and ResourceType == 'VirtualNetworkGatewayConnection'\r\n        and ConnectionType_s in ('Vnet2Vnet', 'IPsec')\r\n        and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | extend ConnectionName = strcat(Subscription_g, '/', Name_s)\r\n    | distinct ConnectionName, VirtualNetworkGateway1_s, VirtualNetworkGateway2_s)\r\n    | mv-expand Gateway = pack_array(VirtualNetworkGateway1_s, VirtualNetworkGateway2_s) to typeof(string)\r\n    | where isnotempty(Gateway)\r\n    | join kind = inner\r\n        (AzureNetworkAnalytics_CL\r\n        | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n        and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n        | where FlowType_s in ('S2S', 'InterVNet') and ConnectionType_s == 'VpnGateway')\r\n        on $left.ConnectionName == $right.ConnectionName_s\r\n    | extend Direction = iif((FlowType_s == 'InterVNet') or (FlowType_s != 'InterVNet' and isnotempty(VM1_s)), 'Source', 'Destination');\r\nlet trafficDistributionVPNGwP2S =\r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where FlowType_s == 'P2S' and ConnectionType_s == 'VpnGateway'\r\n    | extend Gateway = substring(ConnectionName_s, 0, indexof_regex(ConnectionName_s, '_[^_]+$'))\r\n    | extend Direction = iif(isnotempty(VM1_s), 'Source', 'Destination');\r\nlet common = trafficDistributionVPNGwS2SAndInterVNet\r\n    | union trafficDistributionVPNGwP2S\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(InboundBytes_d), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(InboundBytes_d), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(OutboundBytes_d), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(OutboundBytes_d), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(InboundBytes_d), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(InboundBytes_d), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(OutboundBytes_d), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(OutboundBytes_d), 0)\r\n    | extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(InboundPackets_d), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(InboundPackets_d), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(OutboundPackets_d), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(OutboundPackets_d), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(InboundPackets_d), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(InboundPackets_d), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(OutboundPackets_d), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n        AllowedInbound = sum(AllowedInFlows_d),\r\n        BlockedInbound = sum(DeniedInFlows_d),\r\n        AllowedOutbound = sum(AllowedOutFlows_d),\r\n        BlockedOutbound = sum(DeniedOutFlows_d),\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIP_s,\r\n        Subscription1_g,\r\n        NIC1_s,\r\n        DestIP_s,\r\n        Subscription2_g,\r\n        NIC2_s,\r\n        FlowDirection_s,\r\n        L4Protocol_s,\r\n        DestPort_d,\r\n        CountryOrRegion,\r\n        Direction,\r\n        Gateway, \r\n        isMaliciousFlow\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend\r\n        AllowedInbound = iif(Direction == 'Destination', tolong(AllowedInbound), 0),\r\n        BlockedInbound = iif(Direction == 'Destination', tolong(BlockedInbound), 0),\r\n        AllowedOutbound = iif(Direction == 'Source', tolong(AllowedOutbound_inferred), 0),\r\n        BlockedOutbound = iif(Direction == 'Source', tolong(BlockedOutbound), 0)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(Direction == 'Source', tolong(AllowedInboundBytesAtSrc), tolong(AllowedInboundBytesAtDest)),\r\n        BlockedInboundBytes = iif(Direction == 'Source', tolong(BlockedInboundBytesAtSrc), tolong(BlockedInboundBytesAtDest)),\r\n        AllowedOutboundBytes = iif(Direction == 'Source', tolong(AllowedOutboundBytesAtSrc_inferred), tolong(AllowedOutboundBytesAtDest_inferred)),\r\n        BlockedOutboundBytes = iif(Direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(Direction == 'Source', tolong(AllowedInboundPacketsAtSrc), tolong(AllowedInboundPacketsAtDest)),\r\n        BlockedInboundPackets = iif(Direction == 'Source', tolong(BlockedInboundPacketsAtSrc), tolong(BlockedInboundPacketsAtDest)),\r\n        AllowedOutboundPackets = iif(Direction == 'Source', tolong(AllowedOutboundPacketsAtSrc_inferred), tolong(AllowedOutboundPacketsAtDest_inferred)),\r\n        BlockedOutboundPackets = iif(Direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | extend trafficForSorting = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytes) + tolong(AllowedOutboundBytes),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytes) + tolong(BlockedOutboundBytes)\r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPackets) + tolong(AllowedOutboundPackets),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPackets) + tolong(BlockedOutboundPackets)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by Gateway;\r\n\r\nlet trafficDistributionVPNGwS2SAndInterVNetUnified =\r\n    (NTATopologyDetails\r\n    | where SubType == 'Topology'\r\n        and AzureResourceType == 'VirtualNetworkGatewayConnection'\r\n        and ConnectionType in ('Vnet2Vnet', 'IPsec')\r\n        //and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | extend ConnectionName = strcat(Subscription, '/', Name)\r\n    | distinct ConnectionName, VirtualNetworkGateway1, VirtualNetworkGateway2)\r\n    | mv-expand Gateway = pack_array(VirtualNetworkGateway1, VirtualNetworkGateway2) to typeof(string)\r\n    | where isnotempty(Gateway)\r\n    | join kind = inner\r\n        (NTANetAnalytics\r\n        | where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n        and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n        | where FlowType in ('S2S', 'InterVNet') and ConnectionType == 'VpnGateway')\r\n        on ConnectionName\r\n    | extend Direction = iif((FlowType == 'InterVNet') or (FlowType != 'InterVNet' and isnotempty(SrcVm)), 'Source', 'Destination');\r\nlet trafficDistributionVPNGwP2SUnified =\r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and (FaSchemaVersion == '3') //and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where FlowType == 'P2S' and ConnectionType == 'VpnGateway'\r\n    | extend Gateway = substring(ConnectionName, 0, indexof_regex(ConnectionName, '_[^_]+$'))\r\n    | extend Direction = iif(isnotempty(SrcVm), 'Source', 'Destination');\r\nlet commonVNet = trafficDistributionVPNGwS2SAndInterVNetUnified\r\n    | union trafficDistributionVPNGwP2SUnified\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus == 'A' and FlowDirection == 'O', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus == 'D' and FlowDirection == 'O', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus == 'A' and FlowDirection == 'O', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus == 'D' and FlowDirection == 'O', tolong(BytesSrcToDest), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus == 'A' and FlowDirection == 'I', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus == 'D' and FlowDirection == 'I', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus == 'A' and FlowDirection == 'I', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus == 'D' and FlowDirection == 'I', tolong(BytesSrcToDest), 0)\r\n    | extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus == 'A' and FlowDirection == 'O', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus == 'D' and FlowDirection == 'O', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'A' and FlowDirection == 'O', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'D' and FlowDirection == 'O', tolong(PacketsSrcToDest), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus == 'A' and FlowDirection == 'I', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus == 'D' and FlowDirection == 'I', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus == 'A' and FlowDirection == 'I', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus == 'D' and FlowDirection == 'I', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n        AllowedInbound = sum(AllowedInFlows),\r\n        BlockedInbound = sum(DeniedInFlows),\r\n        AllowedOutbound = sum(AllowedOutFlows),\r\n        BlockedOutbound = sum(DeniedOutFlows),\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIp,\r\n        SrcSubscription,\r\n        SrcNic,\r\n        DestIp,\r\n        DestSubscription,\r\n        DestNic,\r\n        FlowDirection,\r\n        L4Protocol,\r\n        DestPort,\r\n        CountryOrRegion,\r\n        Direction,\r\n        Gateway,\r\n        isMaliciousFlow\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend\r\n        AllowedInbound = iif(Direction == 'Destination', tolong(AllowedInbound), 0),\r\n        BlockedInbound = iif(Direction == 'Destination', tolong(BlockedInbound), 0),\r\n        AllowedOutbound = iif(Direction == 'Source', tolong(AllowedOutbound_inferred), 0),\r\n        BlockedOutbound = iif(Direction == 'Source', tolong(BlockedOutbound), 0)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(Direction == 'Source', tolong(AllowedInboundBytesAtSrc), tolong(AllowedInboundBytesAtDest)),\r\n        BlockedInboundBytes = iif(Direction == 'Source', tolong(BlockedInboundBytesAtSrc), tolong(BlockedInboundBytesAtDest)),\r\n        AllowedOutboundBytes = iif(Direction == 'Source', tolong(AllowedOutboundBytesAtSrc_inferred), tolong(AllowedOutboundBytesAtDest_inferred)),\r\n        BlockedOutboundBytes = iif(Direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(Direction == 'Source', tolong(AllowedInboundPacketsAtSrc), tolong(AllowedInboundPacketsAtDest)),\r\n        BlockedInboundPackets = iif(Direction == 'Source', tolong(BlockedInboundPacketsAtSrc), tolong(BlockedInboundPacketsAtDest)),\r\n        AllowedOutboundPackets = iif(Direction == 'Source', tolong(AllowedOutboundPacketsAtSrc_inferred), tolong(AllowedOutboundPacketsAtDest_inferred)),\r\n        BlockedOutboundPackets = iif(Direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | extend trafficForSorting = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytes) + tolong(AllowedOutboundBytes),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytes) + tolong(BlockedOutboundBytes)\r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPackets) + tolong(AllowedOutboundPackets),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPackets) + tolong(BlockedOutboundPackets)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by Gateway\r\n    | summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet FinalTraffic = common | union commonVNet\r\n| summarize TotalTraffic = sum(totalTraffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n union (\r\n        FinalTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = TotalTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = AllowedTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = MaliciousTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = BlockedTraffic\r\n    )",
                    "size": 3,
                    "noDataMessage": "The Application Insights resource you selected has no data.",
                    "timeContextFromParameter": "timeInterval",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "ColumnName",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "Total Traffic of all IPs"
                        }
                      },
                      "subtitleContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "rightContent": {
                        "columnMatch": "totalTraffic",
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Column2",
                        "formatter": 1
                      },
                      "showBorder": false,
                      "sortCriteriaField": "ColumnName",
                      "sortOrderField": 2,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "both"
                  },
                  "name": "VPNDistributionUnion"
                }
              ]
            },
            "name": "MetricsSplit"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "## VPN Gateway"
                  },
                  "name": "VPNGatewayText"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet trafficDistributionVPNGwS2SAndInterVNet =\r\n    (AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology'\r\n        and ResourceType == 'VirtualNetworkGatewayConnection'\r\n        and ConnectionType_s in ('Vnet2Vnet', 'IPsec')\r\n        and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | extend ConnectionName = strcat(Subscription_g, '/', Name_s)\r\n    | distinct ConnectionName, VirtualNetworkGateway1_s, VirtualNetworkGateway2_s)\r\n    | mv-expand Gateway = pack_array(VirtualNetworkGateway1_s, VirtualNetworkGateway2_s) to typeof(string)\r\n    | where isnotempty(Gateway)\r\n    | join kind = inner\r\n        (AzureNetworkAnalytics_CL\r\n        | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n        and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n        | where FlowType_s in ('S2S', 'InterVNet') and ConnectionType_s == 'VpnGateway')\r\n        on $left.ConnectionName == $right.ConnectionName_s\r\n    | extend Direction = iif((FlowType_s == 'InterVNet') or (FlowType_s != 'InterVNet' and isnotempty(VM1_s)), 'Source', 'Destination');\r\nlet trafficDistributionVPNGwP2S =\r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where FlowType_s == 'P2S' and ConnectionType_s == 'VpnGateway'\r\n    | extend Gateway = substring(ConnectionName_s, 0, indexof_regex(ConnectionName_s, '_[^_]+$'))\r\n    | extend Direction = iif(isnotempty(VM1_s), 'Source', 'Destination');\r\nlet common = trafficDistributionVPNGwS2SAndInterVNet\r\n    | union trafficDistributionVPNGwP2S\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n        AllowedInbound = sum(AllowedInFlows_d),\r\n        BlockedInbound = sum(DeniedInFlows_d),\r\n        AllowedOutbound = sum(AllowedOutFlows_d),\r\n        BlockedOutbound = sum(DeniedOutFlows_d),\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIP_s,\r\n        Subscription1_g,\r\n        NIC1_s,\r\n        DestIP_s,\r\n        Subscription2_g,\r\n        NIC2_s,\r\n        FlowDirection_s,\r\n        L4Protocol_s,\r\n        DestPort_d,\r\n        CountryOrRegion,\r\n        Direction,\r\n        Gateway\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend\r\n        AllowedInbound = iif(Direction == 'Destination', tolong(AllowedInbound), 0),\r\n        BlockedInbound = iif(Direction == 'Destination', tolong(BlockedInbound), 0),\r\n        AllowedOutbound = iif(Direction == 'Source', tolong(AllowedOutbound_inferred), 0),\r\n        BlockedOutbound = iif(Direction == 'Source', tolong(BlockedOutbound), 0)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(Direction == 'Source', tolong(AllowedInboundBytesAtSrc), tolong(AllowedInboundBytesAtDest)),\r\n        BlockedInboundBytes = iif(Direction == 'Source', tolong(BlockedInboundBytesAtSrc), tolong(BlockedInboundBytesAtDest)),\r\n        AllowedOutboundBytes = iif(Direction == 'Source', tolong(AllowedOutboundBytesAtSrc_inferred), tolong(AllowedOutboundBytesAtDest_inferred)),\r\n        BlockedOutboundBytes = iif(Direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(Direction == 'Source', tolong(AllowedInboundPacketsAtSrc), tolong(AllowedInboundPacketsAtDest)),\r\n        BlockedInboundPackets = iif(Direction == 'Source', tolong(BlockedInboundPacketsAtSrc), tolong(BlockedInboundPacketsAtDest)),\r\n        AllowedOutboundPackets = iif(Direction == 'Source', tolong(AllowedOutboundPacketsAtSrc_inferred), tolong(AllowedOutboundPacketsAtDest_inferred)),\r\n        BlockedOutboundPackets = iif(Direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | extend trafficForSorting = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))\r\n    | summarize\r\n        totalAllowedInbound = sum(AllowedInbound),\r\n        totalBlockedInbound = sum(BlockedInbound),\r\n        totalAllowedOutbound = sum(AllowedOutbound),\r\n        totalBlockedOutbound = sum(BlockedOutbound),\r\n        totalAllowedInboundBytes = sum(AllowedInboundBytes),\r\n        totalBlockedInboundBytes = sum(BlockedInboundBytes),\r\n        totalAllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n        totalBlockedOutboundBytes = sum(BlockedOutboundBytes),\r\n        totalAllowedInboundPackets = sum(AllowedInboundPackets),\r\n        totalBlockedInboundPackets = sum(BlockedInboundPackets),\r\n        totalAllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n        totalBlockedOutboundPackets = sum(BlockedOutboundPackets)\r\n        by Gateway, trafficForSorting \r\n    | where trafficForSorting > 0\r\n    | project\r\n        Gateway,\r\n        trafficForSorting,\r\n        InboundAllowed = iff('{Units:value}' =~ 'bytes', format_bytes(totalAllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalAllowedInboundPackets, 3), ValueWithUnit(totalAllowedInbound, 3))),\r\n        InboundBlocked = iff('{Units:value}' =~ 'bytes', format_bytes(totalBlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalBlockedInboundPackets, 3), ValueWithUnit(totalBlockedInbound, 3))),\r\n        OutboundAllowed = iff('{Units:value}' =~ 'bytes', format_bytes(totalAllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalAllowedOutboundPackets, 3), ValueWithUnit(totalAllowedOutbound, 3))),\r\n        OutboundBlocked = iff('{Units:value}' =~ 'bytes', format_bytes(totalBlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalBlockedOutboundPackets, 3), ValueWithUnit(totalBlockedOutbound, 3)));\r\n\r\nlet topHostsVPNGwS2SAndInterVNet =                         (AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology'\r\n        and ResourceType == 'VirtualNetworkGatewayConnection'\r\n        and ConnectionType_s in ('Vnet2Vnet', 'IPsec')\r\n        and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| extend ConnectionName = strcat(Subscription_g, '/', Name_s)\r\n| distinct ConnectionName, VirtualNetworkGateway1_s, VirtualNetworkGateway2_s)\r\n| mv-expand Gateway = pack_array(VirtualNetworkGateway1_s, VirtualNetworkGateway2_s) to typeof(string)\r\n| where isnotempty(Gateway)\r\n| join kind = inner                         (AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType_s in ('S2S', 'InterVNet') and ConnectionType_s == 'VpnGateway')\r\non $left.ConnectionName == $right.ConnectionName_s\r\n| extend host1 = strcat(Subscription1_g, '/', VM1_s), host2 = strcat(Subscription2_g, '/', VM2_s)\r\n| extend Direction = iif((FlowType_s == 'InterVNet') or (FlowType_s != 'InterVNet' and isnotempty(VM1_s)), 'Source', 'Destination')\r\n| extend host = iif(Direction == 'Source', host1, host2);\r\nlet topHostsVPNGwP2S =                         AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType_s == 'P2S' and ConnectionType_s == 'VpnGateway'\r\n| extend Gateway = substring(ConnectionName_s, 0, indexof_regex(ConnectionName_s, '_[^_]+$'))\r\n| extend host1 = strcat(Subscription1_g, '/', VM1_s), host2 = strcat(Subscription2_g, '/', VM2_s)\r\n| extend Direction = iif(isnotempty(VM1_s), 'Source', 'Destination')\r\n| extend host = iif(Direction == 'Source', host1, host2);\r\nlet table1 = topHostsVPNGwS2SAndInterVNet\r\n| union topHostsVPNGwP2S\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection, L4Protocol_s, DestPort_d, CountryOrRegion, host, Direction, Gateway\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| extend ip = iif(Direction == 'Source', SrcIP_s, DestIP_s)\r\n| summarize TotalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by ip, host, Gateway\r\n| top-nested of Gateway by max(1), top-nested 3 of partnerInfo = strcat(ip, '#', host) by max(TotalTraffic)\r\n| project Gateway, partnerInfo\r\n| summarize topHostsData = strcat_array(make_list(strcat(split(partnerInfo, '#')[0], ' (', split(partnerInfo, '#')[1], ')')), ',') by Gateway\r\n| project Gateway, topHostsData;\r\n\r\nlet topGwConnectionsS2SAndInterVNet =                         (AzureNetworkAnalytics_CL\r\n| where SubType_s == 'Topology' and ResourceType == 'VirtualNetworkGatewayConnection' and ConnectionType_s in ('Vnet2Vnet', 'IPsec') \r\nand iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| mv-expand Gateway = pack_array(VirtualNetworkGateway1_s, VirtualNetworkGateway2_s) to typeof(string)\r\n| where isnotempty(Gateway)\r\n| extend ConnectionName = strcat(Subscription_g, '/', Name_s)\r\n| distinct ConnectionName)\r\n| join kind = inner                         (AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType_s in ('S2S', 'InterVNet') and ConnectionType_s == 'VpnGateway')\r\non $left.ConnectionName == $right.ConnectionName_s;\r\nlet topGwConnectionsP2S =                         AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType_s == 'P2S' and ConnectionType_s == 'VpnGateway'\r\n| extend Gateway = substring(ConnectionName_s, 0, indexof_regex(ConnectionName_s, '_[^_]+$'));\r\nlet table2 = topGwConnectionsS2SAndInterVNet\r\n| union topGwConnectionsP2S\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection, L4Protocol_s, DestPort_d, CountryOrRegion, ConnectionName, Gateway\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| summarize TotalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by ConnectionName, Gateway\r\n| top-nested of Gateway by max(1), top-nested 3 of ConnectionName by max(TotalTraffic)\r\n| project Gateway, ConnectionName\r\n| summarize topConnections = strcat_array(make_list(ConnectionName), ',') by Gateway\r\n| project Gateway, topConnections;\r\n\r\nlet topDestPortVpnGwS2SAndInterVNet =                         (AzureNetworkAnalytics_CL\r\n| where SubType_s == 'Topology' and ResourceType == 'VirtualNetworkGatewayConnection' and ConnectionType_s in ('Vnet2Vnet', 'IPsec') \r\nand iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| extend ConnectionName = strcat(Subscription_g, '/', Name_s)\r\n| distinct ConnectionName, VirtualNetworkGateway1_s, VirtualNetworkGateway2_s)\r\n| join kind = inner                         (AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType_s in ('S2S', 'InterVNet') and ConnectionType_s == 'VpnGateway')\r\non $left.ConnectionName == $right.ConnectionName_s\r\n| where (FlowType_s == 'InterVNet') or (FlowType_s != 'InterVNet' and isnotempty(VM2_s))\r\n| extend Gateway = VirtualNetworkGateway2_s;\r\nlet topDestPortVpnGwP2S =                         AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| extend Gateway = substring(ConnectionName_s, 0, indexof_regex(ConnectionName_s, '_[^_]+$'))\r\n| where isnotempty(VM2_s);\r\nlet table3 = topDestPortVpnGwS2SAndInterVNet\r\n| union topDestPortVpnGwP2S\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection, L4Protocol_s, DestPort_d, CountryOrRegion, Gateway\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| summarize TotalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by DestPort_d, Gateway\r\n| top-nested of Gateway by max(1), top-nested 3 of DestPort_d by max(TotalTraffic)\r\n| project Gateway, DestPort_d\r\n| summarize topDestPort = strcat_array(make_list(DestPort_d), ',') by Gateway\r\n| project Gateway, topDestPort;\r\ncommon\r\n| join kind=leftouter table1 on $left.Gateway == $right.Gateway\r\n| join kind=leftouter table2 on $left.Gateway == $right.Gateway\r\n| join kind=leftouter table3 on $left.Gateway == $right.Gateway\r\n| sort by trafficForSorting desc\r\n| project Gateway, topConnections, topHostsData, topDestPort, InboundAllowed, InboundBlocked, OutboundAllowed, OutboundBlocked",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContextFromParameter": "timeInterval",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "nsg"
                  },
                  "name": "VPNNSG"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet trafficDistributionVPNGwS2SAndInterVNet =\r\n    (NTATopologyDetails\r\n    | where SubType == 'Topology'\r\n        and AzureResourceType == 'VirtualNetworkGatewayConnection'\r\n        and ConnectionType in ('Vnet2Vnet', 'IPsec')\r\n        and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | extend ConnectionName = strcat(Subscription, '/', Name)\r\n    | distinct ConnectionName, VirtualNetworkGateway1, VirtualNetworkGateway2)\r\n    | mv-expand Gateway = pack_array(VirtualNetworkGateway1, VirtualNetworkGateway2) to typeof(string)\r\n    | where isnotempty(Gateway)\r\n    | join kind = inner\r\n        (NTANetAnalytics\r\n        | where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n        and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n        | where FlowType in ('S2S', 'InterVNet') and ConnectionType == 'VpnGateway')\r\n        on ConnectionName\r\n    | extend Direction = iif((FlowType == 'InterVNet') or (FlowType != 'InterVNet' and isnotempty(SrcVm)), 'Source', 'Destination');\r\nlet trafficDistributionVPNGwP2S =\r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where FlowType == 'P2S' and ConnectionType == 'VpnGateway'\r\n    | extend Gateway = substring(ConnectionName, 0, indexof_regex(ConnectionName, '_[^_]+$'))\r\n    | extend Direction = iif(isnotempty(SrcVm), 'Source', 'Destination');\r\nlet common = trafficDistributionVPNGwS2SAndInterVNet\r\n    | union trafficDistributionVPNGwP2S\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n        AllowedInbound = sum(AllowedInFlows),\r\n        BlockedInbound = sum(DeniedInFlows),\r\n        AllowedOutbound = sum(AllowedOutFlows),\r\n        BlockedOutbound = sum(DeniedOutFlows),\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIp,\r\n        SrcSubscription,\r\n        SrcNic,\r\n        DestIp,\r\n        DestSubscription,\r\n        DestNic,\r\n        FlowDirection,\r\n        L4Protocol,\r\n        DestPort,\r\n        CountryOrRegion,\r\n        Direction,\r\n        Gateway\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend\r\n        AllowedInbound = iif(Direction == 'Destination', tolong(AllowedInbound), 0),\r\n        BlockedInbound = iif(Direction == 'Destination', tolong(BlockedInbound), 0),\r\n        AllowedOutbound = iif(Direction == 'Source', tolong(AllowedOutbound_inferred), 0),\r\n        BlockedOutbound = iif(Direction == 'Source', tolong(BlockedOutbound), 0)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(Direction == 'Source', tolong(AllowedInboundBytesAtSrc), tolong(AllowedInboundBytesAtDest)),\r\n        BlockedInboundBytes = iif(Direction == 'Source', tolong(BlockedInboundBytesAtSrc), tolong(BlockedInboundBytesAtDest)),\r\n        AllowedOutboundBytes = iif(Direction == 'Source', tolong(AllowedOutboundBytesAtSrc_inferred), tolong(AllowedOutboundBytesAtDest_inferred)),\r\n        BlockedOutboundBytes = iif(Direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(Direction == 'Source', tolong(AllowedInboundPacketsAtSrc), tolong(AllowedInboundPacketsAtDest)),\r\n        BlockedInboundPackets = iif(Direction == 'Source', tolong(BlockedInboundPacketsAtSrc), tolong(BlockedInboundPacketsAtDest)),\r\n        AllowedOutboundPackets = iif(Direction == 'Source', tolong(AllowedOutboundPacketsAtSrc_inferred), tolong(AllowedOutboundPacketsAtDest_inferred)),\r\n        BlockedOutboundPackets = iif(Direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | extend trafficForSorting = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))\r\n    | summarize\r\n        totalAllowedInbound = sum(AllowedInbound),\r\n        totalBlockedInbound = sum(BlockedInbound),\r\n        totalAllowedOutbound = sum(AllowedOutbound),\r\n        totalBlockedOutbound = sum(BlockedOutbound),\r\n        totalAllowedInboundBytes = sum(AllowedInboundBytes),\r\n        totalBlockedInboundBytes = sum(BlockedInboundBytes),\r\n        totalAllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n        totalBlockedOutboundBytes = sum(BlockedOutboundBytes),\r\n        totalAllowedInboundPackets = sum(AllowedInboundPackets),\r\n        totalBlockedInboundPackets = sum(BlockedInboundPackets),\r\n        totalAllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n        totalBlockedOutboundPackets = sum(BlockedOutboundPackets)\r\n        by Gateway, trafficForSorting \r\n    | where trafficForSorting > 0\r\n    | project\r\n        Gateway,\r\n        trafficForSorting,\r\n        InboundAllowed = iff('{Units:value}' =~ 'bytes', format_bytes(totalAllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalAllowedInboundPackets, 3), ValueWithUnit(totalAllowedInbound, 3))),\r\n        InboundBlocked = iff('{Units:value}' =~ 'bytes', format_bytes(totalBlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalBlockedInboundPackets, 3), ValueWithUnit(totalBlockedInbound, 3))),\r\n        OutboundAllowed = iff('{Units:value}' =~ 'bytes', format_bytes(totalAllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalAllowedOutboundPackets, 3), ValueWithUnit(totalAllowedOutbound, 3))),\r\n        OutboundBlocked = iff('{Units:value}' =~ 'bytes', format_bytes(totalBlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalBlockedOutboundPackets, 3), ValueWithUnit(totalBlockedOutbound, 3)));\r\n\r\nlet topHostsVPNGwS2SAndInterVNet =                         (NTATopologyDetails\r\n    | where SubType == 'Topology'\r\n        and AzureResourceType == 'VirtualNetworkGatewayConnection'\r\n        and ConnectionType in ('Vnet2Vnet', 'IPsec')\r\n        and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| extend ConnectionName = strcat(Subscription, '/', Name)\r\n| distinct ConnectionName, VirtualNetworkGateway1, VirtualNetworkGateway2)\r\n| mv-expand Gateway = pack_array(VirtualNetworkGateway1, VirtualNetworkGateway2) to typeof(string)\r\n| where isnotempty(Gateway)\r\n| join kind = inner                         (NTANetAnalytics\r\n| where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType in ('S2S', 'InterVNet') and ConnectionType == 'VpnGateway')\r\non ConnectionName\r\n| extend host1 = strcat(SrcSubscription, '/', SrcVm), host2 = strcat(DestSubscription, '/', DestVm)\r\n| extend Direction = iif((FlowType == 'InterVNet') or (FlowType != 'InterVNet' and isnotempty(SrcVm)), 'Source', 'Destination')\r\n| extend host = iif(Direction == 'Source', host1, host2);\r\nlet topHostsVPNGwP2S =                         NTANetAnalytics\r\n| where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType == 'P2S' and ConnectionType == 'VpnGateway'\r\n| extend Gateway = substring(ConnectionName, 0, indexof_regex(ConnectionName, '_[^_]+$'))\r\n| extend host1 = strcat(SrcSubscription, '/', SrcVm), host2 = strcat(DestSubscription, '/', DestVm)\r\n| extend Direction = iif(isnotempty(SrcVm), 'Source', 'Destination')\r\n| extend host = iif(Direction == 'Source', host1, host2);\r\nlet table1 = topHostsVPNGwS2SAndInterVNet\r\n| union topHostsVPNGwP2S\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), AllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, host, Direction, Gateway\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| extend ip = iif(Direction == 'Source', SrcIp, DestIp)\r\n| summarize TotalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by ip, host, Gateway\r\n| top-nested of Gateway by max(1), top-nested 3 of partnerInfo = strcat(ip, '#', host) by max(TotalTraffic)\r\n| project Gateway, partnerInfo\r\n| summarize topHostsData = strcat_array(make_list(strcat(split(partnerInfo, '#')[0], ' (', split(partnerInfo, '#')[1], ')')), ',') by Gateway\r\n| project Gateway, topHostsData;\r\n\r\nlet topGwConnectionsS2SAndInterVNet =                         (NTATopologyDetails\r\n| where SubType == 'Topology' and AzureResourceType == 'VirtualNetworkGatewayConnection' and ConnectionType in ('Vnet2Vnet', 'IPsec') and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| mv-expand Gateway = pack_array(VirtualNetworkGateway1, VirtualNetworkGateway2) to typeof(string)\r\n| where isnotempty(Gateway)\r\n| extend ConnectionName = strcat(Subscription, '/', Name)\r\n| distinct ConnectionName)\r\n| join kind = inner                         (NTANetAnalytics\r\n| where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType in ('S2S', 'InterVNet') and ConnectionType == 'VpnGateway')\r\non ConnectionName;\r\nlet topGwConnectionsP2S =                         NTANetAnalytics\r\n| where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType == 'P2S' and ConnectionType == 'VpnGateway'\r\n| extend Gateway = substring(ConnectionName, 0, indexof_regex(ConnectionName, '_[^_]+$'));\r\nlet table2 = topGwConnectionsS2SAndInterVNet\r\n| union topGwConnectionsP2S\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), AllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, ConnectionName, Gateway\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| summarize TotalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by ConnectionName, Gateway\r\n| top-nested of Gateway by max(1), top-nested 3 of ConnectionName by max(TotalTraffic)\r\n| project Gateway, ConnectionName\r\n| summarize topConnections = strcat_array(make_list(ConnectionName), ',') by Gateway\r\n| project Gateway, topConnections;\r\n\r\nlet topDestPortVpnGwS2SAndInterVNet =                         (NTATopologyDetails\r\n| where SubType == 'Topology' and AzureResourceType == 'VirtualNetworkGatewayConnection' and ConnectionType in ('Vnet2Vnet', 'IPsec') and iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| extend ConnectionName = strcat(Subscription, '/', Name)\r\n| distinct ConnectionName, VirtualNetworkGateway1, VirtualNetworkGateway2)\r\n| join kind = inner                         (NTANetAnalytics\r\n| where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where FlowType in ('S2S', 'InterVNet') and ConnectionType == 'VpnGateway')\r\non ConnectionName\r\n| where (FlowType == 'InterVNet') or (FlowType != 'InterVNet' and isnotempty(DestVm))\r\n| extend Gateway = VirtualNetworkGateway2;\r\nlet topDestPortVpnGwP2S =                         NTANetAnalytics\r\n| where SubType == 'FlowLog' and (FaSchemaVersion == '3') and TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\nand FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| extend Gateway = substring(ConnectionName, 0, indexof_regex(ConnectionName, '_[^_]+$'))\r\n| where isnotempty(DestVm);\r\nlet table3 = topDestPortVpnGwS2SAndInterVNet\r\n| union topDestPortVpnGwP2S\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), AllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, Gateway\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| summarize TotalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by DestPort, Gateway\r\n| top-nested of Gateway by max(1), top-nested 3 of DestPort by max(TotalTraffic)\r\n| project Gateway, DestPort\r\n| summarize topDestPort = strcat_array(make_list(DestPort), ',') by Gateway\r\n| project Gateway, topDestPort;\r\ncommon\r\n| join kind=leftouter table1 on $left.Gateway == $right.Gateway\r\n| join kind=leftouter table2 on $left.Gateway == $right.Gateway\r\n| join kind=leftouter table3 on $left.Gateway == $right.Gateway\r\n| sort by trafficForSorting desc\r\n| project Gateway, topConnections, topHostsData, topDestPort, InboundAllowed, InboundBlocked, OutboundAllowed, OutboundBlocked",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContextFromParameter": "timeInterval",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "vnet"
                  },
                  "name": "VPNVNet"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"ac839f52-7fb3-451f-b170-f656a5884092\",\"mergeType\":\"union\",\"leftTable\":\"VPNNSG\",\"rightTable\":\"VPNVNet\"}],\"projectRename\":[{\"originalName\":\"L7Protocol\",\"mergedName\":\"L7Protocol\",\"fromId\":\"unknown\"},{\"originalName\":\"DestPort\",\"mergedName\":\"DestPort\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topMaliciousPairs\",\"mergedName\":\"topMaliciousPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInbound\",\"mergedName\":\"totalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"allowedInbound\",\"mergedName\":\"allowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"blockedInbound\",\"mergedName\":\"blockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalMalicious\",\"mergedName\":\"totalMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"allowedMalicious\",\"mergedName\":\"allowedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"blockedMalicious\",\"mergedName\":\"blockedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"Gateway\",\"mergedName\":\"Gateway\",\"fromId\":\"unknown\"},{\"originalName\":\"topConnections\",\"mergedName\":\"topConnections\",\"fromId\":\"unknown\"},{\"originalName\":\"topHostsData\",\"mergedName\":\"topHostsData\",\"fromId\":\"unknown\"},{\"originalName\":\"topDestPort\",\"mergedName\":\"topDestPort\",\"fromId\":\"unknown\"},{\"originalName\":\"InboundAllowed\",\"mergedName\":\"InboundAllowed\",\"fromId\":\"unknown\"},{\"originalName\":\"InboundBlocked\",\"mergedName\":\"InboundBlocked\",\"fromId\":\"unknown\"},{\"originalName\":\"OutboundAllowed\",\"mergedName\":\"OutboundAllowed\",\"fromId\":\"unknown\"},{\"originalName\":\"OutboundBlocked\",\"mergedName\":\"OutboundBlocked\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].L7Protocol\",\"mergedName\":\"L7Protocol\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].DestPort\",\"mergedName\":\"DestPort\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].topMaliciousPairs\",\"mergedName\":\"topMaliciousPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].totalInbound\",\"mergedName\":\"totalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].allowedInbound\",\"mergedName\":\"allowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].blockedInbound\",\"mergedName\":\"blockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].totalMalicious\",\"mergedName\":\"totalMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].allowedMalicious\",\"mergedName\":\"allowedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[ProtocolsVNet].blockedMalicious\",\"mergedName\":\"blockedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[VPNNSG].Gateway\",\"mergedName\":\"Gateway1\",\"fromId\":\"ac839f52-7fb3-451f-b170-f656a5884092\"},{\"originalName\":\"[VPNNSG].topConnections\",\"mergedName\":\"topConnections1\",\"fromId\":\"ac839f52-7fb3-451f-b170-f656a5884092\"},{\"originalName\":\"[VPNNSG].topHostsData\",\"mergedName\":\"topHostsData1\",\"fromId\":\"ac839f52-7fb3-451f-b170-f656a5884092\"},{\"originalName\":\"[VPNNSG].topDestPort\",\"mergedName\":\"topDestPort1\",\"fromId\":\"ac839f52-7fb3-451f-b170-f656a5884092\"},{\"originalName\":\"[VPNNSG].InboundAllowed\",\"mergedName\":\"InboundAllowed1\",\"fromId\":\"ac839f52-7fb3-451f-b170-f656a5884092\"},{\"originalName\":\"[VPNNSG].InboundBlocked\",\"mergedName\":\"InboundBlocked1\",\"fromId\":\"ac839f52-7fb3-451f-b170-f656a5884092\"},{\"originalName\":\"[VPNNSG].OutboundAllowed\",\"mergedName\":\"OutboundAllowed1\",\"fromId\":\"ac839f52-7fb3-451f-b170-f656a5884092\"},{\"originalName\":\"[VPNNSG].OutboundBlocked\",\"mergedName\":\"OutboundBlocked1\",\"fromId\":\"ac839f52-7fb3-451f-b170-f656a5884092\"}]}",
                    "size": 0,
                    "queryType": 7
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "both"
                  },
                  "showPin": false,
                  "name": "VPNUnion"
                }
              ]
            },
            "name": "VPNDataGrid"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "QueryType",
        "comparison": "isNotEqualTo"
      },
      "name": "group - 5"
    }
  ],
  "fallbackResourceIds": [
    "azure monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}