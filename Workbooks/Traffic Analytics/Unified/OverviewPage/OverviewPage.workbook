{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time Interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "530edde2-9bce-4a98-9e2c-97f6f22b46df",
            "version": "KqlParameterItem/1.0",
            "name": "FlowType",
            "label": "Flow Type",
            "type": 2,
            "description": "Select a type of Flowlog",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"both\", \"label\":\"NSG and VNet flow logs\", \"selected\":true },\r\n    { \"value\":\"nsg\", \"label\":\"NSG flow logs\" },\r\n    { \"value\":\"vnet\", \"label\":\"VNet flow logs\" }\r\n]"
          },
          {
            "id": "77ad4c7e-43bf-4d7f-a48c-fad9dfc9b708",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics Workspace",
            "type": 5,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true and properties.provisioningState == \"Succeeded\"\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8]), selected = 1",
            "crossComponentResources": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null
          },
          {
            "id": "ed680843-d803-4a08-9608-27b729cd537d",
            "version": "KqlParameterItem/1.0",
            "name": "Units",
            "label": "Display Unit",
            "type": 2,
            "description": "Display units for analysis of your traffic flows.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]"
          },
          {
            "id": "f3c20382-2b69-4d56-911b-0d9fee794a9c",
            "version": "KqlParameterItem/1.0",
            "name": "isNSGTopologySchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (AzureNetworkAnalytics_CL | take 1 | project isPresent = iff(iscolumnexists('DiscoveryRegion_s'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": null
          },
          {
            "id": "84e0ab54-be7e-454d-b382-624f4c18d5b9",
            "version": "KqlParameterItem/1.0",
            "name": "isNSGFlowSchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (AzureNetworkAnalytics_CL | take 1 | project isPresent = iff(iscolumnexists('AllowedInFlows_d'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": null
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "isVNetTopologySchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (NTATopologyDetails | take 1 | project isPresent = iff(iscolumnexists('DiscoveryRegion'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": null
          },
          {
            "id": "397f54e8-ba8e-4388-a81b-9ad843e6e917",
            "version": "KqlParameterItem/1.0",
            "name": "isVNetFlowSchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (NTANetAnalytics | take 1 | project isPresent = iff(iscolumnexists('AllowedInFlows'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": null
          },
          {
            "id": "fd9e1ff9-a35c-4a95-845d-d8c6ed101a73",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "MainParameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "3a316914-57a8-40de-b308-1d5abc01ec76",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueryType",
                  "type": 1,
                  "description": "Select type of Query",
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "nsg",
                        "resultValType": "static",
                        "resultVal": "{isNSGTopologySchemaPresent},NSG"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "vnet",
                        "resultValType": "static",
                        "resultVal": "{isVNetTopologySchemaPresent},VNet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "{isNSGTopologySchemaPresent},NSG,{isVNetTopologySchemaPresent},VNet"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "b1715201-f711-4a92-bf97-4720b2e295c7",
                  "version": "KqlParameterItem/1.0",
                  "name": "SubscriptionQueryToRun",
                  "type": 1,
                  "description": "Subscription dropdown query",
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology' | distinct Subscription_g, SubscriptionName_s | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology' | distinct Subscription, SubscriptionName | project Subscription, SubscriptionName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology' | distinct Subscription, SubscriptionName | project Subscription, SubscriptionName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology' | distinct Subscription_g, SubscriptionName_s | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": " let nsg = AzureNetworkAnalytics_CL  | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'      | distinct Subscription_g, SubscriptionName_s      | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s;   let vnet = NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology'    | distinct Subscription, SubscriptionName    | project Subscription, SubscriptionName;   nsg | union vnet | distinct Subscription, SubscriptionName, selected =1;"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "2868d085-4cca-4e79-93a2-d27006b832c6",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopologyConditionVNet",
                  "type": 1,
                  "description": "Topology condition check",
                  "isRequired": true,
                  "query": "NTATopologyDetails \r\n| extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where timecheck\r\n| where SubType == 'StatusMessage' and ComponentType =='Topology' and Status =='Completed' \r\n| project Subscription, DiscoveryRegion, TimeProcessed \r\n| where isnotempty(Subscription) and isnotempty(DiscoveryRegion) and isnotempty(TimeProcessed)\r\n| summarize arg_max(TimeProcessed, *) by Subscription \r\n| project value = strcat(Subscription, ',', DiscoveryRegion, ',', TimeProcessed), selected = 1;",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "value": null
                },
                {
                  "id": "1e310513-a332-4175-85a8-844c28aa5f2a",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopologyConditionNSG",
                  "type": 1,
                  "description": "Topology Condition Check",
                  "query": "AzureNetworkAnalytics_CL \r\n| where SubType_s == 'StatusMessage' and ComponentType_s =='Topology' and Status_s =='Completed' \r\n| project Subscription_g, DiscoveryRegion_s, TimeProcessed_t\r\n| where isnotempty(Subscription_g) and isnotempty(DiscoveryRegion_s) and isnotempty(TimeProcessed_t)\r\n| summarize arg_max(TimeProcessed_t, *) by Subscription_g \r\n| project value = strcat(Subscription_g, ',', DiscoveryRegion_s, ',', TimeProcessed_t), selected = 1;",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "value": null
                },
                {
                  "id": "16b899ae-5d18-4bea-8b92-021686bac208",
                  "version": "KqlParameterItem/1.0",
                  "name": "isFlowAvailable",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "{isNSGFlowSchemaPresent},false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG",
                        "resultValType": "static",
                        "resultVal": "false,false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "false,{isVNetFlowSchemaPresent}"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,VNet",
                        "resultValType": "static",
                        "resultVal": "false,false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "{isNSGFlowSchemaPresent},{isVNetFlowSchemaPresent}"
                      }
                    }
                  ]
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "timeInterval",
              "comparison": "isEqualTo",
              "value": "set"
            },
            "name": "QueryConditions"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "a24b1d2a-f7b6-439d-8e05-945ca7444e43",
                  "version": "KqlParameterItem/1.0",
                  "name": "subscriptions",
                  "label": "Discovered Subscriptions",
                  "type": 2,
                  "description": "NSGs in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{SubscriptionQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "value": null
                },
                {
                  "id": "20fbdbdd-cd15-43a4-9c33-e7bfc3f86811",
                  "version": "KqlParameterItem/1.0",
                  "name": "RGQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1; let vnet = NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1; nsg | union vnet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "0ebfeaf0-fcaa-4500-8f59-1b34f60d43f8",
                  "version": "KqlParameterItem/1.0",
                  "name": "resourceGroups",
                  "label": "Resource Groups",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{RGQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "value": null
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "SubscriptionQueryToRun",
              "comparison": "isNotEqualTo",
              "value": "false"
            },
            "name": "ScopeFilters"
          },
          {
            "type": 1,
            "content": {
              "json": "We could not find any data in this workspace for selected time interval. Try after 20-30 mins.\r\n 1. Please try changing the time interval for current workspace selection.\r\n 2. Select a different workspace or try after 20-30 mins.\r\n 3. Please try changing the Flowlog Type for current workspace selection.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SubscriptionQueryToRun",
                "comparison": "isEqualTo",
                "value": "false"
              },
              {
                "parameterName": "isFlowAvailable",
                "comparison": "isNotEqualTo",
                "value": "false,false"
              }
            ],
            "name": "InfoBubble"
          },
          {
            "type": 1,
            "content": {
              "json": "We could not find any data in this workspace for selected time interval. Try after 20-30 mins.\r\n 1. Please try changing the time interval for current workspace selection.\r\n 2. Select a different workspace or try after 20-30 mins.\r\n 3. Please try changing the Flowlog Type for current workspace selection.\r\n 4. Please check if the workspace resource exists.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "QueryType",
              "comparison": "isEqualTo"
            },
            "name": "InfoBubble - Copy"
          }
        ],
        "exportParameters": true
      },
      "name": "Filters"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "1692a68a-b35e-4b1f-8532-0e2c87ceabcd",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "id": "249e7b09-6644-4a0f-b1bb-69636902aae2",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Traffic Distribution",
            "subTarget": "TrafficDistribution",
            "style": "link"
          },
          {
            "id": "a67c636f-e2eb-4547-9209-8c23863b5147",
            "cellValue": "selectedTab",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "NSG/ACL Hits",
            "subTarget": "Hits",
            "style": "link",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Traffic Analytics/Unified/NSG_ACLHits",
              "typeSource": "workbook",
              "gallerySource": "workbook",
              "locationSource": "default",
              "workbookName": "NSG_ACLHits",
              "passSpecificParams": true,
              "templateParameters": [
                {
                  "name": "subscriptions",
                  "source": "parameter",
                  "value": "subscriptions"
                },
                {
                  "name": "resourceGroups",
                  "source": "parameter",
                  "value": "resourceGroups"
                },
                {
                  "name": "workspace",
                  "source": "parameter",
                  "value": "workspace"
                },
                {
                  "name": "timeInterval",
                  "source": "parameter",
                  "value": "timeInterval"
                },
                {
                  "name": "Units",
                  "source": "parameter",
                  "value": "Units"
                },
                {
                  "name": "FlowType",
                  "source": "parameter",
                  "value": "FlowType"
                },
                {
                  "name": "isNSGFlowSchemaPresent",
                  "source": "parameter",
                  "value": "isNSGFlowSchemaPresent"
                },
                {
                  "name": "isNSGTopologySchemaPresent",
                  "source": "parameter",
                  "value": "isNSGTopologySchemaPresent"
                },
                {
                  "name": "isVNetFlowSchemaPresent",
                  "source": "parameter",
                  "value": "isVNetFlowSchemaPresent"
                },
                {
                  "name": "isVNetTopologySchemaPresent",
                  "source": "parameter",
                  "value": "isVNetTopologySchemaPresent"
                },
                {
                  "name": "QueryType",
                  "source": "parameter",
                  "value": "QueryType"
                },
                {
                  "name": "RGQueryToRun",
                  "source": "parameter",
                  "value": "RGQueryToRun"
                },
                {
                  "name": "SubscriptionQueryToRun",
                  "source": "parameter",
                  "value": "SubscriptionQueryToRun"
                },
                {
                  "name": "TopologyConditionNSG",
                  "source": "parameter",
                  "value": "TopologyConditionNSG"
                },
                {
                  "name": "TopologyConditionVNet",
                  "source": "parameter",
                  "value": "TopologyConditionVNet"
                }
              ],
              "viewerMode": false
            }
          },
          {
            "id": "4a96a1f3-acb8-4478-b0cc-44bbda7d916a",
            "cellValue": "selectedTab",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Your Environment",
            "style": "link",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "default",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Traffic Analytics/Unified/YourEnvironment",
              "typeSource": "workbook",
              "gallerySource": "workbook",
              "locationSource": "default",
              "workbookName": "YourEnvironment",
              "passSpecificParams": true,
              "templateParameters": [
                {
                  "name": "binningTime",
                  "source": "parameter",
                  "value": "binningTime"
                },
                {
                  "name": "FlowType",
                  "source": "parameter",
                  "value": "FlowType"
                },
                {
                  "name": "isNSGFlowSchemaPresent",
                  "source": "parameter",
                  "value": "isNSGFlowSchemaPresent"
                },
                {
                  "name": "isNSGFTopologySchemaPresent",
                  "source": "parameter",
                  "value": "isNSGTopologySchemaPresent"
                },
                {
                  "name": "isVNetFlowSchemaPresent",
                  "source": "parameter",
                  "value": "isVNetFlowSchemaPresent"
                },
                {
                  "name": "isVNetFlowSchemaPresent",
                  "source": "parameter",
                  "value": "isVNetTopologySchemaPresent"
                },
                {
                  "name": "isNSGTopologySchemaPresent",
                  "source": "parameter",
                  "value": "QueryType"
                },
                {
                  "name": "resourceGroups",
                  "source": "parameter",
                  "value": "resourceGroups"
                },
                {
                  "name": "RGQueryToRun",
                  "source": "parameter",
                  "value": "RGQueryToRun"
                },
                {
                  "name": "SubscriptionQueryToRun",
                  "source": "parameter",
                  "value": "SubscriptionQueryToRun"
                },
                {
                  "name": "subscriptions",
                  "source": "parameter",
                  "value": "subscriptions"
                },
                {
                  "name": "timeInterval",
                  "source": "parameter",
                  "value": "timeInterval"
                },
                {
                  "name": "TopologyConditionNSG",
                  "source": "parameter",
                  "value": "TopologyConditionNSG"
                },
                {
                  "name": "TopologyConditionVNet",
                  "source": "parameter",
                  "value": "TopologyConditionVNet"
                },
                {
                  "name": "Units",
                  "source": "parameter",
                  "value": "Units"
                },
                {
                  "name": "workspace",
                  "source": "parameter",
                  "value": "workspace"
                }
              ],
              "viewerMode": false
            }
          },
          {
            "id": "d1e4945d-5fd0-47cc-821d-ac866623266e",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Application Ports",
            "subTarget": "ApplicationPorts",
            "style": "link"
          },
          {
            "id": "2a4dc6ea-dced-47cd-93e6-0512682e8d1c",
            "cellValue": "selectedTab",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Network Applications",
            "subTarget": "ApplicationPorts",
            "style": "link",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Traffic Analytics/Unified/NetworkApplications",
              "typeSource": "workbook",
              "gallerySource": "workbook",
              "locationSource": "default",
              "workbookName": "NetworkApplications",
              "passSpecificParams": true,
              "templateParameters": [
                {
                  "name": "subscriptions",
                  "source": "parameter",
                  "value": "subscriptions"
                },
                {
                  "name": "resourceGroups",
                  "source": "parameter",
                  "value": "resourceGroups"
                },
                {
                  "name": "workspace",
                  "source": "parameter",
                  "value": "workspace"
                },
                {
                  "name": "timeInterval",
                  "source": "parameter",
                  "value": "timeInterval"
                },
                {
                  "name": "Units",
                  "source": "parameter",
                  "value": "Units"
                },
                {
                  "name": "FlowType",
                  "source": "parameter",
                  "value": "FlowType"
                },
                {
                  "name": "isNSGFlowSchemaPresent",
                  "source": "parameter",
                  "value": "isNSGFlowSchemaPresent"
                },
                {
                  "name": "isNSGTopologySchemaPresent",
                  "source": "parameter",
                  "value": "isNSGTopologySchemaPresent"
                },
                {
                  "name": "isVNetFlowSchemaPresent",
                  "source": "parameter",
                  "value": "isVNetFlowSchemaPresent"
                },
                {
                  "name": "isVNetTopologySchemaPresent",
                  "source": "parameter",
                  "value": "isVNetTopologySchemaPresent"
                },
                {
                  "name": "QueryType",
                  "source": "parameter",
                  "value": "QueryType"
                },
                {
                  "name": "RGQueryToRun",
                  "source": "parameter",
                  "value": "RGQueryToRun"
                },
                {
                  "name": "SubscriptionQueryToRun",
                  "source": "parameter",
                  "value": "SubscriptionQueryToRun"
                },
                {
                  "name": "TopologyConditionNSG",
                  "source": "parameter",
                  "value": "TopologyConditionNSG"
                },
                {
                  "name": "TopologyConditionVNet",
                  "source": "parameter",
                  "value": "TopologyConditionVNet"
                }
              ],
              "viewerMode": false
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "QueryType",
        "comparison": "isNotEqualTo"
      },
      "name": "Tabs"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Looks like we have only resources data (Topology) and no flow info for the selected workspace. <a href = >Learn more. </a>\r\nNavigate to Your Environmnet to see your resources data.",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "isFlowAvailable",
        "comparison": "isEqualTo",
        "value": "false,false"
      },
      "name": "TopologyInfoBubble"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## Traffic Analytics\r\n\r\nAccross Azure regions, Virtual Networks, subnets and resources."
            },
            "name": "Traffic Analytics"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "## Traffic Visualization\r\nView your network traffic flow distribution"
                  },
                  "name": "Traffic Visualization"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### Inbound Traffic"
                  },
                  "customWidth": "50",
                  "name": "InboundTitle"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### Outbound Traffic"
                  },
                  "customWidth": "50",
                  "name": "OutboundTitle"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "AzureNetworkAnalytics_CL \r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n| extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', toreal(InboundBytes_d), toreal(0)),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', toreal(InboundBytes_d), toreal(0)),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', toreal(OutboundBytes_d), toreal(0)),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', toreal(OutboundBytes_d), toreal(0)),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', toreal(InboundBytes_d), toreal(0)),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', toreal(InboundBytes_d), toreal(0)),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', toreal(OutboundBytes_d), toreal(0)),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', toreal(OutboundBytes_d), toreal(0))\r\n| extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', toreal(OutboundPackets_d), toreal(0)),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', toreal(OutboundPackets_d), toreal(0)),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', toreal(InboundPackets_d), toreal(0)),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', toreal(InboundPackets_d), toreal(0)),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', toreal(OutboundPackets_d), toreal(0)),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', toreal(OutboundPackets_d), toreal(0)),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', toreal(InboundPackets_d), toreal(0)),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', toreal(InboundPackets_d), toreal(0))\r\n| summarize AllowedInbound = sum(AllowedInFlows_d), \r\n            BlockedInbound = sum(DeniedInFlows_d), \r\n            AllowedOutbound = sum(AllowedOutFlows_d), \r\n            BlockedOutbound = sum(DeniedOutFlows_d),\r\n            AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n  by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion,FlowStartTime_t,TimeProcessed_t\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound) \r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred \r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutbound = iif(FlowDirection_s != 'I', toreal(AllowedOutbound_inferred), toreal(0) ),\r\n  Inbound = iif(FlowDirection_s != 'O', toreal(Inbound), toreal(0)), \r\n  Outbound = iif(FlowDirection_s != 'I', toreal(Outbound), toreal(0)) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(FlowDirection_s == '', toreal(AllowedInboundBytesAtSrc + AllowedInboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(AllowedInboundBytesAtSrc), toreal(AllowedInboundBytesAtDest))),\r\n        BlockedInboundBytes = iif(FlowDirection_s == '', toreal(BlockedInboundBytesAtSrc + BlockedInboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(BlockedInboundBytesAtSrc), toreal(BlockedInboundBytesAtDest))),\r\n        AllowedOutboundBytes = iif(FlowDirection_s == '', toreal(AllowedOutboundBytesAtSrc_inferred + AllowedOutboundBytesAtDest_inferred), iif(FlowDirection_s == 'O', toreal(AllowedOutboundBytesAtSrc_inferred), toreal(AllowedOutboundBytesAtDest_inferred))),\r\n        BlockedOutboundBytes = iif(FlowDirection_s == '', toreal(BlockedOutboundBytesAtSrc + BlockedOutboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(BlockedOutboundBytesAtSrc), toreal(BlockedOutboundBytesAtDest)))\r\n    | extend\r\n        InboundBytes = iif(FlowDirection_s == '', toreal(InboundBytesAtSrc + InboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(InboundBytesAtSrc), toreal(InboundBytesAtDest))),\r\n        OutboundBytes = iif(FlowDirection_s == '', toreal(OutboundBytesAtSrc + OutboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(OutboundBytesAtSrc), toreal(OutboundBytesAtDest)))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(FlowDirection_s == '', toreal(AllowedInboundPacketsAtSrc + AllowedInboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(AllowedInboundPacketsAtSrc), toreal(AllowedInboundPacketsAtDest))),\r\n        BlockedInboundPackets = iif(FlowDirection_s == '', toreal(BlockedInboundPacketsAtSrc + BlockedInboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(BlockedInboundPacketsAtSrc), toreal(BlockedInboundPacketsAtDest))),\r\n        AllowedOutboundPackets = iif(FlowDirection_s == '', toreal(AllowedOutboundPacketsAtSrc_inferred + AllowedOutboundPacketsAtDest_inferred), iif(FlowDirection_s == 'O', toreal(AllowedOutboundPacketsAtSrc_inferred), toreal(AllowedOutboundPacketsAtDest_inferred))),\r\n        BlockedOutboundPackets = iif(FlowDirection_s == '', toreal(BlockedOutboundPacketsAtSrc + BlockedOutboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(BlockedOutboundPacketsAtSrc), toreal(BlockedOutboundPacketsAtDest)))        \r\n| extend InboundPackets = iif(FlowDirection_s == '', toreal(InboundPacketsAtSrc + InboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(InboundPacketsAtSrc), toreal(InboundPacketsAtDest))),\r\n        OutboundPackets = iif(FlowDirection_s == '', toreal(OutboundPacketsAtSrc + OutboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(OutboundPacketsAtSrc), toreal(OutboundPacketsAtDest)))\r\n| summarize totalTraffic =  iff('{Units:value}' =~ 'bytes', sum(BytesCount), (iff('{Units:value}' =~ 'packets', sum(PacketsCount), sum(FlowCount)))),\r\n    totalInbound = iff('{Units:value}' =~ 'bytes', sum(InboundBytes), (iff('{Units:value}' =~ 'packets', sum(InboundPackets), sum(Inbound)))),\r\n    totalAllowedInbound = iff('{Units:value}' =~ 'bytes', sum(AllowedInboundBytes), (iff('{Units:value}' =~ 'packets', sum(AllowedInboundPackets), sum(AllowedInbound)))),\r\n    totalBlockedInbound = iff('{Units:value}' =~ 'bytes', sum(BlockedInboundBytes), (iff('{Units:value}' =~ 'packets', sum(BlockedInboundPackets), sum(BlockedInbound)))) by todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})\r\n        \r\n\r\n",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContextFromParameter": "timeInterval",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "areachart",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "nsg"
                  },
                  "name": "TotalInboundFlowsNSGQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "AzureNetworkAnalytics_CL \r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n| extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', toreal(InboundBytes_d), toreal(0)),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', toreal(InboundBytes_d), toreal(0)),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', toreal(OutboundBytes_d), toreal(0)),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', toreal(OutboundBytes_d), toreal(0)),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', toreal(InboundBytes_d), toreal(0)),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', toreal(InboundBytes_d), toreal(0)),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', toreal(OutboundBytes_d), toreal(0)),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', toreal(OutboundBytes_d), toreal(0))\r\n| extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', toreal(OutboundPackets_d), toreal(0)),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', toreal(OutboundPackets_d), toreal(0)),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', toreal(InboundPackets_d), toreal(0)),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', toreal(InboundPackets_d), toreal(0)),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', toreal(OutboundPackets_d), toreal(0)),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', toreal(OutboundPackets_d), toreal(0)),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', toreal(InboundPackets_d), toreal(0)),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', toreal(InboundPackets_d), toreal(0))\r\n| summarize AllowedInbound = sum(AllowedInFlows_d), \r\n            BlockedInbound = sum(DeniedInFlows_d), \r\n            AllowedOutbound = sum(AllowedOutFlows_d), \r\n            BlockedOutbound = sum(DeniedOutFlows_d),\r\n            AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n  by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion,FlowStartTime_t,TimeProcessed_t\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound) \r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred \r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutbound = iif(FlowDirection_s != 'I', toreal(AllowedOutbound_inferred), toreal(0) ),\r\n  Inbound = iif(FlowDirection_s != 'O', toreal(Inbound), toreal(0)), \r\n  Outbound = iif(FlowDirection_s != 'I', toreal(Outbound), toreal(0)) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(FlowDirection_s == '', toreal(AllowedInboundBytesAtSrc + AllowedInboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(AllowedInboundBytesAtSrc), toreal(AllowedInboundBytesAtDest))),\r\n        BlockedInboundBytes = iif(FlowDirection_s == '', toreal(BlockedInboundBytesAtSrc + BlockedInboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(BlockedInboundBytesAtSrc), toreal(BlockedInboundBytesAtDest))),\r\n        AllowedOutboundBytes = iif(FlowDirection_s == '', toreal(AllowedOutboundBytesAtSrc_inferred + AllowedOutboundBytesAtDest_inferred), iif(FlowDirection_s == 'O', toreal(AllowedOutboundBytesAtSrc_inferred), toreal(AllowedOutboundBytesAtDest_inferred))),\r\n        BlockedOutboundBytes = iif(FlowDirection_s == '', toreal(BlockedOutboundBytesAtSrc + BlockedOutboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(BlockedOutboundBytesAtSrc), toreal(BlockedOutboundBytesAtDest)))\r\n    | extend\r\n        InboundBytes = iif(FlowDirection_s == '', toreal(InboundBytesAtSrc + InboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(InboundBytesAtSrc), toreal(InboundBytesAtDest))),\r\n        OutboundBytes = iif(FlowDirection_s == '', toreal(OutboundBytesAtSrc + OutboundBytesAtDest), iif(FlowDirection_s == 'O', toreal(OutboundBytesAtSrc), toreal(OutboundBytesAtDest)))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(FlowDirection_s == '', toreal(AllowedInboundPacketsAtSrc + AllowedInboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(AllowedInboundPacketsAtSrc), toreal(AllowedInboundPacketsAtDest))),\r\n        BlockedInboundPackets = iif(FlowDirection_s == '', toreal(BlockedInboundPacketsAtSrc + BlockedInboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(BlockedInboundPacketsAtSrc), toreal(BlockedInboundPacketsAtDest))),\r\n        AllowedOutboundPackets = iif(FlowDirection_s == '', toreal(AllowedOutboundPacketsAtSrc_inferred + AllowedOutboundPacketsAtDest_inferred), iif(FlowDirection_s == 'O', toreal(AllowedOutboundPacketsAtSrc_inferred), toreal(AllowedOutboundPacketsAtDest_inferred))),\r\n        BlockedOutboundPackets = iif(FlowDirection_s == '', toreal(BlockedOutboundPacketsAtSrc + BlockedOutboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(BlockedOutboundPacketsAtSrc), toreal(BlockedOutboundPacketsAtDest)))        \r\n| extend InboundPackets = iif(FlowDirection_s == '', toreal(InboundPacketsAtSrc + InboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(InboundPacketsAtSrc), toreal(InboundPacketsAtDest))),\r\n        OutboundPackets = iif(FlowDirection_s == '', toreal(OutboundPacketsAtSrc + OutboundPacketsAtDest), iif(FlowDirection_s == 'O', toreal(OutboundPacketsAtSrc), toreal(OutboundPacketsAtDest)))\r\n| summarize totalTraffic =  iff('{Units:value}' =~ 'bytes', sum(BytesCount), (iff('{Units:value}' =~ 'packets', sum(PacketsCount), sum(FlowCount)))),\r\n    totalOutbound = iff('{Units:value}' =~ 'bytes', sum(OutboundBytes), (iff('{Units:value}' =~ 'packets', sum(OutboundPackets), sum(Outbound)))),\r\n    totalAllowedOutbound = iff('{Units:value}' =~ 'bytes', sum(AllowedOutboundBytes), (iff('{Units:value}' =~ 'packets', sum(AllowedOutboundPackets), sum(AllowedOutbound)))),\r\n    totalBlockedOutbound = iff('{Units:value}' =~ 'bytes', sum(BlockedOutboundBytes), (iff('{Units:value}' =~ 'packets', sum(BlockedOutboundPackets), sum(BlockedOutbound)))) by todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})//;\r\n        \r\n\r\n",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContextFromParameter": "timeInterval",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "areachart",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "nsg"
                  },
                  "name": "TotalOutboundFlowsNSGQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "NTANetAnalytics \r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3' \r\n| where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n| extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n| summarize AllowedInbound = sum(AllowedInFlows), \r\n            BlockedInbound = sum(DeniedInFlows), \r\n            AllowedOutbound = sum(AllowedOutFlows), \r\n            BlockedOutbound = sum(DeniedOutFlows),\r\n            AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n  by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion,FlowStartTime\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound) \r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred \r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutbound = iif(FlowDirection != 'Inbound', tolong(AllowedOutbound_inferred), 0 ),\r\n  Inbound = iif(FlowDirection != 'Outbound', tolong(Inbound), 0), \r\n  Outbound = iif(FlowDirection != 'Inbound', tolong(Outbound), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(FlowDirection == '', tolong(AllowedInboundBytesAtSrc + AllowedInboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(AllowedInboundBytesAtSrc), tolong(AllowedInboundBytesAtDest))),\r\n        BlockedInboundBytes = iif(FlowDirection == '', tolong(BlockedInboundBytesAtSrc + BlockedInboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(BlockedInboundBytesAtSrc), tolong(BlockedInboundBytesAtDest))),\r\n        AllowedOutboundBytes = iif(FlowDirection == '', tolong(AllowedOutboundBytesAtSrc_inferred + AllowedOutboundBytesAtDest_inferred), iif(FlowDirection == 'Outbound', tolong(AllowedOutboundBytesAtSrc_inferred), tolong(AllowedOutboundBytesAtDest_inferred))),\r\n        BlockedOutboundBytes = iif(FlowDirection == '', tolong(BlockedOutboundBytesAtSrc + BlockedOutboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)))\r\n    | extend\r\n        InboundBytes = iif(FlowDirection == '', tolong(InboundBytesAtSrc + InboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(InboundBytesAtSrc), tolong(InboundBytesAtDest))),\r\n        OutboundBytes = iif(FlowDirection == '', tolong(OutboundBytesAtSrc + OutboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(OutboundBytesAtSrc), tolong(OutboundBytesAtDest)))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(FlowDirection == '', tolong(AllowedInboundPacketsAtSrc + AllowedInboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(AllowedInboundPacketsAtSrc), tolong(AllowedInboundPacketsAtDest))),\r\n        BlockedInboundPackets = iif(FlowDirection == '', tolong(BlockedInboundPacketsAtSrc + BlockedInboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(BlockedInboundPacketsAtSrc), tolong(BlockedInboundPacketsAtDest))),\r\n        AllowedOutboundPackets = iif(FlowDirection == '', tolong(AllowedOutboundPacketsAtSrc_inferred + AllowedOutboundPacketsAtDest_inferred), iif(FlowDirection == 'Outbound', tolong(AllowedOutboundPacketsAtSrc_inferred), tolong(AllowedOutboundPacketsAtDest_inferred))),\r\n        BlockedOutboundPackets = iif(FlowDirection == '', tolong(BlockedOutboundPacketsAtSrc + BlockedOutboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest)))\r\n    | extend\r\n        InboundPackets = iif(FlowDirection == '', tolong(InboundPacketsAtSrc + InboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(InboundPacketsAtSrc), tolong(InboundPacketsAtDest))),\r\n        OutboundPackets = iif(FlowDirection == '', tolong(OutboundPacketsAtSrc + OutboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(OutboundPacketsAtSrc), tolong(OutboundPacketsAtDest)))\r\n| summarize totalTraffic =  iff('{Units:value}' =~ 'bytes', sum(BytesCount), (iff('{Units:value}' =~ 'packets', sum(PacketsCount), sum(FlowCount)))),\r\n    totalInbound = iff('{Units:value}' =~ 'bytes', sum(InboundBytes), (iff('{Units:value}' =~ 'packets', sum(InboundPackets), sum(Inbound)))),\r\n    totalAllowedInbound = iff('{Units:value}' =~ 'bytes', sum(AllowedInboundBytes), (iff('{Units:value}' =~ 'packets', sum(AllowedInboundPackets), sum(AllowedInbound)))),\r\n    totalBlockedInbound = iff('{Units:value}' =~ 'bytes', sum(BlockedInboundBytes), (iff('{Units:value}' =~ 'packets', sum(BlockedInboundPackets), sum(BlockedInbound)))) by todatetime(ceiling(FlowStartTime / {binningTime}) * {binningTime})//;\r\n\r\n",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContextFromParameter": "timeInterval",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "areachart",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "vnet"
                  },
                  "name": "TotalInboundFlowsVNetQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "NTANetAnalytics \r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3' \r\n| where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n| extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n| summarize AllowedInbound = sum(AllowedInFlows), \r\n            BlockedInbound = sum(DeniedInFlows), \r\n            AllowedOutbound = sum(AllowedOutFlows), \r\n            BlockedOutbound = sum(DeniedOutFlows),\r\n            AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n  by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion,FlowStartTime\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound) \r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred \r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutbound = iif(FlowDirection != 'Inbound', tolong(AllowedOutbound_inferred), 0 ),\r\n  Inbound = iif(FlowDirection != 'Outbound', tolong(Inbound), 0), \r\n  Outbound = iif(FlowDirection != 'Inbound', tolong(Outbound), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend\r\n        AllowedInboundBytes = iif(FlowDirection == '', tolong(AllowedInboundBytesAtSrc + AllowedInboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(AllowedInboundBytesAtSrc), tolong(AllowedInboundBytesAtDest))),\r\n        BlockedInboundBytes = iif(FlowDirection == '', tolong(BlockedInboundBytesAtSrc + BlockedInboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(BlockedInboundBytesAtSrc), tolong(BlockedInboundBytesAtDest))),\r\n        AllowedOutboundBytes = iif(FlowDirection == '', tolong(AllowedOutboundBytesAtSrc_inferred + AllowedOutboundBytesAtDest_inferred), iif(FlowDirection == 'Outbound', tolong(AllowedOutboundBytesAtSrc_inferred), tolong(AllowedOutboundBytesAtDest_inferred))),\r\n        BlockedOutboundBytes = iif(FlowDirection == '', tolong(BlockedOutboundBytesAtSrc + BlockedOutboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)))\r\n    | extend\r\n        InboundBytes = iif(FlowDirection == '', tolong(InboundBytesAtSrc + InboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(InboundBytesAtSrc), tolong(InboundBytesAtDest))),\r\n        OutboundBytes = iif(FlowDirection == '', tolong(OutboundBytesAtSrc + OutboundBytesAtDest), iif(FlowDirection == 'Outbound', tolong(OutboundBytesAtSrc), tolong(OutboundBytesAtDest)))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend\r\n        AllowedInboundPackets = iif(FlowDirection == '', tolong(AllowedInboundPacketsAtSrc + AllowedInboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(AllowedInboundPacketsAtSrc), tolong(AllowedInboundPacketsAtDest))),\r\n        BlockedInboundPackets = iif(FlowDirection == '', tolong(BlockedInboundPacketsAtSrc + BlockedInboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(BlockedInboundPacketsAtSrc), tolong(BlockedInboundPacketsAtDest))),\r\n        AllowedOutboundPackets = iif(FlowDirection == '', tolong(AllowedOutboundPacketsAtSrc_inferred + AllowedOutboundPacketsAtDest_inferred), iif(FlowDirection == 'Outbound', tolong(AllowedOutboundPacketsAtSrc_inferred), tolong(AllowedOutboundPacketsAtDest_inferred))),\r\n        BlockedOutboundPackets = iif(FlowDirection == '', tolong(BlockedOutboundPacketsAtSrc + BlockedOutboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest)))\r\n| extend InboundPackets = iif(FlowDirection == '', tolong(InboundPacketsAtSrc + InboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(InboundPacketsAtSrc), tolong(InboundPacketsAtDest))),\r\n        OutboundPackets = iif(FlowDirection == '', tolong(OutboundPacketsAtSrc + OutboundPacketsAtDest), iif(FlowDirection == 'Outbound', tolong(OutboundPacketsAtSrc), tolong(OutboundPacketsAtDest)))\r\n| summarize totalTraffic =  iff('{Units:value}' =~ 'bytes', sum(BytesCount), (iff('{Units:value}' =~ 'packets', sum(PacketsCount), sum(FlowCount)))),\r\ntotalOutbound = iff('{Units:value}' =~ 'bytes', sum(OutboundBytes), (iff('{Units:value}' =~ 'packets', sum(OutboundPackets), sum(Outbound)))),\r\ntotalAllowedOutbound = iff('{Units:value}' =~ 'bytes', sum(AllowedOutboundBytes), (iff('{Units:value}' =~ 'packets', sum(AllowedOutboundPackets), sum(AllowedOutbound)))),\r\ntotalBlockedOutbound = iff('{Units:value}' =~ 'bytes', sum(BlockedOutboundBytes), (iff('{Units:value}' =~ 'packets', sum(BlockedOutboundPackets), sum(BlockedOutbound))))\r\n by todatetime(ceiling(FlowStartTime / {binningTime}) * {binningTime})//;\r\n\r\n",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContextFromParameter": "timeInterval",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "areachart",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "vnet"
                  },
                  "name": "TotalOutboundFlowsVNetQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\",\"mergeType\":\"union\",\"leftTable\":\"TotalInboundFlowsNSGQuery\",\"rightTable\":\"TotalInboundFlowsVNetQuery\"}],\"projectRename\":[{\"originalName\":\"Column1\",\"mergedName\":\"Column1\",\"fromId\":\"unknown\"},{\"originalName\":\"totalTraffic\",\"mergedName\":\"totalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInbound\",\"mergedName\":\"totalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalAllowedInbound\",\"mergedName\":\"totalAllowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalBlockedInbound\",\"mergedName\":\"totalBlockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalAllowedOutbound\",\"mergedName\":\"totalAllowedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalBlockedOutbound\",\"mergedName\":\"totalBlockedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalOutbound\",\"mergedName\":\"totalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[TotalInboundFlowsNSGQuery].Column1\",\"mergedName\":\"Column11\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"},{\"originalName\":\"[TotalInboundFlowsNSGQuery].totalTraffic\",\"mergedName\":\"totalTraffic1\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"},{\"originalName\":\"[TotalInboundFlowsNSGQuery].totalInbound\",\"mergedName\":\"totalInbound1\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"},{\"originalName\":\"[TotalInboundFlowsNSGQuery].totalAllowedInbound\",\"mergedName\":\"totalAllowedInbound1\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"},{\"originalName\":\"[TotalInboundFlowsNSGQuery].totalBlockedInbound\",\"mergedName\":\"totalBlockedInbound1\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"}]}",
                    "size": 0,
                    "queryType": 7,
                    "visualization": "areachart"
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "both"
                  },
                  "name": "TotalInboundFlowsUnionQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\",\"mergeType\":\"union\",\"leftTable\":\"TotalOutboundFlowsNSGQuery\",\"rightTable\":\"TotalOutboundFlowsVNetQuery\"}],\"projectRename\":[{\"originalName\":\"Column1\",\"mergedName\":\"Column1\",\"fromId\":\"unknown\"},{\"originalName\":\"totalTraffic\",\"mergedName\":\"totalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"totalOutbound\",\"mergedName\":\"totalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalAllowedInbound\",\"mergedName\":\"totalAllowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalBlockedInbound\",\"mergedName\":\"totalBlockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalAllowedOutbound\",\"mergedName\":\"totalAllowedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalBlockedOutbound\",\"mergedName\":\"totalBlockedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInbound\",\"mergedName\":\"totalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[TotalOutboundFlowsNSGQuery].Column1\",\"mergedName\":\"Column11\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"},{\"originalName\":\"[TotalOutboundFlowsNSGQuery].totalTraffic\",\"mergedName\":\"totalTraffic1\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"},{\"originalName\":\"[TotalOutboundFlowsNSGQuery].totalOutbound\",\"mergedName\":\"totalOutbound1\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"},{\"originalName\":\"[TotalOutboundFlowsNSGQuery].totalAllowedOutbound\",\"mergedName\":\"totalAllowedOutbound1\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"},{\"originalName\":\"[TotalOutboundFlowsNSGQuery].totalBlockedOutbound\",\"mergedName\":\"totalBlockedOutbound1\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc060\"}]}",
                    "size": 0,
                    "queryType": 7,
                    "visualization": "areachart"
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "both"
                  },
                  "name": "TotalOutboundFlowsUnionQuery"
                }
              ]
            },
            "name": "TrafficVizualizationGroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "## Top Talking Pairs"
                  },
                  "name": "TopTalkingPairsTitle"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s, isMaliciousFlow, Subnet1_s, Subnet2_s\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    //\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType_s == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' ')), iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(VM2_s), VM2_s, iff(direction == 'Destination' and isnotempty(VM1_s), VM1_s, iff(isAzurePublicFlow, AzureRegion_s, Country_s)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,partnerIP,partnerHost, VM1_s,VM2_s, Subnet1_s, Subnet2_s\r\n    by partnerIP, partnerHost, hostEndPoint, direction, Subnet1_s, Subnet2_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    // hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", Subnet1_s, Subnet2_s)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    AzureNetworkAnalytics_CL \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIP_s, SrcIP_s)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows_d, AllowedInFlows_d + DeniedInFlows_d) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows_d, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country_s, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country_s) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| sort by trafficForSorting desc\r\n| extend VM = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(VM,'/')[0]),\"/providers/Microsoft.Compute/virtualMachines/\",(split(VM,'/')[1]))), VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n| project IP = strcat('🖥️', IP), VM, topTalkingPairs, TotalTraffic, VNet, Subnet, Subscription,\r\nTotalInbound, AllowedInbound, AllowedInboundFormatted, BlockedInbound, BlockedInboundFormatted, \r\nAllowedInboundBenign, AllowedInboundBenignFormatted, AllowedInboundMalicious, AllowedInboundMaliciousFormatted,\r\nBlockedInboundBenign, BlockedInboundBenignFormatted, BlockedInboundMalicious, BlockedInboundMaliciousFormatted,\r\nTotalOutbound, AllowedOutbound, AllowedOutboundFormatted, BlockedOutbound, BlockedOutboundFormatted,\r\nAllowedOutboundBenign, AllowedOutboundBenignFormatted, AllowedOutboundMalicious, AllowedOutboundMaliciousFormatted,\r\nBlockedOutboundBenign, BlockedOutboundBenignFormatted, BlockedOutboundMalicious, BlockedOutboundMaliciousFormatted",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "IP",
                          "formatter": 13,
                          "formatOptions": {
                            "linkColumn": "IP",
                            "linkTarget": "GenericDetails",
                            "linkIsContextBlade": true,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "VM",
                          "formatter": 13,
                          "formatOptions": {
                            "linkColumn": "VM",
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Subscription",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "linkIsContextBlade": false,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "nsg"
                  },
                  "name": "TopTalkingNSGQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,SrcVm,DestVm, isMaliciousFlow, SrcSubnet, DestSubnet\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')), iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(DestVm), DestVm, iff(direction == 'Destination' and isnotempty(SrcVm), SrcVm, iff(isAzurePublicFlow, AzureRegion, Country)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,partnerIP,partnerHost, SrcVm,DestVm, SrcSubnet, DestSubnet\r\n    by partnerIP, partnerHost, hostEndPoint, direction, SrcSubnet, DestSubnet\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    // hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", SrcSubnet, DestSubnet)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    NTANetAnalytics \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIp, SrcIp)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| sort by trafficForSorting desc\r\n| extend VM = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(VM,'/')[0]),\"/providers/Microsoft.Compute/virtualMachines/\",(split(VM,'/')[1]))), VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n| project IP = strcat('🖥️', IP), VM, topTalkingPairs, TotalTraffic, VNet, Subnet, Subscription,\r\nTotalInbound, AllowedInbound, AllowedInboundFormatted, BlockedInbound, BlockedInboundFormatted, \r\nAllowedInboundBenign, AllowedInboundBenignFormatted, AllowedInboundMalicious, AllowedInboundMaliciousFormatted,\r\nBlockedInboundBenign, BlockedInboundBenignFormatted, BlockedInboundMalicious, BlockedInboundMaliciousFormatted,\r\nTotalOutbound, AllowedOutbound, AllowedOutboundFormatted, BlockedOutbound, BlockedOutboundFormatted,\r\nAllowedOutboundBenign, AllowedOutboundBenignFormatted, AllowedOutboundMalicious, AllowedOutboundMaliciousFormatted,\r\nBlockedOutboundBenign, BlockedOutboundBenignFormatted, BlockedOutboundMalicious, BlockedOutboundMaliciousFormatted",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "IP",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "CellDetails",
                            "linkIsContextBlade": true,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Subscription",
                          "formatter": 15,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "vnet"
                  },
                  "name": "TopTalkingVNetQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"7b73f2af-391b-40c6-86a4-67319c219452\",\"mergeType\":\"union\",\"leftTable\":\"TopTalkingNSGQuery\",\"rightTable\":\"TopTalkingVNetQuery\"}],\"projectRename\":[{\"originalName\":\"[TopTalkingNSGQuery].IP\",\"mergedName\":\"IP\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].VM\",\"mergedName\":\"VM\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].VNet\",\"mergedName\":\"VNet\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedInbound\",\"mergedName\":\"AllowedInbound\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedInbound\",\"mergedName\":\"BlockedInbound\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedOutbound\",\"mergedName\":\"AllowedOutbound\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedOutbound\",\"mergedName\":\"BlockedOutbound\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"[TopTalkingNSGQuery].BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c219452\"},{\"originalName\":\"IP\",\"mergedName\":\"IP\",\"fromId\":\"unknown\"},{\"originalName\":\"VM\",\"mergedName\":\"VM\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"VNet\",\"mergedName\":\"VNet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInbound\",\"mergedName\":\"AllowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInbound\",\"mergedName\":\"BlockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutbound\",\"mergedName\":\"AllowedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutbound\",\"mergedName\":\"BlockedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"}]}",
                    "size": 0,
                    "queryType": 7,
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "IP",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "CellDetails",
                            "linkIsContextBlade": true,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Subscription",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": "Resource",
                            "showIcon": true
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "Flow Type",
                    "comparison": "isEqualTo",
                    "value": "both"
                  },
                  "showPin": false,
                  "name": "TopTalkingUnionQuery"
                }
              ]
            },
            "customWidth": "50",
            "name": "TopTalkingPairsGroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "## Top Blocked NSG Hits"
                  },
                  "name": "TopBlockedNSGHitsTitle"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x: real, precision: int) {\r\n    iff(\r\n    x < 1000,\r\n    strcat(tostring(round(x, precision)), ''), \r\n    iff(\r\n    x < 1000000,\r\n    strcat(tostring(round(x / 1000, precision)), ' K'), \r\n    iff(\r\n    x < 1000000000,\r\n    strcat(tostring(round(x / 1000000, precision)), ' M'), \r\n    iff(\r\n    x < 1000000000000,\r\n    strcat(tostring(round(x / 1000000000, precision)), ' B'), \r\n    iff(\r\n    x < 1000000000000000,\r\n    strcat(tostring(round(x / 1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x / 1000000000000000, precision)), ' q')\r\n)\r\n)\r\n)\r\n)\r\n)\r\n};\r\nlet common = \r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    // filter begins\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n// filter ends\r\n| extend\r\n    isMaliciousFlow = (FlowType_s == 'MaliciousFlow'),\r\n    isBlocked  = (FlowStatus_s == 'D')\r\n| extend \r\n    AllowedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'A', tolong(AllowedInFlows_d), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'D', tolong(DeniedInFlows_d), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'A', tolong(AllowedOutFlows_d), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'D', tolong(DeniedOutFlows_d), 0))\r\n| extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n| extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(OutboundBytes_d), 0)\r\n| extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n| extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(InboundPackets_d), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(OutboundPackets_d), 0)\r\n| extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n| extend traffic = iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n| summarize \r\n    totalAllowedInboundFlows = sum(AllowedInbound), \r\n    totalBlockedInboundFlows = sum(BlockedInbound), \r\n    totalAllowedOutboundFlows = sum(AllowedOutbound), \r\n    totalBlockedOutboundFlows = sum(BlockedOutbound), \r\n    totalMaliciousAllowedInboundFlows = sum(MaliciousAllowedInboundFlows), \r\n    totalMaliciousBlockedInboundFlows = sum(MaliciousBlockedInboundFlows), \r\n    totalMaliciousAllowedOutboundFlows = sum(MaliciousAllowedOutboundFlows), \r\n    totalMaliciousBlockedOutboundFlows = sum(MaliciousBlockedOutboundFlows),\r\n    //\r\n    totalAllowedInboundBytes = sum(AllowedInboundBytes), \r\n    totalBlockedInboundBytes = sum(BlockedInboundBytes), \r\n    totalAllowedOutboundBytes = sum(AllowedOutboundBytes), \r\n    totalBlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    totalMaliciousAllowedInboundBytes = sum(MaliciousAllowedInboundBytes), \r\n    totalMaliciousBlockedInboundBytes= sum(MaliciousBlockedInboundBytes), \r\n    totalMaliciousAllowedOutboundBytes = sum(MaliciousAllowedOutboundBytes), \r\n    totalMaliciousBlockedOutboundBytes = sum(MaliciousBlockedOutboundBytes),\r\n    //\r\n    totalAllowedInboundPackets = sum(AllowedInboundPackets), \r\n    totalBlockedInboundPackets = sum(BlockedInboundPackets), \r\n    totalAllowedOutboundPackets = sum(AllowedOutboundPackets), \r\n    totalBlockedOutboundPackets = sum(BlockedOutboundPackets), \r\n    totalMaliciousAllowedInboundPackets = sum(MaliciousAllowedInboundPackets), \r\n    totalMaliciousBlockedInboundPackets = sum(MaliciousBlockedInboundPackets), \r\n    totalMaliciousAllowedOutboundPackets = sum(MaliciousAllowedOutboundPackets), \r\n    totalMaliciousBlockedOutboundPackets = sum(MaliciousBlockedOutboundPackets),\r\n    TotalTraffic  = sum(traffic)\r\n    by NSGList_s\r\n| where TotalTraffic > 0\r\n| project\r\n    NSGList_s,\r\n    trafficForSorting = TotalTraffic,\r\n    nsgName = split(NSGList_s, '/')[2],\r\n    totalHits = iff('{Units:value}' =~ 'bytes', format_bytes(TotalTraffic, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalTraffic, 3), ValueWithUnit(TotalTraffic, 3))),\r\n    totalInboundAllowed = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets, totalAllowedInboundFlows)),\r\n    totalInboundBlocked = iff('{Units:value}' =~ 'bytes', totalBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedInboundPackets, totalBlockedInboundFlows)),\r\n    totalInbound = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes + totalBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets + totalBlockedInboundPackets, totalAllowedInboundFlows + totalBlockedInboundFlows)),\r\n    totalInboundAllowedBenign = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes - totalMaliciousAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets - totalMaliciousAllowedInboundPackets, totalAllowedInboundFlows - totalMaliciousAllowedInboundFlows)),\r\n    totalInboundAllowedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousAllowedInboundPackets, totalMaliciousAllowedInboundFlows)),\r\n    totalInboundBlockedBenign = iff('{Units:value}' =~ 'bytes', totalBlockedInboundBytes - totalMaliciousBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedInboundPackets - totalMaliciousBlockedInboundPackets, totalBlockedInboundFlows - totalMaliciousBlockedInboundFlows)),\r\n    totalInboundBlockedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousBlockedInboundPackets, totalMaliciousBlockedInboundFlows)),\r\n    totalOutboundAllowed = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets, totalAllowedOutboundFlows)),\r\n    totalOutboundBlocked = iff('{Units:value}' =~ 'bytes', totalBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedOutboundPackets, totalBlockedOutboundFlows)),\r\n    totalOutbound = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes + totalBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets + totalBlockedOutboundPackets, totalAllowedOutboundFlows + totalBlockedOutboundFlows)),\r\n    totalOutboundAllowedBenign = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes - totalMaliciousAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets - totalMaliciousAllowedOutboundPackets, totalAllowedOutboundFlows - totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundAllowedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousAllowedOutboundPackets, totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundBlockedBenign = iff('{Units:value}' =~ 'bytes', totalBlockedOutboundBytes - totalMaliciousBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedOutboundPackets - totalMaliciousBlockedOutboundPackets, totalBlockedOutboundFlows - totalMaliciousBlockedOutboundFlows)),\r\n    totalOutboundBlockedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousBlockedOutboundPackets, totalMaliciousBlockedOutboundFlows))\r\n| extend\r\n    totalInboundAllowedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowed, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowed, 3), ValueWithUnit(totalInboundAllowed, 3))),\r\n    totalInboundBlockedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlocked, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlocked, 3), ValueWithUnit(totalInboundBlocked, 3))),\r\n    totalInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInbound, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInbound, 3), ValueWithUnit(totalInbound, 3))),\r\n    totalInboundAllowedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedBenign, 3), ValueWithUnit(totalInboundAllowedBenign, 3))),\r\n    totalInboundAllowedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedMalicious, 3), ValueWithUnit(totalInboundAllowedMalicious, 3))),\r\n    totalInboundBlockedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlockedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedBenign, 3), ValueWithUnit(totalInboundBlockedBenign, 3))),\r\n    totalInboundBlockedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlockedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedMalicious, 3), ValueWithUnit(totalInboundBlockedMalicious, 3))),\r\n    totalOutboundAllowedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowed, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowed, 3), ValueWithUnit(totalOutboundAllowed, 3))),\r\n    totalOutboundBlockedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlocked, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlocked, 3), ValueWithUnit(totalOutboundBlocked, 3))),\r\n    totalOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutbound, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutbound, 3), ValueWithUnit(totalOutbound, 3))),\r\n    totalOutboundAllowedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedBenign, 3), ValueWithUnit(totalOutboundAllowedBenign, 3))),\r\n    totalOutboundAllowedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedMalicious, 3), ValueWithUnit(totalOutboundAllowedMalicious, 3))),\r\n    totalOutboundBlockedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlockedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedBenign, 3), ValueWithUnit(totalOutboundBlockedBenign, 3))),\r\n    totalOutboundBlockedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlockedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedMalicious, 3), ValueWithUnit(totalOutboundBlockedMalicious, 3)));\r\nlet TopNSGRules = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    // filter begins\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n// filter ends\r\n| summarize totalHits = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by NSGRule_s, NSGList_s\r\n| top-nested of NSGList_s by max(1), top-nested 3 of NSGRule_s by max(totalHits)\r\n| extend nsgRuleId = strcat(NSGList_s, '/', NSGRule_s);\r\nlet topRulesTable = \r\n    TopNSGRules\r\n    | summarize topRules = strcat_array(make_list(NSGRule_s), ', ') by NSGList_s\r\n    | project NSGList_s, topRules;\r\n// -----\r\nlet topMaliciousTable = \r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    // filter begins\r\n    // | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    // | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    // | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    // | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    // | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n// filter ends\r\n| extend IpTalkingToMaliciousIP = iif(isnotempty(VM2_s), DestIP_s, SrcIP_s)\r\n| extend VmTalkingToMaliciousIP = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), strcat(Subscription1_g, '/', VM1_s))\r\n| summarize totalMalicious = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, NSGList_s;\r\n// -----\r\ncommon\r\n| join kind=leftouter topRulesTable on $left.NSGList_s == $right.NSGList_s\r\n| join kind=leftouter topMaliciousTable on $left.NSGList_s == $right.NSGList_s\r\n| sort by totalMalicious desc\r\n| where isnotempty(IpTalkingToMaliciousIP)\r\n| project NSGList_s, IpTalkingToMaliciousIP, topRules, totalMalicious",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "nsg"
                  },
                  "name": "TopBlockedHitsNSGQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x: real, precision: int) {\r\n    iff(\r\n    x < 1000,\r\n    strcat(tostring(round(x, precision)), ''), \r\n    iff(\r\n    x < 1000000,\r\n    strcat(tostring(round(x / 1000, precision)), ' K'), \r\n    iff(\r\n    x < 1000000000,\r\n    strcat(tostring(round(x / 1000000, precision)), ' M'), \r\n    iff(\r\n    x < 1000000000000,\r\n    strcat(tostring(round(x / 1000000000, precision)), ' B'), \r\n    iff(\r\n    x < 1000000000000000,\r\n    strcat(tostring(round(x / 1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x / 1000000000000000, precision)), ' q')\r\n)\r\n)\r\n)\r\n)\r\n)\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"'*'\" == \"'*'\", true, (SrcSubscription in~ ('*') or DestSubscription in~ ('*')))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"'*'\" == \"'*'\", true, (rg1ToCheck in~ ('*') or rg2ToCheck in~ ('*')))\r\n    // filter ends\r\n    | extend\r\n        isMaliciousFlow = (FlowType == 'MaliciousFlow'),\r\n        isBlocked  = (FlowStatus == 'Denied')\r\n    | extend \r\n        AllowedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Allowed', tolong(AllowedInFlows), 0)), \r\n        BlockedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Denied', tolong(DeniedInFlows), 0)), \r\n        AllowedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Allowed', tolong(AllowedOutFlows), 0)), \r\n        BlockedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Denied', tolong(DeniedOutFlows), 0))\r\n    | extend \r\n        MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n        MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n        MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n        MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n        AllowedInboundBytes = iif(not(isBlocked), tolong(BytesDestToSrc), 0), \r\n        BlockedInboundBytes = iif(isBlocked, tolong(BytesDestToSrc), 0), \r\n        AllowedOutboundBytes = iif(not(isBlocked), tolong(BytesSrcToDest), 0), \r\n        BlockedOutboundBytes = iif(isBlocked, tolong(BytesSrcToDest), 0)\r\n    | extend \r\n        MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n        MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n        MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n        MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n        AllowedInboundPackets = iif(not(isBlocked), tolong(PacketsDestToSrc), 0), \r\n        BlockedInboundPackets = iif(isBlocked, tolong(PacketsDestToSrc), 0), \r\n        AllowedOutboundPackets = iif(not(isBlocked), tolong(PacketsSrcToDest), 0), \r\n        BlockedOutboundPackets = iif(isBlocked, tolong(PacketsSrcToDest), 0)\r\n    | extend \r\n        MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n        MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n        MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n        MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('flows' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('flows' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n    | summarize \r\n        totalAllowedInboundFlows = sum(AllowedInbound), \r\n        totalBlockedInboundFlows = sum(BlockedInbound), \r\n        totalAllowedOutboundFlows = sum(AllowedOutbound), \r\n        totalBlockedOutboundFlows = sum(BlockedOutbound), \r\n        totalMaliciousAllowedInboundFlows = sum(MaliciousAllowedInboundFlows), \r\n        totalMaliciousBlockedInboundFlows = sum(MaliciousBlockedInboundFlows), \r\n        totalMaliciousAllowedOutboundFlows = sum(MaliciousAllowedOutboundFlows), \r\n        totalMaliciousBlockedOutboundFlows = sum(MaliciousBlockedOutboundFlows),\r\n        //\r\n        totalAllowedInboundBytes = sum(AllowedInboundBytes), \r\n        totalBlockedInboundBytes = sum(BlockedInboundBytes), \r\n        totalAllowedOutboundBytes = sum(AllowedOutboundBytes), \r\n        totalBlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n        totalMaliciousAllowedInboundBytes = sum(MaliciousAllowedInboundBytes), \r\n        totalMaliciousBlockedInboundBytes= sum(MaliciousBlockedInboundBytes), \r\n        totalMaliciousAllowedOutboundBytes = sum(MaliciousAllowedOutboundBytes), \r\n        totalMaliciousBlockedOutboundBytes = sum(MaliciousBlockedOutboundBytes),\r\n        //\r\n        totalAllowedInboundPackets = sum(AllowedInboundPackets), \r\n        totalBlockedInboundPackets = sum(BlockedInboundPackets), \r\n        totalAllowedOutboundPackets = sum(AllowedOutboundPackets), \r\n        totalBlockedOutboundPackets = sum(BlockedOutboundPackets), \r\n        totalMaliciousAllowedInboundPackets = sum(MaliciousAllowedInboundPackets), \r\n        totalMaliciousBlockedInboundPackets = sum(MaliciousBlockedInboundPackets), \r\n        totalMaliciousAllowedOutboundPackets = sum(MaliciousAllowedOutboundPackets), \r\n        totalMaliciousBlockedOutboundPackets = sum(MaliciousBlockedOutboundPackets),\r\n        TotalTraffic  = sum(traffic)\r\n        by AclGroup\r\n    | where TotalTraffic > 0\r\n    | project\r\n        AclGroup,\r\n        trafficForSorting = TotalTraffic,\r\n        aclName = iff(isempty(tostring(split(AclGroup, \"/\")[2])), AclGroup, tostring(split(AclGroup, \"/\")[8])),\r\n        totalHits = iff('flows' =~ 'bytes', format_bytes(TotalTraffic, 3), iff('flows' =~ 'packets', ValueWithUnit(TotalTraffic, 3), ValueWithUnit(TotalTraffic, 3))),\r\n        totalInboundAllowed = iff('flows' =~ 'bytes', totalAllowedInboundBytes, iff('flows' =~ 'packets', totalAllowedInboundPackets, totalAllowedInboundFlows)),\r\n        totalInboundBlocked = iff('flows' =~ 'bytes', totalBlockedInboundBytes, iff('flows' =~ 'packets', totalBlockedInboundPackets, totalBlockedInboundFlows)),\r\n        totalInbound = iff('flows' =~ 'bytes', totalAllowedInboundBytes + totalBlockedInboundBytes, iff('flows' =~ 'packets', totalAllowedInboundPackets + totalBlockedInboundPackets, totalAllowedInboundFlows + totalBlockedInboundFlows)),\r\n        totalInboundAllowedBenign = iff('flows' =~ 'bytes', totalAllowedInboundBytes - totalMaliciousAllowedInboundBytes, iff('flows' =~ 'packets', totalAllowedInboundPackets - totalMaliciousAllowedInboundPackets, totalAllowedInboundFlows - totalMaliciousAllowedInboundFlows)),\r\n        totalInboundAllowedMalicious = iff('flows' =~ 'bytes', totalMaliciousAllowedInboundBytes, iff('flows' =~ 'packets', totalMaliciousAllowedInboundPackets, totalMaliciousAllowedInboundFlows)),\r\n        totalInboundBlockedBenign = iff('flows' =~ 'bytes', totalBlockedInboundBytes - totalMaliciousBlockedInboundBytes, iff('flows' =~ 'packets', totalBlockedInboundPackets - totalMaliciousBlockedInboundPackets, totalBlockedInboundFlows - totalMaliciousBlockedInboundFlows)),\r\n        totalInboundBlockedMalicious = iff('flows' =~ 'bytes', totalMaliciousBlockedInboundBytes, iff('flows' =~ 'packets', totalMaliciousBlockedInboundPackets, totalMaliciousBlockedInboundFlows)),\r\n        totalOutboundAllowed = iff('flows' =~ 'bytes', totalAllowedOutboundBytes, iff('flows' =~ 'packets', totalAllowedOutboundPackets, totalAllowedOutboundFlows)),\r\n        totalOutboundBlocked = iff('flows' =~ 'bytes', totalBlockedOutboundBytes, iff('flows' =~ 'packets', totalBlockedOutboundPackets, totalBlockedOutboundFlows)),\r\n        totalOutbound = iff('flows' =~ 'bytes', totalAllowedOutboundBytes + totalBlockedOutboundBytes, iff('flows' =~ 'packets', totalAllowedOutboundPackets + totalBlockedOutboundPackets, totalAllowedOutboundFlows + totalBlockedOutboundFlows)),\r\n        totalOutboundAllowedBenign = iff('flows' =~ 'bytes', totalAllowedOutboundBytes - totalMaliciousAllowedOutboundBytes, iff('flows' =~ 'packets', totalAllowedOutboundPackets - totalMaliciousAllowedOutboundPackets, totalAllowedOutboundFlows - totalMaliciousAllowedOutboundFlows)),\r\n        totalOutboundAllowedMalicious = iff('flows' =~ 'bytes', totalMaliciousAllowedOutboundBytes, iff('flows' =~ 'packets', totalMaliciousAllowedOutboundPackets, totalMaliciousAllowedOutboundFlows)),\r\n        totalOutboundBlockedBenign = iff('flows' =~ 'bytes', totalBlockedOutboundBytes - totalMaliciousBlockedOutboundBytes, iff('flows' =~ 'packets', totalBlockedOutboundPackets - totalMaliciousBlockedOutboundPackets, totalBlockedOutboundFlows - totalMaliciousBlockedOutboundFlows)),\r\n        totalOutboundBlockedMalicious = iff('flows' =~ 'bytes', totalMaliciousBlockedOutboundBytes, iff('flows' =~ 'packets', totalMaliciousBlockedOutboundPackets, totalMaliciousBlockedOutboundFlows))\r\n    | extend\r\n        totalInboundAllowedFormatted = iff('flows' =~ 'bytes', format_bytes(totalInboundAllowed, 3), iff('flows' =~ 'packets', ValueWithUnit(totalInboundAllowed, 3), ValueWithUnit(totalInboundAllowed, 3))),\r\n        totalInboundBlockedFormatted = iff('flows' =~ 'bytes', format_bytes(totalInboundBlocked, 3), iff('flows' =~ 'packets', ValueWithUnit(totalInboundBlocked, 3), ValueWithUnit(totalInboundBlocked, 3))),\r\n        totalInboundFormatted = iff('flows' =~ 'bytes', format_bytes(totalInbound, 3), iff('flows' =~ 'packets', ValueWithUnit(totalInbound, 3), ValueWithUnit(totalInbound, 3))),\r\n        totalInboundAllowedBenignFormatted = iff('flows' =~ 'bytes', format_bytes(totalInboundAllowedBenign, 3), iff('flows' =~ 'packets', ValueWithUnit(totalInboundAllowedBenign, 3), ValueWithUnit(totalInboundAllowedBenign, 3))),\r\n        totalInboundAllowedMaliciousFormatted = iff('flows' =~ 'bytes', format_bytes(totalInboundAllowedMalicious, 3), iff('flows' =~ 'packets', ValueWithUnit(totalInboundAllowedMalicious, 3), ValueWithUnit(totalInboundAllowedMalicious, 3))),\r\n        totalInboundBlockedBenignFormatted = iff('flows' =~ 'bytes', format_bytes(totalInboundBlockedBenign, 3), iff('flows' =~ 'packets', ValueWithUnit(totalInboundBlockedBenign, 3), ValueWithUnit(totalInboundBlockedBenign, 3))),\r\n        totalInboundBlockedMaliciousFormatted = iff('flows' =~ 'bytes', format_bytes(totalInboundBlockedMalicious, 3), iff('flows' =~ 'packets', ValueWithUnit(totalInboundBlockedMalicious, 3), ValueWithUnit(totalInboundBlockedMalicious, 3))),\r\n        totalOutboundAllowedFormatted = iff('flows' =~ 'bytes', format_bytes(totalOutboundAllowed, 3), iff('flows' =~ 'packets', ValueWithUnit(totalOutboundAllowed, 3), ValueWithUnit(totalOutboundAllowed, 3))),\r\n        totalOutboundBlockedFormatted = iff('flows' =~ 'bytes', format_bytes(totalOutboundBlocked, 3), iff('flows' =~ 'packets', ValueWithUnit(totalOutboundBlocked, 3), ValueWithUnit(totalOutboundBlocked, 3))),\r\n        totalOutboundFormatted = iff('flows' =~ 'bytes', format_bytes(totalOutbound, 3), iff('flows' =~ 'packets', ValueWithUnit(totalOutbound, 3), ValueWithUnit(totalOutbound, 3))),\r\n        totalOutboundAllowedBenignFormatted = iff('flows' =~ 'bytes', format_bytes(totalOutboundAllowedBenign, 3), iff('flows' =~ 'packets', ValueWithUnit(totalOutboundAllowedBenign, 3), ValueWithUnit(totalOutboundAllowedBenign, 3))),\r\n        totalOutboundAllowedMaliciousFormatted = iff('flows' =~ 'bytes', format_bytes(totalOutboundAllowedMalicious, 3), iff('flows' =~ 'packets', ValueWithUnit(totalOutboundAllowedMalicious, 3), ValueWithUnit(totalOutboundAllowedMalicious, 3))),\r\n        totalOutboundBlockedBenignFormatted = iff('flows' =~ 'bytes', format_bytes(totalOutboundBlockedBenign, 3), iff('flows' =~ 'packets', ValueWithUnit(totalOutboundBlockedBenign, 3), ValueWithUnit(totalOutboundBlockedBenign, 3))),\r\n        totalOutboundBlockedMaliciousFormatted = iff('flows' =~ 'bytes', format_bytes(totalOutboundBlockedMalicious, 3), iff('flows' =~ 'packets', ValueWithUnit(totalOutboundBlockedMalicious, 3), ValueWithUnit(totalOutboundBlockedMalicious, 3)));\r\n// -------\r\nlet TopRules = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"'*'\" == \"'*'\", true, (SrcSubscription in~ ('*') or DestSubscription in~ ('*')))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"'*'\" == \"'*'\", true, (rg1ToCheck in~ ('*') or rg2ToCheck in~ ('*')))\r\n    // filter ends\r\n    | summarize totalHits = sum(iff('flows' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('flows' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by AclRule, AclGroup\r\n    | top-nested of AclGroup by max(1), top-nested 3 of AclRule by max(totalHits)\r\n    | extend RuleId = strcat(AclGroup, '/', AclRule);\r\nlet topRulesTable = \r\n    TopRules\r\n    | summarize topRules = strcat_array(make_list(AclRule),\",\") by AclGroup\r\n    | project AclGroup, topRules;\r\n// -----\r\nlet topMaliciousTable = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType == 'MaliciousFlow'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"'*'\" == \"'*'\", true, (SrcSubscription in~ ('*') or DestSubscription in~ ('*')))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"'*'\" == \"'*'\", true, (rg1ToCheck in~ ('*') or rg2ToCheck in~ ('*')))\r\n    // filter ends\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(DestVm), DestIp, SrcIp)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), strcat(SrcSubscription, '/', SrcVm))\r\n    | summarize totalMalicious = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{Units:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, AclGroup;\r\n    //| summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by AclGroup\r\n    //| project AclGroup, topIpInfo;\r\n// ----- \r\ncommon\r\n| join kind=leftouter topRulesTable on $left.AclGroup == $right.AclGroup\r\n| join kind=leftouter topMaliciousTable on $left.AclGroup == $right.AclGroup\r\n| sort by totalMalicious desc\r\n| where isnotempty(IpTalkingToMaliciousIP)\r\n| project AclGroup, IpTalkingToMaliciousIP, topRules, totalMalicious\r\n",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "vnet"
                  },
                  "name": "TopBlockedHitsVnetQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc0a3\",\"mergeType\":\"union\",\"leftTable\":\"TopBlockedHitsNSGQuery\",\"rightTable\":\"TopBlockedHitsVnetQuery\"}],\"projectRename\":[{\"originalName\":\"IP\",\"mergedName\":\"IP\",\"fromId\":\"unknown\"},{\"originalName\":\"VM\",\"mergedName\":\"VM\",\"fromId\":\"unknown\"},{\"originalName\":\"Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs1\",\"mergedName\":\"topTalkingPairs1\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInbound\",\"mergedName\":\"AllowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInbound\",\"mergedName\":\"BlockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutbound\",\"mergedName\":\"AllowedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutbound\",\"mergedName\":\"BlockedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopBlockedHitsNSGQuery].NSGList_s\",\"mergedName\":\"NSGList_s\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc0a3\"},{\"originalName\":\"[TopBlockedHitsNSGQuery].topIpInfo\",\"mergedName\":\"topIpInfo\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc0a3\"},{\"originalName\":\"[TopBlockedHitsVnetQuery].AclGroup\",\"mergedName\":\"AclGroup\",\"fromId\":\"c0f62dff-0399-4b4c-893c-66a0fb8cc0a3\"},{\"originalName\":\"NSGList_s\",\"mergedName\":\"NSGList_s\",\"fromId\":\"unknown\"},{\"originalName\":\"IpTalkingToMaliciousIP\",\"mergedName\":\"IpTalkingToMaliciousIP\",\"fromId\":\"unknown\"},{\"originalName\":\"topRules\",\"mergedName\":\"topRules\",\"fromId\":\"unknown\"},{\"originalName\":\"totalMalicious\",\"mergedName\":\"totalMalicious\",\"fromId\":\"unknown\"}]}",
                    "size": 0,
                    "queryType": 7,
                    "visualization": "table"
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "both"
                  },
                  "name": "TopBlockedUnionQuery"
                }
              ]
            },
            "customWidth": "50",
            "name": "TopBlockedHits"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "isFlowAvailable",
          "comparison": "isNotEqualTo",
          "value": "false,false"
        },
        {
          "parameterName": "QueryType",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "Overview"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "loadType": "always",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## Traffic Distribution across your resources"
            },
            "name": "DistributionAccrossRecourcesTitle"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "f423ba7c-46b0-49d6-9a49-5d6bffa0ab8b",
                  "version": "KqlParameterItem/1.0",
                  "name": "IPTrafficNSG",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection_s,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    VM1_s,\r\n    VM2_s,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\nhost1 = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', Subnet1_s, '/', VM1_s), ''),\r\nhost2 = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', Subnet2_s, '/', VM2_s), '')\r\n| mv-expand\r\nhost = pack_array(host1, host2),\r\nIP = pack_array(SrcIP_s, DestIP_s)\r\n| where isnotempty(host) and isnotempty(IP)\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(BytesCount), iff('{Units:value}' =~ 'packets', sum(PacketsCount), tolong(sum(FlowCount))))\r\n| project Value = strcat('IpTraffic',',',totalTraffic,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "3971e0c4-02c6-4f7a-854a-b07bfb8eeee8",
                  "version": "KqlParameterItem/1.0",
                  "name": "IPTrafficVNet",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\n    and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcVm,\r\n    DestVm,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\nhost1 = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', SrcSubnet, '/', SrcVm), ''),\r\nhost2 = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestSubnet, '/', DestVm), '')\r\n| mv-expand\r\nhost = pack_array(host1, host2),\r\nIP = pack_array(SrcIp, DestIp)\r\n| where isnotempty(host) and isnotempty(IP)\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(BytesCount), iff('{Units:value}' =~ 'packets', sum(PacketsCount), sum(FlowCount)))\r\n| project value = strcat('IpTraffic',',',totalTraffic,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "a54fc5bf-3be7-4f2a-a62a-1d2e157d3abc",
                  "version": "KqlParameterItem/1.0",
                  "name": "VirtualNetworkNSG",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection_s,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    Subnet1Split = split(Subnet1_s, '/'),\r\n    Subnet2Split = split(Subnet2_s, '/')\r\n| extend host1 = iif(array_length(Subnet1Split) == 3, strcat(Subscription1_g, '/', Subnet1Split[0], '/', Subnet1Split[1]), '')\r\n| extend host2 = iif(array_length(Subnet2Split) == 3, strcat(Subscription2_g, '/', Subnet2Split[0], '/', Subnet2Split[1]), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend totalTraffic = FlowCount\r\n| where totalTraffic > 0\r\n| summarize  totalTraffic = iff('{Units:value}' =~ 'bytes', sum(BytesCount), iff('{Units:value}' =~ 'packets', sum(PacketsCount), tolong(sum(FlowCount))))\r\n| project Value = strcat('VirtualNetwork',',',totalTraffic,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "2690af12-7113-4476-b74b-7d5374071150",
                  "version": "KqlParameterItem/1.0",
                  "name": "VirtualNetworkVNet",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "\r\nNTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3' and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    Subnet1Split = split(SrcSubnet, '/'),\r\n    Subnet2Split = split(DestSubnet, '/')\r\n| extend host1 = iif(array_length(Subnet1Split) == 3, strcat(SrcSubscription, '/', Subnet1Split[0], '/', Subnet1Split[1]), '')\r\n| extend host2 = iif(array_length(Subnet2Split) == 3, strcat(DestSubscription, '/', Subnet2Split[0], '/', Subnet2Split[1]), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend totalTraffic = FlowCount\r\n| where totalTraffic > 0\r\n| summarize  totalTraffic = iff('{Units:value}' =~ 'bytes', sum(BytesCount), iff('{Units:value}' =~ 'packets', sum(PacketsCount), sum(FlowCount)))\r\n| project Value = strcat('VirtualNetwork',',',totalTraffic,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "959ef21f-c9bb-42c5-99e7-7b22daed3c3d",
                  "version": "KqlParameterItem/1.0",
                  "name": "SubnetworkNSG",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection_s,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    host1 = iif(isnotempty(Subnet1_s), strcat(Subscription1_g, '/', Subnet1_s), ''),\r\n    host2 = iif(isnotempty(Subnet2_s), strcat(Subscription2_g, '/', Subnet2_s), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| summarize  totalTraffic = iff('{Units:value}' =~ 'bytes', sum(BytesCount), iff('{Units:value}' =~ 'packets', sum(PacketsCount), tolong(sum(FlowCount))))\r\n| project Value = strcat('Subnetwork',',',totalTraffic,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "53cf04b7-9c2b-4a55-b974-d7a801933be0",
                  "version": "KqlParameterItem/1.0",
                  "name": "SubnetworkVNet",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "\r\nNTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3' and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    host1 = iif(isnotempty(SrcSubnet), strcat(SrcSubscription, '/', SrcSubnet), ''),\r\n    host2 = iif(isnotempty(DestSubnet), strcat(DestSubscription, '/', DestSubnet), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| summarize  totalTraffic = iff('{Units:value}' =~ 'bytes', sum(BytesCount), iff('{Units:value}' =~ 'packets', sum(PacketsCount), sum(FlowCount)))\r\n| project Value = strcat('Subnetwork',',',totalTraffic,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "59388d99-322d-421a-94a3-ad03cf2db1b6",
                  "version": "KqlParameterItem/1.0",
                  "name": "VmssNSG",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "\r\nlet TopologyQuery = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology' and ResourceType == 'VirtualMachine'\r\n    | extend topologycondition = split('{TopologyConditionNSG}',',')\r\n    | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[3]))\r\n    | where isnotempty(VmssName_s)\r\n    | project vmssId = strcat(Subscription_g, '/', VmssName_s)\r\n    | distinct vmssId;\r\nlet FlowLogQuery =                     AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog'\r\n        and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"nsgresourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIP_s,\r\n        Subscription1_g,\r\n        NIC1_s,\r\n        DestIP_s,\r\n        Subscription2_g,\r\n        NIC2_s,\r\n        FlowDirection_s,\r\n        L4Protocol_s,\r\n        DestPort_d,\r\n        CountryOrRegion,\r\n        Subnet1_s,\r\n        Subnet2_s,\r\n        VM1_s,\r\n        VM2_s,\r\n        FlowType_s// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n    | extend\r\n        vmssHost1 = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', Subnet1_s, '/', VM1_s), ''),\r\n        vmssHost2 = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', Subnet2_s, '/', VM2_s), '')\r\n    | extend\r\n        vmss1 = substring(vmssHost1, 0, indexof_regex(vmssHost1, '_[^_]+$')),\r\n        vmss2 = substring(vmssHost2, 0, indexof_regex(vmssHost2, '_[^_]+$'))\r\n    | where vmss1 != vmss2\r\n    | mv-expand vmss = pack_array(vmss1, vmss2)\r\n    | where isnotempty(vmss)\r\n    | extend vmssSplit = split(vmss, '/')\r\n    | extend totalTraffic = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))\r\n    | where totalTraffic > 0\r\n    | summarize aggregatedTotalFlow = sum(totalTraffic) by vmssIdWithSubnet = tostring(vmss)\r\n    | extend vmssIdWithSubnetSplit = split(vmssIdWithSubnet, '/')\r\n    | project\r\n        vmssIdWithSubnet,\r\n        vmssId = strcat(vmssIdWithSubnetSplit[0], '/', vmssIdWithSubnetSplit[4], '/', vmssIdWithSubnetSplit[5]),\r\n        aggregatedTotalFlow;\r\nTopologyQuery\r\n| join kind = inner FlowLogQuery on vmssId\r\n| project Value = strcat('VMSS',',',aggregatedTotalFlow,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "fb04bc40-b062-467d-8e1b-82eac0b7a6d6",
                  "version": "KqlParameterItem/1.0",
                  "name": "VmssVNet",
                  "type": 1,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "query": "\r\nlet TopologyQuery = NTATopologyDetails\r\n    | where SubType == 'Topology' and AzureResourceType == 'VirtualMachine'\r\n    | extend topologycondition = split('{TopologyConditionVNet}',',')\r\n    | where (Subscription == tostring(topologycondition[0]) and DiscoveryRegion == tostring(topologycondition[1]) and TimeProcessed == tostring(topologycondition[3]))\r\n    | where isnotempty(VmssName)\r\n    | project vmssId = strcat(Subscription, '/', VmssName)\r\n    | distinct vmssId;\r\nlet FlowLogQuery =                     NTANetAnalytics\r\n    | where SubType == 'FlowLog'\r\n        and FaSchemaVersion == '3'\r\n        and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIp,\r\n        SrcSubscription,\r\n        SrcNic,\r\n        DestIp,\r\n        DestSubscription,\r\n        DestNic,\r\n        FlowDirection,\r\n        L4Protocol,\r\n        DestPort,\r\n        CountryOrRegion,\r\n        SrcSubnet,\r\n        DestSubnet,\r\n        SrcVm,\r\n        DestVm,\r\n        FlowType// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n    | extend\r\n        vmssHost1 = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', SrcSubnet, '/', SrcVm), ''),\r\n        vmssHost2 = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestSubnet, '/', DestVm), '')\r\n    | extend\r\n        vmss1 = substring(vmssHost1, 0, indexof_regex(vmssHost1, '_[^_]+$')),\r\n        vmss2 = substring(vmssHost2, 0, indexof_regex(vmssHost2, '_[^_]+$'))\r\n    | where vmss1 != vmss2\r\n    | mv-expand vmss = pack_array(vmss1, vmss2)\r\n    | where isnotempty(vmss)\r\n    | extend vmssSplit = split(vmss, '/')\r\n    | extend totalTraffic = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, FlowCount))\r\n    | where totalTraffic > 0\r\n    | summarize aggregatedTotalFlow = sum(totalTraffic) by vmssIdWithSubnet = tostring(vmss)\r\n    | extend vmssIdWithSubnetSplit = split(vmssIdWithSubnet, '/')\r\n    | project\r\n        vmssIdWithSubnet,\r\n        vmssId = strcat(vmssIdWithSubnetSplit[0], '/', vmssIdWithSubnetSplit[4], '/', vmssIdWithSubnetSplit[5]),\r\n        aggregatedTotalFlow;\r\nTopologyQuery\r\n| join kind = inner FlowLogQuery on vmssId\r\n| project Value = strcat('VMSS',',',aggregatedTotalFlow,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "e5238fa2-a6fb-4325-ae1b-eaed3ede9cdf",
                  "version": "KqlParameterItem/1.0",
                  "name": "FrequentTalkersNSG",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "\r\nlet filteredTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog'\r\n        and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2') and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    // BytesFieldsExtension\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)  \r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n        // FlowSummarizationStatements\r\n        AllowedInbound = sum(AllowedInFlows_d),\r\n        BlockedInbound = sum(DeniedInFlows_d),\r\n        AllowedOutbound = sum(AllowedOutFlows_d),\r\n        BlockedOutbound = sum(DeniedOutFlows_d),\r\n        // BytesSummarizationStatements\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        // PacketsSummarizationStatements\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIP_s,\r\n        Subscription1_g,\r\n        NIC1_s,\r\n        DestIP_s,\r\n        Subscription2_g,\r\n        NIC2_s,\r\n        FlowDirection_s,\r\n        L4Protocol_s,\r\n        DestPort_d,\r\n        CountryOrRegion,\r\n        Subnet1_s,\r\n        Subnet2_s,\r\n        VM1_s,\r\n        VM2_s,\r\n        AzureRegion_s,\r\n        Country_s,\r\n        FlowType_s\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc);\r\nlet chatTable = filteredTable\r\n    | extend sourceHost = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', Subnet1_s, '/', VM1_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | extend destinationHost = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', Subnet2_s, '/', VM2_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | where (isnotempty(sourceHost) or isnotempty(SrcIP_s)) and (isnotempty(destinationHost) or isnotempty(DestIP_s))\r\n    | extend totalTraffic = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))\r\n    | where totalTraffic > 0\r\n    | summarize totalFlow = sum(totalTraffic)                                                     by sourceHost, SrcIP_s, destinationHost, DestIP_s, FlowType_s;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(sourceHost, '/', SrcIP_s, '_', destinationHost, '/', DestIP_s)\r\n    | extend rownHash = hash(rowIdentity);\r\nchatTableWithRownumber\r\n| join kind = leftouter (chatTableWithRownumber)                     on $left.sourceHost == $right.destinationHost and $left.SrcIP_s == $right.DestIP_s and $left.destinationHost == $right.sourceHost and $left.DestIP_s == $right.SrcIP_s\r\n| where isnull(rownHash1) or (rownHash < rownHash1)\r\n| extend totalFlowRighttable = iif(isnull(totalFlow1), 0, tolong(totalFlow1))\r\n| summarize finalTotalFlow = sum(totalFlow + totalFlowRighttable)\r\n| project Value = strcat('FrequentTalkers',',',finalTotalFlow,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "94361d4b-555d-45fd-a28d-be86c6547763",
                  "version": "KqlParameterItem/1.0",
                  "name": "FrequentTalkersVNet",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "\r\nlet filteredTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog'\r\n        and FaSchemaVersion == '3' and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    // BytesFieldsExtension\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n        BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n        AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n        BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n        AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n        BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n        AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n        BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)  \r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n        // FlowSummarizationStatements\r\n        AllowedInbound = sum(AllowedInFlows),\r\n        BlockedInbound = sum(DeniedInFlows),\r\n        AllowedOutbound = sum(AllowedOutFlows),\r\n        BlockedOutbound = sum(DeniedOutFlows),\r\n        // BytesSummarizationStatements\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        // PacketsSummarizationStatements\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIp,\r\n        SrcSubscription,\r\n        SrcNic,\r\n        DestIp,\r\n        DestSubscription,\r\n        DestNic,\r\n        FlowDirection,\r\n        L4Protocol,\r\n        DestPort,\r\n        CountryOrRegion,\r\n        SrcSubnet,\r\n        DestSubnet,\r\n        SrcVm,\r\n        DestVm,\r\n        AzureRegion,\r\n        Country,\r\n        FlowType\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc);\r\nlet chatTable = filteredTable\r\n    | extend sourceHost = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', SrcSubnet, '/', SrcVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | extend destinationHost = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestSubnet, '/', DestVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | where (isnotempty(sourceHost) or isnotempty(SrcIp)) and (isnotempty(destinationHost) or isnotempty(DestIp))\r\n    | extend totalTraffic = iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, FlowCount))\r\n    | where totalTraffic > 0\r\n    | summarize totalFlow = sum(totalTraffic)                                                     by sourceHost, SrcIp, destinationHost, DestIp, FlowType;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(sourceHost, '/', SrcIp, '_', destinationHost, '/', DestIp)\r\n    | extend rownHash = hash(rowIdentity);\r\nchatTableWithRownumber\r\n| join kind = leftouter (chatTableWithRownumber)                     on $left.sourceHost == $right.destinationHost and $left.SrcIp == $right.DestIp and $left.destinationHost == $right.sourceHost and $left.DestIp == $right.SrcIp\r\n| where isnull(rownHash1) or (rownHash < rownHash1)\r\n| extend totalFlowRighttable = iif(isnull(totalFlow1), 0, tolong(totalFlow1))\r\n| summarize finalTotalFlow = sum(totalFlow + totalFlowRighttable)\r\n| project Value = strcat('FrequentTalkers',',',finalTotalFlow,',','{timeInterval:label}')",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "3f51a901-5128-4a21-82ca-7c2fd91aa81b",
                  "version": "KqlParameterItem/1.0",
                  "name": "distributionType",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "IpTraffic"
                      }
                    }
                  ]
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "tilesTraffic"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let IpTraffic = print Traffic = iff(isnotempty(\"{IPTrafficNSG}\"),\"{IPTrafficNSG}\",strcat(\"IpTraffic\",',',\"0\",',',\"{timeInterval:label}\"));\r\nlet VirtualNetwork = print Traffic = iff(isnotempty(\"{VirtualNetworkNSG}\"),\"{VirtualNetworkNSG}\",strcat(\"VirtualNetwork\",',',\"0\",',',\"{timeInterval:label}\"));\r\nlet Subnetwork = print Traffic = iff(isnotempty(\"{SubnetworkNSG}\"),\"{SubnetworkNSG}\",strcat(\"Subnetwork\",',',\"0\",',',\"{timeInterval:label}\"));\r\nlet Vmss = print Traffic = iff(isnotempty(\"{VmssNSG}\"),\"{VmssNSG}\",strcat(\"VMSS\",',',\"0\",',',\"{timeInterval:label}\"));\r\nlet FrequentTalkers = print Traffic = iff(isnotempty(\"{FrequentTalkersNSG}\"),\"{FrequentTalkersNSG}\",strcat(\"FrequentTalkers\",',',\"0\",',',\"{timeInterval:label}\"));\r\nunion (\r\n        IpTraffic\r\n        | extend ipTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(ipTraffic[0]), totalTraffic = tolong(ipTraffic[1]), TimeStamp = tostring(ipTraffic[2]), item = '1', units = '{Units}'\r\n    ),\r\n    (\r\n        VirtualNetwork\r\n        | extend virtualnetworkTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(virtualnetworkTraffic[0]), totalTraffic = tolong(virtualnetworkTraffic[1]), TimeStamp = tostring(virtualnetworkTraffic[2]), item = '2', units = '{Units}'\r\n    ),\r\n    (\r\n        Subnetwork\r\n        | extend subnetworkTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(subnetworkTraffic[0]), totalTraffic = tolong(subnetworkTraffic[1]), TimeStamp = tostring(subnetworkTraffic[2]), item = '3', units = '{Units}'\r\n    ),\r\n    (\r\n        Vmss\r\n        | extend vmssTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(vmssTraffic[0]), totalTraffic = tolong(vmssTraffic[1]), TimeStamp = tostring(vmssTraffic[2]), item = '4', units = '{Units}'\r\n    ),\r\n    (\r\n        FrequentTalkers\r\n        | extend frequenttalkersTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(frequenttalkersTraffic[0]), totalTraffic = tolong(frequenttalkersTraffic[1]), TimeStamp = tostring(frequenttalkersTraffic[2]), item = '5', units = '{Units}'\r\n    )\r\n",
                    "size": 3,
                    "noDataMessage": "The Application Insights resource you selected has no data.",
                    "timeContextFromParameter": "timeInterval",
                    "exportFieldName": "Label",
                    "exportParameterName": "distributiontype",
                    "exportDefaultValue": "IpTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Label",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "Total Traffic of all IPs"
                        }
                      },
                      "subtitleContent": {
                        "columnMatch": "MetricKind",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "totalTraffic",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "magenta"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "rightContent": {
                        "columnMatch": "units",
                        "formatter": 1
                      },
                      "secondaryContent": {
                        "columnMatch": "TimeStamp",
                        "formatter": 1
                      },
                      "showBorder": true,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "FlowType",
                      "comparison": "isEqualTo",
                      "value": "nsg"
                    },
                    {
                      "parameterName": "isNSGFlowSchemaPresent",
                      "comparison": "isEqualTo",
                      "value": "true"
                    }
                  ],
                  "name": "DistributionNSG"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let IpTraffic = print Traffic = iff(isnotempty(\"{IPTrafficVNet}\"),\"{IPTrafficVNet}\",strcat(\"IpTraffic\",',',\"0\",',',\"{timeInterval:label}\"));\r\nlet VirtualNetwork = print Traffic = iff(isnotempty(\"{VirtualNetworkVNet}\"),\"{VirtualNetworkVNet}\",strcat(\"VirtualNetwork\",',',\"0\",',',\"{timeInterval:label}\"));\r\nlet Subnetwork = print Traffic = iff(isnotempty(\"{SubnetworkVNet}\"),\"{SubnetworkVNet}\",strcat(\"Subnetwork\",',',\"0\",',',\"{timeInterval:label}\"));\r\nlet Vmss = print Traffic = iff(isnotempty(\"{VmssVNet}\"),\"{VmssVNet}\",strcat(\"VMSS\",',',\"0\",',',\"{timeInterval:label}\"));\r\nlet FrequentTalkers = print Traffic = iff(isnotempty(\"{FrequentTalkersVNet}\"),\"{FrequentTalkersVNet}\",strcat(\"FrequentTalkers\",',',\"0\",',',\"{timeInterval:label}\"));\r\nunion (\r\n        IpTraffic\r\n        | extend ipTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(ipTraffic[0]), totalTraffic = tolong(ipTraffic[1]), TimeStamp = tostring(ipTraffic[2]), item = '1', units = '{Units}'\r\n    ),\r\n    (\r\n        VirtualNetwork\r\n        | extend virtualnetworkTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(virtualnetworkTraffic[0]), totalTraffic = tolong(virtualnetworkTraffic[1]), TimeStamp = tostring(virtualnetworkTraffic[2]), item = '2', units = '{Units}'\r\n    ),\r\n    (\r\n        Subnetwork\r\n        | extend subnetworkTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(subnetworkTraffic[0]), totalTraffic = tolong(subnetworkTraffic[1]), TimeStamp = tostring(subnetworkTraffic[2]), item = '3', units = '{Units}'\r\n    ),\r\n    (\r\n        Vmss\r\n        | extend vmssTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(vmssTraffic[0]), totalTraffic = tolong(vmssTraffic[1]), TimeStamp = tostring(vmssTraffic[2]), item = '4', units = '{Units}'\r\n    ),\r\n    (\r\n        FrequentTalkers\r\n        | extend frequenttalkersTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(frequenttalkersTraffic[0]), totalTraffic = tolong(frequenttalkersTraffic[1]), TimeStamp = tostring(frequenttalkersTraffic[2]), item = '5', units = '{Units}'\r\n    )\r\n",
                    "size": 3,
                    "noDataMessage": "The Application Insights resource you selected has no data.",
                    "exportFieldName": "Label",
                    "exportParameterName": "distributiontype",
                    "exportDefaultValue": "IpTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Label",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "Total Traffic of all IPs"
                        }
                      },
                      "leftContent": {
                        "columnMatch": "totalTraffic",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "magenta"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "rightContent": {
                        "columnMatch": "units",
                        "formatter": 1
                      },
                      "secondaryContent": {
                        "columnMatch": "TimeStamp",
                        "formatter": 1
                      },
                      "showBorder": true,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "FlowType",
                      "comparison": "isEqualTo",
                      "value": "vnet"
                    },
                    {
                      "parameterName": "isVNetFlowSchemaPresent",
                      "comparison": "isEqualTo",
                      "value": "true"
                    }
                  ],
                  "name": "DistributionVNet"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "//IP\r\nlet IpTraffic = print Traffic = iff((isnotempty(\"{IPTrafficNSG}\") and isnotempty(\"{IPTrafficVNet}\")),(strcat(\"{IPTrafficNSG}\",\",\",\"{IPTrafficVNet}\")),(iff((isnotempty(\"{IPTrafficNSG}\") and isempty(\"{IPTrafficVNet}\")),(strcat(\"{IPTrafficNSG}\",\",\",\"IpTraffic\",',',\"0\",',',\"{timeInterval:label}\")),(iff((isempty(\"{IPTrafficNSG}\") and isnotempty(\"{IPTrafficVNet}\")),(strcat(\"IpTraffic\",',',\"0\",',',\"{timeInterval:label}\",\"{IPTrafficVNet}\")),(strcat(\"IpTraffic\",',',\"0\",',',\"{timeInterval:label}\",\",\",\"IpTraffic\",',',\"0\",',',\"{timeInterval:label}\")))))));\r\n//virtualnetwork\r\nlet VirtualNetwork = print Traffic = iff((isnotempty(\"{VirtualNetworkNSG}\") and isnotempty(\"{VirtualNetworkVNet}\")),(strcat(\"{VirtualNetworkNSG}\",\",\",\"{VirtualNetworkVNet}\")),(iff((isnotempty(\"{VirtualNetworkNSG}\") and isempty(\"{VirtualNetworkVNet}\")),(strcat(\"{VirtualNetworkNSG}\",\",\",\"VirtualNetwork\",',',\"0\",',',\"{timeInterval:label}\")),(iff((isempty(\"{VirtualNetworkNSG}\") and isnotempty(\"{VirtualNetworkVNet}\")),(strcat(\"VirtualNetwork\",',',\"0\",',',\"{timeInterval:label}\",\"{VirtualNetworkVNet}\")),(strcat(\"VirtualNetwork\",',',\"0\",',',\"{timeInterval:label}\",\",\",\"VirtualNetwork\",',',\"0\",',',\"{timeInterval:label}\")))))));\r\n//subnetwork\r\nlet Subnetwork = print Traffic = iff((isnotempty(\"{SubnetworkNSG}\") and isnotempty(\"{SubnetworkVNet}\")),(strcat(\"{SubnetworkNSG}\",\",\",\"{SubnetworkVNet}\")),(iff((isnotempty(\"{SubnetworkNSG}\") and isempty(\"{SubnetworkVNet}\")),(strcat(\"{SubnetworkNSG}\",\",\",\"Subnetwork\",',',\"0\",',',\"{timeInterval:label}\")),(iff((isempty(\"{SubnetworkNSG}\") and isnotempty(\"{SubnetworkVNet}\")),(strcat(\"Subnetwork\",',',\"0\",',',\"{timeInterval:label}\",\"{SubnetworkVNet}\")),(strcat(\"Subnetwork\",',',\"0\",',',\"{timeInterval:label}\",\",\",\"Subnetwork\",',',\"0\",',',\"{timeInterval:label}\")))))));\r\n//vmss\r\nlet Vmss = print Traffic = iff((isnotempty(\"{VmssNSG}\") and isnotempty(\"{VmssVNet}\")),(strcat(\"{VmssNSG}\",\",\",\"{VmssVNet}\")),(iff((isnotempty(\"{VmssNSG}\") and isempty(\"{VmssVNet}\")),(strcat(\"{VmssNSG}\",\",\",\"VMSS\",',',\"0\",',',\"{timeInterval:label}\")),(iff((isempty(\"{VmssNSG}\") and isnotempty(\"{VmssVNet}\")),(strcat(\"VMSS\",',',\"0\",',',\"{timeInterval:label}\",\"{VmssVNet}\")),(strcat(\"VMSS\",',',\"0\",',',\"{timeInterval:label}\",\",\",\"VMSS\",',',\"0\",',',\"{timeInterval:label}\")))))));\r\n//FreqTalkers\r\nlet FrequentTalkers = print Traffic = iff((isnotempty(\"{FrequentTalkersNSG}\") and isnotempty(\"{FrequentTalkersVNet}\")),(strcat(\"{FrequentTalkersNSG}\",\",\",\"{FrequentTalkersVNet}\")),(iff((isnotempty(\"{FrequentTalkersNSG}\") and isempty(\"{FrequentTalkersVNet}\")),(strcat(\"{FrequentTalkersNSG}\",\",\",\"FrequentTalkers\",',',\"0\",',',\"{timeInterval:label}\")),(iff((isempty(\"{FrequentTalkersNSG}\") and isnotempty(\"{FrequentTalkersVNet}\")),(strcat(\"FrequentTalkers\",',',\"0\",',',\"{timeInterval:label}\",\"{FrequentTalkersVNet}\")),(strcat(\"FrequentTalkers\",',',\"0\",',',\"{timeInterval:label}\",\",\",\"FrequentTalkers\",',',\"0\",',',\"{timeInterval:label}\")))))));\r\n//\r\nunion (\r\nIpTraffic\r\n        | extend ipTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(ipTraffic[0]), totalTraffic = tolong(ipTraffic[1]) + tolong(ipTraffic[4]), TimeStamp = tostring(ipTraffic[5]), item = '1', units = '{Units}'\r\n),\r\n(\r\nVirtualNetwork\r\n        | extend virtualnetworkTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(virtualnetworkTraffic[0]), totalTraffic = tolong(virtualnetworkTraffic[1]) + tolong(virtualnetworkTraffic[4]), TimeStamp = tostring(virtualnetworkTraffic[5]), item = '2', units = '{Units}'\r\n),\r\n(\r\nSubnetwork\r\n        | extend subnetworkTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(subnetworkTraffic[0]), totalTraffic = tolong(subnetworkTraffic[1]) + tolong(subnetworkTraffic[4]), TimeStamp = tostring(subnetworkTraffic[5]), item = '3', units = '{Units}'\r\n),\r\n(\r\nVmss\r\n        | extend vmssTraffic = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(vmssTraffic[0]), totalTraffic = tolong(vmssTraffic[1]) + tolong(vmssTraffic[4]), TimeStamp = tostring(vmssTraffic[5]), item = '4', units = '{Units}'\r\n        ),\r\n(\r\nFrequentTalkers\r\n        | extend frequenttalkersTalkers = split(trim(\"'\",Traffic),',')\r\n        | project Label = tostring(frequenttalkersTalkers[0]), totalTraffic = tolong(frequenttalkersTalkers[1]) + tolong(frequenttalkersTalkers[4]), TimeStamp = tostring(frequenttalkersTalkers[5]), item = '5', units = '{Units}'\r\n        )",
                    "size": 3,
                    "noDataMessage": "The Application Insights resource you selected has no data.",
                    "exportFieldName": "Label",
                    "exportParameterName": "distributiontype",
                    "exportDefaultValue": "IpTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Label",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "Total Traffic of all IPs"
                        }
                      },
                      "subtitleContent": {
                        "columnMatch": "MetricKind",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "totalTraffic",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "magenta"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "rightContent": {
                        "columnMatch": "units",
                        "formatter": 1
                      },
                      "secondaryContent": {
                        "columnMatch": "TimeStamp",
                        "formatter": 1
                      },
                      "showBorder": true,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "FlowType",
                      "comparison": "isEqualTo",
                      "value": "both"
                    },
                    {
                      "parameterName": "isNSGFlowSchemaPresent",
                      "comparison": "isEqualTo",
                      "value": "true"
                    },
                    {
                      "parameterName": "isVNetFlowSchemaPresent",
                      "comparison": "isEqualTo",
                      "value": "true"
                    }
                  ],
                  "name": "DistributionUnified"
                }
              ],
              "exportParameters": true
            },
            "name": "SectionTIles",
            "styleSettings": {
              "margin": "1",
              "padding": "1"
            }
          },
          {
            "type": 1,
            "content": {
              "json": "---\r\n\r\n## Traffic Distribution for {distributiontype}\r\nSelect a traffic tab to see data specific to metric"
            },
            "name": "MetricsTitle"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "loadType": "always",
              "items": [
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ipTraffic = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundPackets_d), 0)        \r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    VM1_s,\r\n    VM2_s,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = tolong(sum(FlowCount)),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        ipTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        ipTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        ipTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        ipTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "timeContextFromParameter": "timeInterval",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "nsg"
                        },
                        "name": "IpTrafficTileNSG"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ipTraffic = NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\n    and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)        \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcVm,\r\n    DestVm,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        ipTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        ipTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        ipTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        ipTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "timeContextFromParameter": "timeInterval",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "vnet"
                        },
                        "name": "IpTrafficTileVNet"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "\r\nlet ipTrafficNSG = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundPackets_d), 0)        \r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    VM1_s,\r\n    VM2_s,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = tolong(sum(FlowCount)),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet ipTrafficvnet = NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\n    and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)        \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcVm,\r\n    DestVm,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet FinalTraffic = ipTrafficNSG\r\n| union ipTrafficvnet\r\n| summarize TotalTraffic = sum(totalTraffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n union (\r\n        FinalTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = TotalTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = AllowedTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = MaliciousTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = BlockedTraffic\r\n    )",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "both"
                        },
                        "name": "ipTrafficTileUnified"
                      }
                    ],
                    "exportParameters": true
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "IpTraffic"
                  },
                  "name": "IpTrafficTile"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let vnetTraffic = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundPackets_d), 0)        \r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    VM1_s,\r\n    VM2_s,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    Subnet1Split = split(Subnet1_s, '/'),\r\n    Subnet2Split = split(Subnet2_s, '/')\r\n| extend host1 = iif(array_length(Subnet1Split) == 3, strcat(Subscription1_g, '/', Subnet1Split[0], '/', Subnet1Split[1]), '')\r\n| extend host2 = iif(array_length(Subnet2Split) == 3, strcat(Subscription2_g, '/', Subnet2Split[0], '/', Subnet2Split[1]), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend subscription = tostring(hostSplit[0]), vnet = iff(isempty(tostring(hostSplit[1])),tostring(hostSplit[2]),tostring(hostSplit[1]))\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = tolong(sum(FlowCount)),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by subscription,vnet//IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        vnetTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        vnetTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        vnetTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        vnetTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "nsg"
                        },
                        "name": "virtualNetworkTrafficTileNSG"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let vnetTraffic = NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\n    and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)        \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcVm,\r\n    DestVm,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    Subnet1Split = split(SrcSubnet, '/'),\r\n    Subnet2Split = split(DestSubnet, '/')\r\n| extend host1 = iif(array_length(Subnet1Split) == 3, strcat(SrcSubscription, '/', Subnet1Split[0], '/', Subnet1Split[1]), '')\r\n| extend host2 = iif(array_length(Subnet2Split) == 3, strcat(DestSubscription, '/', Subnet2Split[0], '/', Subnet2Split[1]), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend subscription = tostring(hostSplit[0]), vnet = iff(isempty(tostring(hostSplit[1])),tostring(hostSplit[2]),tostring(hostSplit[1]))\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by subscription,vnet//IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        vnetTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        vnetTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        vnetTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        vnetTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "vnet"
                        },
                        "name": "virtualNetworkTrafficTileVNet"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let virtualnetworkTrafficnsg = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundPackets_d), 0)        \r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    VM1_s,\r\n    VM2_s,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    Subnet1Split = split(Subnet1_s, '/'),\r\n    Subnet2Split = split(Subnet2_s, '/')\r\n| extend host1 = iif(array_length(Subnet1Split) == 3, strcat(Subscription1_g, '/', Subnet1Split[0], '/', Subnet1Split[1]), '')\r\n| extend host2 = iif(array_length(Subnet2Split) == 3, strcat(Subscription2_g, '/', Subnet2Split[0], '/', Subnet2Split[1]), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend subscription = tostring(hostSplit[0]), vnet = iff(isempty(tostring(hostSplit[1])),tostring(hostSplit[2]),tostring(hostSplit[1]))\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = tolong(sum(FlowCount)),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by subscription,vnet//IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet virtualnetworkTrafficvnet = NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\n    and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)        \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcVm,\r\n    DestVm,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    Subnet1Split = split(SrcSubnet, '/'),\r\n    Subnet2Split = split(DestSubnet, '/')\r\n| extend host1 = iif(array_length(Subnet1Split) == 3, strcat(SrcSubscription, '/', Subnet1Split[0], '/', Subnet1Split[1]), '')\r\n| extend host2 = iif(array_length(Subnet2Split) == 3, strcat(DestSubscription, '/', Subnet2Split[0], '/', Subnet2Split[1]), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend subscription = tostring(hostSplit[0]), vnet = iff(isempty(tostring(hostSplit[1])),tostring(hostSplit[2]),tostring(hostSplit[1]))\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by subscription,vnet//IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet FinalTraffic = virtualnetworkTrafficnsg\r\n| union virtualnetworkTrafficvnet\r\n| summarize TotalTraffic = sum(totalTraffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n union (\r\n        FinalTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = TotalTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = AllowedTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = MaliciousTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = BlockedTraffic\r\n    )",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "both"
                        },
                        "name": "virtualNetworkTrafficTileUnified"
                      }
                    ],
                    "exportParameters": true
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "VirtualNetwork"
                  },
                  "name": "VirtualetworkTrafficTile"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let subnetTraffic = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundPackets_d), 0)        \r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    VM1_s,\r\n    VM2_s,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    host1 = iif(isnotempty(Subnet1_s), strcat(Subscription1_g, '/', Subnet1_s), ''),\r\n    host2 = iif(isnotempty(Subnet2_s), strcat(Subscription2_g, '/', Subnet2_s), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend subscription = tostring(hostSplit[0]), subnet = tostring(hostSplit[1])\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = tolong(sum(FlowCount)),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by subscription,subnet//IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        subnetTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        subnetTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        subnetTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        subnetTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "nsg"
                        },
                        "name": "subnetworkTrafficTileNSG"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let subnetTraffic = NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\n    and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)        \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcVm,\r\n    DestVm,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    host1 = iif(isnotempty(SrcSubnet), strcat(SrcSubscription, '/', SrcSubnet), ''),\r\n    host2 = iif(isnotempty(DestSubnet), strcat(DestSubscription, '/', DestSubnet), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend subscription = tostring(hostSplit[0]), subnet = tostring(hostSplit[1])\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by subscription,subnet//IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        subnetTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        subnetTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        subnetTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        subnetTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "ColumnName",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "vnet"
                        },
                        "name": "subnetworkTrafficTileVNet"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let subnetTrafficnsg = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundPackets_d), 0)        \r\n| extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    VM1_s,\r\n    VM2_s,\r\n    Subnet1_s,\r\n    Subnet2_s,\r\n    FlowType_s,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    host1 = iif(isnotempty(Subnet1_s), strcat(Subscription1_g, '/', Subnet1_s), ''),\r\n    host2 = iif(isnotempty(Subnet2_s), strcat(Subscription2_g, '/', Subnet2_s), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend subscription = tostring(hostSplit[0]), subnet = tostring(hostSplit[1])\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = tolong(sum(FlowCount)),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by subscription,subnet//IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet subnetTrafficvnet = NTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\n    and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n// BytesFieldsExtension\r\n| extend\r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)        \r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    SrcVm,\r\n    DestVm,\r\n    SrcSubnet,\r\n    DestSubnet,\r\n    FlowType,\r\n    isMaliciousFlow\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n//\r\n| extend\r\n    host1 = iif(isnotempty(SrcSubnet), strcat(SrcSubscription, '/', SrcSubnet), ''),\r\n    host2 = iif(isnotempty(DestSubnet), strcat(DestSubscription, '/', DestSubnet), '')\r\n| mv-expand host = iif(host1 == host2, pack_array(host1), pack_array(host1, host2))\r\n| where isnotempty(host)\r\n| extend hostSplit = split(host, '/')\r\n| extend subscription = tostring(hostSplit[0]), subnet = tostring(hostSplit[1])\r\n// fork part 1 Flows:\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by subscription,subnet//IP, VM, Subnet, Subscription\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet FinalTraffic = subnetTrafficnsg\r\n| union subnetTrafficvnet\r\n| summarize TotalTraffic = sum(totalTraffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n union (\r\n        FinalTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = TotalTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = AllowedTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = MaliciousTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = BlockedTraffic\r\n    )",
                          "size": 3,
                          "timeContextFromParameter": "timeInterval",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "ColumnName",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "maximumSignificantDigits": 3,
                                  "maximumFractionDigits": 2
                                }
                              }
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "both"
                        },
                        "name": "subnetworkTrafficTileUnified"
                      }
                    ],
                    "exportParameters": true
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "Subnetwork"
                  },
                  "name": "subnetworkTrafficTile"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "\r\nlet TopologyQuery = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology' and ResourceType == 'VirtualMachine'\r\n    | extend topologycondition = split('{TopologyConditionNSG}', ',')\r\n    | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[3]))\r\n    | where isnotempty(VmssName_s)\r\n    | project vmssId = strcat(Subscription_g, '/', VmssName_s)\r\n    | distinct vmssId;\r\nlet FlowLogQuery = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    // BytesFieldsExtension\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundBytes_d), 0), \r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundPackets_d), 0), \r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundPackets_d), 0)        \r\n    | extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n        // FlowSummarizationStatements\r\n        AllowedInbound = sum(AllowedInFlows_d),\r\n        BlockedInbound = sum(DeniedInFlows_d),\r\n        AllowedOutbound = sum(AllowedOutFlows_d),\r\n        BlockedOutbound = sum(DeniedOutFlows_d),\r\n        // BytesSummarizationStatements\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        // PacketsSummarizationStatements\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        // \r\n        by\r\n        SrcIP_s,\r\n        Subscription1_g,\r\n        NIC1_s,\r\n        DestIP_s,\r\n        Subscription2_g,\r\n        NIC2_s,\r\n        FlowDirection,\r\n        L4Protocol_s,\r\n        DestPort_d,\r\n        CountryOrRegion,\r\n        VM1_s,\r\n        VM2_s,\r\n        Subnet1_s,\r\n        Subnet2_s,\r\n        FlowType_s,\r\n        isMaliciousFlow\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    //\r\n    | extend\r\n        vmssHost1 = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', Subnet1_s, '/', VM1_s), ''),\r\n        vmssHost2 = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', Subnet2_s, '/', VM2_s), '')\r\n    | extend\r\n        vmss1 = substring(vmssHost1, 0, indexof_regex(vmssHost1, '_[^_]+$')),\r\n        vmss2 = substring(vmssHost2, 0, indexof_regex(vmssHost2, '_[^_]+$'))\r\n    | where vmss1 != vmss2\r\n    | mv-expand vmss = pack_array(vmss1, vmss2)\r\n    | where isnotempty(vmss)\r\n    | extend vmssSplit = split(vmss, '/')\r\n    | extend\r\n        subscription = tostring(vmssSplit[0]),\r\n        subnet = tostring(vmssSplit[1]),\r\n        VM = tostring(vmssSplit[1])\r\n    // fork part 1 Flows:\r\n    | extend \r\n        AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n        BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n        AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n        BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n        AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n        BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n        // summarize for flows\r\n        AllowedTraffic = sum(AllowedTraffic), \r\n        BlockedTraffic = sum(BlockedTraffic),\r\n        MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n        TotalFlow = tolong(sum(FlowCount)),\r\n        // summarize for bytes\r\n        AllowedBytes = sum(AllowedTrafficBytes), \r\n        BlockedBytes = sum(BlockedTrafficBytes),\r\n        MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n        TotalBytes = sum(BytesCount),\r\n        // summarize for packets\r\n        AllowedPackets = sum(AllowedTrafficPackets),\r\n        BlockedPackets = sum(BlockedTrafficPackets),\r\n        MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n        TotalPackets = sum(PacketsCount) \r\n        by tostring(vmss)//subscription, subnet,VM//IP, VM, Subnet, Subscription\r\n        | extend vmssIdWithSubnetSplit = split(tostring(vmss), '/')\r\n        | extend vmssId = strcat(vmssIdWithSubnetSplit[0], '/', vmssIdWithSubnetSplit[4], '/', vmssIdWithSubnetSplit[5]);\r\nlet vmssTraffic = TopologyQuery\r\n| join kind = inner FlowLogQuery on vmssId\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\n       allowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\n       maliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\n       blockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nunion (\r\n        vmssTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        vmssTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        vmssTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        vmssTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )\r\n",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "nsg"
                        },
                        "name": "vmssTrafficTileNSG"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "\r\nlet TopologyQuery = NTATopologyDetails\r\n    | where SubType == 'Topology' and AzureResourceType == 'VirtualMachine'\r\n    | extend topologycondition = split('{TopologyConditionVNet}', ',')\r\n    | where (Subscription == tostring(topologycondition[0]) and DiscoveryRegion == tostring(topologycondition[1]) and TimeProcessed == tostring(topologycondition[3]))\r\n    | where isnotempty(VmssName)\r\n    | project vmssId = strcat(Subscription, '/', VmssName)\r\n    | distinct vmssId;\r\nlet FlowLogQuery = NTANetAnalytics\r\n    | where SubType == 'FlowLog'\r\n        and FaSchemaVersion == '3'\r\n        and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    // BytesFieldsExtension\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n        BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n        AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n        BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n        AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n        BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n        AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n        BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)        \r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n        // FlowSummarizationStatements\r\n        AllowedInbound = sum(AllowedInFlows),\r\n        BlockedInbound = sum(DeniedInFlows),\r\n        AllowedOutbound = sum(AllowedOutFlows),\r\n        BlockedOutbound = sum(DeniedOutFlows),\r\n        // BytesSummarizationStatements\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        // PacketsSummarizationStatements\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        // \r\n        by\r\n        SrcIp,\r\n        SrcSubscription,\r\n        SrcNic,\r\n        DestIp,\r\n        DestSubscription,\r\n        DestNic,\r\n        FlowDirection,\r\n        L4Protocol,\r\n        DestPort,\r\n        CountryOrRegion,\r\n        SrcVm,\r\n        DestVm,\r\n        SrcSubnet,\r\n        DestSubnet,\r\n        FlowType,\r\n        isMaliciousFlow\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    //\r\n    | extend\r\n        vmssHost1 = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', SrcSubnet, '/', SrcVm), ''),\r\n        vmssHost2 = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestSubnet, '/', DestVm), '')\r\n    | extend\r\n        vmss1 = substring(vmssHost1, 0, indexof_regex(vmssHost1, '_[^_]+$')),\r\n        vmss2 = substring(vmssHost2, 0, indexof_regex(vmssHost2, '_[^_]+$'))\r\n    | where vmss1 != vmss2\r\n    | mv-expand vmss = pack_array(vmss1, vmss2)\r\n    | where isnotempty(vmss)\r\n    | extend vmssSplit = split(vmss, '/')\r\n    | extend\r\n        subscription = tostring(vmssSplit[0]),\r\n        subnet = tostring(vmssSplit[1]),\r\n        VM = tostring(vmssSplit[1])\r\n    // fork part 1 Flows:\r\n    | extend \r\n        AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n        BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n        AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n        BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n        AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n        BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n        // summarize for flows\r\n        AllowedTraffic = sum(AllowedTraffic), \r\n        BlockedTraffic = sum(BlockedTraffic),\r\n        MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n        TotalFlow = sum(FlowCount),\r\n        // summarize for bytes\r\n        AllowedBytes = sum(AllowedTrafficBytes), \r\n        BlockedBytes = sum(BlockedTrafficBytes),\r\n        MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n        TotalBytes = sum(BytesCount),\r\n        // summarize for packets\r\n        AllowedPackets = sum(AllowedTrafficPackets),\r\n        BlockedPackets = sum(BlockedTrafficPackets),\r\n        MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n        TotalPackets = sum(PacketsCount) \r\n        by tostring(vmss)//subscription, subnet,VM//IP, VM, Subnet, Subscription\r\n        | extend vmssIdWithSubnetSplit = split(tostring(vmss), '/')\r\n        | extend vmssId = strcat(vmssIdWithSubnetSplit[0], '/', vmssIdWithSubnetSplit[4], '/', vmssIdWithSubnetSplit[5]);\r\nlet vmssTraffic = TopologyQuery\r\n| join kind = inner FlowLogQuery on vmssId\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\n       allowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\n       maliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\n       blockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nunion (\r\n        vmssTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        vmssTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        vmssTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        vmssTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )\r\n\r\n\r\n",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "vnet"
                        },
                        "name": "vmssTrafficTileVNet"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "\r\nlet TopologyQuerynsg = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology' and ResourceType == 'VirtualMachine'\r\n    | extend topologycondition = split('{TopologyConditionNSG}', ',')\r\n    | where (Subscription_g == tostring(topologycondition[0]) and DiscoveryRegion_s == tostring(topologycondition[1]) and TimeProcessed_t == tostring(topologycondition[3]))\r\n    | where isnotempty(VmssName_s)\r\n    | project vmssId = strcat(Subscription_g, '/', VmssName_s)\r\n    | distinct vmssId;\r\nlet FlowLogQuerynsg = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    and FlowStartTime_t between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\t\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    // BytesFieldsExtension\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundBytes_d), 0), \r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundBytes_d), 0), \r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundBytes_d), 0), \r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundBytes_d), 0), \r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(InboundPackets_d), 0), \r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection == 'O', tolong(OutboundPackets_d), 0), \r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(InboundPackets_d), 0), \r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection == 'I', tolong(OutboundPackets_d), 0), \r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection == 'I', tolong(OutboundPackets_d), 0)        \r\n    | extend FlowDirection = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n        // FlowSummarizationStatements\r\n        AllowedInbound = sum(AllowedInFlows_d),\r\n        BlockedInbound = sum(DeniedInFlows_d),\r\n        AllowedOutbound = sum(AllowedOutFlows_d),\r\n        BlockedOutbound = sum(DeniedOutFlows_d),\r\n        // BytesSummarizationStatements\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        // PacketsSummarizationStatements\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        // \r\n        by\r\n        SrcIP_s,\r\n        Subscription1_g,\r\n        NIC1_s,\r\n        DestIP_s,\r\n        Subscription2_g,\r\n        NIC2_s,\r\n        FlowDirection,\r\n        L4Protocol_s,\r\n        DestPort_d,\r\n        CountryOrRegion,\r\n        VM1_s,\r\n        VM2_s,\r\n        Subnet1_s,\r\n        Subnet2_s,\r\n        FlowType_s,\r\n        isMaliciousFlow\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    //\r\n    | extend\r\n        vmssHost1 = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', Subnet1_s, '/', VM1_s), ''),\r\n        vmssHost2 = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', Subnet2_s, '/', VM2_s), '')\r\n    | extend\r\n        vmss1 = substring(vmssHost1, 0, indexof_regex(vmssHost1, '_[^_]+$')),\r\n        vmss2 = substring(vmssHost2, 0, indexof_regex(vmssHost2, '_[^_]+$'))\r\n    | where vmss1 != vmss2\r\n    | mv-expand vmss = pack_array(vmss1, vmss2)\r\n    | where isnotempty(vmss)\r\n    | extend vmssSplit = split(vmss, '/')\r\n    | extend\r\n        subscription = tostring(vmssSplit[0]),\r\n        subnet = tostring(vmssSplit[1]),\r\n        VM = tostring(vmssSplit[1])\r\n    // fork part 1 Flows:\r\n    | extend \r\n        AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n        BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n        AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n        BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n        AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n        BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n        // summarize for flows\r\n        AllowedTraffic = sum(AllowedTraffic), \r\n        BlockedTraffic = sum(BlockedTraffic),\r\n        MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n        TotalFlow = tolong(sum(FlowCount)),\r\n        // summarize for bytes\r\n        AllowedBytes = sum(AllowedTrafficBytes), \r\n        BlockedBytes = sum(BlockedTrafficBytes),\r\n        MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n        TotalBytes = sum(BytesCount),\r\n        // summarize for packets\r\n        AllowedPackets = sum(AllowedTrafficPackets),\r\n        BlockedPackets = sum(BlockedTrafficPackets),\r\n        MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n        TotalPackets = sum(PacketsCount) \r\n        by tostring(vmss)//subscription, subnet,VM//IP, VM, Subnet, Subscription\r\n        | extend vmssIdWithSubnetSplit = split(tostring(vmss), '/')\r\n        | extend vmssId = strcat(vmssIdWithSubnetSplit[0], '/', vmssIdWithSubnetSplit[4], '/', vmssIdWithSubnetSplit[5]);\r\nlet vmssTrafficnsg = TopologyQuerynsg\r\n| join kind = inner FlowLogQuerynsg on vmssId\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\n       allowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\n       maliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\n       blockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n\r\nlet TopologyQueryvnet = NTATopologyDetails\r\n    | where SubType == 'Topology' and AzureResourceType == 'VirtualMachine'\r\n    | extend topologycondition = split('{TopologyConditionVNet}', ',')\r\n    | where (Subscription == tostring(topologycondition[0]) and DiscoveryRegion == tostring(topologycondition[1]) and TimeProcessed == tostring(topologycondition[3]))\r\n    | where isnotempty(VmssName)\r\n    | project vmssId = strcat(Subscription, '/', VmssName)\r\n    | distinct vmssId;\r\nlet FlowLogQueryvnet = NTANetAnalytics\r\n    | where SubType == 'FlowLog'\r\n        and FaSchemaVersion == '3'\r\n        and FlowStartTime between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    // BytesFieldsExtension\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n        BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n        AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n        BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n        AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n        BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n        AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n        BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)        \r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n        // FlowSummarizationStatements\r\n        AllowedInbound = sum(AllowedInFlows),\r\n        BlockedInbound = sum(DeniedInFlows),\r\n        AllowedOutbound = sum(AllowedOutFlows),\r\n        BlockedOutbound = sum(DeniedOutFlows),\r\n        // BytesSummarizationStatements\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        // PacketsSummarizationStatements\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        // \r\n        by\r\n        SrcIp,\r\n        SrcSubscription,\r\n        SrcNic,\r\n        DestIp,\r\n        DestSubscription,\r\n        DestNic,\r\n        FlowDirection,\r\n        L4Protocol,\r\n        DestPort,\r\n        CountryOrRegion,\r\n        SrcVm,\r\n        DestVm,\r\n        SrcSubnet,\r\n        DestSubnet,\r\n        FlowType,\r\n        isMaliciousFlow\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    //\r\n    | extend\r\n        vmssHost1 = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', SrcSubnet, '/', SrcVm), ''),\r\n        vmssHost2 = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestSubnet, '/', DestVm), '')\r\n    | extend\r\n        vmss1 = substring(vmssHost1, 0, indexof_regex(vmssHost1, '_[^_]+$')),\r\n        vmss2 = substring(vmssHost2, 0, indexof_regex(vmssHost2, '_[^_]+$'))\r\n    | where vmss1 != vmss2\r\n    | mv-expand vmss = pack_array(vmss1, vmss2)\r\n    | where isnotempty(vmss)\r\n    | extend vmssSplit = split(vmss, '/')\r\n    | extend\r\n        subscription = tostring(vmssSplit[0]),\r\n        subnet = tostring(vmssSplit[1]),\r\n        VM = tostring(vmssSplit[1])\r\n    // fork part 1 Flows:\r\n    | extend \r\n        AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n        BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n        AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n        BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n        AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n        BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n        // summarize for flows\r\n        AllowedTraffic = sum(AllowedTraffic), \r\n        BlockedTraffic = sum(BlockedTraffic),\r\n        MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n        TotalFlow = sum(FlowCount),\r\n        // summarize for bytes\r\n        AllowedBytes = sum(AllowedTrafficBytes), \r\n        BlockedBytes = sum(BlockedTrafficBytes),\r\n        MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n        TotalBytes = sum(BytesCount),\r\n        // summarize for packets\r\n        AllowedPackets = sum(AllowedTrafficPackets),\r\n        BlockedPackets = sum(BlockedTrafficPackets),\r\n        MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n        TotalPackets = sum(PacketsCount) \r\n        by tostring(vmss)//subscription, subnet,VM//IP, VM, Subnet, Subscription\r\n        | extend vmssIdWithSubnetSplit = split(tostring(vmss), '/')\r\n        | extend vmssId = strcat(vmssIdWithSubnetSplit[0], '/', vmssIdWithSubnetSplit[4], '/', vmssIdWithSubnetSplit[5]);\r\nlet vmssTrafficvnet = TopologyQueryvnet\r\n| join kind = inner FlowLogQueryvnet on vmssId\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\n       allowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\n       maliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\n       blockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet FinalTraffic = vmssTrafficnsg\r\n| union vmssTrafficvnet\r\n| summarize TotalTraffic = sum(totalTraffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n union (\r\n        FinalTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = TotalTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = AllowedTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = MaliciousTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = BlockedTraffic\r\n    )\r\n",
                          "size": 3,
                          "noDataMessage": "The Application Insights resource you selected has no data.",
                          "exportFieldName": "ColumnName",
                          "exportParameterName": "TrafficFlowType",
                          "exportDefaultValue": "TotalTraffic",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "ColumnName",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Total Traffic of all IPs"
                              }
                            },
                            "subtitleContent": {
                              "columnMatch": "Value",
                              "formatter": 12,
                              "formatOptions": {
                                "palette": "auto"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "rightContent": {
                              "columnMatch": "totalTraffic",
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            "secondaryContent": {
                              "columnMatch": "Column2",
                              "formatter": 1
                            },
                            "showBorder": false,
                            "sortCriteriaField": "ColumnName",
                            "sortOrderField": 2,
                            "size": "auto"
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "both"
                        },
                        "name": "vmssTrafficTileUnified"
                      }
                    ],
                    "exportParameters": true
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "VMSS"
                  },
                  "name": "vmssTrafficTile"
                }
              ],
              "exportParameters": true
            },
            "name": "MetricsSplit"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "d572026d-b2d7-4839-ab67-8f1a83333ae7",
                  "version": "KqlParameterItem/1.0",
                  "name": "ProjectColumnsCondition",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "distributiontype",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "FrequentTalkers",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "TrafficFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Malicious Traffic",
                        "resultValType": "static",
                        "resultVal": "| project     IP = strcat('🖥️', IP),    VM,    VNet,  Subnet,     Subscription,     topTalkingPairs,     topMaliciousTalkingPairs,     TotalTraffic,      TotalInbound,     AllowedInboundMaliciousFormatted,     BlockedInboundMaliciousFormatted,     TotalOutbound,     AllowedOutboundMaliciousFormatted,     BlockedOutboundMaliciousFormatted"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "TrafficFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "AllowedTraffic",
                        "resultValType": "static",
                        "resultVal": "| project IP = strcat('🖥️', IP),         VM,           VNet,                 Subnet,                            Subscription,                            topTalkingPairs,                            topMaliciousTalkingPairs,                            TotalTraffic,                             TotalInbound,                            AllowedInboundFormatted,                            AllowedInboundBenignFormatted,                            AllowedInboundMaliciousFormatted,                            TotalOutbound,                            AllowedOutboundFormatted,                            AllowedOutboundBenignFormatted,                            AllowedOutboundMaliciousFormatted"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "TrafficFlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "Blocked Traffic",
                        "resultValType": "static",
                        "resultVal": "| project IP = strcat('🖥️', IP),                            VM,        VNet,                    Subnet,                            Subscription,                            topTalkingPairs,                            topMaliciousTalkingPairs,                            TotalTraffic,                             TotalInbound,                            BlockedInboundFormatted,                            BlockedInboundBenignFormatted,                            BlockedInboundMaliciousFormatted,                            TotalOutbound,                            BlockedOutboundFormatted,                            BlockedOutboundBenignFormatted,                            BlockedOutboundMaliciousFormatted"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "| project  IP = strcat('🖥️', IP),                            VM,         VNet,                   Subnet,                            Subscription,                            topTalkingPairs,                            topMaliciousTalkingPairs,                            TotalTraffic,                             TotalInbound,                            AllowedInboundFormatted,                            BlockedInboundFormatted,                            AllowedInboundBenignFormatted,                            BlockedInboundBenignFormatted,                            AllowedInboundMaliciousFormatted,                            BlockedInboundMaliciousFormatted,                            TotalOutbound,                            AllowedOutboundFormatted,                            BlockedOutboundFormatted,                            AllowedOutboundBenignFormatted,                            BlockedOutboundBenignFormatted,                            AllowedOutboundMaliciousFormatted,                            BlockedOutboundMaliciousFormatted"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "SubscriptionQueryToRun",
              "comparison": "isNotEqualTo",
              "value": "false"
            },
            "name": "ProjectCondition"
          },
          {
            "type": 1,
            "content": {
              "json": "---"
            },
            "name": "Divider"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 1,
                        "content": {
                          "json": "## Top Talking Pairs"
                        },
                        "name": " TopTalkingPairsTitle1"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s, isMaliciousFlow, Subnet1_s, Subnet2_s\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend VMName = split(splittedHostEndPoint[1],\"/\")\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(strcat(\"/subscriptions/\",splittedHostEndPoint[0],\"/resourceGroups/\",VMName[0],\"/providers/Microsoft.Compute/virtualMachines/\",VMName[1])), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend VMName = split(splittedHostEndPoint[1],\"/\")\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(strcat(\"/subscriptions/\",splittedHostEndPoint[0],\"/resourceGroups/\",VMName[0],\"/providers/Microsoft.Compute/virtualMachines/\",VMName[1])), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    //\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType_s == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' ')), iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(VM2_s), VM2_s, iff(direction == 'Destination' and isnotempty(VM1_s), VM1_s, iff(isAzurePublicFlow, AzureRegion_s, Country_s)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,partnerIP,partnerHost, VM1_s,VM2_s, Subnet1_s, Subnet2_s\r\n    by partnerIP, partnerHost, hostEndPoint, direction, Subnet1_s, Subnet2_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    // hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend VMName = split(splittedHostEndPoint[1],\"/\")\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(strcat(\"/subscriptions/\",splittedHostEndPoint[0],\"/resourceGroups/\",VMName[0],\"/providers/Microsoft.Compute/virtualMachines/\",VMName[1])), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", Subnet1_s, Subnet2_s)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    AzureNetworkAnalytics_CL \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend VMName = split(splittedHostEndPoint[1],\"/\")\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(strcat(\"/subscriptions/\",splittedHostEndPoint[0],\"/resourceGroups/\",VMName[0],\"/providers/Microsoft.Compute/virtualMachines/\",VMName[1])), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIP_s, SrcIP_s)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows_d, AllowedInFlows_d + DeniedInFlows_d) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows_d, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country_s, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country_s) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topMaliciousTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topMaliciousTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| sort by trafficForSorting desc\r\n| extend VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n{ProjectColumnsCondition}",
                          "size": 3,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "showAnalytics": true,
                          "noDataMessage": "No data to display",
                          "timeContextFromParameter": "timeInterval",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "IP",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkTarget": "GenericDetails",
                                  "linkIsContextBlade": true,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "VM",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkColumn": "VM",
                                  "linkTarget": "Resource",
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "Subscription",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkTarget": "Resource",
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "TotalTraffic",
                                "formatter": 22,
                                "formatOptions": {
                                  "compositeBarSettings": {
                                    "labelText": "[\"TotalInbound\"]/[\"TotalOutbound\"]",
                                    "columnSettings": [
                                      {
                                        "columnName": "TotalInbound",
                                        "color": "lightBlue"
                                      },
                                      {
                                        "columnName": "TotalOutbound",
                                        "color": "gray"
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "columnMatch": "aggregatedTotalFlow",
                                "formatter": 19,
                                "formatOptions": {
                                  "palette": "orange",
                                  "timelineSettings": {
                                    "timelineStartColumn": "Time"
                                  }
                                }
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "TotalTraffic",
                                "label": "TotalTraffic (Inbound/Outbound)"
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "nsg"
                        },
                        "name": "TopTalkingNSG"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,SrcVm,DestVm, isMaliciousFlow, SrcSubnet, DestSubnet\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend VMName = split(splittedHostEndPoint[1],\"/\")\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(strcat(\"/subscriptions/\",splittedHostEndPoint[0],\"/resourceGroups/\",VMName[0],\"/providers/Microsoft.Compute/virtualMachines/\",VMName[1])), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend VMName = split(splittedHostEndPoint[1],\"/\")\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(strcat(\"/subscriptions/\",splittedHostEndPoint[0],\"/resourceGroups/\",VMName[0],\"/providers/Microsoft.Compute/virtualMachines/\",VMName[1])), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')), iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(DestVm), DestVm, iff(direction == 'Destination' and isnotempty(SrcVm), SrcVm, iff(isAzurePublicFlow, AzureRegion, Country)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,partnerIP,partnerHost, SrcVm,DestVm, SrcSubnet, DestSubnet\r\n    by partnerIP, partnerHost, hostEndPoint, direction, SrcSubnet, DestSubnet\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    // hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend VMName = split(splittedHostEndPoint[1],\"/\")\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(strcat(\"/subscriptions/\",splittedHostEndPoint[0],\"/resourceGroups/\",VMName[0],\"/providers/Microsoft.Compute/virtualMachines/\",VMName[1])), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", SrcSubnet, DestSubnet)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    NTANetAnalytics \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend VMName = split(splittedHostEndPoint[1],\"/\")\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(strcat(\"/subscriptions/\",splittedHostEndPoint[0],\"/resourceGroups/\",VMName[0],\"/providers/Microsoft.Compute/virtualMachines/\",VMName[1])), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIp, SrcIp)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topMaliciousTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topMaliciousTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| sort by trafficForSorting desc \r\n| extend VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n{ProjectColumnsCondition}",
                          "size": 3,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "showAnalytics": true,
                          "noDataMessage": "No data to display",
                          "timeContextFromParameter": "timeInterval",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "IP",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkTarget": "CellDetails",
                                  "linkIsContextBlade": true,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "VM",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkColumn": "VM",
                                  "linkTarget": "Resource",
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "Subscription",
                                "formatter": 15,
                                "formatOptions": {
                                  "linkTarget": "Resource",
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "aggregatedTotalFlow",
                                "formatter": 19,
                                "formatOptions": {
                                  "palette": "orange",
                                  "timelineSettings": {
                                    "timelineStartColumn": "Time"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "vnet"
                        },
                        "name": "TopTalkingVNet"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\",\"mergeType\":\"union\",\"leftTable\":\"TopTalkingNSG\",\"rightTable\":\"TopTalkingVNet\"}],\"projectRename\":[{\"originalName\":\"[TopTalkingNSG].IP\",\"mergedName\":\"IP\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].VM\",\"mergedName\":\"VM\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].VNet\",\"mergedName\":\"VNet\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].topMaliciousTalkingPairs\",\"mergedName\":\"topMaliciousTalkingPairs\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].TotalTraffic\",\"mergedName\":\"TotalTraffic (Inbound/Outbound)\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"[TopTalkingVNet].TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"7b73f2af-391b-40c6-86a4-67319c2196d3\"},{\"originalName\":\"IP\",\"mergedName\":\"IP\",\"fromId\":\"unknown\"},{\"originalName\":\"VM\",\"mergedName\":\"VM\",\"fromId\":\"unknown\"},{\"originalName\":\"VNet\",\"mergedName\":\"VNet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topMaliciousTalkingPairs\",\"mergedName\":\"topMaliciousTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"}]}",
                          "size": 0,
                          "queryType": 7,
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "IP",
                                "formatter": 13,
                                "formatOptions": {
                                  "linkTarget": "CellDetails",
                                  "linkIsContextBlade": true,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "Subscription",
                                "formatter": 15,
                                "formatOptions": {
                                  "linkTarget": "Resource",
                                  "showIcon": true
                                }
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "TotalTraffic",
                                "label": "TotalTraffic (Inbound/Outbound)"
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "Flow Type",
                          "comparison": "isEqualTo",
                          "value": "both"
                        },
                        "showPin": false,
                        "name": "TopTalkingUnion"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "IpTraffic"
                  },
                  "name": "TopTalkingPairs"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 1,
                        "content": {
                          "json": "## VNet Distribution"
                        },
                        "name": "VNetDistributionTitle"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s, isMaliciousFlow, Subnet1_s, Subnet2_s\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    //\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType_s == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' ')), iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(VM2_s), VM2_s, iff(direction == 'Destination' and isnotempty(VM1_s), VM1_s, iff(isAzurePublicFlow, AzureRegion_s, Country_s)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,partnerIP,partnerHost, VM1_s,VM2_s, Subnet1_s, Subnet2_s\r\n    by partnerIP, partnerHost, hostEndPoint, direction, Subnet1_s, Subnet2_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    // hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", Subnet1_s, Subnet2_s)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    AzureNetworkAnalytics_CL \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIP_s, SrcIP_s)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows_d, AllowedInFlows_d + DeniedInFlows_d) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows_d, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country_s, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country_s) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topMaliciousTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topMaliciousTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| extend VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n| sort by trafficForSorting desc\r\n{ProjectColumnsCondition}",
                          "size": 3,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "showAnalytics": true,
                          "noDataMessage": "No data to display",
                          "timeContextFromParameter": "timeInterval",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "aggregatedTotalFlow",
                                "formatter": 19,
                                "formatOptions": {
                                  "palette": "orange",
                                  "timelineSettings": {
                                    "timelineStartColumn": "Time"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "nsg"
                        },
                        "name": "VNetDistrNSG"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,SrcVm,DestVm, isMaliciousFlow, SrcSubnet, DestSubnet\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')), iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(DestVm), DestVm, iff(direction == 'Destination' and isnotempty(SrcVm), SrcVm, iff(isAzurePublicFlow, AzureRegion, Country)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,partnerIP,partnerHost, SrcVm,DestVm, SrcSubnet, DestSubnet\r\n    by partnerIP, partnerHost, hostEndPoint, direction, SrcSubnet, DestSubnet\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    // hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", SrcSubnet, DestSubnet)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    NTANetAnalytics \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIp, SrcIp)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topMaliciousTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topMaliciousTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| extend VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n| sort by trafficForSorting desc\r\n{ProjectColumnsCondition}",
                          "size": 0,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "showAnalytics": true,
                          "noDataMessage": "No data to display",
                          "timeContextFromParameter": "timeInterval",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "aggregatedTotalFlow",
                                "formatter": 19,
                                "formatOptions": {
                                  "palette": "orange",
                                  "timelineSettings": {
                                    "timelineStartColumn": "Time"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "vnet"
                        },
                        "name": "VNetDistrVNet"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\",\"mergeType\":\"union\",\"leftTable\":\"TopTalkingNSG\",\"rightTable\":\"TopTalkingVNet\"}],\"projectRename\":[{\"originalName\":\"[TopTalkingNSG].IP\",\"mergedName\":\"IP\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].VM\",\"mergedName\":\"VM\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].VNet\",\"mergedName\":\"VNet\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].topMaliciousTalkingPairs\",\"mergedName\":\"topMaliciousTalkingPairs\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f2fd\"},{\"originalName\":\"IP\",\"mergedName\":\"IP\",\"fromId\":\"unknown\"},{\"originalName\":\"VM\",\"mergedName\":\"VM\",\"fromId\":\"unknown\"},{\"originalName\":\"VNet\",\"mergedName\":\"VNet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topMaliciousTalkingPairs\",\"mergedName\":\"topMaliciousTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"}]}",
                          "size": 0,
                          "queryType": 7
                        },
                        "conditionalVisibility": {
                          "parameterName": "Flow Type",
                          "comparison": "isEqualTo",
                          "value": "both"
                        },
                        "showPin": false,
                        "name": "VNetDistrUnion"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "VirtualNetwork"
                  },
                  "name": "VNetDistribution"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 1,
                        "content": {
                          "json": "## Subnet Distribution"
                        },
                        "name": "SubnetDistributionTitle"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s, isMaliciousFlow, Subnet1_s, Subnet2_s\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    //\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType_s == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' ')), iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(VM2_s), VM2_s, iff(direction == 'Destination' and isnotempty(VM1_s), VM1_s, iff(isAzurePublicFlow, AzureRegion_s, Country_s)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,partnerIP,partnerHost, VM1_s,VM2_s, Subnet1_s, Subnet2_s\r\n    by partnerIP, partnerHost, hostEndPoint, direction, Subnet1_s, Subnet2_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    // hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", Subnet1_s, Subnet2_s)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    AzureNetworkAnalytics_CL \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIP_s, SrcIP_s)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows_d, AllowedInFlows_d + DeniedInFlows_d) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows_d, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country_s, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country_s) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topMaliciousTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topMaliciousTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| extend VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n| sort by trafficForSorting desc\r\n{ProjectColumnsCondition}",
                          "size": 0,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "showAnalytics": true,
                          "noDataMessage": "No data to display",
                          "timeContextFromParameter": "timeInterval",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "aggregatedTotalFlow",
                                "formatter": 19,
                                "formatOptions": {
                                  "palette": "orange",
                                  "timelineSettings": {
                                    "timelineStartColumn": "Time"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "nsg"
                        },
                        "name": "SubnetDistrNSG"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,SrcVm,DestVm, isMaliciousFlow, SrcSubnet, DestSubnet\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')), iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(DestVm), DestVm, iff(direction == 'Destination' and isnotempty(SrcVm), SrcVm, iff(isAzurePublicFlow, AzureRegion, Country)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,partnerIP,partnerHost, SrcVm,DestVm, SrcSubnet, DestSubnet\r\n    by partnerIP, partnerHost, hostEndPoint, direction, SrcSubnet, DestSubnet\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    // hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", SrcSubnet, DestSubnet)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    NTANetAnalytics \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIp, SrcIp)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topMaliciousTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topMaliciousTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| extend VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n| sort by trafficForSorting desc\r\n{ProjectColumnsCondition}",
                          "size": 0,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "showAnalytics": true,
                          "noDataMessage": "No data to display",
                          "timeContextFromParameter": "timeInterval",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "aggregatedTotalFlow",
                                "formatter": 19,
                                "formatOptions": {
                                  "palette": "orange",
                                  "timelineSettings": {
                                    "timelineStartColumn": "Time"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "vnet"
                        },
                        "name": "SubnetDistrVNet"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\",\"mergeType\":\"union\",\"leftTable\":\"TopTalkingNSG\",\"rightTable\":\"TopTalkingVNet\"}],\"projectRename\":[{\"originalName\":\"[TopTalkingNSG].IP\",\"mergedName\":\"IP\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].VM\",\"mergedName\":\"VM\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].VNet\",\"mergedName\":\"VNet\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].topMaliciousTalkingPairs\",\"mergedName\":\"topMaliciousTalkingPairs\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45f31c\"},{\"originalName\":\"IP\",\"mergedName\":\"IP\",\"fromId\":\"unknown\"},{\"originalName\":\"VM\",\"mergedName\":\"VM\",\"fromId\":\"unknown\"},{\"originalName\":\"VNet\",\"mergedName\":\"VNet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topMaliciousTalkingPairs\",\"mergedName\":\"topMaliciousTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"}]}",
                          "size": 0,
                          "queryType": 7
                        },
                        "conditionalVisibility": {
                          "parameterName": "Flow Type",
                          "comparison": "isEqualTo",
                          "value": "both"
                        },
                        "showPin": false,
                        "name": "SubnetDistrUnion"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "Subnetwork"
                  },
                  "name": "SubnetDistribution"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 1,
                        "content": {
                          "json": "## VMSS Distribution"
                        },
                        "name": "VMSSDistributionTitle"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                   \r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s, isMaliciousFlow, Subnet1_s, Subnet2_s\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    AzureNetworkAnalytics_CL\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    //\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType_s == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' ')), iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(VM2_s), VM2_s, iff(direction == 'Destination' and isnotempty(VM1_s), VM1_s, iff(isAzurePublicFlow, AzureRegion_s, Country_s)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d),\r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,partnerIP,partnerHost, VM1_s,VM2_s, Subnet1_s, Subnet2_s\r\n    by partnerIP, partnerHost, hostEndPoint, direction, Subnet1_s, Subnet2_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    // hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", Subnet1_s, Subnet2_s)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    AzureNetworkAnalytics_CL \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    //\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\n    hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIP_s, SrcIP_s)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows_d, AllowedInFlows_d + DeniedInFlows_d) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows_d, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country_s, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country_s) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topMaliciousTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topMaliciousTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| extend VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n| sort by trafficForSorting desc\r\n{ProjectColumnsCondition}",
                          "size": 0,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "showAnalytics": true,
                          "noDataMessage": "No data to display",
                          "timeContextFromParameter": "timeInterval",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "aggregatedTotalFlow",
                                "formatter": 19,
                                "formatOptions": {
                                  "palette": "orange",
                                  "timelineSettings": {
                                    "timelineStartColumn": "Time"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "nsg"
                        },
                        "name": "VMSSDistrNSG"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    // BytesFieldsExtension\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)                                                   \r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    // FlowSummarizationStatements\r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    // BytesSummarizationStatements\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    // PacketsSummarizationStatements\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // \r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,SrcVm,DestVm, isMaliciousFlow, SrcSubnet, DestSubnet\r\n    // FlowsInferredFields\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    // BytesInferredFields\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    // PacketsInferredFields\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // fork part 1 Flows:\r\n    | extend \r\n    AllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\n    BlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\n    AllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\n    BlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\n    BlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\n    AllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\n    BlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\n    BlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\n    AllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\n    BlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedInboundFlow = sum(AllowedInboundFlow), \r\n    BlockedInboundFlow = sum(BlockedInboundFlow),\r\n    AllowedOutboundFlow = sum(AllowedOutboundFlow),\r\n    BlockedOutboundFlow = sum(BlockedOutboundFlow),\r\n    AllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\n    BlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\n    AllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\n    BlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedInboundBytes = sum(AllowedInboundBytes), \r\n    BlockedInboundBytes = sum(BlockedInboundBytes), \r\n    AllowedOutboundBytes = sum(AllowedOutboundBytes),\r\n    BlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    AllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\n    BlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\n    AllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\n    BlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedInboundPackets = sum(AllowedInboundPackets),\r\n    BlockedInboundPackets = sum(BlockedInboundPackets),\r\n    AllowedOutboundPackets = sum(AllowedOutboundPackets),\r\n    BlockedOutboundPackets = sum(BlockedOutboundPackets),\r\n    AllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\n    BlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\n    AllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by IP, VM, Subnet, Subscription\r\n    | extend TrafficInSelectedUnit = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TrafficInSelectedUnit > 0\r\n    | project IP, VM, Subnet, Subscription, trafficForSorting = TrafficInSelectedUnit, \r\n    TotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n    // Inbound Traffic\r\n    TotalInbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\n    AllowedInbound = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\n    AllowedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\n    BlockedInbound = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\n    BlockedInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\n    AllowedInboundBenign = iff('{Units:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\n    AllowedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\n    AllowedInboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\n    AllowedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\n    BlockedInboundBenign = iff('{Units:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\n    BlockedInboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\n    BlockedInboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\n    BlockedInboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n    // Outbound Traffic\r\n    TotalOutbound = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\n    AllowedOutbound = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\n    AllowedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\n    BlockedOutbound = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\n    BlockedOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\n    AllowedOutboundBenign = iff('{Units:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\n    AllowedOutboundMalicious = iff('{Units:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\n    AllowedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\n    BlockedOutboundBenign = iff('{Units:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\n    BlockedOutboundMalicious = iff('{Units:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{Units:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\n    BlockedOutboundMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\n    hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription);\r\nlet topTalking = \r\n    NTANetAnalytics\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | extend isAzurePublicFlow = (FlowType == 'AzurePublic')\r\n    // removed old direction part here\r\n    | mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')), iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')))\r\n    | extend \r\n    partnerIP = tostring(split(partnerIP, '|')[0]),\r\n    partnerHost = iff(direction == 'Source' and isnotempty(DestVm), DestVm, iff(direction == 'Destination' and isnotempty(SrcVm), SrcVm, iff(isAzurePublicFlow, AzureRegion, Country)))\r\n    | where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet','IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows),\r\n    BlockedInbound = sum(DeniedInFlows),\r\n    AllowedOutbound = sum(AllowedOutFlows),\r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    // by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion ,partnerIP,partnerHost, SrcVm,DestVm, SrcSubnet, DestSubnet\r\n    by partnerIP, partnerHost, hostEndPoint, direction, SrcSubnet, DestSubnet\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    // | extend \r\n    // hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    // hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    // | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(direction =~ \"Source\", SrcSubnet, DestSubnet)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n    | project hostInfo, topTalkingPairs;\r\nlet topMalicious =\r\n    NTANetAnalytics \r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'FlowLog' and  FaSchemaVersion == '3'\r\n    //\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend \r\n    hostEndPoint1 = strcat(SrcSubscription, '#', SrcVm, '#', SrcIp), \r\n    hostEndPoint2 = strcat(DestSubscription, '#', DestVm, '#', DestIp)\r\n    | mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n    | extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n    | extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n    | where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n    | extend Subnet = iff(hostEndPoint == hostEndPoint1, SrcSubnet, DestSubnet)\r\n    | extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n    // modified ends here\r\n    | where FlowType == 'MaliciousFlow'\r\n    | extend partnerIP = iff(direction == 'Source', DestIp, SrcIp)   \r\n    // fork begins\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows) \r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred \r\n    | extend FlowCount = max_of(Inbound, Outbound) \r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0) \r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)   \r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country, IP, VM, Subnet, Subscription\r\n    | top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country) by max(totalTraffic)\r\n    | project hostInfo, partnerInfo\r\n    | summarize topMaliciousTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n    | project hostInfo, topMaliciousTalkingPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.hostInfo == $right.hostInfo\r\n| join kind=leftouter topMalicious on $left.hostInfo == $right.hostInfo\r\n| extend VNet = tostring(strcat(\"/subscriptions/\",Subscription,\"/resourceGroups/\",(split(Subnet,'/')[0]),\"/providers/Microsoft.Network/virtualNetworks/\",(split(Subnet,'/')[1]))), Subnet = tostring(strcat(split(Subnet, '/')[1],\"/\", split(Subnet, '/')[2]))\r\n| sort by trafficForSorting desc\r\n{ProjectColumnsCondition}",
                          "size": 0,
                          "aggregation": 2,
                          "showAnnotations": true,
                          "showAnalytics": true,
                          "noDataMessage": "No data to display",
                          "timeContextFromParameter": "timeInterval",
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "aggregatedTotalFlow",
                                "formatter": 19,
                                "formatOptions": {
                                  "palette": "orange",
                                  "timelineSettings": {
                                    "timelineStartColumn": "Time"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "conditionalVisibility": {
                          "parameterName": "FlowType",
                          "comparison": "isEqualTo",
                          "value": "vnet"
                        },
                        "name": "VMSSDistrVNet"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "",
                          "size": 0,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        "conditionalVisibility": {
                          "parameterName": "Flow Type",
                          "comparison": "isEqualTo",
                          "value": "both"
                        },
                        "name": "VMSSDistrUnion"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "VMSS"
                  },
                  "name": "VMSSdistribution"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 1,
                              "content": {
                                "json": "## Frequent conversations - Internal"
                              },
                              "name": "FreqInternalConversationTitle"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet ChatTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowType_s !in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic', 'Unknown')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    // filter ends\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\n    AllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d), \r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest), \r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion, Subnet1_s, Subnet2_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize TotalFlow = sum(FlowCount), TotalBytes = sum(BytesCount), TotalPackets = sum(PacketsCount)\r\n    by Subscription1_g, Subnet1_s, SrcIP_s, Subscription2_g, Subnet2_s, DestIP_s\r\n    | extend endPoint1 = strcat(Subscription1_g, '#', Subnet1_s, '#', SrcIP_s), endPoint2 = strcat(Subscription2_g, '#', Subnet2_s, '#', DestIP_s)\r\n    | extend endPoint1Hash = hash(endPoint1), endPoint2Hash = hash(endPoint2);\r\nlet FinalChatty = ChatTable\r\n    | join kind=leftouter ChatTable on ($left.endPoint1 == $right.endPoint2) and ($left.endPoint2 == $right.endPoint1)\r\n    | where isempty(endPoint11) or (endPoint1Hash > endPoint2Hash);\r\nFinalChatty\r\n| project endPoint1, endPoint2, TotalTrafficSorting = iff('{Units:value}' =~ 'bytes', TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), iff('{Units:value}' =~ 'packets', TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))))), TotalFlow, TotalFlow1, TotalBytes, TotalBytes1, TotalPackets, TotalPackets1\r\n| where TotalTrafficSorting > 0\r\n| sort by TotalTrafficSorting desc\r\n| extend splitEndPoint1 = split(endPoint1, '#'), splitEndPoint2 = split(endPoint2, '#')\r\n| project \r\nip1ip2 = strcat(splitEndPoint1[2], ' - ', splitEndPoint2[2]),\r\nsubnetOfIp1 = splitEndPoint1[1],\r\nsubnetOfIp2 = splitEndPoint2[1],\r\nsubscriptionOfIp1 = splitEndPoint1[0],\r\nsubscriptionOfIp2 = splitEndPoint2[0],\r\ntotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3))),\r\ntrafficFromIp1ToIp2 = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(tolong(TotalFlow), 3))),\r\ntrafficFromIp2ToIp1 = iff('{Units:value}' =~ 'bytes', format_bytes(iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3)))",
                                "size": 0,
                                "aggregation": 2,
                                "showAnnotations": true,
                                "showAnalytics": true,
                                "noDataMessage": "No data to display",
                                "timeContextFromParameter": "timeInterval",
                                "showExportToExcel": true,
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "crossComponentResources": [
                                  "{workspace}"
                                ],
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "aggregatedTotalFlow",
                                      "formatter": 19,
                                      "formatOptions": {
                                        "palette": "orange",
                                        "timelineSettings": {
                                          "timelineStartColumn": "Time"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "conditionalVisibility": {
                                "parameterName": "FlowType",
                                "comparison": "isEqualTo",
                                "value": "nsg"
                              },
                              "name": "FreqInternalConvoNSG"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet ChatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType !in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic', 'Unknown')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    // filter ends\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), \r\n    AllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows), \r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest), \r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, SrcSubnet, DestSubnet\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize TotalFlow = sum(FlowCount), TotalBytes = sum(BytesCount), TotalPackets = sum(PacketsCount)\r\n    by SrcSubscription, SrcSubnet, SrcIp, DestSubscription, DestSubnet, DestIp\r\n    | extend endPoint1 = strcat(SrcSubscription, '#', SrcSubnet, '#', SrcIp), endPoint2 = strcat(DestSubscription, '#', DestSubnet, '#', DestIp)\r\n    | extend endPoint1Hash = hash(endPoint1), endPoint2Hash = hash(endPoint2);\r\nlet FinalChatty = ChatTable\r\n    | join kind=leftouter ChatTable on ($left.endPoint1 == $right.endPoint2) and ($left.endPoint2 == $right.endPoint1)\r\n    | where isempty(endPoint11) or (endPoint1Hash > endPoint2Hash);\r\nFinalChatty\r\n| project endPoint1, endPoint2, TotalTrafficSorting = iff('{Units:value}' =~ 'bytes', TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), iff('{Units:value}' =~ 'packets', TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))))), TotalFlow, TotalFlow1, TotalBytes, TotalBytes1, TotalPackets, TotalPackets1\r\n| where TotalTrafficSorting > 0\r\n| sort by TotalTrafficSorting desc\r\n| extend splitEndPoint1 = split(endPoint1, '#'), splitEndPoint2 = split(endPoint2, '#')\r\n| project \r\nip1ip2 = strcat(splitEndPoint1[2], ' - ', splitEndPoint2[2]),\r\nsubnetOfIp1 = splitEndPoint1[1],\r\nsubnetOfIp2 = splitEndPoint2[1],\r\nsubscriptionOfIp1 = splitEndPoint1[0],\r\nsubscriptionOfIp2 = splitEndPoint2[0],\r\ntotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3))),\r\ntrafficFromIp1ToIp2 = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(tolong(TotalFlow), 3))),\r\ntrafficFromIp2ToIp1 = iff('{Units:value}' =~ 'bytes', format_bytes(iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3)))\r\n",
                                "size": 0,
                                "aggregation": 2,
                                "showAnnotations": true,
                                "showAnalytics": true,
                                "noDataMessage": "No data to display",
                                "timeContextFromParameter": "timeInterval",
                                "showExportToExcel": true,
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "crossComponentResources": [
                                  "{workspace}"
                                ],
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "aggregatedTotalFlow",
                                      "formatter": 19,
                                      "formatOptions": {
                                        "palette": "orange",
                                        "timelineSettings": {
                                          "timelineStartColumn": "Time"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "conditionalVisibility": {
                                "parameterName": "FlowType",
                                "comparison": "isEqualTo",
                                "value": "vnet"
                              },
                              "name": "FreqInternalConvoVNet"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"b4913b8f-7fe0-4304-8aab-60814400703c\",\"mergeType\":\"union\",\"leftTable\":\"FreqInternalConvoNSG\",\"rightTable\":\"FreqInternalConvoVNet\"}],\"projectRename\":[{\"originalName\":\"IP\",\"mergedName\":\"IP\",\"fromId\":\"unknown\"},{\"originalName\":\"VM\",\"mergedName\":\"VM\",\"fromId\":\"unknown\"},{\"originalName\":\"Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs1\",\"mergedName\":\"topTalkingPairs1\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInbound\",\"mergedName\":\"AllowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInbound\",\"mergedName\":\"BlockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutbound\",\"mergedName\":\"AllowedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutbound\",\"mergedName\":\"BlockedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[FreqInternalConvoNSG].IP\",\"mergedName\":\"IP1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].VM\",\"mergedName\":\"VM1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].Subnet\",\"mergedName\":\"Subnet1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].Subscription\",\"mergedName\":\"Subscription1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].topTalkingPairs\",\"mergedName\":\"topTalkingPairs2\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].topTalkingPairs1\",\"mergedName\":\"topTalkingPairs11\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].TotalTraffic\",\"mergedName\":\"TotalTraffic1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].TotalInbound\",\"mergedName\":\"TotalInbound1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedInbound\",\"mergedName\":\"AllowedInbound1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedInbound\",\"mergedName\":\"BlockedInbound1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].TotalOutbound\",\"mergedName\":\"TotalOutbound1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedOutbound\",\"mergedName\":\"AllowedOutbound1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedOutbound\",\"mergedName\":\"BlockedOutbound1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoNSG].BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[FreqInternalConvoVNet].ip1ip2\",\"mergedName\":\"ip1ip2\",\"fromId\":\"unknown\"},{\"originalName\":\"[FreqInternalConvoVNet].subnetOfIp1\",\"mergedName\":\"subnetOfIp1\",\"fromId\":\"unknown\"},{\"originalName\":\"[FreqInternalConvoVNet].subnetOfIp2\",\"mergedName\":\"subnetOfIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"[FreqInternalConvoVNet].subscriptionOfIp1\",\"mergedName\":\"subscriptionOfIp1\",\"fromId\":\"unknown\"},{\"originalName\":\"[FreqInternalConvoVNet].subscriptionOfIp2\",\"mergedName\":\"subscriptionOfIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"[FreqInternalConvoVNet].totalTraffic\",\"mergedName\":\"totalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"[FreqInternalConvoVNet].trafficFromIp1ToIp2\",\"mergedName\":\"trafficFromIp1ToIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"[FreqInternalConvoVNet].trafficFromIp2ToIp1\",\"mergedName\":\"trafficFromIp2ToIp1\",\"fromId\":\"unknown\"},{\"originalName\":\"ip1ip2\",\"mergedName\":\"ip1ip2\",\"fromId\":\"unknown\"},{\"originalName\":\"subnetOfIp1\",\"mergedName\":\"subnetOfIp1\",\"fromId\":\"unknown\"},{\"originalName\":\"subnetOfIp2\",\"mergedName\":\"subnetOfIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"subscriptionOfIp1\",\"mergedName\":\"subscriptionOfIp1\",\"fromId\":\"unknown\"},{\"originalName\":\"subscriptionOfIp2\",\"mergedName\":\"subscriptionOfIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"totalTraffic\",\"mergedName\":\"totalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"trafficFromIp1ToIp2\",\"mergedName\":\"trafficFromIp1ToIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"trafficFromIp2ToIp1\",\"mergedName\":\"trafficFromIp2ToIp1\",\"fromId\":\"unknown\"}]}",
                                "size": 0,
                                "queryType": 7
                              },
                              "conditionalVisibility": {
                                "parameterName": "FlowType",
                                "comparison": "isEqualTo",
                                "value": "both"
                              },
                              "name": "FreqInternalConvoUnion"
                            }
                          ]
                        },
                        "name": "InternalConversations"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 1,
                              "content": {
                                "json": "## Frequent conversations - External"
                              },
                              "name": "FreqExternalConversationTitle"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet ChatTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n    // filter begins\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    // filter ends\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows_d, AllowedInFlows_d + DeniedInFlows_d)\r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows_d, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend isDirectionSrc = isnotempty(VM1_s)\r\n    | extend OtherSideString = iff(FlowType_s == 'AzurePublic', 'Azure Region', 'Country')\r\n    | mv-expand SrcIP = iif(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' ')) to typeof(string)\r\n    | mv-expand DestIP = iif(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' ')) to typeof(string)\r\n    | extend Subnet1 = iif(isDirectionSrc, Subnet1_s, OtherSideString), Subnet2 = iif(not(isDirectionSrc), Subnet2_s, OtherSideString), Subscription1 = iif(isDirectionSrc, Subscription1_g, OtherSideString), Subscription2 = iif(not(isDirectionSrc), Subscription2_g, OtherSideString)\r\n    | where isnotempty(Subscription1) and isnotempty(Subnet1) and isnotempty(SrcIP)\r\n    | where isnotempty(Subscription2) and isnotempty(Subnet2) and isnotempty(DestIP)\r\n    | summarize TotalFlow = sum(FlowCount), TotalBytes = sum(BytesCount), TotalPackets = sum(PacketsCount)\r\n    by Subscription1, Subnet1, SrcIP = tostring(split(SrcIP, '|')[0]), Subscription2, Subnet2, DestIP = tostring(split(DestIP, '|')[0])\r\n    | extend endPoint1 = strcat(Subscription1, '#', Subnet1, '#', SrcIP), endPoint2 = strcat(Subscription2, '#', Subnet2, '#', DestIP)\r\n    | extend endPoint1Hash = hash(endPoint1), endPoint2Hash = hash(endPoint2);\r\nlet FinalChatty = ChatTable\r\n    | join kind=leftouter ChatTable on ($left.endPoint1 == $right.endPoint2) and ($left.endPoint2 == $right.endPoint1)\r\n    | where isempty(endPoint11) or (endPoint1Hash > endPoint2Hash);\r\nFinalChatty\r\n| project endPoint1, endPoint2, TotalTrafficSorting = iff('{Units:value}' =~ 'bytes', TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), iff('{Units:value}' =~ 'packets', TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))))), TotalFlow, TotalFlow1, TotalBytes, TotalBytes1, TotalPackets, TotalPackets1\r\n| where TotalTrafficSorting > 0\r\n| sort by TotalTrafficSorting desc\r\n| extend splitEndPoint1 = split(endPoint1, '#'), splitEndPoint2 = split(endPoint2, '#')\r\n| project \r\nip1ip2 = strcat(splitEndPoint1[2], ' - ', splitEndPoint2[2]),\r\nsubnetOfIp1 = splitEndPoint1[1],\r\nsubnetOfIp2 = splitEndPoint2[1],\r\nsubscriptionOfIp1 = splitEndPoint1[0],\r\nsubscriptionOfIp2 = splitEndPoint2[0],\r\ntotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3))),\r\ntrafficFromIp1ToIp2 = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(tolong(TotalFlow), 3))),\r\ntrafficFromIp2ToIp1 = iff('{Units:value}' =~ 'bytes', format_bytes(iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3)))",
                                "size": 0,
                                "aggregation": 2,
                                "showAnnotations": true,
                                "showAnalytics": true,
                                "noDataMessage": "No data to display",
                                "timeContextFromParameter": "timeInterval",
                                "showExportToExcel": true,
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "crossComponentResources": [
                                  "{workspace}"
                                ],
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "aggregatedTotalFlow",
                                      "formatter": 19,
                                      "formatOptions": {
                                        "palette": "orange",
                                        "timelineSettings": {
                                          "timelineStartColumn": "Time"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "conditionalVisibility": {
                                "parameterName": "FlowType",
                                "comparison": "isEqualTo",
                                "value": "nsg"
                              },
                              "name": "TopTalkingNSG"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet ChatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    // filter ends\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0)\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutFlows, AllowedInFlows + DeniedInFlows)\r\n    | extend Outbound = AllowedOutbound_inferred + DeniedOutFlows, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend isDirectionSrc = isnotempty(SrcVm)\r\n    | extend OtherSideString = iff(FlowType == 'AzurePublic', 'Azure Region', 'Country')\r\n    | mv-expand SrcIP = iif(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' ')) to typeof(string)\r\n    | mv-expand DestIP = iif(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' ')) to typeof(string)\r\n    | extend Subnet1 = iif(isDirectionSrc, SrcSubnet, OtherSideString), Subnet2 = iif(not(isDirectionSrc), DestSubnet, OtherSideString), Subscription1 = iif(isDirectionSrc, SrcSubscription, OtherSideString), Subscription2 = iif(not(isDirectionSrc), DestSubscription, OtherSideString)\r\n    | where isnotempty(Subscription1) and isnotempty(Subnet1) and isnotempty(SrcIP)\r\n    | where isnotempty(Subscription2) and isnotempty(Subnet2) and isnotempty(DestIP)\r\n    | summarize TotalFlow = sum(FlowCount), TotalBytes = sum(BytesCount), TotalPackets = sum(PacketsCount)\r\n    by Subscription1, Subnet1, SrcIP = tostring(split(SrcIP, '|')[0]), Subscription2, Subnet2, DestIP = tostring(split(DestIP, '|')[0])\r\n    | extend endPoint1 = strcat(Subscription1, '#', Subnet1, '#', SrcIP), endPoint2 = strcat(Subscription2, '#', Subnet2, '#', DestIP)\r\n    | extend endPoint1Hash = hash(endPoint1), endPoint2Hash = hash(endPoint2);\r\nlet FinalChatty = ChatTable\r\n    | join kind=leftouter ChatTable on ($left.endPoint1 == $right.endPoint2) and ($left.endPoint2 == $right.endPoint1)\r\n    | where isempty(endPoint11) or (endPoint1Hash > endPoint2Hash);\r\nFinalChatty\r\n| project endPoint1, endPoint2, TotalTrafficSorting = iff('{Units:value}' =~ 'bytes', TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), iff('{Units:value}' =~ 'packets', TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))))), TotalFlow, TotalFlow1, TotalBytes, TotalBytes1, TotalPackets, TotalPackets1\r\n| where TotalTrafficSorting > 0\r\n| sort by TotalTrafficSorting desc\r\n| extend splitEndPoint1 = split(endPoint1, '#'), splitEndPoint2 = split(endPoint2, '#')\r\n| project \r\nip1ip2 = strcat(splitEndPoint1[2], ' - ', splitEndPoint2[2]),\r\nsubnetOfIp1 = splitEndPoint1[1],\r\nsubnetOfIp2 = splitEndPoint2[1],\r\nsubscriptionOfIp1 = splitEndPoint1[0],\r\nsubscriptionOfIp2 = splitEndPoint2[0],\r\ntotalTraffic = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes + iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets + iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(TotalFlow + iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3))),\r\ntrafficFromIp1ToIp2 = iff('{Units:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(tolong(TotalFlow), 3))),\r\ntrafficFromIp2ToIp1 = iff('{Units:value}' =~ 'bytes', format_bytes(iff(isnull(TotalBytes1), 0, tolong(TotalBytes1)), 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(iff(isnull(TotalPackets1), 0, tolong(TotalPackets1)), 3), ValueWithUnit(tolong(iff(isnull(TotalFlow1), 0, tolong(TotalFlow1))), 3)))",
                                "size": 0,
                                "aggregation": 2,
                                "showAnnotations": true,
                                "showAnalytics": true,
                                "noDataMessage": "No data to display",
                                "timeContextFromParameter": "timeInterval",
                                "showExportToExcel": true,
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "crossComponentResources": [
                                  "{workspace}"
                                ],
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "aggregatedTotalFlow",
                                      "formatter": 19,
                                      "formatOptions": {
                                        "palette": "orange",
                                        "timelineSettings": {
                                          "timelineStartColumn": "Time"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "conditionalVisibility": {
                                "parameterName": "FlowType",
                                "comparison": "isEqualTo",
                                "value": "vnet"
                              },
                              "name": "TopTalkingVNet"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"b4913b8f-7fe0-4304-8aab-60814400703c\",\"mergeType\":\"union\",\"leftTable\":\"TopTalkingNSG\",\"rightTable\":\"TopTalkingVNet\"}],\"projectRename\":[{\"originalName\":\"[TopTalkingNSG].IP\",\"mergedName\":\"IP\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].VM\",\"mergedName\":\"VM\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].topTalkingPairs1\",\"mergedName\":\"topTalkingPairs1\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInbound\",\"mergedName\":\"AllowedInbound\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInbound\",\"mergedName\":\"BlockedInbound\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutbound\",\"mergedName\":\"AllowedOutbound\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutbound\",\"mergedName\":\"BlockedOutbound\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"[TopTalkingNSG].BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"b4913b8f-7fe0-4304-8aab-60814400703c\"},{\"originalName\":\"IP\",\"mergedName\":\"IP\",\"fromId\":\"unknown\"},{\"originalName\":\"VM\",\"mergedName\":\"VM\",\"fromId\":\"unknown\"},{\"originalName\":\"Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"unknown\"},{\"originalName\":\"Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs1\",\"mergedName\":\"topTalkingPairs1\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInbound\",\"mergedName\":\"AllowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInbound\",\"mergedName\":\"BlockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutbound\",\"mergedName\":\"AllowedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutbound\",\"mergedName\":\"BlockedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"ip1ip2\",\"mergedName\":\"ip1ip2\",\"fromId\":\"unknown\"},{\"originalName\":\"subnetOfIp1\",\"mergedName\":\"subnetOfIp1\",\"fromId\":\"unknown\"},{\"originalName\":\"subnetOfIp2\",\"mergedName\":\"subnetOfIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"subscriptionOfIp1\",\"mergedName\":\"subscriptionOfIp1\",\"fromId\":\"unknown\"},{\"originalName\":\"subscriptionOfIp2\",\"mergedName\":\"subscriptionOfIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"totalTraffic\",\"mergedName\":\"totalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"trafficFromIp1ToIp2\",\"mergedName\":\"trafficFromIp1ToIp2\",\"fromId\":\"unknown\"},{\"originalName\":\"trafficFromIp2ToIp1\",\"mergedName\":\"trafficFromIp2ToIp1\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].IP\",\"mergedName\":\"IP\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].VM\",\"mergedName\":\"VM\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].topTalkingPairs1\",\"mergedName\":\"topTalkingPairs1\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].TotalInbound\",\"mergedName\":\"TotalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedInbound\",\"mergedName\":\"AllowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedInbound\",\"mergedName\":\"BlockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].TotalOutbound\",\"mergedName\":\"TotalOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedOutbound\",\"mergedName\":\"AllowedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedOutbound\",\"mergedName\":\"BlockedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[TopTalkingVNet].BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"unknown\"}]}",
                                "size": 0,
                                "queryType": 7
                              },
                              "conditionalVisibility": {
                                "parameterName": "FlowType",
                                "comparison": "isEqualTo",
                                "value": "both"
                              },
                              "name": "query - 4"
                            }
                          ]
                        },
                        "name": "ExternalConversations"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "distributiontype",
                    "comparison": "isEqualTo",
                    "value": "FrequentTalkers"
                  },
                  "name": "FrequentTalkers"
                }
              ]
            },
            "name": "DistributionGrid"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "TrafficDistribution"
        },
        {
          "parameterName": "isFlowAvailable",
          "comparison": "isNotEqualTo",
          "value": "false,false"
        },
        {
          "parameterName": "QueryType",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "TrafficDistribution"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "553b6a62-5413-4f6f-b50f-bd2db686aa33",
                  "version": "KqlParameterItem/1.0",
                  "name": "portRange",
                  "label": "Ports Range",
                  "type": 2,
                  "description": "Select one or more ports range",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "",
                  "delimiter": ",",
                  "query": "datatable (id: int)\r\n[0,\r\n1,\r\n2,\r\n3,\r\n4,\r\n5,\r\n6,\r\n7,\r\n8,\r\n9,\r\n10,\r\n11,\r\n12,\r\n13,\r\n14,\r\n15,\r\n16,\r\n17,\r\n18,\r\n19,\r\n20,\r\n21,\r\n22,\r\n23,\r\n24,\r\n25,\r\n26,\r\n27,\r\n28,\r\n29,\r\n30,\r\n31,\r\n32,\r\n33,\r\n34,\r\n35,\r\n36,\r\n37,\r\n38,\r\n39,\r\n40,\r\n41,\r\n42,\r\n43,\r\n44,\r\n45,\r\n46,\r\n47,\r\n48,\r\n49,\r\n50,\r\n51,\r\n52,\r\n53,\r\n54,\r\n55,\r\n56,\r\n57,\r\n58,\r\n59,\r\n60,\r\n61,\r\n62,\r\n63,\r\n64,\r\n65]\r\n| project value = strcat(tostring(id*1000), '-', tostring(min_of(65535, id*1000+999))), label = strcat(tostring(id*1000), '-', tostring(min_of(65535, id*1000+999))), selected = 1",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 1800000
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "ef9c7fec-3283-4cdd-8db2-166e0a461559",
                  "version": "KqlParameterItem/1.0",
                  "name": "portRangeCheckLine",
                  "type": 1,
                  "description": "Port range filter",
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "portRange",
                        "operator": "is Empty",
                        "rightValType": "param",
                        "resultValType": "static",
                        "resultVal": "//skip"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "portRange",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "*",
                        "resultValType": "static",
                        "resultVal": "//skip"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "| extend portRangeList = split(\"{portRange}\", ',') | mv-expand portRangeList to typeof(string) | extend portRangeBegin = toint(split(portRangeList, '-')[0]), portRangeEnd = toint(split(portRangeList, '-')[1]) | where portRangeBegin <= portToCheck and portToCheck <= portRangeEnd"
                      }
                    }
                  ]
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "## APPLICATION PORTS"
            },
            "name": "ApplicationPorts"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ApplicationProtocols = \r\nNTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\nand FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    //filters\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    //filters\r\n| extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    AllowedInbound = sum(AllowedInFlows), \r\n    BlockedInbound = sum(DeniedInFlows), \r\n    AllowedOutbound = sum(AllowedOutFlows), \r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), \r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), \r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), \r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), \r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), \r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), \r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), \r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), \r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    isMaliciousFlow,\r\n    L7Protocol\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by L7Protocol, DestPort\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        ApplicationProtocols\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        ApplicationProtocols\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        ApplicationProtocols\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        ApplicationProtocols\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                    "size": 3,
                    "noDataMessage": "The Application Insights resource you selected has no data.",
                    "timeContextFromParameter": "timeInterval",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "ColumnName",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "Total Traffic of all IPs"
                        }
                      },
                      "subtitleContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "rightContent": {
                        "columnMatch": "totalTraffic",
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Column2",
                        "formatter": 1
                      },
                      "showBorder": false,
                      "sortCriteriaField": "ColumnName",
                      "sortOrderField": 2,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "vnet"
                  },
                  "name": "ApplicationProtocolsVNet"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ApplicationProtocols = \r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\nand FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    //filters\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    //filters\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\n    AllowedInbound = sum(AllowedInFlows_d), \r\n    BlockedInbound = sum(DeniedInFlows_d), \r\n    AllowedOutbound = sum(AllowedOutFlows_d), \r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), \r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), \r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), \r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), \r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), \r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), \r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), \r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), \r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection_s,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    isMaliciousFlow,\r\n    L7Protocol_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = tolong(max_of(Inbound, Outbound))\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = tolong(max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = tolong(max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc))\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    by L7Protocol_s, DestPort_d\r\n    | summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\n union (\r\n        ApplicationProtocols\r\n        | project ColumnName = 'TotalTraffic', Value = totalTraffic\r\n    ),\r\n    (\r\n        ApplicationProtocols\r\n        | project ColumnName = 'AllowedTraffic', Value = allowedTraffic\r\n    ),\r\n    (\r\n        ApplicationProtocols\r\n        | project ColumnName = 'Malicious Traffic', Value = maliciousTraffic\r\n    ),\r\n    (\r\n        ApplicationProtocols\r\n        | project ColumnName = 'Blocked Traffic', Value = blockedTraffic\r\n    )",
                    "size": 3,
                    "noDataMessage": "The Application Insights resource you selected has no data.",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "ColumnName",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "Total Traffic of all IPs"
                        }
                      },
                      "subtitleContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "Column2",
                        "formatter": 1
                      },
                      "showBorder": false,
                      "sortCriteriaField": "ColumnName",
                      "sortOrderField": 2,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "nsg"
                  },
                  "name": "ApplicationProtocolsNSG"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ApplicationProtocolsNSG = \r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog'\r\n    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\nand FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    //filters\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    //filters\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Outbound', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Outbound', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'Allowed' and FlowDirection_s == 'Inbound', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'Denied' and FlowDirection_s == 'Inbound', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\n    AllowedInbound = sum(AllowedInFlows_d), \r\n    BlockedInbound = sum(DeniedInFlows_d), \r\n    AllowedOutbound = sum(AllowedOutFlows_d), \r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), \r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), \r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), \r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), \r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), \r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), \r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), \r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), \r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection_s,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    isMaliciousFlow,\r\n    L7Protocol_s\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = tolong(max_of(Inbound, Outbound))\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = tolong(max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc))\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = tolong(max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc))\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount)\r\n    by L7Protocol_s, DestPort_d\r\n    | summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet ApplicationProtocolsVNet = \r\nNTANetAnalytics\r\n| where SubType == 'FlowLog'\r\n    and FaSchemaVersion == '3'\r\nand FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    //filters\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    //filters\r\n| extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n| extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n| extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n| summarize \r\n    AllowedInbound = sum(AllowedInFlows), \r\n    BlockedInbound = sum(DeniedInFlows), \r\n    AllowedOutbound = sum(AllowedOutFlows), \r\n    BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), \r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), \r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), \r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), \r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), \r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), \r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), \r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), \r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIp,\r\n    SrcSubscription,\r\n    SrcNic,\r\n    DestIp,\r\n    DestSubscription,\r\n    DestNic,\r\n    FlowDirection,\r\n    L4Protocol,\r\n    DestPort,\r\n    CountryOrRegion,\r\n    isMaliciousFlow,\r\n    L7Protocol\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | extend \r\n    AllowedTraffic = tolong(AllowedInbound) + tolong(AllowedOutbound),\r\n    BlockedTraffic = tolong(BlockedInbound) + tolong(BlockedOutbound)\r\n    // fork part 2 Bytes:\r\n    | extend \r\n    AllowedTrafficBytes = tolong(AllowedInboundBytesAtDest) + tolong(AllowedInboundBytesAtSrc) + tolong(AllowedOutboundBytesAtSrc) + tolong(AllowedOutboundBytesAtDest),\r\n    BlockedTrafficBytes = tolong(BlockedInboundBytesAtDest) + tolong(BlockedInboundBytesAtSrc) + tolong(BlockedOutboundBytesAtSrc) + tolong(BlockedOutboundBytesAtDest) \r\n    // fork part 3 Packets:\r\n    | extend \r\n    AllowedTrafficPackets = tolong(AllowedInboundPacketsAtDest) + tolong(AllowedInboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtSrc) + tolong(AllowedOutboundPacketsAtDest),\r\n    BlockedTrafficPackets = tolong(BlockedInboundPacketsAtDest) + tolong(BlockedInboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtSrc) + tolong(BlockedOutboundPacketsAtDest)\r\n    | summarize \r\n    // summarize for flows\r\n    AllowedTraffic = sum(AllowedTraffic), \r\n    BlockedTraffic = sum(BlockedTraffic),\r\n    MaliciousFlow = sum(iff(isMaliciousFlow, AllowedTraffic + BlockedTraffic, 0)),\r\n    TotalFlow = sum(FlowCount),\r\n    // summarize for bytes\r\n    AllowedBytes = sum(AllowedTrafficBytes), \r\n    BlockedBytes = sum(BlockedTrafficBytes),\r\n    MaliciousBytes = sum(iff(isMaliciousFlow, AllowedTrafficBytes + BlockedTrafficBytes, 0)),\r\n    TotalBytes = sum(BytesCount),\r\n    // summarize for packets\r\n    AllowedPackets = sum(AllowedTrafficPackets),\r\n    BlockedPackets = sum(BlockedTrafficPackets),\r\n    MaliciousPackets = sum(iff(isMaliciousFlow, AllowedTrafficPackets + BlockedTrafficPackets, 0)),\r\n    TotalPackets = sum(PacketsCount) \r\n    by L7Protocol, DestPort\r\n| summarize totalTraffic = iff('{Units:value}' =~ 'bytes', sum(TotalBytes), iff('{Units:value}' =~ 'packets', sum(TotalPackets), sum(TotalFlow))),\r\nallowedTraffic = iff('{Units:value}' =~ 'bytes', sum(AllowedBytes), iff('{Units:value}' =~ 'packets', sum(AllowedPackets), sum(AllowedTraffic))),\r\nmaliciousTraffic = iff('{Units:value}' =~ 'bytes', sum(MaliciousBytes), iff('{Units:value}' =~ 'packets', sum(MaliciousPackets), sum(MaliciousFlow))),\r\nblockedTraffic = iff('{Units:value}' =~ 'bytes', sum(BlockedBytes), iff('{Units:value}' =~ 'packets', sum(BlockedPackets), sum(BlockedTraffic)));\r\nlet FinalTraffic = ApplicationProtocolsNSG\r\n| union ApplicationProtocolsVNet\r\n| summarize TotalTraffic = sum(totalTraffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n union (\r\n        FinalTraffic\r\n        | project ColumnName = 'TotalTraffic', Value = TotalTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'AllowedTraffic', Value = AllowedTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Malicious Traffic', Value = MaliciousTraffic\r\n    ),\r\n    (\r\n        FinalTraffic\r\n        | project ColumnName = 'Blocked Traffic', Value = BlockedTraffic\r\n    )",
                    "size": 0,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "ColumnName",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      },
                      "showBorder": false
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "both"
                  },
                  "showPin": false,
                  "name": "UnionTraffic"
                }
              ]
            },
            "name": "MetricsSplit"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend\r\n    portToCheck = DestPort_d\r\n    {portRangeCheckLine}\r\n// filter ends\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow')\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\n    AllowedInbound = sum(AllowedInFlows_d),\r\n    BlockedInbound = sum(DeniedInFlows_d), \r\n    AllowedOutbound = sum(AllowedOutFlows_d),\r\n    BlockedOutbound = sum(DeniedOutFlows_d),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n    BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n    BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n    BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n    BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n    BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n    BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n    BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n    BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by\r\n    SrcIP_s,\r\n    Subscription1_g,\r\n    NIC1_s,\r\n    DestIP_s,\r\n    Subscription2_g,\r\n    NIC2_s,\r\n    FlowDirection_s,\r\n    L4Protocol_s,\r\n    DestPort_d,\r\n    CountryOrRegion,\r\n    isMaliciousFlow,\r\n    L7Protocol_s\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend\r\n    Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n    Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend\r\n    OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n    InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend\r\n    OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n    InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend\r\n    OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n    InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend\r\n    OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n    InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| summarize \r\n    //\r\n    totalAllowedInbound = sum(AllowedInbound), \r\n    totalBlockedInbound = sum(BlockedInbound), \r\n    totalInboundMalicious = sum(iif(isMaliciousFlow, tolong(Inbound), 0)), \r\n    totalAllowedInboundMalicious = sum(iif(isMaliciousFlow, tolong(AllowedInbound), 0)), \r\n    totalBlockededInboundMalicious = sum(iif(isMaliciousFlow, tolong(BlockedInbound), 0)), \r\n    totalInbound = sum(Inbound),\r\n    TotalFlow = sum(FlowCount),\r\n    //\r\n    totalAllowedInboundBytes = sum(AllowedInboundBytesAtDest), \r\n    totalBlockedInboundBytes = sum(BlockedInboundBytesAtDest), \r\n    totalInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(InboundBytesAtDest), 0)), \r\n    totalAllowedInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(AllowedInboundBytesAtDest), 0)), \r\n    totalBlockededInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(BlockedInboundBytesAtDest), 0)), \r\n    totalAllowedOutboundBytes = sum(AllowedOutboundBytesAtDest), \r\n    totalBlockedOutboundBytes = sum(BlockedOutboundBytesAtDest), \r\n    totalOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(OutboundBytesAtDest), 0)), \r\n    totalAllowedOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(AllowedOutboundBytesAtDest), 0)), \r\n    totalBlockededOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(BlockedOutboundBytesAtDest), 0)), \r\n    totalInboundBytesAtDest = sum(InboundBytesAtDest), \r\n    totalOutboundBytesAtDest = sum(OutboundBytesAtDest),\r\n    TotalBytes = sum(BytesCount),\r\n    //\r\n    totalAllowedInboundPackets = sum(AllowedInboundPacketsAtDest), \r\n    totalBlockedInboundPackets = sum(BlockedInboundPacketsAtDest), \r\n    totalInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(InboundPacketsAtDest), 0)), \r\n    totalAllowedInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(AllowedInboundPacketsAtDest), 0)), \r\n    totalBlockededInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(BlockedInboundPacketsAtDest), 0)), \r\n    totalAllowedOutboundPackets = sum(AllowedOutboundPacketsAtDest), \r\n    totalBlockedOutboundPackets = sum(BlockedOutboundPacketsAtDest), \r\n    totalOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(OutboundPacketsAtDest), 0)), \r\n    totalAllowedOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(AllowedOutboundPacketsAtDest), 0)), \r\n    totalBlockededOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(BlockedOutboundPacketsAtDest), 0)), \r\n    totalInboundPackets = sum(InboundPacketsAtDest), \r\n    totalOutboundPackets = sum(OutboundPacketsAtDest),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by L7Protocol_s, DestPort_d\r\n| extend TotalTraffic = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n| where TotalTraffic > 0\r\n| project\r\n    L7Protocol_s,\r\n    DestPort_d,\r\n    protocolInfo = strcat(L7Protocol_s, '#', toint(DestPort_d)),\r\n    trafficForSorting = TotalTraffic,\r\n    totalInbound = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalOutboundBytesAtDest, 3), ' Ingress : ', format_bytes(totalInboundBytesAtDest, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalInboundPackets, 3)), ValueWithUnit(totalInbound, 3))),\r\n    allowedInbound = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalAllowedOutboundBytes, 3), ' Ingress : ', format_bytes(totalAllowedInboundBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalAllowedOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalAllowedInboundPackets, 3)), ValueWithUnit(totalAllowedInbound, 3))),\r\n    blockedInbound = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalBlockedOutboundBytes, 3), ' Ingress : ', format_bytes(totalBlockedInboundBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalBlockedOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalBlockedInboundPackets, 3)), ValueWithUnit(totalBlockedInbound, 3))),\r\n    totalMalicious = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalInboundMaliciousBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalInboundMaliciousPackets, 3)), ValueWithUnit(totalInboundMalicious, 3))),\r\n    allowedMalicious = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalAllowedOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalAllowedInboundMaliciousBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalAllowedOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalAllowedInboundMaliciousPackets, 3)), ValueWithUnit(totalAllowedInboundMalicious, 3))),\r\n    blockedMalicious = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalBlockededOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalBlockededInboundMaliciousBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalBlockededOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalBlockededInboundMaliciousPackets, 3)), ValueWithUnit(totalBlockededInboundMalicious, 3)));\r\nlet topTalking = \r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend\r\n         portToCheck = DestPort_d\r\n         {portRangeCheckLine}\r\n    // filter ends\r\n    | extend protocolInfo = strcat(L7Protocol_s, '#', toint(DestPort_d))\r\n    | where isnotempty(VM2_s)\r\n    | extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n    | extend\r\n        AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0),\r\n        BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0),\r\n        AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),\r\n        BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),\r\n        AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0),\r\n        BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0),\r\n        AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0),\r\n        BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n    | extend FlowDirection_s = iif(FlowType_s in ('InterVNet', 'IntraVNet'), '', FlowDirection_s)\r\n    | extend\r\n        AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0),\r\n        BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0),\r\n        AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0),\r\n        BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0),\r\n        AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0),\r\n        BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0),\r\n        AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0),\r\n        BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n    | summarize \r\n        AllowedInbound = sum(AllowedInFlows_d),\r\n        BlockedInbound = sum(DeniedInFlows_d), \r\n        AllowedOutbound = sum(AllowedOutFlows_d),\r\n        BlockedOutbound = sum(DeniedOutFlows_d),\r\n        AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc),\r\n        BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\n        AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc),\r\n        BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\n        AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest),\r\n        BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\n        AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest),\r\n        BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n        AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc),\r\n        BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\n        AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc),\r\n        BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\n        AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest),\r\n        BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\n        AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest),\r\n        BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n        by\r\n        SrcIP_s,\r\n        Subscription1_g,\r\n        NIC1_s,\r\n        DestIP_s,\r\n        Subscription2_g,\r\n        NIC2_s,\r\n        FlowDirection_s,\r\n        L4Protocol_s,\r\n        DestPort_d,\r\n        CountryOrRegion,\r\n        VM2_s,\r\n        protocolInfo\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend\r\n        Outbound = AllowedOutbound_inferred + BlockedOutbound,\r\n        Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend\r\n        OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc,\r\n        InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend\r\n        OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest,\r\n        InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend\r\n        OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc,\r\n        InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend\r\n        OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest,\r\n        InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by host = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s), protocolInfo\r\n    | top-nested of protocolInfo by max(1), top-nested 3 of host by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(host, '#')[2], ' (', split(split(host, '#')[1], '/')[1], ')')), ', ') by protocolInfo\r\n    | project protocolInfo, topTalkingPairs;\r\nlet topMalicious = \r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    | extend\r\n         portToCheck = DestPort_d\r\n         {portRangeCheckLine}\r\n    // filter ends\r\n    | extend protocolInfo = strcat(L7Protocol_s, '#', toint(DestPort_d))\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | extend MaliciousIp = iif(isnotempty(VM2_s), SrcIP_s, DestIP_s)\r\n    | summarize totalMalicious = iff('{Units:value}' =~ 'bytes', sum(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', sum(InboundPackets_d + OutboundPackets_d), sum(AllowedOutFlows_d + DeniedOutFlows_d + AllowedInFlows_d + DeniedInFlows_d)))\r\n        by MaliciousIp, Country_s, protocolInfo\r\n    | top-nested of protocolInfo by max(1),\r\n    top-nested 3 of partnerInfo = strcat(MaliciousIp, '#', Country_s) by max(totalMalicious)\r\n    | project protocolInfo, partnerInfo\r\n    | summarize topMaliciousPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0], ' (', split(partnerInfo, '#')[1], ')')), ',') by protocolInfo\r\n    | project protocolInfo, topMaliciousPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.protocolInfo == $right.protocolInfo\r\n| join kind=leftouter topMalicious on $left.protocolInfo == $right.protocolInfo\r\n| sort by trafficForSorting desc\r\n| project\r\n    L7Protocol = L7Protocol_s,\r\n    DestPort = DestPort_d,\r\n    topTalkingPairs,\r\n    topMaliciousPairs,\r\n    totalInbound,\r\n    allowedInbound,\r\n    blockedInbound,\r\n    totalMalicious,\r\n    allowedMalicious,\r\n    blockedMalicious",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContextFromParameter": "timeInterval",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "nsg"
                  },
                  "name": "ProtocolsNSG"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    | extend portToCheck = DestPort\r\n    {portRangeCheckLine}\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow')\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend \r\n    AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), \r\n    AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), \r\n    AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), \r\n    AllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\n    AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\n    AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\n    AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\n    AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\n    AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\n    AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, isMaliciousFlow, L7Protocol\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize \r\n    //\r\n    totalAllowedInbound = sum(AllowedInbound), \r\n    totalBlockedInbound = sum(BlockedInbound), \r\n    totalInboundMalicious = sum(iif(isMaliciousFlow, tolong(Inbound), 0)), \r\n    totalAllowedInboundMalicious = sum(iif(isMaliciousFlow, tolong(AllowedInbound), 0)), \r\n    totalBlockededInboundMalicious = sum(iif(isMaliciousFlow, tolong(BlockedInbound), 0)), \r\n    totalInbound = sum(Inbound),\r\n    TotalFlow = sum(FlowCount),\r\n    //\r\n    totalAllowedInboundBytes = sum(AllowedInboundBytesAtDest), \r\n    totalBlockedInboundBytes = sum(BlockedInboundBytesAtDest), \r\n    totalInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(InboundBytesAtDest), 0)), \r\n    totalAllowedInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(AllowedInboundBytesAtDest), 0)), \r\n    totalBlockededInboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(BlockedInboundBytesAtDest), 0)), \r\n    totalAllowedOutboundBytes = sum(AllowedOutboundBytesAtDest), \r\n    totalBlockedOutboundBytes = sum(BlockedOutboundBytesAtDest), \r\n    totalOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(OutboundBytesAtDest), 0)), \r\n    totalAllowedOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(AllowedOutboundBytesAtDest), 0)), \r\n    totalBlockededOutboundMaliciousBytes = sum(iif(isMaliciousFlow, tolong(BlockedOutboundBytesAtDest), 0)), \r\n    totalInboundBytesAtDest = sum(InboundBytesAtDest), \r\n    totalOutboundBytesAtDest = sum(OutboundBytesAtDest),\r\n    TotalBytes = sum(BytesCount),\r\n    //\r\n    totalAllowedInboundPackets = sum(AllowedInboundPacketsAtDest), \r\n    totalBlockedInboundPackets = sum(BlockedInboundPacketsAtDest), \r\n    totalInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(InboundPacketsAtDest), 0)), \r\n    totalAllowedInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(AllowedInboundPacketsAtDest), 0)), \r\n    totalBlockededInboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(BlockedInboundPacketsAtDest), 0)), \r\n    totalAllowedOutboundPackets = sum(AllowedOutboundPacketsAtDest), \r\n    totalBlockedOutboundPackets = sum(BlockedOutboundPacketsAtDest), \r\n    totalOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(OutboundPacketsAtDest), 0)), \r\n    totalAllowedOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(AllowedOutboundPacketsAtDest), 0)), \r\n    totalBlockededOutboundMaliciousPackets = sum(iif(isMaliciousFlow, tolong(BlockedOutboundPacketsAtDest), 0)), \r\n    totalInboundPackets = sum(InboundPacketsAtDest), \r\n    totalOutboundPackets = sum(OutboundPacketsAtDest),\r\n    TotalPackets = sum(PacketsCount)\r\n    //\r\n    by L7Protocol, DestPort\r\n    | extend TotalTraffic = iff('{Units:value}' =~ 'bytes', TotalBytes, iff('{Units:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n    | where TotalTraffic > 0\r\n    | project L7Protocol, DestPort, protocolInfo = strcat(L7Protocol, '#', toint(DestPort)), trafficForSorting = TotalTraffic,\r\n    totalInbound = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalOutboundBytesAtDest, 3), ' Ingress : ', format_bytes(totalInboundBytesAtDest, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalInboundPackets, 3)), ValueWithUnit(totalInbound, 3))),\r\n    allowedInbound = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalAllowedOutboundBytes, 3), ' Ingress : ', format_bytes(totalAllowedInboundBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalAllowedOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalAllowedInboundPackets, 3)), ValueWithUnit(totalAllowedInbound, 3))),\r\n    blockedInbound = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalBlockedOutboundBytes, 3), ' Ingress : ', format_bytes(totalBlockedInboundBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalBlockedOutboundPackets, 3), ' Ingress : ', ValueWithUnit(totalBlockedInboundPackets, 3)), ValueWithUnit(totalBlockedInbound, 3))),\r\n    totalMalicious = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalInboundMaliciousBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalInboundMaliciousPackets, 3)), ValueWithUnit(totalInboundMalicious, 3))),\r\n    allowedMalicious = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalAllowedOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalAllowedInboundMaliciousBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalAllowedOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalAllowedInboundMaliciousPackets, 3)), ValueWithUnit(totalAllowedInboundMalicious, 3))),\r\n    blockedMalicious = iff('{Units:value}' =~ 'bytes', strcat('Egress : ', format_bytes(totalBlockededOutboundMaliciousBytes, 3), ' Ingress : ', format_bytes(totalBlockededInboundMaliciousBytes, 3)), iff('{Units:value}' =~ 'packets', strcat('Egress : ', ValueWithUnit(totalBlockededOutboundMaliciousPackets, 3), ' Ingress : ', ValueWithUnit(totalBlockededInboundMaliciousPackets, 3)), ValueWithUnit(totalBlockededInboundMalicious, 3)));\r\nlet topTalking = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    | extend portToCheck = DestPort\r\n    {portRangeCheckLine}\r\n    // filter ends\r\n    | extend protocolInfo = strcat(L7Protocol, '#', toint(DestPort))\r\n    | where isnotempty(DestVm)\r\n    | extend CountryOrRegion = iif(FlowType == 'AzurePublic', AzureRegion, Country)\r\n    | extend AllowedInboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(BytesSrcToDest), 0), AllowedInboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), BlockedInboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesDestToSrc), 0), AllowedOutboundBytesAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0), BlockedOutboundBytesAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(BytesSrcToDest), 0)\r\n    | extend FlowDirection = iif(FlowType in ('InterVNet', 'IntraVNet'), '', FlowDirection)\r\n    | extend AllowedInboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus == 'Allowed' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus == 'Denied' and FlowDirection == 'Outbound', tolong(PacketsSrcToDest), 0), AllowedInboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), BlockedInboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsDestToSrc), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus == 'Allowed' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus == 'Denied' and FlowDirection == 'Inbound', tolong(PacketsSrcToDest), 0)\r\n    | summarize \r\n    AllowedInbound = sum(AllowedInFlows), BlockedInbound = sum(DeniedInFlows), \r\n    AllowedOutbound = sum(AllowedOutFlows), BlockedOutbound = sum(DeniedOutFlows),\r\n    AllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), AllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), AllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), AllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n    AllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), AllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), AllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), AllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n    by SrcIp, SrcSubscription, SrcNic, DestIp, DestSubscription, DestNic, FlowDirection, L4Protocol, DestPort, CountryOrRegion, DestVm, protocolInfo\r\n    | extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n    | extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n    | extend FlowCount = max_of(Inbound, Outbound)\r\n    | extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n    | extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n    | extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n    | extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n    | extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n    | extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n    | extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n    | extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n    | extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n    | extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', BytesCount, iff('{Units:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by host = strcat(DestSubscription, '#', DestVm, '#', DestIp), protocolInfo\r\n    | top-nested of protocolInfo by max(1), top-nested 3 of host by max(totalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(host, '#')[2],' (',split(split(host, '#')[1], '/')[1],')')), ', ') by protocolInfo\r\n    | project protocolInfo, topTalkingPairs;\r\nlet topMalicious = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    // filter begins\r\n    | where TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))) and FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n    | extend portToCheck = DestPort\r\n    {portRangeCheckLine}\r\n    // filter ends\r\n    | extend protocolInfo = strcat(L7Protocol, '#', toint(DestPort))\r\n    | where FlowType == 'MaliciousFlow'\r\n    | extend MaliciousIp = iif(isnotempty(DestVm), SrcIp, DestIp)\r\n    | summarize totalMalicious = iff('{Units:value}' =~ 'bytes', sum(BytesDestToSrc + BytesSrcToDest), iff('{Units:value}' =~ 'packets', sum(PacketsDestToSrc + PacketsSrcToDest), sum(AllowedOutFlows + DeniedOutFlows + AllowedInFlows + DeniedInFlows)))\r\n    by MaliciousIp, Country, protocolInfo\r\n    | top-nested of protocolInfo by max(1), top-nested 3 of partnerInfo = strcat(MaliciousIp, '#', Country) by max(totalMalicious)\r\n    | project protocolInfo, partnerInfo\r\n    | summarize topMaliciousPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by protocolInfo\r\n    | project protocolInfo, topMaliciousPairs;\r\ncommon\r\n| join kind=leftouter topTalking on $left.protocolInfo == $right.protocolInfo\r\n| join kind=leftouter topMalicious on $left.protocolInfo == $right.protocolInfo\r\n| sort by trafficForSorting desc\r\n| project L7Protocol, DestPort, topTalkingPairs, topMaliciousPairs, totalInbound, allowedInbound, blockedInbound, totalMalicious, allowedMalicious, blockedMalicious",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "showAnalytics": true,
                    "noDataMessage": "No data to display",
                    "timeContextFromParameter": "timeInterval",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "vnet"
                  },
                  "name": "ProtocolsVNet"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"20ede9a2-f003-444a-bae0-cf78aa242209\",\"mergeType\":\"union\",\"leftTable\":\"ProtocolsNSG\",\"rightTable\":\"ProtocolsVNet\"}],\"projectRename\":[{\"originalName\":\"[ProtocolsNSG].L7Protocol\",\"mergedName\":\"L7Protocol\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].DestPort\",\"mergedName\":\"DestPort\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].topMaliciousPairs\",\"mergedName\":\"topMaliciousPairs\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].totalInbound\",\"mergedName\":\"totalInbound\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].allowedInbound\",\"mergedName\":\"allowedInbound\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].blockedInbound\",\"mergedName\":\"blockedInbound\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].totalMalicious\",\"mergedName\":\"totalMalicious\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].allowedMalicious\",\"mergedName\":\"allowedMalicious\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"[ProtocolsNSG].blockedMalicious\",\"mergedName\":\"blockedMalicious\",\"fromId\":\"20ede9a2-f003-444a-bae0-cf78aa242209\"},{\"originalName\":\"L7Protocol\",\"mergedName\":\"L7Protocol\",\"fromId\":\"unknown\"},{\"originalName\":\"DestPort\",\"mergedName\":\"DestPort\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topMaliciousPairs\",\"mergedName\":\"topMaliciousPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInbound\",\"mergedName\":\"totalInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"allowedInbound\",\"mergedName\":\"allowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"blockedInbound\",\"mergedName\":\"blockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"totalMalicious\",\"mergedName\":\"totalMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"allowedMalicious\",\"mergedName\":\"allowedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"blockedMalicious\",\"mergedName\":\"blockedMalicious\",\"fromId\":\"unknown\"}]}",
                    "size": 0,
                    "queryType": 7
                  },
                  "conditionalVisibility": {
                    "parameterName": "FlowType",
                    "comparison": "isEqualTo",
                    "value": "both"
                  },
                  "showPin": false,
                  "name": "ProtocolsUnion"
                }
              ]
            },
            "name": "ApplicationPortsGrid"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "ApplicationPorts"
        },
        {
          "parameterName": "isFlowAvailable",
          "comparison": "isNotEqualTo",
          "value": "false,false"
        },
        {
          "parameterName": "QueryType",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "Application Ports"
    }
  ],
  "fallbackResourceIds": [
    "azure monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}