{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "value::all"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time Interval",
            "type": 4,
            "description": "Select time interval to get data",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "530edde2-9bce-4a98-9e2c-97f6f22b46df",
            "version": "KqlParameterItem/1.0",
            "name": "FlowType",
            "label": "Flow Type",
            "type": 2,
            "description": "Select a type of Flowlog",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"both\", \"label\":\"NSG and VNet flow logs\", \"selected\":true },\r\n    { \"value\":\"nsg\", \"label\":\"NSG flow logs\" },\r\n    { \"value\":\"vnet\", \"label\":\"VNet flow logs\" }\r\n]"
          },
          {
            "id": "77ad4c7e-43bf-4d7f-a48c-fad9dfc9b708",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics Workspace",
            "type": 5,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true and properties.provisioningState == \"Succeeded\"\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8]), selected = 1",
            "crossComponentResources": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null
          },
          {
            "id": "ed680843-d803-4a08-9608-27b729cd537d",
            "version": "KqlParameterItem/1.0",
            "name": "Units",
            "label": "Display Unit",
            "type": 2,
            "description": "Display units for analysis of your traffic flows.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]"
          },
          {
            "id": "f3c20382-2b69-4d56-911b-0d9fee794a9c",
            "version": "KqlParameterItem/1.0",
            "name": "isNSGTopologySchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (AzureNetworkAnalytics_CL | take 1 | project isPresent = iff(iscolumnexists('DiscoveryRegion_s'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "84e0ab54-be7e-454d-b382-624f4c18d5b9",
            "version": "KqlParameterItem/1.0",
            "name": "isNSGFlowSchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (AzureNetworkAnalytics_CL | take 1 | project isPresent = iff(iscolumnexists('AllowedInFlows_d'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "isVNetTopologySchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (NTATopologyDetails | take 1 | project isPresent = iff(iscolumnexists('DiscoveryRegion'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "397f54e8-ba8e-4388-a81b-9ad843e6e917",
            "version": "KqlParameterItem/1.0",
            "name": "isVNetFlowSchemaPresent",
            "type": 1,
            "description": "Schema Check",
            "isRequired": true,
            "query": "let SchemaTable = view () { print isPresent = 'false' };\r\nunion isfuzzy = true SchemaTable, (NTANetAnalytics | take 1 | project isPresent = iff(iscolumnexists('AllowedInFlows'), 'true', 'false')) \r\n| top 1 by isPresent",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fd9e1ff9-a35c-4a95-845d-d8c6ed101a73",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "isRequired": true,
            "query": "datatable (id:int) [1]\r\n| project value = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), label = strcat(max_of({timeInterval:seconds}/3000, 1), 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 1800000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "MainParameters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "3a316914-57a8-40de-b308-1d5abc01ec76",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueryType",
                  "type": 1,
                  "description": "Select type of Query",
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "nsg",
                        "resultValType": "static",
                        "resultVal": "{isNSGTopologySchemaPresent},NSG"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "FlowType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "vnet",
                        "resultValType": "static",
                        "resultVal": "{isVNetTopologySchemaPresent},VNet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "{isNSGTopologySchemaPresent},NSG,{isVNetTopologySchemaPresent},VNet"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "b1715201-f711-4a92-bf97-4720b2e295c7",
                  "version": "KqlParameterItem/1.0",
                  "name": "SubscriptionQueryToRun",
                  "type": 1,
                  "description": "Subscription dropdown query",
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology' | distinct Subscription_g, SubscriptionName_s | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology' | distinct Subscription, SubscriptionName | project Subscription, SubscriptionName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology' | distinct Subscription, SubscriptionName | project Subscription, SubscriptionName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology' | distinct Subscription_g, SubscriptionName_s | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": " let nsg = AzureNetworkAnalytics_CL  | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'      | distinct Subscription_g, SubscriptionName_s      | project Subscription = Subscription_g, SubscriptionName = SubscriptionName_s;   let vnet = NTATopologyDetails | extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where timecheck | where SubType == 'StatusMessage' and ComponentType == 'Topology'    | distinct Subscription, SubscriptionName    | project Subscription, SubscriptionName;   nsg | union vnet | distinct Subscription, SubscriptionName, selected =1;"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "2868d085-4cca-4e79-93a2-d27006b832c6",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopologyConditionVNet",
                  "type": 1,
                  "description": "Topology condition check",
                  "isRequired": true,
                  "query": "NTATopologyDetails \r\n| extend timecheck = iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n| where timecheck\r\n| where SubType == 'StatusMessage' and ComponentType =='Topology' and Status =='Completed' \r\n| project Subscription, DiscoveryRegion, TimeProcessed \r\n| where isnotempty(Subscription) and isnotempty(DiscoveryRegion) and isnotempty(TimeProcessed)\r\n| summarize arg_max(TimeProcessed, *) by Subscription \r\n| project value = strcat(Subscription, ',', DiscoveryRegion, ',', TimeProcessed), selected = 1;",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "1e310513-a332-4175-85a8-844c28aa5f2a",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopologyConditionNSG",
                  "type": 1,
                  "description": "Topology Condition Check",
                  "query": "AzureNetworkAnalytics_CL \r\n| where SubType_s == 'StatusMessage' and ComponentType_s =='Topology' and Status_s =='Completed' \r\n| project Subscription_g, DiscoveryRegion_s, TimeProcessed_t\r\n| where isnotempty(Subscription_g) and isnotempty(DiscoveryRegion_s) and isnotempty(TimeProcessed_t)\r\n| summarize arg_max(TimeProcessed_t, *) by Subscription_g \r\n| project value = strcat(Subscription_g, ',', DiscoveryRegion_s, ',', TimeProcessed_t), selected = 1;",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "16b899ae-5d18-4bea-8b92-021686bac208",
                  "version": "KqlParameterItem/1.0",
                  "name": "isFlowAvailable",
                  "type": 1,
                  "isRequired": true,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "{isNSGFlowSchemaPresent},false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG",
                        "resultValType": "static",
                        "resultVal": "false,false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "false,{isVNetFlowSchemaPresent}"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,VNet",
                        "resultValType": "static",
                        "resultVal": "false,false"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "{isNSGFlowSchemaPresent},{isVNetFlowSchemaPresent}"
                      }
                    }
                  ]
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "timeInterval",
              "comparison": "isEqualTo",
              "value": "set"
            },
            "name": "QueryConditions"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "a24b1d2a-f7b6-439d-8e05-945ca7444e43",
                  "version": "KqlParameterItem/1.0",
                  "name": "subscriptions",
                  "label": "Discovered Subscriptions",
                  "type": 2,
                  "description": "NSGs in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{SubscriptionQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "20fbdbdd-cd15-43a4-9c33-e7bfc3f86811",
                  "version": "KqlParameterItem/1.0",
                  "name": "RGQueryToRun",
                  "type": 1,
                  "isHiddenWhenLocked": true,
                  "criteriaData": [
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "false,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,false,VNet",
                        "resultValType": "static",
                        "resultVal": "AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1"
                      }
                    },
                    {
                      "criteriaContext": {
                        "leftOperand": "QueryType",
                        "operator": "==",
                        "rightValType": "static",
                        "rightVal": "true,NSG,true,VNet",
                        "resultValType": "static",
                        "resultVal": "let nsg = AzureNetworkAnalytics_CL | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions})) | project rgName = tostring(split(Name_s,'/')[0]), Subscription_g | distinct rgName, Subscription_g | project value = rgName, label = rgName, selected = 1; let vnet = NTATopologyDetails | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}'))) | where SubType  =='Topology' and AzureResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection') | where iff(\"{subscriptions}\" == \"'*'\", true, Subscription in~ ({subscriptions})) | project rgName = tostring(split(Name,'/')[0]), Subscription | distinct rgName, Subscription | project value = rgName, label = rgName, selected = 1; nsg | union vnet"
                      }
                    },
                    {
                      "criteriaContext": {
                        "operator": "Default",
                        "resultValType": "static",
                        "resultVal": "false"
                      }
                    }
                  ],
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "0ebfeaf0-fcaa-4500-8f59-1b34f60d43f8",
                  "version": "KqlParameterItem/1.0",
                  "name": "resourceGroups",
                  "label": "Resource Groups",
                  "type": 2,
                  "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "{RGQueryToRun}",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "selectAllValue": "*",
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "SubscriptionQueryToRun",
              "comparison": "isNotEqualTo",
              "value": "false"
            },
            "name": "ScopeFilters"
          },
          {
            "type": 1,
            "content": {
              "json": "We could not find any data in this workspace for selected time interval. Try after 20-30 mins.\r\n 1. Please try changing the time interval for current workspace selection.\r\n 2. Select a different workspace or try after 20-30 mins.\r\n 3. Please try changing the Flowlog Type for current workspace selection.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SubscriptionQueryToRun",
                "comparison": "isEqualTo",
                "value": "false"
              },
              {
                "parameterName": "QueryType",
                "comparison": "isEqualTo"
              }
            ],
            "name": "InfoBubble"
          },
          {
            "type": 1,
            "content": {
              "json": "We could not find any data in this workspace for selected time interval. Try after 20-30 mins.\r\n 1. Please try changing the time interval for current workspace selection.\r\n 2. Select a different workspace or try after 20-30 mins.\r\n 3. Please try changing the Flowlog Type for current workspace selection.\r\n 4. Please check if the workspace resource exists.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "QueryType",
              "comparison": "isEqualTo"
            },
            "name": "InfoBubble - Copy"
          }
        ],
        "exportParameters": true
      },
      "name": "Filters"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Looks like we have only resources data (Topology) and no flow info for the selected workspace. <a href = >Learn more. </a>\r\nNavigate to Your Environmnet to see your resources data.",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "isFlowAvailable",
        "comparison": "isEqualTo",
        "value": "false,false"
      },
      "name": "TopologyInfoBubble"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "03b2fe8e-378c-4eba-b5fd-afc2057dc5d6",
            "version": "KqlParameterItem/1.0",
            "name": "top10NSGs",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend traffic = iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n| summarize TotalTraffic  = sum(traffic) by NSGList_s\r\n| where TotalTraffic > 0\r\n| top 10 by TotalTraffic\r\n| project value = NSGList_s, label = NSGList_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "ef522952-bbd3-40f0-8059-609d72279097",
            "version": "KqlParameterItem/1.0",
            "name": "top10ACLs",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n| where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend traffic = iff('{Units:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{Units:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n| summarize TotalTraffic  = sum(traffic) by AclGroup\r\n| where TotalTraffic > 0\r\n| top 10 by TotalTraffic\r\n| project value = AclGroup, label = AclGroup, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "f788d551-c65d-4ad2-85ad-740c91e73c39",
            "version": "KqlParameterItem/1.0",
            "name": "top10NSGRules",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend traffic = iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n| summarize TotalTraffic = sum(traffic) by NSGList_s, NSGRule_s, FlowDirection_s\r\n| where TotalTraffic > 0\r\n| top 10 by TotalTraffic\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| project value = completeNsgRule, label = completeNsgRule, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "1648fcdf-d8d8-440d-8dd8-6b9c08eb72a1",
            "version": "KqlParameterItem/1.0",
            "name": "top10ACLRules",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n| where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend traffic = iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n| summarize TotalTraffic = sum(traffic) by AclGroup, AclRule, FlowDirection\r\n| where TotalTraffic > 0\r\n| top 10 by TotalTraffic\r\n| extend completeACLRule = strcat(AclGroup, '/', AclRule)\r\n| project value = completeACLRule, label = completeACLRule, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "-1"
      },
      "name": "top10Query"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## View analytics for NSGs/ACLs and NSG/ACL rules across your environment."
            },
            "name": "text - 4"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{workspace}"
              ],
              "parameters": [
                {
                  "id": "14b90b66-2d6d-4112-ae03-bd168d240be2",
                  "version": "KqlParameterItem/1.0",
                  "name": "NSGTileParameter",
                  "type": 1,
                  "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where NSGList_s in~ ({top10NSGs})\r\n| summarize NSGHits = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by NSGList_s, todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})\r\n| summarize Top10NSGHits = sum(NSGHits)\r\n| project Value = strcat('Top 10 NSG Hits',':',Top10NSGHits,':',strcat('In the ','{timeInterval:label}'))",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "5a4914bb-9740-43a9-87d5-0128c52d5889",
                  "version": "KqlParameterItem/1.0",
                  "name": "NSGRuleTileParameter",
                  "type": 1,
                  "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| where completeNsgRule in~ ({top10NSGRules})\r\n| summarize TotalNSGRuleHits = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by completeNsgRule, todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})\r\n| summarize sum = sum(TotalNSGRuleHits)\r\n| project Value = strcat('Top 10 NSG Rule Hits',':',sum,':',strcat('In the ', '{timeInterval:label}'))",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "6d39d2cd-9a65-4401-a5d4-afd78b74d686",
                  "version": "KqlParameterItem/1.0",
                  "name": "ACLTileParameter",
                  "type": 1,
                  "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n| where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where AclGroup in~ ({top10ACLs})\r\n| summarize ACLHits = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by AclGroup, todatetime(ceiling(FlowStartTime / {binningTime}) * {binningTime})\r\n| summarize Top5ACLHits = sum(ACLHits)\r\n| project Value = strcat('Top 10 ACL Hits',':',Top5ACLHits,':',strcat('In the ','{timeInterval:label}'))",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "5af63543-0ed6-4b5c-b4cc-f512a526c4d7",
                  "version": "KqlParameterItem/1.0",
                  "name": "ACLRuleTileParameter",
                  "type": 1,
                  "query": "NTANetAnalytics\r\n| where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n| where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n| extend completeAclRule = strcat(AclGroup, '/', AclRule)\r\n| where completeAclRule in~ ({top10ACLRules})\r\n| summarize TotalACLRuleHits = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by completeAclRule, todatetime(ceiling(FlowStartTime / {binningTime}) * {binningTime})\r\n| summarize sum = sum(TotalACLRuleHits)\r\n| project Value = strcat('Top 10 ACL Rule Hits',':',sum,':',strcat('In the ', '{timeInterval:label}'))",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "isHiddenWhenLocked": true,
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "tabSelected",
              "comparison": "isEqualTo",
              "value": "-1"
            },
            "name": "Top10hitsQuery"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let NSGHits = print Traffic = iff(isnotempty(\"{NSGTileParameter}\"),\"{NSGTileParameter}\",strcat(\"Top 10 NSG Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}')));\r\nlet NSGRuleHits = print Traffic = iff(isnotempty(\"{NSGRuleTileParameter}\"),\"{NSGRuleTileParameter}\",strcat(\"Top 10 NSG Rule Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}')));\r\nunion (\r\n        NSGHits\r\n        | extend nsgHits = split(trim(\"'\",Traffic),':')\r\n        | project label = tostring(nsgHits[0]), totalTraffic = tolong(nsgHits[1]), timeIntervalText = tostring(nsgHits[2]), units = '{Units}', item = 1\r\n    ),\r\n    (\r\n        NSGRuleHits\r\n        | extend nsgRuleHits = split(trim(\"'\",Traffic),':')\r\n        | project label = tostring(nsgRuleHits[0]), totalTraffic = tolong(nsgRuleHits[1]), timeIntervalText = tostring(nsgRuleHits[2]), units = '{Units}', item = 2\r\n    )\r\n",
              "size": 3,
              "timeContext": {
                "durationMs": 86400000
              },
              "exportFieldName": "label",
              "exportParameterName": "hitstype",
              "exportDefaultValue": "Top 10 NSG Hits",
              "queryType": 0,
              "resourceType": "microsoft.resources/resourcegroups",
              "crossComponentResources": [
                "{workspace}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "label",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "totalTraffic",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "units"
                },
                "secondaryContent": {
                  "columnMatch": "timeIntervalText"
                },
                "showBorder": true,
                "sortCriteriaField": "item",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibility": {
              "parameterName": "FlowType",
              "comparison": "isEqualTo",
              "value": "nsg"
            },
            "name": "NSGTileQuery"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let ACLHits = print Traffic = iff(isnotempty(\"{ACLTileParameter}\"),\"{ACLTileParameter}\",strcat(\"Top 10 ACL Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}')));\r\nlet ACLRuleHits = print Traffic = iff(isnotempty(\"{ACLRuleTileParameter}\"),\"{ACLRuleTileParameter}\",strcat(\"Top 10 ACL Rule Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}')));\r\nunion (\r\n        ACLHits\r\n        | extend aclHits = split(trim(\"'\",Traffic),':')\r\n        | project label = tostring(aclHits[0]), totalTraffic = tolong(aclHits[1]), timeIntervalText = tostring(aclHits[2]), units = '{Units}', item = 1\r\n    ),\r\n    (\r\n        ACLRuleHits\r\n        | extend aclRuleHits = split(trim(\"'\",Traffic),':')\r\n        | project label = tostring(aclRuleHits[0]), totalTraffic = tolong(aclRuleHits[1]), timeIntervalText = tostring(aclRuleHits[2]), units = '{Units}', item = 2\r\n    )\r\n",
              "size": 3,
              "timeContext": {
                "durationMs": 86400000
              },
              "exportFieldName": "label",
              "exportParameterName": "hitstype",
              "exportDefaultValue": "Top 10 ACL Hits",
              "queryType": 0,
              "resourceType": "microsoft.resources/resourcegroups",
              "crossComponentResources": [
                "{workspace}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "label",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "totalTraffic",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "units"
                },
                "secondaryContent": {
                  "columnMatch": "timeIntervalText"
                },
                "showBorder": true,
                "sortCriteriaField": "item",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibility": {
              "parameterName": "FlowType",
              "comparison": "isEqualTo",
              "value": "vnet"
            },
            "name": "ACLTileQuery"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let UnifiedHits = print Traffic = iff((isnotempty(\"{NSGTileParameter}\") and isnotempty(\"{ACLTileParameter}\")),(strcat(\"{NSGTileParameter}\",\":\",\"{ACLTileParameter}\")),(iff((isnotempty(\"{NSGTileParameter}\") and isempty(\"{ACLTileParameter}\")),(strcat(\"{NSGTileParameter}\",\":\",\"Top 10 NSG/ACL Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}'))),(iff((isempty(\"{NSGTileParameter}\") and isnotempty(\"{ACLTileParameter}\")),(strcat(\"Top 10 NSG/ACL Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}'),\"{ACLTileParameter}\")),(strcat(\"Top 10 NSG/ACL Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}'),\":\",\"Top 10 NSG/ACL Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}'))))))));\r\nlet UnifiedRuleHits = print Traffic = iff((isnotempty(\"{NSGRuleTileParameter}\") and isnotempty(\"{ACLRuleTileParameter}\")),(strcat(\"{NSGRuleTileParameter}\",\":\",\"{ACLRuleTileParameter}\")),(iff((isnotempty(\"{NSGRuleTileParameter}\") and isempty(\"{ACLRuleTileParameter}\")),(strcat(\"{NSGRuleTileParameter}\",\":\",\"Top 10 Unified Rule Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}'))),(iff((isempty(\"{NSGRuleTileParameter}\") and isnotempty(\"{ACLRuleTileParameter}\")),(strcat(\"Top 10 Unified Rule Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}'),\"{ACLRuleTileParameter}\")),(strcat(\"Top 10 Unified Rule Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}'),\":\",\"Top 10 Unified Rule Hits\",':',\"0\",':',strcat('In the ','{timeInterval:label}'))))))));\r\nunion (\r\nUnifiedHits\r\n        | extend unifiedHits = split(trim(\"'\",Traffic),':')\r\n        | project label = tostring('Top 10 NSG/ACL Hits'), totalTraffic = tolong(unifiedHits[1]) + tolong(unifiedHits[4]), timeIntervalText = tostring(unifiedHits[5]), units = '{Units}', item = 1\r\n),\r\n(\r\nUnifiedRuleHits\r\n        | extend unifiedRuleHits = split(trim(\"'\",Traffic),':')\r\n        | project label = tostring('Top 10 Unified Rule Hits'), totalTraffic = tolong(unifiedRuleHits[1]) + tolong(unifiedRuleHits[4]), timeIntervalText = tostring(unifiedRuleHits[5]), units = '{Units}', item = 2\r\n)",
              "size": 3,
              "timeContext": {
                "durationMs": 86400000
              },
              "exportFieldName": "label",
              "exportParameterName": "hitstype",
              "exportDefaultValue": "Top 10 NSG/ACL Hits",
              "queryType": 0,
              "resourceType": "microsoft.resources/resourcegroups",
              "crossComponentResources": [
                "{workspace}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "label",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "totalTraffic",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "units"
                },
                "secondaryContent": {
                  "columnMatch": "timeIntervalText"
                },
                "showBorder": true,
                "sortCriteriaField": "item",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "conditionalVisibility": {
              "parameterName": "FlowType",
              "comparison": "isEqualTo",
              "value": "both"
            },
            "name": "UnifiedHitsQuery"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "QueryType",
        "comparison": "isNotEqualTo"
      },
      "name": "Tiles"
    },
    {
      "type": 1,
      "content": {
        "json": "---\r\n### {hitstype}"
      },
      "conditionalVisibility": {
        "parameterName": "QueryType",
        "comparison": "isNotEqualTo"
      },
      "name": "Text"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "    let table = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where NSGList_s in~ ({top10NSGs})\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'D')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'A', tolong(AllowedInFlows_d), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'D', tolong(DeniedInFlows_d), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'A', tolong(AllowedOutFlows_d), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'D', tolong(DeniedOutFlows_d), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(InboundPackets_d), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(OutboundPackets_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n    | extend allowedTraffic = iff('{Units:value}' =~ 'bytes', tolong(AllowedInboundBytes + AllowedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(AllowedInboundPackets + AllowedOutboundPackets), tolong(AllowedInbound + AllowedOutbound)))\r\n    | extend maliciousTraffic = iff('{Units:value}' =~ 'bytes', tolong(MaliciousAllowedInboundBytes + MaliciousBlockedInboundBytes + MaliciousAllowedOutboundBytes + MaliciousBlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(MaliciousAllowedInboundPackets + MaliciousBlockedInboundPackets + MaliciousAllowedOutboundPackets + MaliciousBlockedOutboundPackets), tolong(MaliciousAllowedInboundFlows + MaliciousBlockedInboundFlows + MaliciousAllowedOutboundFlows + MaliciousBlockedOutboundFlows)))\r\n    | extend blockedTraffic = iff('{Units:value}' =~ 'bytes', tolong(BlockedInboundBytes + BlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(BlockedInboundPackets + BlockedOutboundPackets), tolong(BlockedInbound + BlockedOutbound)))\r\n    | summarize TotalTraffic  = sum(traffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n     union (\r\n        table\r\n        | project label = 'Total Traffic', value = TotalTraffic, item = 1\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Allowed Traffic', value = AllowedTraffic, item = 2\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Malicious Traffic', value = MaliciousTraffic, item = 3\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Blocked Traffic', value = BlockedTraffic, item = 4\r\n    )",
                    "size": 3,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "noDataMessage": "No data to display",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "exportFieldName": "label",
                    "exportParameterName": "TrafficFlowType",
                    "exportDefaultValue": "TotalTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    },
                    "sortBy": [],
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "label",
                        "formatter": 1
                      },
                      "subtitleContent": {
                        "columnMatch": "value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "showBorder": false,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    },
                    "graphSettings": {
                      "type": 0
                    },
                    "mapSettings": {
                      "locInfo": "LatLong",
                      "sizeSettings": "TotalTraffic",
                      "sizeAggregation": "Sum",
                      "legendMetric": "TotalTraffic",
                      "legendAggregation": "Sum",
                      "itemColorSettings": {
                        "type": "heatmap",
                        "colorAggregation": "Sum",
                        "nodeColorField": "TotalTraffic",
                        "heatmapPalette": "greenRed"
                      }
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 NSG Hits"
                  },
                  "name": "MetricsNSGQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "    let table = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where AclGroup in~ ({top10ACLs})\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow'), isBlocked  = (FlowStatus == 'Denied')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Allowed', tolong(AllowedInFlows), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Denied', tolong(DeniedInFlows), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Allowed', tolong(AllowedOutFlows), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Denied', tolong(DeniedOutFlows), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(BytesSrcToDest), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(BytesSrcToDest), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(BytesDestToSrc), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(BytesDestToSrc), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(PacketsSrcToDest), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(PacketsSrcToDest), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(PacketsDestToSrc), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(PacketsDestToSrc), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n    | extend allowedTraffic = iff('{Units:value}' =~ 'bytes', tolong(AllowedInboundBytes + AllowedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(AllowedInboundPackets + AllowedOutboundPackets), tolong(AllowedInbound + AllowedOutbound)))\r\n    | extend maliciousTraffic = iff('{Units:value}' =~ 'bytes', tolong(MaliciousAllowedInboundBytes + MaliciousBlockedInboundBytes + MaliciousAllowedOutboundBytes + MaliciousBlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(MaliciousAllowedInboundPackets + MaliciousBlockedInboundPackets + MaliciousAllowedOutboundPackets + MaliciousBlockedOutboundPackets), tolong(MaliciousAllowedInboundFlows + MaliciousBlockedInboundFlows + MaliciousAllowedOutboundFlows + MaliciousBlockedOutboundFlows)))\r\n    | extend blockedTraffic = iff('{Units:value}' =~ 'bytes', tolong(BlockedInboundBytes + BlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(BlockedInboundPackets + BlockedOutboundPackets), tolong(BlockedInbound + BlockedOutbound)))\r\n    | summarize TotalTraffic  = sum(traffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n     union (\r\n        table\r\n        | project label = 'Total Traffic', value = TotalTraffic, item = 1\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Allowed Traffic', value = AllowedTraffic, item = 2\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Malicious Traffic', value = MaliciousTraffic, item = 3\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Blocked Traffic', value = BlockedTraffic, item = 4\r\n    )",
                    "size": 3,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "noDataMessage": "No data to display",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "exportFieldName": "label",
                    "exportParameterName": "TrafficFlowType",
                    "exportDefaultValue": "TotalTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    },
                    "sortBy": [],
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "label",
                        "formatter": 1
                      },
                      "subtitleContent": {
                        "columnMatch": "value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "showBorder": false,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    },
                    "graphSettings": {
                      "type": 0
                    },
                    "mapSettings": {
                      "locInfo": "LatLong",
                      "sizeSettings": "TotalTraffic",
                      "sizeAggregation": "Sum",
                      "legendMetric": "TotalTraffic",
                      "legendAggregation": "Sum",
                      "itemColorSettings": {
                        "type": "heatmap",
                        "colorAggregation": "Sum",
                        "nodeColorField": "TotalTraffic",
                        "heatmapPalette": "greenRed"
                      }
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 ACL Hits"
                  },
                  "name": "MetricsAclHitsQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "    let table1 = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where NSGList_s in~ ({top10NSGs})\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'D')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'A', tolong(AllowedInFlows_d), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'D', tolong(DeniedInFlows_d), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'A', tolong(AllowedOutFlows_d), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'D', tolong(DeniedOutFlows_d), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(InboundPackets_d), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(OutboundPackets_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n    | extend allowedTraffic = iff('{Units:value}' =~ 'bytes', tolong(AllowedInboundBytes + AllowedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(AllowedInboundPackets + AllowedOutboundPackets), tolong(AllowedInbound + AllowedOutbound)))\r\n    | extend maliciousTraffic = iff('{Units:value}' =~ 'bytes', tolong(MaliciousAllowedInboundBytes + MaliciousBlockedInboundBytes + MaliciousAllowedOutboundBytes + MaliciousBlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(MaliciousAllowedInboundPackets + MaliciousBlockedInboundPackets + MaliciousAllowedOutboundPackets + MaliciousBlockedOutboundPackets), tolong(MaliciousAllowedInboundFlows + MaliciousBlockedInboundFlows + MaliciousAllowedOutboundFlows + MaliciousBlockedOutboundFlows)))\r\n    | extend blockedTraffic = iff('{Units:value}' =~ 'bytes', tolong(BlockedInboundBytes + BlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(BlockedInboundPackets + BlockedOutboundPackets), tolong(BlockedInbound + BlockedOutbound)))\r\n    | summarize TotalTraffic  = sum(traffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\nlet result1 = union (\r\n        table1\r\n        | project label = 'Total Traffic', value = TotalTraffic\r\n    ),\r\n    (\r\n        table1\r\n        | project label = 'Allowed Traffic', value = AllowedTraffic\r\n    ),\r\n    (\r\n        table1\r\n        | project label = 'Malicious Traffic', value = MaliciousTraffic\r\n    ),\r\n    (\r\n        table1\r\n        | project label = 'Blocked Traffic', value = BlockedTraffic\r\n    );\r\n    let table2 = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where AclGroup in~ ({top10ACLs})\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow'), isBlocked  = (FlowStatus == 'Denied')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Allowed', tolong(AllowedInFlows), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Denied', tolong(DeniedInFlows), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Allowed', tolong(AllowedOutFlows), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Denied', tolong(DeniedOutFlows), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(BytesSrcToDest), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(BytesSrcToDest), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(BytesDestToSrc), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(BytesDestToSrc), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(PacketsSrcToDest), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(PacketsSrcToDest), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(PacketsDestToSrc), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(PacketsDestToSrc), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n    | extend allowedTraffic = iff('{Units:value}' =~ 'bytes', tolong(AllowedInboundBytes + AllowedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(AllowedInboundPackets + AllowedOutboundPackets), tolong(AllowedInbound + AllowedOutbound)))\r\n    | extend maliciousTraffic = iff('{Units:value}' =~ 'bytes', tolong(MaliciousAllowedInboundBytes + MaliciousBlockedInboundBytes + MaliciousAllowedOutboundBytes + MaliciousBlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(MaliciousAllowedInboundPackets + MaliciousBlockedInboundPackets + MaliciousAllowedOutboundPackets + MaliciousBlockedOutboundPackets), tolong(MaliciousAllowedInboundFlows + MaliciousBlockedInboundFlows + MaliciousAllowedOutboundFlows + MaliciousBlockedOutboundFlows)))\r\n    | extend blockedTraffic = iff('{Units:value}' =~ 'bytes', tolong(BlockedInboundBytes + BlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(BlockedInboundPackets + BlockedOutboundPackets), tolong(BlockedInbound + BlockedOutbound)))\r\n    | summarize TotalTraffic  = sum(traffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n    let result2 = union (\r\n        table2\r\n        | project label = 'Total Traffic', value = TotalTraffic\r\n    ),\r\n    (\r\n        table2\r\n        | project label = 'Allowed Traffic', value = AllowedTraffic\r\n    ),\r\n    (\r\n        table2\r\n        | project label = 'Malicious Traffic', value = MaliciousTraffic\r\n    ),\r\n    (\r\n        table2\r\n        | project label = 'Blocked Traffic', value = BlockedTraffic\r\n    );\r\n    result1\r\n    | union result2\r\n    | summarize value = sum(value) by label\r\n    | extend item = iif(label == \"Total Traffic\",1,iif(label == \"Allowed Traffic\",2,iif(label == \"Malicious Traffic\",3,4)))\r\n",
                    "size": 3,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "noDataMessage": "No data to display",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "exportFieldName": "label",
                    "exportParameterName": "TrafficFlowType",
                    "exportDefaultValue": "TotalTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "aggregatedTotalFlow",
                          "formatter": 19,
                          "formatOptions": {
                            "palette": "orange",
                            "timelineSettings": {
                              "timelineStartColumn": "Time"
                            }
                          }
                        }
                      ]
                    },
                    "sortBy": [],
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "label",
                        "formatter": 1
                      },
                      "subtitleContent": {
                        "columnMatch": "value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "showBorder": false,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    },
                    "graphSettings": {
                      "type": 0
                    },
                    "mapSettings": {
                      "locInfo": "LatLong",
                      "sizeSettings": "TotalTraffic",
                      "sizeAggregation": "Sum",
                      "legendMetric": "TotalTraffic",
                      "legendAggregation": "Sum",
                      "itemColorSettings": {
                        "type": "heatmap",
                        "colorAggregation": "Sum",
                        "nodeColorField": "TotalTraffic",
                        "heatmapPalette": "greenRed"
                      }
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 NSG/ACL Hits"
                  },
                  "name": "MetricsUnifiedQuery"
                }
              ],
              "exportParameters": true
            },
            "name": "MetricsHitsGroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "    let table = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | where completeNsgRule in~ ({top10NSGRules})\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'D')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'A', tolong(AllowedInFlows_d), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'D', tolong(DeniedInFlows_d), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'A', tolong(AllowedOutFlows_d), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'D', tolong(DeniedOutFlows_d), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(InboundPackets_d), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(OutboundPackets_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n    | extend allowedTraffic = iff('{Units:value}' =~ 'bytes', tolong(AllowedInboundBytes + AllowedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(AllowedInboundPackets + AllowedOutboundPackets), tolong(AllowedInbound + AllowedOutbound)))\r\n    | extend maliciousTraffic = iff('{Units:value}' =~ 'bytes', tolong(MaliciousAllowedInboundBytes + MaliciousBlockedInboundBytes + MaliciousAllowedOutboundBytes + MaliciousBlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(MaliciousAllowedInboundPackets + MaliciousBlockedInboundPackets + MaliciousAllowedOutboundPackets + MaliciousBlockedOutboundPackets), tolong(MaliciousAllowedInboundFlows + MaliciousBlockedInboundFlows + MaliciousAllowedOutboundFlows + MaliciousBlockedOutboundFlows)))\r\n    | extend blockedTraffic = iff('{Units:value}' =~ 'bytes', tolong(BlockedInboundBytes + BlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(BlockedInboundPackets + BlockedOutboundPackets), tolong(BlockedInbound + BlockedOutbound)))\r\n    | summarize TotalTraffic  = sum(traffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n     union (\r\n        table\r\n        | project label = 'Total Traffic', value = TotalTraffic, item = 1\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Allowed Traffic', value = AllowedTraffic, item = 2\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Malicious Traffic', value = MaliciousTraffic, item = 3\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Blocked Traffic', value = BlockedTraffic, item = 4\r\n    )",
                    "size": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "exportFieldName": "label",
                    "exportParameterName": "RuleTrafficFlowType",
                    "exportDefaultValue": "TotalTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "label",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      },
                      "showBorder": false,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 NSG Rule Hits"
                  },
                  "name": "MetricsTop5NSGRuleQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "    let table = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeAclRule = strcat(AclGroup, '/', AclRule)\r\n    | where completeAclRule in~ ({top10ACLRules})\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow'), isBlocked  = (FlowStatus == 'Denied')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Allowed', tolong(AllowedInFlows), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Denied', tolong(DeniedInFlows), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Allowed', tolong(AllowedOutFlows), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Denied', tolong(DeniedOutFlows), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(BytesSrcToDest), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(BytesSrcToDest), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(BytesDestToSrc), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(BytesDestToSrc), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(PacketsSrcToDest), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(PacketsSrcToDest), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(PacketsDestToSrc), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(PacketsDestToSrc), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n    | extend allowedTraffic = iff('{Units:value}' =~ 'bytes', tolong(AllowedInboundBytes + AllowedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(AllowedInboundPackets + AllowedOutboundPackets), tolong(AllowedInbound + AllowedOutbound)))\r\n    | extend maliciousTraffic = iff('{Units:value}' =~ 'bytes', tolong(MaliciousAllowedInboundBytes + MaliciousBlockedInboundBytes + MaliciousAllowedOutboundBytes + MaliciousBlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(MaliciousAllowedInboundPackets + MaliciousBlockedInboundPackets + MaliciousAllowedOutboundPackets + MaliciousBlockedOutboundPackets), tolong(MaliciousAllowedInboundFlows + MaliciousBlockedInboundFlows + MaliciousAllowedOutboundFlows + MaliciousBlockedOutboundFlows)))\r\n    | extend blockedTraffic = iff('{Units:value}' =~ 'bytes', tolong(BlockedInboundBytes + BlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(BlockedInboundPackets + BlockedOutboundPackets), tolong(BlockedInbound + BlockedOutbound)))\r\n    | summarize TotalTraffic  = sum(traffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n     union (\r\n        table\r\n        | project label = 'Total Traffic', value = TotalTraffic, item = 1\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Allowed Traffic', value = AllowedTraffic, item = 2\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Malicious Traffic', value = MaliciousTraffic, item = 3\r\n    ),\r\n    (\r\n        table\r\n        | project label = 'Blocked Traffic', value = BlockedTraffic, item = 4\r\n    )",
                    "size": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "exportFieldName": "label",
                    "exportParameterName": "RuleTrafficFlowType",
                    "exportDefaultValue": "TotalTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "label",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      },
                      "showBorder": false,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 ACL Rule Hits"
                  },
                  "name": "MetricsACLRuleHitsQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "    let table1 = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | where completeNsgRule in~ ({top10NSGRules})\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'D')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'A', tolong(AllowedInFlows_d), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'D', tolong(DeniedInFlows_d), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'A', tolong(AllowedOutFlows_d), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'D', tolong(DeniedOutFlows_d), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(InboundPackets_d), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(OutboundPackets_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n    | extend allowedTraffic = iff('{Units:value}' =~ 'bytes', tolong(AllowedInboundBytes + AllowedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(AllowedInboundPackets + AllowedOutboundPackets), tolong(AllowedInbound + AllowedOutbound)))\r\n    | extend maliciousTraffic = iff('{Units:value}' =~ 'bytes', tolong(MaliciousAllowedInboundBytes + MaliciousBlockedInboundBytes + MaliciousAllowedOutboundBytes + MaliciousBlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(MaliciousAllowedInboundPackets + MaliciousBlockedInboundPackets + MaliciousAllowedOutboundPackets + MaliciousBlockedOutboundPackets), tolong(MaliciousAllowedInboundFlows + MaliciousBlockedInboundFlows + MaliciousAllowedOutboundFlows + MaliciousBlockedOutboundFlows)))\r\n    | extend blockedTraffic = iff('{Units:value}' =~ 'bytes', tolong(BlockedInboundBytes + BlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(BlockedInboundPackets + BlockedOutboundPackets), tolong(BlockedInbound + BlockedOutbound)))\r\n    | summarize TotalTraffic  = sum(traffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\nlet result1 = union (\r\n        table1\r\n        | project label = 'Total Traffic', value = TotalTraffic\r\n    ),\r\n    (\r\n        table1\r\n        | project label = 'Allowed Traffic', value = AllowedTraffic\r\n    ),\r\n    (\r\n        table1\r\n        | project label = 'Malicious Traffic', value = MaliciousTraffic\r\n    ),\r\n    (\r\n        table1\r\n        | project label = 'Blocked Traffic', value = BlockedTraffic\r\n    );\r\n    let table2 = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeAclRule = strcat(AclGroup, '/', AclRule)\r\n    | where completeAclRule in~ ({top10ACLRules})\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow'), isBlocked  = (FlowStatus == 'Denied')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Allowed', tolong(AllowedInFlows), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Denied', tolong(DeniedInFlows), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Allowed', tolong(AllowedOutFlows), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Denied', tolong(DeniedOutFlows), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(BytesSrcToDest), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(BytesSrcToDest), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(BytesDestToSrc), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(BytesDestToSrc), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(PacketsSrcToDest), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(PacketsSrcToDest), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(PacketsDestToSrc), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(PacketsDestToSrc), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n    | extend allowedTraffic = iff('{Units:value}' =~ 'bytes', tolong(AllowedInboundBytes + AllowedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(AllowedInboundPackets + AllowedOutboundPackets), tolong(AllowedInbound + AllowedOutbound)))\r\n    | extend maliciousTraffic = iff('{Units:value}' =~ 'bytes', tolong(MaliciousAllowedInboundBytes + MaliciousBlockedInboundBytes + MaliciousAllowedOutboundBytes + MaliciousBlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(MaliciousAllowedInboundPackets + MaliciousBlockedInboundPackets + MaliciousAllowedOutboundPackets + MaliciousBlockedOutboundPackets), tolong(MaliciousAllowedInboundFlows + MaliciousBlockedInboundFlows + MaliciousAllowedOutboundFlows + MaliciousBlockedOutboundFlows)))\r\n    | extend blockedTraffic = iff('{Units:value}' =~ 'bytes', tolong(BlockedInboundBytes + BlockedOutboundBytes), iff('{Units:value}' =~ 'packets', tolong(BlockedInboundPackets + BlockedOutboundPackets), tolong(BlockedInbound + BlockedOutbound)))\r\n    | summarize TotalTraffic  = sum(traffic), AllowedTraffic = sum(allowedTraffic), MaliciousTraffic = sum(maliciousTraffic), BlockedTraffic = sum(blockedTraffic);\r\n    let result2 = union (\r\n        table2\r\n        | project label = 'Total Traffic', value = TotalTraffic\r\n    ),\r\n    (\r\n        table2\r\n        | project label = 'Allowed Traffic', value = AllowedTraffic\r\n    ),\r\n    (\r\n        table2\r\n        | project label = 'Malicious Traffic', value = MaliciousTraffic\r\n    ),\r\n    (\r\n        table2\r\n        | project label = 'Blocked Traffic', value = BlockedTraffic\r\n    );\r\n    result1\r\n    | union result2\r\n    | summarize value = sum(value) by label\r\n    | extend item = iif(label == \"Total Traffic\",1,iif(label == \"Allowed Traffic\",2,iif(label == \"Malicious Traffic\",3,4)))\r\n",
                    "size": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "exportFieldName": "label",
                    "exportParameterName": "RuleTrafficFlowType",
                    "exportDefaultValue": "TotalTraffic",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "label",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "value",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      },
                      "showBorder": false,
                      "sortCriteriaField": "item",
                      "sortOrderField": 1,
                      "size": "auto"
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 Unified Rule Hits"
                  },
                  "name": "MetricsUnifiedRuleHitsQuery"
                }
              ]
            },
            "name": "MetricsRuleHitsGroup"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "QueryType",
        "comparison": "isNotEqualTo"
      },
      "name": "MetricsGroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "5889b7d3-cad5-484b-ad4f-242c9e384160",
                        "version": "KqlParameterItem/1.0",
                        "name": "ProjectColumnsCondition",
                        "type": 1,
                        "isHiddenWhenLocked": true,
                        "criteriaData": [
                          {
                            "criteriaContext": {
                              "leftOperand": "TrafficFlowType",
                              "operator": "==",
                              "rightValType": "static",
                              "rightVal": "Allowed Traffic",
                              "resultValType": "static",
                              "resultVal": "| project Group, topRules, topTalkingPairs, topIpInfo, totalHits, totalInboundFormatted, totalInboundAllowedFormatted,  totalInboundAllowedMaliciousFormatted, totalOutboundFormatted, totalOutboundAllowedFormatted,totalOutboundAllowedMaliciousFormatted"
                            }
                          },
                          {
                            "criteriaContext": {
                              "leftOperand": "TrafficFlowType",
                              "operator": "==",
                              "rightValType": "static",
                              "rightVal": "Blocked Traffic",
                              "resultValType": "static",
                              "resultVal": "| project Group, topRules, topTalkingPairs, topIpInfo, totalHits, totalInboundFormatted, totalInboundBlockedFormatted,  totalInboundBlockedMaliciousFormatted, totalOutboundFormatted, totalOutboundBlockedFormatted, totalOutboundBlockedMaliciousFormatted"
                            }
                          },
                          {
                            "criteriaContext": {
                              "leftOperand": "TrafficFlowType",
                              "operator": "==",
                              "rightValType": "static",
                              "rightVal": "Malicious Traffic",
                              "resultValType": "static",
                              "resultVal": "| project Group, topRules, topTalkingPairs, topIpInfo, totalHits, totalInboundFormatted,  totalInboundAllowedMaliciousFormatted,  totalInboundBlockedMaliciousFormatted, totalOutboundFormatted,  totalOutboundAllowedMaliciousFormatted, totalOutboundBlockedMaliciousFormatted"
                            }
                          },
                          {
                            "criteriaContext": {
                              "operator": "Default",
                              "resultValType": "static",
                              "resultVal": "| project Group, topRules, topTalkingPairs, topIpInfo, totalHits, totalInboundFormatted, totalInboundAllowedFormatted, totalInboundBlockedFormatted, totalInboundBlockedMaliciousFormatted, totalOutboundFormatted, totalOutboundAllowedFormatted, totalOutboundBlockedFormatted"
                            }
                          }
                        ],
                        "timeContext": {
                          "durationMs": 86400000
                        }
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "ProjectCondition"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\nAzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where NSGList_s in~ ({top10NSGs})\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'D')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'A', tolong(AllowedInFlows_d), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'D', tolong(DeniedInFlows_d), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'A', tolong(AllowedOutFlows_d), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'D', tolong(DeniedOutFlows_d), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(InboundBytes_d), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(InboundBytes_d), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(OutboundBytes_d), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(OutboundBytes_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(InboundPackets_d), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(InboundPackets_d), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(OutboundPackets_d), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(OutboundPackets_d), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n    | summarize \r\n    totalAllowedInboundFlows = sum(AllowedInbound), \r\n    totalBlockedInboundFlows = sum(BlockedInbound), \r\n    totalAllowedOutboundFlows = sum(AllowedOutbound), \r\n    totalBlockedOutboundFlows = sum(BlockedOutbound), \r\n    totalMaliciousAllowedInboundFlows = sum(MaliciousAllowedInboundFlows), \r\n    totalMaliciousBlockedInboundFlows = sum(MaliciousBlockedInboundFlows), \r\n    totalMaliciousAllowedOutboundFlows = sum(MaliciousAllowedOutboundFlows), \r\n    totalMaliciousBlockedOutboundFlows = sum(MaliciousBlockedOutboundFlows),\r\n    //\r\n    totalAllowedInboundBytes = sum(AllowedInboundBytes), \r\n    totalBlockedInboundBytes = sum(BlockedInboundBytes), \r\n    totalAllowedOutboundBytes = sum(AllowedOutboundBytes), \r\n    totalBlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    totalMaliciousAllowedInboundBytes = sum(MaliciousAllowedInboundBytes), \r\n    totalMaliciousBlockedInboundBytes= sum(MaliciousBlockedInboundBytes), \r\n    totalMaliciousAllowedOutboundBytes = sum(MaliciousAllowedOutboundBytes), \r\n    totalMaliciousBlockedOutboundBytes = sum(MaliciousBlockedOutboundBytes),\r\n    //\r\n    totalAllowedInboundPackets = sum(AllowedInboundPackets), \r\n    totalBlockedInboundPackets = sum(BlockedInboundPackets), \r\n    totalAllowedOutboundPackets = sum(AllowedOutboundPackets), \r\n    totalBlockedOutboundPackets = sum(BlockedOutboundPackets), \r\n    totalMaliciousAllowedInboundPackets = sum(MaliciousAllowedInboundPackets), \r\n    totalMaliciousBlockedInboundPackets = sum(MaliciousBlockedInboundPackets), \r\n    totalMaliciousAllowedOutboundPackets = sum(MaliciousAllowedOutboundPackets), \r\n    totalMaliciousBlockedOutboundPackets = sum(MaliciousBlockedOutboundPackets),\r\n    TotalTraffic  = sum(traffic)\r\n    by NSGList_s\r\n    | where TotalTraffic > 0\r\n    | project NSGList_s, trafficForSorting = TotalTraffic,\r\n    nsgName = split(NSGList_s, '/')[2],\r\n    totalHits = iff('{Units:value}' =~ 'bytes', format_bytes(TotalTraffic, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalTraffic, 3), ValueWithUnit(TotalTraffic, 3))),\r\n    totalInboundAllowed = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets, totalAllowedInboundFlows)),\r\n    totalInboundBlocked = iff('{Units:value}' =~ 'bytes', totalBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedInboundPackets, totalBlockedInboundFlows)),\r\n    totalInbound = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes+totalBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets+totalBlockedInboundPackets, totalAllowedInboundFlows+totalBlockedInboundFlows)),\r\n    totalInboundAllowedBenign = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes-totalMaliciousAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets-totalMaliciousAllowedInboundPackets, totalAllowedInboundFlows-totalMaliciousAllowedInboundFlows)),\r\n    totalInboundAllowedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousAllowedInboundPackets, totalMaliciousAllowedInboundFlows)),\r\n    totalInboundBlockedBenign = iff('{Units:value}' =~ 'bytes', totalBlockedInboundBytes-totalMaliciousBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedInboundPackets-totalMaliciousBlockedInboundPackets, totalBlockedInboundFlows-totalMaliciousBlockedInboundFlows)),\r\n    totalInboundBlockedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousBlockedInboundPackets, totalMaliciousBlockedInboundFlows)),\r\n    totalOutboundAllowed = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets, totalAllowedOutboundFlows)),\r\n    totalOutboundBlocked = iff('{Units:value}' =~ 'bytes', totalBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedOutboundPackets, totalBlockedOutboundFlows)),\r\n    totalOutbound = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes+totalBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets+totalBlockedOutboundPackets, totalAllowedOutboundFlows+totalBlockedOutboundFlows)),\r\n    totalOutboundAllowedBenign = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes-totalMaliciousAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets-totalMaliciousAllowedOutboundPackets, totalAllowedOutboundFlows-totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundAllowedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousAllowedOutboundPackets, totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundBlockedBenign = iff('{Units:value}' =~ 'bytes', totalBlockedOutboundBytes-totalMaliciousBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedOutboundPackets-totalMaliciousBlockedOutboundPackets, totalBlockedOutboundFlows-totalMaliciousBlockedOutboundFlows)),\r\n    totalOutboundBlockedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousBlockedOutboundPackets, totalMaliciousBlockedOutboundFlows))\r\n    | extend\r\n    totalInboundAllowedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowed, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowed, 3), ValueWithUnit(totalInboundAllowed, 3))),\r\n    totalInboundBlockedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlocked, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlocked, 3), ValueWithUnit(totalInboundBlocked, 3))),\r\n    totalInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInbound, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInbound, 3), ValueWithUnit(totalInbound, 3))),\r\n    totalInboundAllowedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedBenign, 3), ValueWithUnit(totalInboundAllowedBenign, 3))),\r\n    totalInboundAllowedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedMalicious, 3), ValueWithUnit(totalInboundAllowedMalicious, 3))),\r\n    totalInboundBlockedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlockedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedBenign, 3), ValueWithUnit(totalInboundBlockedBenign, 3))),\r\n    totalInboundBlockedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlockedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedMalicious, 3), ValueWithUnit(totalInboundBlockedMalicious, 3))),\r\n    totalOutboundAllowedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowed, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowed, 3), ValueWithUnit(totalOutboundAllowed, 3))),\r\n    totalOutboundBlockedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlocked, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlocked, 3), ValueWithUnit(totalOutboundBlocked, 3))),\r\n    totalOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutbound, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutbound, 3), ValueWithUnit(totalOutbound, 3))),\r\n    totalOutboundAllowedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedBenign, 3), ValueWithUnit(totalOutboundAllowedBenign, 3))),\r\n    totalOutboundAllowedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedMalicious, 3), ValueWithUnit(totalOutboundAllowedMalicious, 3))),\r\n    totalOutboundBlockedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlockedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedBenign, 3), ValueWithUnit(totalOutboundBlockedBenign, 3))),\r\n    totalOutboundBlockedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlockedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedMalicious, 3), ValueWithUnit(totalOutboundBlockedMalicious, 3)));\r\n// -----\r\nlet chatTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    // filter ends\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | extend flowCount = tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d), byteCount = tolong(InboundBytes_d + OutboundBytes_d), packetCount = tolong(InboundPackets_d + OutboundPackets_d)\r\n    | extend SourceHost = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', VM1_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | extend DestinationHost = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, NSGList_s;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nlet topTalkingTable =\r\n    chatTableWithRownumber\r\n    | join kind = leftouter (chatTableWithRownumber)\r\n    on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.NSGList_s == $right.NSGList_s\r\n    | where isnull(rownHash1) or (rownHash < rownHash1)\r\n    | extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n    | extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n    | extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n    | project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{Units:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{Units:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), NSGList_s\r\n    | top-nested of NSGList_s by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by NSGList_s\r\n    | project NSGList_s, topTalkingPairs;\r\n// -----\r\nlet TopNSGRules = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    // filter ends\r\n    | summarize totalHits = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by NSGRule_s, NSGList_s\r\n    | top-nested of NSGList_s by max(1), top-nested 3 of NSGRule_s by max(totalHits)\r\n    | extend nsgRuleId = strcat(NSGList_s, '/', NSGRule_s);\r\nlet PriorityTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology' and ResourceType == 'NetworkSecurityGroupRule'\r\n    | project nsgRuleId = strcat(Subscription_g, '/', Name_s), Priority_d\r\n    | distinct nsgRuleId, Priority_d;\r\nlet topRulesTable = \r\n    TopNSGRules\r\n    | join kind=leftouter PriorityTable on ($left.nsgRuleId == $right.nsgRuleId)\r\n    | summarize topRules = strcat_array(make_list(strcat(NSGRule_s, '(', tolong(Priority_d), ')')), ', ') by NSGList_s\r\n    | project NSGList_s, topRules;\r\n// -----\r\nlet topMaliciousTable =AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    // filter ends\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(VM2_s), DestIP_s, SrcIP_s)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), strcat(Subscription1_g, '/', VM1_s))\r\n    | summarize totalMalicious = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, NSGList_s\r\n    | top-nested of NSGList_s by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n    | summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by NSGList_s\r\n    | project NSGList_s, topIpInfo;\r\n// -----\r\ncommon\r\n| join kind=leftouter topTalkingTable on $left.NSGList_s == $right.NSGList_s\r\n| join kind=leftouter topRulesTable on $left.NSGList_s == $right.NSGList_s\r\n| join kind=leftouter topMaliciousTable on $left.NSGList_s == $right.NSGList_s\r\n| sort by trafficForSorting desc\r\n| extend NSGSplit = split(NSGList_s,'/')\r\n| extend Group = iif(array_length(NSGSplit) == 3,strcat('/subscriptions/',NSGSplit[0],'/resourceGroups/',tostring(NSGSplit[1]),'/providers/Microsoft.Network/networkSecurityGroups/',tostring(NSGSplit[2])),NSGList_s) \r\n//| project  Group, topRules, topTalkingPairs, topIpInfo, totalHits, totalInbound, totalInboundAllowed, totalInboundBlocked, totalInboundAllowedBenign, totalInboundAllowedMalicious, totalInboundBlockedBenign, totalInboundBlockedMalicious, totalOutbound, totalOutboundAllowed, totalOutboundBlocked, totalOutboundAllowedBenign, totalOutboundAllowedMalicious, totalOutboundBlockedBenign, totalOutboundBlockedMalicious, totalInboundAllowedFormatted, totalInboundBlockedFormatted, totalInboundFormatted, totalInboundAllowedBenignFormatted, totalInboundAllowedMaliciousFormatted, totalInboundBlockedBenignFormatted, totalInboundBlockedMaliciousFormatted, totalOutboundAllowedFormatted, totalOutboundBlockedFormatted, totalOutboundFormatted, totalOutboundAllowedBenignFormatted, totalOutboundAllowedMaliciousFormatted, totalOutboundBlockedBenignFormatted, totalOutboundBlockedMaliciousFormatted\r\n{ProjectColumnsCondition}",
                    "size": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "TotalHits",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "TotalAllowedInbound",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalAllowedInbound\"]/[\"TotalBlockedInbound\"]",
                              "columnSettings": [
                                {
                                  "columnName": "TotalAllowedInbound",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "TotalBlockedInbound",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalBlockedInbound",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalAllowedOutbound",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalAllowedOutbound\"]/[\"TotalBlockedOutbound\"]",
                              "columnSettings": [
                                {
                                  "columnName": "TotalAllowedOutbound",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "TotalBlockedOutbound",
                                  "color": "green"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalBlockedOutbound",
                          "formatter": 5,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalAllowedOutbound\"]/[\"TotalBlockedOutbound\"]",
                              "columnSettings": [
                                {
                                  "columnName": "TotalAllowedOutbound",
                                  "color": "green"
                                },
                                {
                                  "columnName": "TotalBlockedOutbound",
                                  "color": "redBright"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "NSGList_s",
                          "formatter": 7,
                          "formatOptions": {
                            "linkTarget": "Resource"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Group",
                          "label": "NSG"
                        },
                        {
                          "columnId": "topRules",
                          "label": "Top Rule"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 NSG Hits"
                  },
                  "name": "NSGGridQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where AclGroup in~ ({top10ACLs})\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow'), isBlocked  = (FlowStatus == 'Denied')\r\n    | extend \r\n    AllowedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Allowed', tolong(AllowedInFlows), 0)), \r\n    BlockedInbound = tolong(iif(FlowDirection == 'Inbound' and FlowStatus == 'Denied', tolong(DeniedInFlows), 0)), \r\n    AllowedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Allowed', tolong(AllowedOutFlows), 0)), \r\n    BlockedOutbound = tolong(iif(FlowDirection == 'Outbound' and FlowStatus == 'Denied', tolong(DeniedOutFlows), 0))\r\n    | extend \r\n    MaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\n    MaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\n    MaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\n    MaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n    | extend \r\n    AllowedInboundBytes = iif(not(isBlocked), tolong(BytesDestToSrc), 0), \r\n    BlockedInboundBytes = iif(isBlocked, tolong(BytesDestToSrc), 0), \r\n    AllowedOutboundBytes = iif(not(isBlocked), tolong(BytesSrcToDest), 0), \r\n    BlockedOutboundBytes = iif(isBlocked, tolong(BytesSrcToDest), 0)\r\n    | extend \r\n    MaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\n    MaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\n    MaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\n    MaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n    | extend \r\n    AllowedInboundPackets = iif(not(isBlocked), tolong(PacketsDestToSrc), 0), \r\n    BlockedInboundPackets = iif(isBlocked, tolong(PacketsDestToSrc), 0), \r\n    AllowedOutboundPackets = iif(not(isBlocked), tolong(PacketsSrcToDest), 0), \r\n    BlockedOutboundPackets = iif(isBlocked, tolong(PacketsSrcToDest), 0)\r\n    | extend \r\n    MaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\n    MaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\n    MaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\n    MaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n    | extend traffic = iff('{Units:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{Units:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))\r\n    | summarize \r\n    totalAllowedInboundFlows = sum(AllowedInbound), \r\n    totalBlockedInboundFlows = sum(BlockedInbound), \r\n    totalAllowedOutboundFlows = sum(AllowedOutbound), \r\n    totalBlockedOutboundFlows = sum(BlockedOutbound), \r\n    totalMaliciousAllowedInboundFlows = sum(MaliciousAllowedInboundFlows), \r\n    totalMaliciousBlockedInboundFlows = sum(MaliciousBlockedInboundFlows), \r\n    totalMaliciousAllowedOutboundFlows = sum(MaliciousAllowedOutboundFlows), \r\n    totalMaliciousBlockedOutboundFlows = sum(MaliciousBlockedOutboundFlows),\r\n    //\r\n    totalAllowedInboundBytes = sum(AllowedInboundBytes), \r\n    totalBlockedInboundBytes = sum(BlockedInboundBytes), \r\n    totalAllowedOutboundBytes = sum(AllowedOutboundBytes), \r\n    totalBlockedOutboundBytes = sum(BlockedOutboundBytes), \r\n    totalMaliciousAllowedInboundBytes = sum(MaliciousAllowedInboundBytes), \r\n    totalMaliciousBlockedInboundBytes= sum(MaliciousBlockedInboundBytes), \r\n    totalMaliciousAllowedOutboundBytes = sum(MaliciousAllowedOutboundBytes), \r\n    totalMaliciousBlockedOutboundBytes = sum(MaliciousBlockedOutboundBytes),\r\n    //\r\n    totalAllowedInboundPackets = sum(AllowedInboundPackets), \r\n    totalBlockedInboundPackets = sum(BlockedInboundPackets), \r\n    totalAllowedOutboundPackets = sum(AllowedOutboundPackets), \r\n    totalBlockedOutboundPackets = sum(BlockedOutboundPackets), \r\n    totalMaliciousAllowedInboundPackets = sum(MaliciousAllowedInboundPackets), \r\n    totalMaliciousBlockedInboundPackets = sum(MaliciousBlockedInboundPackets), \r\n    totalMaliciousAllowedOutboundPackets = sum(MaliciousAllowedOutboundPackets), \r\n    totalMaliciousBlockedOutboundPackets = sum(MaliciousBlockedOutboundPackets),\r\n    TotalTraffic  = sum(traffic)\r\n    by AclGroup\r\n    | where TotalTraffic > 0\r\n    | project AclGroup, trafficForSorting = TotalTraffic,\r\n    aclName = iff(isempty(tostring(split(AclGroup,\"/\")[2])),AclGroup,tostring(split(AclGroup,\"/\")[8])),\r\n    totalHits = iff('{Units:value}' =~ 'bytes', format_bytes(TotalTraffic, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(TotalTraffic, 3), ValueWithUnit(TotalTraffic, 3))),\r\n    totalInboundAllowed = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets, totalAllowedInboundFlows)),\r\n    totalInboundBlocked = iff('{Units:value}' =~ 'bytes', totalBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedInboundPackets, totalBlockedInboundFlows)),\r\n    totalInbound = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes+totalBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets+totalBlockedInboundPackets, totalAllowedInboundFlows+totalBlockedInboundFlows)),\r\n    totalInboundAllowedBenign = iff('{Units:value}' =~ 'bytes', totalAllowedInboundBytes-totalMaliciousAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedInboundPackets-totalMaliciousAllowedInboundPackets, totalAllowedInboundFlows-totalMaliciousAllowedInboundFlows)),\r\n    totalInboundAllowedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousAllowedInboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousAllowedInboundPackets, totalMaliciousAllowedInboundFlows)),\r\n    totalInboundBlockedBenign = iff('{Units:value}' =~ 'bytes', totalBlockedInboundBytes-totalMaliciousBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedInboundPackets-totalMaliciousBlockedInboundPackets, totalBlockedInboundFlows-totalMaliciousBlockedInboundFlows)),\r\n    totalInboundBlockedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousBlockedInboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousBlockedInboundPackets, totalMaliciousBlockedInboundFlows)),\r\n    totalOutboundAllowed = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets, totalAllowedOutboundFlows)),\r\n    totalOutboundBlocked = iff('{Units:value}' =~ 'bytes', totalBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedOutboundPackets, totalBlockedOutboundFlows)),\r\n    totalOutbound = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes+totalBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets+totalBlockedOutboundPackets, totalAllowedOutboundFlows+totalBlockedOutboundFlows)),\r\n    totalOutboundAllowedBenign = iff('{Units:value}' =~ 'bytes', totalAllowedOutboundBytes-totalMaliciousAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalAllowedOutboundPackets-totalMaliciousAllowedOutboundPackets, totalAllowedOutboundFlows-totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundAllowedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousAllowedOutboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousAllowedOutboundPackets, totalMaliciousAllowedOutboundFlows)),\r\n    totalOutboundBlockedBenign = iff('{Units:value}' =~ 'bytes', totalBlockedOutboundBytes-totalMaliciousBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalBlockedOutboundPackets-totalMaliciousBlockedOutboundPackets, totalBlockedOutboundFlows-totalMaliciousBlockedOutboundFlows)),\r\n    totalOutboundBlockedMalicious = iff('{Units:value}' =~ 'bytes', totalMaliciousBlockedOutboundBytes, iff('{Units:value}' =~ 'packets', totalMaliciousBlockedOutboundPackets, totalMaliciousBlockedOutboundFlows))\r\n    | extend\r\n    totalInboundAllowedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowed, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowed, 3), ValueWithUnit(totalInboundAllowed, 3))),\r\n    totalInboundBlockedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlocked, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlocked, 3), ValueWithUnit(totalInboundBlocked, 3))),\r\n    totalInboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInbound, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInbound, 3), ValueWithUnit(totalInbound, 3))),\r\n    totalInboundAllowedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedBenign, 3), ValueWithUnit(totalInboundAllowedBenign, 3))),\r\n    totalInboundAllowedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundAllowedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedMalicious, 3), ValueWithUnit(totalInboundAllowedMalicious, 3))),\r\n    totalInboundBlockedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlockedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedBenign, 3), ValueWithUnit(totalInboundBlockedBenign, 3))),\r\n    totalInboundBlockedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalInboundBlockedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedMalicious, 3), ValueWithUnit(totalInboundBlockedMalicious, 3))),\r\n    totalOutboundAllowedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowed, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowed, 3), ValueWithUnit(totalOutboundAllowed, 3))),\r\n    totalOutboundBlockedFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlocked, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlocked, 3), ValueWithUnit(totalOutboundBlocked, 3))),\r\n    totalOutboundFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutbound, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutbound, 3), ValueWithUnit(totalOutbound, 3))),\r\n    totalOutboundAllowedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedBenign, 3), ValueWithUnit(totalOutboundAllowedBenign, 3))),\r\n    totalOutboundAllowedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundAllowedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedMalicious, 3), ValueWithUnit(totalOutboundAllowedMalicious, 3))),\r\n    totalOutboundBlockedBenignFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlockedBenign, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedBenign, 3), ValueWithUnit(totalOutboundBlockedBenign, 3))),\r\n    totalOutboundBlockedMaliciousFormatted = iff('{Units:value}' =~ 'bytes', format_bytes(totalOutboundBlockedMalicious, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedMalicious, 3), ValueWithUnit(totalOutboundBlockedMalicious, 3)));\r\n// -----\r\nlet chatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | extend flowCount = tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows), byteCount = tolong(BytesDestToSrc + BytesSrcToDest), packetCount = tolong(PacketsDestToSrc + PacketsSrcToDest)\r\n    | extend SourceHost = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', SrcVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | extend DestinationHost = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, AclGroup;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nlet topTalkingTable =\r\n    chatTableWithRownumber\r\n    | join kind = leftouter (chatTableWithRownumber)\r\n    on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.AclGroup == $right.AclGroup\r\n    | where isnull(rownHash1) or (rownHash < rownHash1)\r\n    | extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n    | extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n    | extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n    | project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{Units:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{Units:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), AclGroup\r\n    | top-nested of AclGroup by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by AclGroup\r\n    | project AclGroup, topTalkingPairs;\r\n// -----\r\nlet TopRules = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    // filter ends\r\n    | summarize totalHits = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{Units:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by AclRule, AclGroup\r\n    | top-nested of AclGroup by max(1), top-nested 3 of AclRule by max(totalHits)\r\n    | extend RuleId = strcat(AclGroup, '/', AclRule);\r\nlet priorityTable = \r\n    NTATopologyDetails\r\n    | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | where AzureResourceType == 'NetworkSecurityGroupRule'\r\n    | extend rule = split(Name, '/')\r\n    | project RuleId = strcat('/subscriptions/',Subscription, '/resourcegroups/', tostring(rule[0]),'/providers/microsoft.network/networksecuritygroups/',tostring(rule[1]),'/',tostring(rule[2])), Priority\r\n    | distinct RuleId, Priority;\r\nlet topRulesTable = \r\n    TopRules\r\n    | join kind=leftouter priorityTable on ($left.RuleId == $right.RuleId)\r\n    | summarize topRules = strcat_array(make_list(strcat(AclRule, '(', tolong(Priority), ')')), ', ') by AclGroup\r\n    | project AclGroup, topRules;\r\n// -----\r\nlet topMaliciousTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    // filter ends\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(DestVm), DestIp, SrcIp)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), strcat(SrcSubscription, '/', SrcVm))\r\n    | summarize totalMalicious = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesDestToSrc + BytesSrcToDest), iff('{Units:value}' =~ 'packets', tolong(PacketsDestToSrc + PacketsSrcToDest), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, AclGroup\r\n    | top-nested of AclGroup by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n    | summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by AclGroup\r\n    | project AclGroup, topIpInfo;\r\n// -----\r\ncommon\r\n| join kind=leftouter topTalkingTable on $left.AclGroup == $right.AclGroup\r\n| join kind=leftouter topRulesTable on $left.AclGroup == $right.AclGroup\r\n| join kind=leftouter topMaliciousTable on $left.AclGroup == $right.AclGroup\r\n| sort by trafficForSorting desc\r\n| extend Group = AclGroup\r\n{ProjectColumnsCondition}",
                    "size": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "TotalHits",
                          "formatter": 21,
                          "formatOptions": {
                            "palette": "blue"
                          }
                        },
                        {
                          "columnMatch": "TotalAllowedInbound",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalAllowedInbound\"]/[\"TotalBlockedInbound\"]",
                              "columnSettings": [
                                {
                                  "columnName": "TotalAllowedInbound",
                                  "color": "blue"
                                },
                                {
                                  "columnName": "TotalBlockedInbound",
                                  "color": "gray"
                                }
                              ],
                              "noRowsScaling": true
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalBlockedInbound",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalAllowedOutbound",
                          "formatter": 5,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "fdtrd5ed56d6",
                              "columnSettings": [
                                {
                                  "columnName": "TotalBlockedOutbound",
                                  "color": "green"
                                },
                                {
                                  "columnName": "TotalAllowedOutbound",
                                  "color": "redBright"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalBlockedOutbound",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"TotalAllowedOutbound\"]/[\"TotalBlockedOutbound\"]",
                              "columnSettings": [
                                {
                                  "columnName": "TotalAllowedOutbound",
                                  "color": "brown"
                                },
                                {
                                  "columnName": "TotalBlockedOutbound",
                                  "color": "blue"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "AclGroup",
                          "formatter": 7,
                          "formatOptions": {
                            "linkTarget": "Resource"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Group",
                          "label": "ACL Group"
                        },
                        {
                          "columnId": "topRules",
                          "label": "Top Rule"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 ACL Hits"
                  },
                  "name": "AclGridQuery"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\",\"mergeType\":\"union\",\"leftTable\":\"NSGGridQuery\",\"rightTable\":\"AclGridQuery\"}],\"projectRename\":[{\"originalName\":\"[NSGGridQuery].Group\",\"mergedName\":\"NSG\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].topRules\",\"mergedName\":\"Top Rule\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].topTalkingPair\",\"mergedName\":\"Top Talking Pair\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].TotalHits\",\"mergedName\":\"Total Hits\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].totalInboundBlocked\",\"mergedName\":\"Total Inbound Blocked\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].MaliciousInboundBlocked\",\"mergedName\":\"Malicious Inbound Blocked\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].FlowCount\",\"mergedName\":\"Flow Count\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].TotalAllowedInbound\",\"mergedName\":\"Total Inbound(Allowed/Blocked)\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].TotalBlockedInbound\",\"mergedName\":\"Total Blocked Inbound\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].TotalAllowedOutbound\",\"mergedName\":\"Total Outbound(Allowed/Blocked)\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[NSGGridQuery].TotalBlockedOutbound\",\"mergedName\":\"Total Blocked Outbound\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[AclGridQuery].Group\",\"mergedName\":\"ACL Group\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[AclGridQuery].TotalAllowedOutbound\",\"mergedName\":\"TotalAllowedOutbound\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"[AclGridQuery].TotalBlockedOutbound\",\"mergedName\":\"TotalBlockedOutbound\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fd2b\"},{\"originalName\":\"Group\",\"mergedName\":\"Group\",\"fromId\":\"unknown\"},{\"originalName\":\"topRules\",\"mergedName\":\"topRules\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPair\",\"mergedName\":\"topTalkingPair\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalHits\",\"mergedName\":\"TotalHits\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInboundBlocked\",\"mergedName\":\"totalInboundBlocked\",\"fromId\":\"unknown\"},{\"originalName\":\"MaliciousInboundBlocked\",\"mergedName\":\"MaliciousInboundBlocked\",\"fromId\":\"unknown\"},{\"originalName\":\"FlowCount\",\"mergedName\":\"FlowCount\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalAllowedInbound\",\"mergedName\":\"TotalAllowedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalBlockedInbound\",\"mergedName\":\"TotalBlockedInbound\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalAllowedOutbound\",\"mergedName\":\"TotalAllowedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"TotalBlockedOutbound\",\"mergedName\":\"TotalBlockedOutbound\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topIpInfo\",\"mergedName\":\"topIpInfo\",\"fromId\":\"unknown\"},{\"originalName\":\"totalHits\",\"mergedName\":\"totalHits\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInboundFormatted\",\"mergedName\":\"totalInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInboundAllowedFormatted\",\"mergedName\":\"totalInboundAllowedFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInboundBlockedFormatted\",\"mergedName\":\"totalInboundBlockedFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"totalInboundBlockedMaliciousFormatted\",\"mergedName\":\"totalInboundBlockedMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"totalOutboundFormatted\",\"mergedName\":\"totalOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"totalOutboundAllowedFormatted\",\"mergedName\":\"totalOutboundAllowedFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"totalOutboundBlockedFormatted\",\"mergedName\":\"totalOutboundBlockedFormatted\",\"fromId\":\"unknown\"}]}",
                    "size": 0,
                    "queryType": 7,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "Group",
                          "label": "NSG/ACL"
                        },
                        {
                          "columnId": "topRules",
                          "label": "Top Rule"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 NSG/ACL Hits"
                  },
                  "showPin": false,
                  "name": "HitsUnion"
                }
              ]
            },
            "name": "HitsGridGroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where NSGList_s in~ ({top10NSGs})\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    // filter ends\r\n    | extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'D')\r\n    | extend Flows = tolong(AllowedInFlows_d + DeniedInFlows_d + AllowedOutFlows_d + DeniedOutFlows_d)\r\n    | extend MaliciousAllowedFlows = iif(isMaliciousFlow and not(isBlocked), Flows, 0), MaliciousBlockedFlows = iif(isMaliciousFlow and isBlocked, Flows, 0)\r\n    | extend Bytes = tolong(InboundBytes_d + OutboundBytes_d)\r\n    | extend MaliciousAllowedBytes = iif(isMaliciousFlow and not(isBlocked), Bytes, 0), MaliciousBlockedBytes = iif(isMaliciousFlow and isBlocked, Bytes, 0)\r\n    | extend Packets = tolong(InboundPackets_d + OutboundPackets_d)\r\n    | extend MaliciousAllowedPackets = iif(isMaliciousFlow and not(isBlocked), Packets, 0), MaliciousBlockedPackets = iif(isMaliciousFlow and isBlocked, Packets, 0)\r\n    | summarize \r\n    totalMaliciousAllowedFlows = sum(MaliciousAllowedFlows), totalMaliciousBlockedFlows = sum(MaliciousBlockedFlows), TotalFlows = sum(Flows),\r\n    totalMaliciousAllowedBytes = sum(MaliciousAllowedBytes), totalMaliciousBlockedBytes = sum(MaliciousBlockedBytes), TotalBytes = sum(Bytes),\r\n    totalMaliciousAllowedPackets = sum(MaliciousAllowedPackets), totalMaliciousBlockedPackets = sum(MaliciousBlockedPackets), TotalPackets = sum(Packets),\r\n    TotalTrafficSorting = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))),\r\n    TotalTrafficDisplay = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d))))\r\n    by completeNsgRule, FlowDirection_s, FlowStatus_s\r\n    | where TotalTrafficSorting > 0\r\n    | project \r\n    trafficForSorting = TotalTrafficSorting,\r\n    ruleName = split(completeNsgRule, '/')[3],\r\n    access = iff(FlowStatus_s == 'A', 'Allow', iff(FlowStatus_s == 'D', 'Deny', '')),\r\n    ruleType = iff(FlowDirection_s == 'I', 'Inbound', iff(FlowDirection_s == 'O', 'Outbound', '')),\r\n    Group = split(completeNsgRule, '/')[2],\r\n    hits = iff('{Units:value}' =~ 'bytes', format_bytes(TotalTrafficDisplay, 3), ValueWithUnit(TotalTrafficDisplay, 3)),\r\n    MaliciousAllowedDenied = strcat(iff('{Units:value}' =~ 'bytes', format_bytes(totalMaliciousAllowedBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalMaliciousAllowedPackets, 3), ValueWithUnit(totalMaliciousAllowedFlows, 3))), '/', iff('{Units:value}' =~ 'bytes', format_bytes(totalMaliciousBlockedBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalMaliciousBlockedPackets, 3), ValueWithUnit(totalMaliciousBlockedFlows, 3)))),\r\n    completeNsgRule;\r\nlet topMaliciousTable = \r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowType_s == 'MaliciousFlow'\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where NSGList_s in~ ({top10NSGs})\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    // filter ends\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(VM2_s), DestIP_s, SrcIP_s)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), strcat(Subscription1_g, '/', VM1_s))\r\n    | summarize totalMalicious = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, completeNsgRule\r\n    | top-nested of completeNsgRule by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n    | summarize topMaliciousIpInfo = strcat_array(make_list(ipInfo), ', ') by completeNsgRule\r\n    | project completeNsgRule, topMaliciousIpInfo;\r\nlet topTalkingNSGTable = \r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where NSGList_s in~ ({top10NSGs})\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    // filter ends\r\n    | where not(IsFlowCapturedAtUDRHop_b)\r\n    | extend NIC = iif(FlowDirection_s == 'O', NIC1_s, NIC2_s)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by NIC, completeNsgRule\r\n    | top-nested of completeNsgRule by max(1), top-nested 3 of nsgInfo = tostring(split(NIC, '/')[1]) by max(totalTraffic)\r\n    | summarize topNsgInfo = strcat_array(make_list(nsgInfo), ', ') by completeNsgRule\r\n    | project completeNsgRule, topNsgInfo;\r\nlet topSubnetTable = \r\n    AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where NSGList_s in~ ({top10NSGs})\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    // filter ends\r\n    | where not(IsFlowCapturedAtUDRHop_b)\r\n    | extend Subnet = iif(FlowDirection_s == 'O', Subnet1_s, Subnet2_s)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{Units:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by Subnet, completeNsgRule\r\n    | top-nested of completeNsgRule by max(1), top-nested 3 of subnetInfo = tostring(split(Subnet, '/')[2]) by max(totalTraffic)\r\n    | summarize topSubnetInfo = strcat_array(make_list(subnetInfo), ', ') by completeNsgRule\r\n    | project completeNsgRule, topSubnetInfo;\r\nlet chatTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    | where FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (Subscription1_g in~ ({subscriptions}) or Subscription2_g in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where NSGList_s in~ ({top10NSGs})\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    // filter ends\r\n    | extend flowCount = tolong(AllowedInFlows_d + DeniedInFlows_d + AllowedOutFlows_d + DeniedOutFlows_d), byteCount = tolong(InboundBytes_d + OutboundBytes_d), packetCount = tolong(InboundPackets_d + OutboundPackets_d)\r\n    | extend SourceHost = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', VM1_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | extend DestinationHost = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, completeNsgRule;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nlet topTalkingPairTable = \r\n    chatTableWithRownumber\r\n    | join kind = leftouter (chatTableWithRownumber) on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.completeNsgRule == $right.completeNsgRule\r\n    | where isnull(rownHash1) or (rownHash < rownHash1)\r\n    | extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n    | extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n    | extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n    | project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{Units:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{Units:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), completeNsgRule\r\n    | top-nested of completeNsgRule by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by completeNsgRule\r\n    | project completeNsgRule, topTalkingPairs;\r\nlet priorityTable = \r\n    AzureNetworkAnalytics_CL\r\n    | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | where SubType_s == 'Topology' and ResourceType == 'NetworkSecurityGroupRule'\r\n    | project nsgRuleId = strcat(Subscription_g, '/', Name_s), Priority_d\r\n    | distinct nsgRuleId, Priority_d;\r\ncommon\r\n| join kind=leftouter topTalkingNSGTable on $left.completeNsgRule == $right.completeNsgRule\r\n| join kind=leftouter topSubnetTable on $left.completeNsgRule == $right.completeNsgRule\r\n| join kind=leftouter topTalkingPairTable on $left.completeNsgRule == $right.completeNsgRule\r\n| join kind=leftouter topMaliciousTable on $left.completeNsgRule == $right.completeNsgRule\r\n| join kind=leftouter priorityTable on $left.completeNsgRule == $right.nsgRuleId\r\n| sort by trafficForSorting desc\r\n| project ruleName, accessPriority = strcat(access, '/', tolong(Priority_d)), ruleType, Group, topTalkingPairs, topSubnetInfo, topNsgInfo, hits, topMaliciousIpInfo, MaliciousAllowedDenied",
                    "size": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "ruleName",
                          "label": "Rule Name"
                        },
                        {
                          "columnId": "accessPriority",
                          "label": "Access Priority"
                        },
                        {
                          "columnId": "ruleType",
                          "label": "Rule Type"
                        },
                        {
                          "columnId": "Group",
                          "label": "NSG"
                        },
                        {
                          "columnId": "topTalkingPairs",
                          "label": "Top Talking Pair"
                        },
                        {
                          "columnId": "topSubnetInfo",
                          "label": "Top Subnet Info"
                        },
                        {
                          "columnId": "topNsgInfo",
                          "label": "Top NSG Info"
                        },
                        {
                          "columnId": "hits",
                          "label": "Hits"
                        },
                        {
                          "columnId": "topMaliciousIpInfo",
                          "label": "Malicious(Allowed/Denied)"
                        },
                        {
                          "columnId": "MaliciousAllowedDenied",
                          "label": "Malicious(Allowed/Denied)"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 NSG Rule Hits"
                  },
                  "name": "NSGRuleGrid"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' t'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' q'))))))\r\n};\r\nlet common = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where AclGroup in~ ({top10ACLs})\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | extend isMaliciousFlow = (FlowType == 'MaliciousFlow'), isBlocked  = (FlowStatus == 'Denied')\r\n    | extend Flows = tolong(AllowedInFlows + DeniedInFlows + AllowedOutFlows + DeniedOutFlows)\r\n    | extend MaliciousAllowedFlows = iif(isMaliciousFlow and not(isBlocked), Flows, 0), MaliciousBlockedFlows = iif(isMaliciousFlow and isBlocked, Flows, 0)\r\n    | extend Bytes = tolong(BytesSrcToDest + BytesDestToSrc)\r\n    | extend MaliciousAllowedBytes = iif(isMaliciousFlow and not(isBlocked), Bytes, 0), MaliciousBlockedBytes = iif(isMaliciousFlow and isBlocked, Bytes, 0)\r\n    | extend Packets = tolong(PacketsSrcToDest + PacketsDestToSrc)\r\n    | extend MaliciousAllowedPackets = iif(isMaliciousFlow and not(isBlocked), Packets, 0), MaliciousBlockedPackets = iif(isMaliciousFlow and isBlocked, Packets, 0)\r\n    | summarize \r\n    totalMaliciousAllowedFlows = sum(MaliciousAllowedFlows), totalMaliciousBlockedFlows = sum(MaliciousBlockedFlows), TotalFlows = sum(Flows),\r\n    totalMaliciousAllowedBytes = sum(MaliciousAllowedBytes), totalMaliciousBlockedBytes = sum(MaliciousBlockedBytes), TotalBytes = sum(Bytes),\r\n    totalMaliciousAllowedPackets = sum(MaliciousAllowedPackets), totalMaliciousBlockedPackets = sum(MaliciousBlockedPackets), TotalPackets = sum(Packets),\r\n    TotalTrafficSorting = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))),\r\n    TotalTrafficDisplay = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows))))\r\n    by completeNsgRule, FlowDirection, FlowStatus,AclGroup\r\n    | where TotalTrafficSorting > 0\r\n    | project \r\n    trafficForSorting = TotalTrafficSorting,\r\n    ruleName = split(completeNsgRule, '/')[9],\r\n    access = iff(FlowStatus == 'Allowed', 'Allow', iff(FlowStatus == 'Denied', 'Deny', '')),\r\n    ruleType = iff(FlowDirection == 'Inbound', 'Inbound', iff(FlowDirection == 'Outbound', 'Outbound', '')),\r\n    Group = AclGroup,\r\n    hits = iff('{Units:value}' =~ 'bytes', format_bytes(TotalTrafficDisplay, 3), ValueWithUnit(TotalTrafficDisplay, 3)),\r\n    MaliciousAllowedDenied = strcat(iff('{Units:value}' =~ 'bytes', format_bytes(totalMaliciousAllowedBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalMaliciousAllowedPackets, 3), ValueWithUnit(totalMaliciousAllowedFlows, 3))), '/', iff('{Units:value}' =~ 'bytes', format_bytes(totalMaliciousBlockedBytes, 3), iff('{Units:value}' =~ 'packets', ValueWithUnit(totalMaliciousBlockedPackets, 3), ValueWithUnit(totalMaliciousBlockedFlows, 3)))),\r\n    completeNsgRule;\r\nlet topMaliciousTable = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowType == 'MaliciousFlow'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where AclGroup in~ ({top10ACLs})\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | extend IpTalkingToMaliciousIP = iif(isnotempty(DestVm), DestIp, SrcIp)\r\n    | extend VmTalkingToMaliciousIP = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), strcat(SrcSubscription, '/', SrcVm))\r\n    | summarize totalMalicious = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, completeNsgRule\r\n    | top-nested of completeNsgRule by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n    | summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by completeNsgRule\r\n    | project completeNsgRule, topIpInfo;\r\nlet topTalkingNSGTable = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where AclGroup in~ ({top10ACLs})\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | where not(IsFlowCapturedAtUdrHop)\r\n    | extend NIC = iif(FlowDirection == 'O', SrcNic, DestNic)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by NIC, completeNsgRule\r\n    | top-nested of completeNsgRule by max(1), top-nested 3 of nsgInfo = tostring(split(NIC, '/')[1]) by max(totalTraffic)\r\n    | summarize topAclInfo = strcat_array(make_list(nsgInfo), ', ') by completeNsgRule\r\n    | project completeNsgRule, topAclInfo;\r\nlet topSubnetTable = \r\n    NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where AclGroup in~ ({top10ACLs})\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | where not(IsFlowCapturedAtUdrHop)\r\n    | extend Subnet = iif(FlowDirection == 'O', SrcSubnet, DestSubnet)\r\n    | summarize totalTraffic = sum(iff('{Units:value}' =~ 'bytes', tolong(BytesSrcToDest + BytesDestToSrc), iff('{Units:value}' =~ 'packets', tolong(PacketsSrcToDest + PacketsDestToSrc), tolong(AllowedInFlows + AllowedOutFlows + DeniedInFlows + DeniedOutFlows)))) by Subnet, completeNsgRule\r\n    | top-nested of completeNsgRule by max(1), top-nested 3 of subnetInfo = tostring(split(Subnet, '/')[2]) by max(totalTraffic)\r\n    | summarize topSubnetInfo = strcat_array(make_list(subnetInfo), ', ') by completeNsgRule\r\n    | project completeNsgRule, topSubnetInfo;\r\nlet chatTable = NTANetAnalytics\r\n    | where SubType == 'FlowLog' and FaSchemaVersion == '3'\r\n    | where FlowStartTime between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n\t| where iff(\"{subscriptions}\" == \"'*'\", true, (SrcSubscription in~ ({subscriptions}) or DestSubscription in~ ({subscriptions})))\r\n\t| extend Subnet1Split = split(SrcSubnet, '/'), Subnet2Split = split(DestSubnet, '/')\r\n\t| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n\t| where iff(\"{resourceGroups}\" == \"'*'\", true, (rg1ToCheck in~ ({resourceGroups}) or rg2ToCheck in~ ({resourceGroups})))\r\n    | where AclGroup in~ ({top10ACLs})\r\n    | extend completeNsgRule = strcat(AclGroup, '/', AclRule)\r\n    | extend flowCount = tolong(AllowedInFlows + DeniedInFlows + AllowedOutFlows + DeniedOutFlows), byteCount = tolong(BytesSrcToDest + BytesDestToSrc), packetCount = tolong(PacketsSrcToDest + PacketsDestToSrc)\r\n    | extend SourceHost = iif(isnotempty(SrcVm), strcat(SrcSubscription, '/', DestVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | extend DestinationHost = iif(isnotempty(DestVm), strcat(DestSubscription, '/', DestVm), iif(FlowType == 'AzurePublic', AzureRegion, Country))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIp), pack_array(SrcIp), split(SrcPublicIps, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIp), pack_array(DestIp), split(DestPublicIps, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, completeNsgRule;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nlet topTalkingPairTable = \r\n    chatTableWithRownumber\r\n    | join kind = leftouter (chatTableWithRownumber) on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.completeNsgRule == $right.completeNsgRule\r\n    | where isnull(rownHash1) or (rownHash < rownHash1)\r\n    | extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n    | extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n    | extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n    | project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{Units:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{Units:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), completeNsgRule\r\n    | top-nested of completeNsgRule by max(1), top-nested 1 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n    | summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by completeNsgRule\r\n    | project completeNsgRule, topTalkingPairs;\r\nlet priorityTable = \r\n    NTATopologyDetails\r\n    | where iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. todatetime('{timeInterval:endISO}')), TimeGenerated between (todatetime('{timeInterval:startISO}') .. todatetime('{timeInterval:endISO}')))\r\n    | where SubType == 'Topology' and AzureResourceType == 'NetworkSecurityGroupRule'\r\n    | project nsgRuleId = strcat(Subscription, '/', Name), Priority\r\n    | distinct nsgRuleId, Priority;\r\ncommon\r\n| join kind=leftouter topTalkingNSGTable on $left.completeNsgRule == $right.completeNsgRule\r\n| join kind=leftouter topSubnetTable on $left.completeNsgRule == $right.completeNsgRule\r\n| join kind=leftouter topTalkingPairTable on $left.completeNsgRule == $right.completeNsgRule\r\n| join kind=leftouter topMaliciousTable on $left.completeNsgRule == $right.completeNsgRule\r\n| join kind=leftouter priorityTable on $left.completeNsgRule == $right.nsgRuleId\r\n| sort by trafficForSorting desc\r\n| project ruleName, accessPriority = strcat(access, '/', tolong(Priority)), ruleType, Group, topTalkingPairs, topSubnetInfo, topAclInfo, hits, topIpInfo, MaliciousAllowedDenied",
                    "size": 3,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{workspace}"
                    ],
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "accessPriority",
                          "label": "Access Priority"
                        },
                        {
                          "columnId": "ruleType",
                          "label": "Rule Type"
                        },
                        {
                          "columnId": "topTalkingPairs",
                          "label": "Top Talking Pair"
                        },
                        {
                          "columnId": "topSubnetInfo",
                          "label": "Top Subnet Info"
                        },
                        {
                          "columnId": "hits",
                          "label": "Hits"
                        },
                        {
                          "columnId": "topIpInfo",
                          "label": "Top Ip Info"
                        },
                        {
                          "columnId": "MaliciousAllowedDenied",
                          "label": "Malicious(Allowed/Denied)"
                        }
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "hitstype",
                    "comparison": "isEqualTo",
                    "value": "Top 10 ACL Rule Hits"
                  },
                  "name": "ACLRuleGrid"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\",\"mergeType\":\"union\",\"leftTable\":\"NSGRuleGrid\",\"rightTable\":\"ACLRuleGrid\"}],\"projectRename\":[{\"originalName\":\"[NSGRuleGrid].ruleName\",\"mergedName\":\"Rule Name\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].accessPriority\",\"mergedName\":\"Access Priority\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].ruleType\",\"mergedName\":\"Rule Type\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].Group\",\"mergedName\":\"NSG\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].topTalkingPairs\",\"mergedName\":\"Top Talking Pair\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].topSubnetInfo\",\"mergedName\":\"Top Subnet Info\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].topNsgInfo\",\"mergedName\":\"Top NSG Info\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].hits\",\"mergedName\":\"Hits\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].topMaliciousIpInfo\",\"mergedName\":\"Malicious(Allowed/Denied)\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[NSGRuleGrid].MaliciousAllowedDenied\",\"mergedName\":\"Malicious(Allowed/Denied)1\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[ACLRuleGrid].ruleName\",\"mergedName\":\"ruleName\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[ACLRuleGrid].Group\",\"mergedName\":\"Group\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[ACLRuleGrid].topAclInfo\",\"mergedName\":\"topAclInfo\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"[ACLRuleGrid].topIpInfo\",\"mergedName\":\"Top Ip Info\",\"fromId\":\"4464a2a3-ded6-469b-a862-f44deb45fda4\"},{\"originalName\":\"ruleName\",\"mergedName\":\"ruleName\",\"fromId\":\"unknown\"},{\"originalName\":\"accessPriority\",\"mergedName\":\"accessPriority\",\"fromId\":\"unknown\"},{\"originalName\":\"ruleType\",\"mergedName\":\"ruleType\",\"fromId\":\"unknown\"},{\"originalName\":\"Group\",\"mergedName\":\"Group\",\"fromId\":\"unknown\"},{\"originalName\":\"topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"unknown\"},{\"originalName\":\"topSubnetInfo\",\"mergedName\":\"topSubnetInfo\",\"fromId\":\"unknown\"},{\"originalName\":\"topNsgInfo\",\"mergedName\":\"topNsgInfo\",\"fromId\":\"unknown\"},{\"originalName\":\"hits\",\"mergedName\":\"hits\",\"fromId\":\"unknown\"},{\"originalName\":\"topMaliciousIpInfo\",\"mergedName\":\"topMaliciousIpInfo\",\"fromId\":\"unknown\"},{\"originalName\":\"MaliciousAllowedDenied\",\"mergedName\":\"MaliciousAllowedDenied\",\"fromId\":\"unknown\"}]}",
                    "size": 0,
                    "queryType": 7,
                    "gridSettings": {
                      "labelSettings": [
                        {
                          "columnId": "ruleName",
                          "label": "Rule Name"
                        },
                        {
                          "columnId": "accessPriority",
                          "label": "Access Priority"
                        },
                        {
                          "columnId": "ruleType",
                          "label": "Rule Type"
                        },
                        {
                          "columnId": "Group",
                          "label": "NSG"
                        },
                        {
                          "columnId": "topTalkingPairs",
                          "label": "Top Talking Pair"
                        },
                        {
                          "columnId": "topSubnetInfo",
                          "label": "Top Subnet Info"
                        },
                        {
                          "columnId": "topNsgInfo",
                          "label": "Top NSG Info"
                        },
                        {
                          "columnId": "hits",
                          "label": "Hits"
                        },
                        {
                          "columnId": "topMaliciousIpInfo",
                          "label": "Malicious(Allowed/Denied)"
                        },
                        {
                          "columnId": "MaliciousAllowedDenied",
                          "label": "Malicious(Allowed/Denied)"
                        }
                      ]
                    }
                  },
                  "showPin": false,
                  "name": "query - 2"
                }
              ]
            },
            "name": "RulesGridGroup"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "QueryType",
        "comparison": "isNotEqualTo"
      },
      "name": "GridsGroup"
    }
  ],
  "fallbackResourceIds": [
    "azure monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}