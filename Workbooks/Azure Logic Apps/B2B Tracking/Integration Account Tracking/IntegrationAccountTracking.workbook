{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "2d3c041d-86c2-4751-8943-160bcdedadde",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": {
              "durationMs": 604800000
            }
          },
          {
            "id": "95c00a75-fc4b-4879-a156-5500de393b7e",
            "version": "KqlParameterItem/1.0",
            "name": "IntegrationAccountResourceId",
            "type": 5,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "componentIdOnly": true
            }
          },
          {
            "id": "ed967469-b692-4246-9a11-e33909b9ada1",
            "version": "KqlParameterItem/1.0",
            "name": "TrackingStoreDetails",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{IntegrationAccountResourceId}/groups/common/trackingstores/default?api-version=2018-07-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":null}",
            "isHiddenWhenLocked": true,
            "queryType": 12
          },
          {
            "id": "1c8c5a2d-5249-4bb9-861c-8d9e1834b289",
            "version": "KqlParameterItem/1.0",
            "name": "KustoCluster",
            "type": 1,
            "isGlobal": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"{TrackingStoreDetails}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"columns\":[{\"path\":\"properties.kustoClusterUrl\",\"columnid\":\"id\",\"substringRegexMatch\":\"https://ingest-\",\"substringReplace\":\"https://\"}]}}]}",
            "isHiddenWhenLocked": true,
            "queryType": 8
          },
          {
            "id": "5b1c4f78-6569-43a7-8df2-ce318df11d66",
            "version": "KqlParameterItem/1.0",
            "name": "Database",
            "type": 1,
            "isRequired": true,
            "isGlobal": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"{TrackingStoreDetails}\",\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"properties.database\",\"columns\":[]}}]}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 8
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "GlobalParameters"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "3b53e894-645d-44d1-89bd-95594f012865",
            "cellValue": "setTab",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "id": "0cbfa383-eb68-4bf1-aa15-cb2f1459bc83",
            "cellValue": "setTab",
            "linkTarget": "parameter",
            "linkLabel": "AS2",
            "subTarget": "AS2",
            "style": "link"
          },
          {
            "id": "6807eae0-1992-45d3-94e5-d8b1ef7be344",
            "cellValue": "setTab",
            "linkTarget": "parameter",
            "linkLabel": "X12",
            "subTarget": "X12",
            "style": "link"
          }
        ]
      },
      "name": "Tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Partners",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let queryResult = (AS2TrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"AS2Message\\\"\\r\\n| where isnotempty(CorrelationMessageId)\\r\\n| project \\r\\n    AgreementName,\\r\\n    MessageId,\\r\\n    CorrelationMessageId,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName, \\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    AS2MessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n    MessageDirection = Direction,\\r\\n    IsMdnExpected,\\r\\n    DirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n| join  kind=leftouter (\\r\\n\\tAS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2MDN\\\"\\r\\n\\t| project \\r\\n\\t\\tMdnStatusCode = MessageProperties.StatusCode,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tAckDirection = Direction, \\r\\n\\t\\tAckTime = EventTime,\\r\\n\\t\\tAckClientTrackingId = ClientRequestId,\\r\\n\\t\\tAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Send\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n\\t| extend MdnStatus = iff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n) on CorrelationMessageId, DirectionBasedCorrelationId\\r\\n| extend  IsAckValid = AckTime > MessageTime\\r\\n| extend\\r\\n    MessageStatus = iff(AS2MessageStatus == \\\"Successful\\\" and IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid, \\r\\n\\t\\t\\tMdnStatus, \\r\\n\\t\\t\\t\\\"Pending\\\"), \\r\\n\\t\\tAS2MessageStatus), \\r\\n    AckStatus = iff(IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid,  \\r\\n\\t\\t\\tiff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\"), \\\"Pending\\\"),                      \\r\\n\\t\\t\\\"NotRequired\\\")\\r\\n)\\r\\n| union \\r\\n\\t(AS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2Message\\\"\\r\\n\\t| where isempty(CorrelationMessageId)\\r\\n\\t| project \\r\\n\\t\\tAgreementName,\\r\\n\\t\\tSenderPartnerName,\\r\\n\\t\\tReceiverPartnerName,\\r\\n\\t\\tMessageTime = EventTime,\\r\\n\\t\\tMessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n\\t\\tMessageId,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tMessageClientTrackingId = ClientRequestId,\\r\\n\\t\\tMessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tMessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tMessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tMessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tMessageDirection = Direction,\\r\\n\\t\\tIsMdnExpected,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\"))\\r\\n    | union\\r\\n    (EdiTrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"X12TransactionSet\\\"\\r\\n| where isnotempty(TransactionSetControlNumber)\\r\\n| where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n| project \\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    InterchangeControlNumber,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    MessageDirection = Direction,\\r\\n    IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected,\\r\\n    TransactionSetStatus = iff (IsMessageFailed == \\\"false\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSetAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber = RespondingTransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    TransactionSetAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    TransactionSetAckTime = EventTime,\\r\\n    TransactionSetAckClientTrackingId = ClientRequestId,\\r\\n    TransactionSetAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    TransactionSetAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    TransactionSetAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    TransactionSetAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    TransactionSetAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend TransactionSetAckStatus = iff(isnotempty( TransactionSetAckStatusCode), iff(TransactionSetAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, TransactionSetControlNumber, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode,\\r\\n    TransactionSetAckStatus,\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckClientTrackingId,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckLogicAppName\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12FunctionalGroupAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    FunctionalAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime = EventTime,\\r\\n    FunctionalAckClientTrackingId = ClientRequestId,\\r\\n    FunctionalAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    FunctionalAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    FunctionalAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    FunctionalAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    FunctionalAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend FunctionalAckStatus = iff(isnotempty( FunctionalAckStatusCode), iff(FunctionalAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    TransactionSetAckStatus, // Successful, Failed or empty\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckLogicAppName,\\r\\n    FunctionalAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    FunctionalAckStatus, // Successful, Failed or empty\\r\\n    FunctionalAckDirection ,   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime,\\r\\n    FunctionalAckClientTrackingId,\\r\\n    FunctionalAckSubscriptionId,\\r\\n    FunctionalAckResourceGroup,\\r\\n    FunctionalAckActionName,\\r\\n    FunctionalAckLogicAppName,\\r\\n    AckActionName = iff(isnotempty( TransactionSetAckActionName), TransactionSetAckActionName, FunctionalAckActionName),\\r\\n    AckLogicAppName = iff(isnotempty( TransactionSetAckLogicAppName), TransactionSetAckLogicAppName, FunctionalAckLogicAppName),\\r\\n    AckDirection = iff(isnotempty(TransactionSetAckDirection), TransactionSetAckDirection, FunctionalAckDirection),\\r\\n    AckTime = iff(isnotempty(TransactionSetAckTime), TransactionSetAckTime, FunctionalAckTime)\\r\\n    | extend  IsAckValid = AckTime > MessageTime\\r\\n    | extend MessageStatus = iff(TransactionSetStatus == \\\"Successful\\\" and IsFunctionalAckExpected and MessageDirection == \\\"Send\\\" ,\\r\\n        iff(isnotempty(TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatus, iff(isnotempty(FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatus, \\\"Pending\\\")),\\r\\n        TransactionSetStatus)\\r\\n    | extend AckStatus = iff(IsFunctionalAckExpected == true and MessageDirection == \\\"Send\\\"  , iff(isnotempty( TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatusCode,\\r\\n        iff (isnotempty( FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatusCode, \\\"Pending\\\")), \\\"NotRequired\\\"))\\r\\n| union \\r\\n    (EdiTrackRecords\\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSet\\\"\\r\\n    | where isempty(TransactionSetControlNumber)\\r\\n    | where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n    |project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageClientTrackingId = ClientRequestId,\\r\\n        InterchangeControlNumber,\\r\\n        FunctionalGroupControlNumber,\\r\\n        TransactionSetControlNumber,\\r\\n        MessageTime = EventTime,\\r\\n        MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n        MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n        MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n        MssageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n        MessageDirection = Direction,\\r\\n        IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected\\r\\n            | extend MessageStatus = \\\"Failed\\\")\\r\\n    | summarize count() by MessageStatus;\\r\\n    let NameColumn = datatable(MessageStatus:string)[\\\"Successful\\\", \\\"Pending\\\", \\\"Failed\\\"];\\r\\nNameColumn\\r\\n| lookup queryResult on MessageStatus \\r\\n| extend count = coalesce(['count_'], 0)\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 0,
                    "title": "Overall Message Status",
                    "queryType": 9,
                    "visualization": "piechart",
                    "chartSettings": {
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Pending",
                          "color": "yellow"
                        },
                        {
                          "seriesName": "Failed",
                          "color": "redBright"
                        },
                        {
                          "seriesName": "Successful",
                          "color": "green"
                        }
                      ]
                    }
                  },
                  "name": "AllMessagesStatus",
                  "styleSettings": {
                    "margin": "2px",
                    "padding": "0px",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"(AS2TrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"AS2Message\\\"\\r\\n| where isnotempty(CorrelationMessageId)\\r\\n| project \\r\\n    AgreementName,\\r\\n    MessageId,\\r\\n    CorrelationMessageId,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName, \\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    AS2MessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n    MessageDirection = Direction,\\r\\n    IsMdnExpected,\\r\\n    DirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n| join  kind=leftouter (\\r\\n\\tAS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2MDN\\\"\\r\\n\\t| project \\r\\n\\t\\tMdnStatusCode = MessageProperties.StatusCode,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tAckDirection = Direction, \\r\\n\\t\\tAckTime = EventTime,\\r\\n\\t\\tAckClientTrackingId = ClientRequestId,\\r\\n\\t\\tAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Send\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n\\t| extend MdnStatus = iff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n) on CorrelationMessageId, DirectionBasedCorrelationId\\r\\n| extend  IsAckValid = AckTime > MessageTime\\r\\n| extend\\r\\n    MessageStatus = iff(AS2MessageStatus == \\\"Successful\\\" and IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid, \\r\\n\\t\\t\\tMdnStatus, \\r\\n\\t\\t\\t\\\"Pending\\\"), \\r\\n\\t\\tAS2MessageStatus), \\r\\n    AckStatus = iff(IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid,  \\r\\n\\t\\t\\tiff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\"), \\\"Pending\\\"),                      \\r\\n\\t\\t\\\"NotRequired\\\")\\r\\n)\\r\\n| union \\r\\n\\t(AS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2Message\\\"\\r\\n\\t| where isempty(CorrelationMessageId)\\r\\n\\t| project \\r\\n\\t\\tAgreementName,\\r\\n\\t\\tSenderPartnerName,\\r\\n\\t\\tReceiverPartnerName,\\r\\n\\t\\tMessageTime = EventTime,\\r\\n\\t\\tMessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n\\t\\tMessageId,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tMessageClientTrackingId = ClientRequestId,\\r\\n\\t\\tMessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tMessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tMessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tMessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tMessageDirection = Direction,\\r\\n\\t\\tIsMdnExpected,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\"))\\r\\n    | union\\r\\n    (EdiTrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"X12TransactionSet\\\"\\r\\n| where isnotempty(TransactionSetControlNumber)\\r\\n| where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n| project \\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    InterchangeControlNumber,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    MessageDirection = Direction,\\r\\n    IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected,\\r\\n    TransactionSetStatus = iff (IsMessageFailed == \\\"false\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSetAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber = RespondingTransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    TransactionSetAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    TransactionSetAckTime = EventTime,\\r\\n    TransactionSetAckClientTrackingId = ClientRequestId,\\r\\n    TransactionSetAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    TransactionSetAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    TransactionSetAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    TransactionSetAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    TransactionSetAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend TransactionSetAckStatus = iff(isnotempty( TransactionSetAckStatusCode), iff(TransactionSetAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, TransactionSetControlNumber, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode,\\r\\n    TransactionSetAckStatus,\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckClientTrackingId,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckLogicAppName\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12FunctionalGroupAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    FunctionalAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime = EventTime,\\r\\n    FunctionalAckClientTrackingId = ClientRequestId,\\r\\n    FunctionalAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    FunctionalAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    FunctionalAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    FunctionalAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    FunctionalAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend FunctionalAckStatus = iff(isnotempty( FunctionalAckStatusCode), iff(FunctionalAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    TransactionSetAckStatus, // Successful, Failed or empty\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckLogicAppName,\\r\\n    FunctionalAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    FunctionalAckStatus, // Successful, Failed or empty\\r\\n    FunctionalAckDirection ,   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime,\\r\\n    FunctionalAckClientTrackingId,\\r\\n    FunctionalAckSubscriptionId,\\r\\n    FunctionalAckResourceGroup,\\r\\n    FunctionalAckActionName,\\r\\n    FunctionalAckLogicAppName,\\r\\n    AckActionName = iff(isnotempty( TransactionSetAckActionName), TransactionSetAckActionName, FunctionalAckActionName),\\r\\n    AckLogicAppName = iff(isnotempty( TransactionSetAckLogicAppName), TransactionSetAckLogicAppName, FunctionalAckLogicAppName),\\r\\n    AckDirection = iff(isnotempty(TransactionSetAckDirection), TransactionSetAckDirection, FunctionalAckDirection),\\r\\n    AckTime = iff(isnotempty(TransactionSetAckTime), TransactionSetAckTime, FunctionalAckTime)\\r\\n    | extend  IsAckValid = AckTime > MessageTime\\r\\n    | extend MessageStatus = iff(TransactionSetStatus == \\\"Successful\\\" and IsFunctionalAckExpected and MessageDirection == \\\"Send\\\" ,\\r\\n        iff(isnotempty(TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatus, iff(isnotempty(FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatus, \\\"Pending\\\")),\\r\\n        TransactionSetStatus)\\r\\n    | extend AckStatus = iff(IsFunctionalAckExpected == true and MessageDirection == \\\"Send\\\"  , iff(isnotempty( TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatusCode,\\r\\n        iff (isnotempty( FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatusCode, \\\"Pending\\\")), \\\"NotRequired\\\"))\\r\\n| union \\r\\n    (EdiTrackRecords\\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSet\\\"\\r\\n    | where isempty(TransactionSetControlNumber)\\r\\n    | where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n    |project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageClientTrackingId = ClientRequestId,\\r\\n        InterchangeControlNumber,\\r\\n        FunctionalGroupControlNumber,\\r\\n        TransactionSetControlNumber,\\r\\n        MessageTime = EventTime,\\r\\n        MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n        MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n        MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n        MssageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n        MessageDirection = Direction,\\r\\n        IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected\\r\\n        | extend MessageStatus = \\\"Failed\\\")\\r\\n| where MessageStatus == \\\"Failed\\\"\\r\\n| summarize count() by SenderPartnerName\\r\\n\\r\\n\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 4,
                    "title": "Top Partners With Errors",
                    "queryType": 9,
                    "visualization": "tiles",
                    "tileSettings": {
                      "showBorder": false,
                      "titleContent": {
                        "columnMatch": "SenderPartnerName",
                        "formatter": 1
                      },
                      "leftContent": {
                        "columnMatch": "count_",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 17,
                          "options": {
                            "maximumSignificantDigits": 3,
                            "maximumFractionDigits": 2
                          }
                        }
                      }
                    },
                    "mapSettings": {
                      "locInfo": "LatLong",
                      "sizeSettings": "count_",
                      "sizeAggregation": "Sum",
                      "legendMetric": "count_",
                      "legendAggregation": "Sum",
                      "itemColorSettings": {
                        "type": "heatmap",
                        "colorAggregation": "Sum",
                        "nodeColorField": "count_",
                        "heatmapPalette": "greenRed"
                      }
                    }
                  },
                  "name": "TopPartnersWithErrors",
                  "styleSettings": {
                    "margin": "2px",
                    "padding": "0px",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"((AS2TrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"AS2Message\\\"\\r\\n| where isnotempty(CorrelationMessageId)\\r\\n| project \\r\\n    AgreementName,\\r\\n    MessageId,\\r\\n    CorrelationMessageId,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName, \\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    AS2MessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n    MessageDirection = Direction,\\r\\n    IsMdnExpected,\\r\\n    DirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n| join  kind=leftouter (\\r\\n\\tAS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2MDN\\\"\\r\\n\\t| project \\r\\n\\t\\tMdnStatusCode = MessageProperties.StatusCode,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tAckDirection = Direction, \\r\\n\\t\\tAckTime = EventTime,\\r\\n\\t\\tAckClientTrackingId = ClientRequestId,\\r\\n\\t\\tAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Send\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n\\t| extend MdnStatus = iff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n) on CorrelationMessageId, DirectionBasedCorrelationId\\r\\n| extend  IsAckValid = AckTime > MessageTime\\r\\n| extend\\r\\n    MessageStatus = iff(AS2MessageStatus == \\\"Successful\\\" and IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid, \\r\\n\\t\\t\\tMdnStatus, \\r\\n\\t\\t\\t\\\"Pending\\\"), \\r\\n\\t\\tAS2MessageStatus), \\r\\n    AckStatus = iff(IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid,  \\r\\n\\t\\t\\tiff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\"), \\\"Pending\\\"),                      \\r\\n\\t\\t\\\"NotRequired\\\")\\r\\n)\\r\\n| union \\r\\n\\t(AS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2Message\\\"\\r\\n\\t| where isempty(CorrelationMessageId)\\r\\n\\t| project \\r\\n\\t\\tAgreementName,\\r\\n\\t\\tSenderPartnerName,\\r\\n\\t\\tReceiverPartnerName,\\r\\n\\t\\tMessageTime = EventTime,\\r\\n\\t\\tMessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n\\t\\tMessageId,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tMessageClientTrackingId = ClientRequestId,\\r\\n\\t\\tMessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tMessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tMessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tMessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tMessageDirection = Direction,\\r\\n\\t\\tIsMdnExpected,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\"))\\r\\n    | summarize Successful = countif(MessageStatus == \\\"Successful\\\") , Failed = countif(MessageStatus == \\\"Failed\\\") , Pending = countif(MessageStatus == \\\"Pending\\\") by PartnerName= iff(MessageDirection == \\\"Receive\\\", SenderPartnerName, ReceiverPartnerName), Protocol = \\\"AS2\\\")\\r\\n|union\\r\\n((EdiTrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"X12TransactionSet\\\"\\r\\n| where isnotempty(TransactionSetControlNumber)\\r\\n| where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n| project \\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    InterchangeControlNumber,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    MessageDirection = Direction,\\r\\n    IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected,\\r\\n    TransactionSetStatus = iff (IsMessageFailed == \\\"false\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSetAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber = RespondingTransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    TransactionSetAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    TransactionSetAckTime = EventTime,\\r\\n    TransactionSetAckClientTrackingId = ClientRequestId,\\r\\n    TransactionSetAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    TransactionSetAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    TransactionSetAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    TransactionSetAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    TransactionSetAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend TransactionSetAckStatus = iff(isnotempty( TransactionSetAckStatusCode), iff(TransactionSetAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, TransactionSetControlNumber, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode,\\r\\n    TransactionSetAckStatus,\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckClientTrackingId,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckLogicAppName\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12FunctionalGroupAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    FunctionalAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime = EventTime,\\r\\n    FunctionalAckClientTrackingId = ClientRequestId,\\r\\n    FunctionalAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    FunctionalAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    FunctionalAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    FunctionalAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    FunctionalAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend FunctionalAckStatus = iff(isnotempty( FunctionalAckStatusCode), iff(FunctionalAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    TransactionSetAckStatus, // Successful, Failed or empty\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckLogicAppName,\\r\\n    FunctionalAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    FunctionalAckStatus, // Successful, Failed or empty\\r\\n    FunctionalAckDirection ,   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime,\\r\\n    FunctionalAckClientTrackingId,\\r\\n    FunctionalAckSubscriptionId,\\r\\n    FunctionalAckResourceGroup,\\r\\n    FunctionalAckActionName,\\r\\n    FunctionalAckLogicAppName,\\r\\n    AckActionName = iff(isnotempty( TransactionSetAckActionName), TransactionSetAckActionName, FunctionalAckActionName),\\r\\n    AckLogicAppName = iff(isnotempty( TransactionSetAckLogicAppName), TransactionSetAckLogicAppName, FunctionalAckLogicAppName),\\r\\n    AckDirection = iff(isnotempty(TransactionSetAckDirection), TransactionSetAckDirection, FunctionalAckDirection),\\r\\n    AckTime = iff(isnotempty(TransactionSetAckTime), TransactionSetAckTime, FunctionalAckTime)\\r\\n    | extend  IsAckValid = AckTime > MessageTime\\r\\n    | extend MessageStatus = iff(TransactionSetStatus == \\\"Successful\\\" and IsFunctionalAckExpected and MessageDirection == \\\"Send\\\" ,\\r\\n        iff(isnotempty(TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatus, iff(isnotempty(FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatus, \\\"Pending\\\")),\\r\\n        TransactionSetStatus)\\r\\n    | extend AckStatus = iff(IsFunctionalAckExpected == true and MessageDirection == \\\"Send\\\"  , iff(isnotempty( TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatusCode,\\r\\n        iff (isnotempty( FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatusCode, \\\"Pending\\\")), \\\"NotRequired\\\"))\\r\\n| union \\r\\n    (EdiTrackRecords\\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSet\\\"\\r\\n    | where isempty(TransactionSetControlNumber)\\r\\n    | where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n    |project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageClientTrackingId = ClientRequestId,\\r\\n        InterchangeControlNumber,\\r\\n        FunctionalGroupControlNumber,\\r\\n        TransactionSetControlNumber,\\r\\n        MessageTime = EventTime,\\r\\n        MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n        MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n        MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n        MssageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n        MessageDirection = Direction,\\r\\n        IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected\\r\\n        | extend MessageStatus = \\\"Failed\\\")            \\r\\n    | summarize Successful = countif(MessageStatus == \\\"Successful\\\") , Failed = countif(MessageStatus == \\\"Failed\\\") , Pending = countif(MessageStatus == \\\"Pending\\\") by PartnerName= iff(MessageDirection == \\\"Receive\\\", SenderPartnerName, ReceiverPartnerName), Protocol = \\\"X12\\\")\\r\\n\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 0,
                    "title": "Messages By Partner",
                    "queryType": 9,
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Successful",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Failed",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "failed",
                                "text": "{0}{1}"
                              }
                            ],
                            "compositeBarSettings": {
                              "labelText": "",
                              "columnSettings": []
                            }
                          }
                        },
                        {
                          "columnMatch": "Pending",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "dot-yellow",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "PartnerName",
                          "sortOrder": 1
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "PartnerName",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "name": "MessagesByPartner",
                  "styleSettings": {
                    "margin": "2px",
                    "padding": "0px",
                    "showBorder": true
                  }
                }
              ]
            },
            "customWidth": "33",
            "name": "PartnerGroup",
            "styleSettings": {
              "margin": "2px",
              "showBorder": true
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "AS2",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let queryResult = (AS2TrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"AS2Message\\\"\\r\\n| where isnotempty(CorrelationMessageId)\\r\\n| project \\r\\n    AgreementName,\\r\\n    MessageId,\\r\\n    CorrelationMessageId,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName, \\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    AS2MessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n    MessageDirection = Direction,\\r\\n    IsMdnExpected,\\r\\n    DirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n| join  kind=leftouter (\\r\\n\\tAS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2MDN\\\"\\r\\n\\t| project \\r\\n\\t\\tMdnStatusCode = MessageProperties.StatusCode,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tAckDirection = Direction, \\r\\n\\t\\tAckTime = EventTime,\\r\\n\\t\\tAckClientTrackingId = ClientRequestId,\\r\\n\\t\\tAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Send\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n\\t| extend MdnStatus = iff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n) on CorrelationMessageId, DirectionBasedCorrelationId\\r\\n| extend  IsAckValid = AckTime > MessageTime\\r\\n| extend\\r\\n    MessageStatus = iff(AS2MessageStatus == \\\"Successful\\\" and IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid, \\r\\n\\t\\t\\tMdnStatus, \\r\\n\\t\\t\\t\\\"Pending\\\"), \\r\\n\\t\\tAS2MessageStatus), \\r\\n    AckStatus = iff(IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid,  \\r\\n\\t\\t\\tiff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\"), \\\"Pending\\\"),                      \\r\\n\\t\\t\\\"NotRequired\\\")\\r\\n)\\r\\n| union \\r\\n\\t(AS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2Message\\\"\\r\\n\\t| where isempty(CorrelationMessageId)\\r\\n\\t| project \\r\\n\\t\\tAgreementName,\\r\\n\\t\\tSenderPartnerName,\\r\\n\\t\\tReceiverPartnerName,\\r\\n\\t\\tMessageTime = EventTime,\\r\\n\\t\\tMessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n\\t\\tMessageId,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tMessageClientTrackingId = ClientRequestId,\\r\\n\\t\\tMessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tMessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tMessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tMessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tMessageDirection = Direction,\\r\\n\\t\\tIsMdnExpected,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\"))\\r\\n    | summarize count() by MessageStatus;\\r\\n    let NameColumn = datatable(MessageStatus:string)[\\\"Successful\\\", \\\"Pending\\\", \\\"Failed\\\"];\\r\\nNameColumn\\r\\n| lookup queryResult on MessageStatus \\r\\n| extend count = coalesce(['count_'], 0)\\r\\n\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 0,
                    "title": "Messages By Status",
                    "noDataMessage": "No messages processed during the specified period",
                    "queryType": 9,
                    "visualization": "piechart",
                    "chartSettings": {
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Successful",
                          "color": "green"
                        },
                        {
                          "seriesName": "Failed",
                          "color": "redBright"
                        },
                        {
                          "seriesName": "Pending",
                          "color": "yellow"
                        }
                      ]
                    }
                  },
                  "name": "AS2Summary",
                  "styleSettings": {
                    "margin": "2px",
                    "padding": "0px",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let queryResult = (AS2TrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"AS2Message\\\"\\r\\n| where isnotempty(CorrelationMessageId)\\r\\n| project \\r\\n    AgreementName,\\r\\n    MessageId,\\r\\n    CorrelationMessageId,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName, \\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    AS2MessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n    MessageDirection = Direction,\\r\\n    IsMdnExpected,\\r\\n    DirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n| join  kind=leftouter (\\r\\n\\tAS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2MDN\\\"\\r\\n\\t| project \\r\\n\\t\\tMdnStatusCode = MessageProperties.StatusCode,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tAckDirection = Direction, \\r\\n\\t\\tAckTime = EventTime,\\r\\n\\t\\tAckClientTrackingId = ClientRequestId,\\r\\n\\t\\tAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Send\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n\\t| extend MdnStatus = iff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n) on CorrelationMessageId, DirectionBasedCorrelationId\\r\\n| extend  IsAckValid = AckTime > MessageTime\\r\\n| extend\\r\\n    MessageStatus = iff(AS2MessageStatus == \\\"Successful\\\" and IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid, \\r\\n\\t\\t\\tMdnStatus, \\r\\n\\t\\t\\t\\\"Pending\\\"), \\r\\n\\t\\tAS2MessageStatus), \\r\\n    AckStatus = iff(IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid,  \\r\\n\\t\\t\\tiff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\"), \\\"Pending\\\"),                      \\r\\n\\t\\t\\\"NotRequired\\\")\\r\\n)\\r\\n| union \\r\\n\\t(AS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2Message\\\"\\r\\n\\t| where isempty(CorrelationMessageId)\\r\\n\\t| project \\r\\n\\t\\tAgreementName,\\r\\n\\t\\tSenderPartnerName,\\r\\n\\t\\tReceiverPartnerName,\\r\\n\\t\\tMessageTime = EventTime,\\r\\n\\t\\tMessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n\\t\\tMessageId,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tMessageClientTrackingId = ClientRequestId,\\r\\n\\t\\tMessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tMessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tMessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tMessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tMessageDirection = Direction,\\r\\n\\t\\tIsMdnExpected,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\"))\\r\\n    | where MessageDirection == \\\"Send\\\"\\r\\n    | summarize count() by MessageStatus;\\r\\nlet NameColumn = datatable(MessageStatus:string)[\\\"Successful\\\", \\\"Pending\\\", \\\"Failed\\\"];\\r\\nNameColumn\\r\\n| lookup queryResult on MessageStatus \\r\\n| extend SENT = MessageStatus, TOTAL = coalesce(['count_'], 0)\\r\\n| project SENT, TOTAL\\r\\n| order by SENT\\r\\n\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 1,
                    "queryType": 9,
                    "gridSettings": {
                      "rowLimit": 3
                    },
                    "sortBy": []
                  },
                  "name": "AS2Send",
                  "styleSettings": {
                    "margin": "2px",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"\\r\\nlet queryResult =(AS2TrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"AS2Message\\\"\\r\\n| where isnotempty(CorrelationMessageId)\\r\\n| project \\r\\n    AgreementName,\\r\\n    MessageId,\\r\\n    CorrelationMessageId,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName, \\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    AS2MessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n    MessageDirection = Direction,\\r\\n    IsMdnExpected,\\r\\n    DirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n| join  kind=leftouter (\\r\\n\\tAS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2MDN\\\"\\r\\n\\t| project \\r\\n\\t\\tMdnStatusCode = MessageProperties.StatusCode,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tAckDirection = Direction, \\r\\n\\t\\tAckTime = EventTime,\\r\\n\\t\\tAckClientTrackingId = ClientRequestId,\\r\\n\\t\\tAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Send\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n\\t| extend MdnStatus = iff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n) on CorrelationMessageId, DirectionBasedCorrelationId\\r\\n| extend  IsAckValid = AckTime > MessageTime\\r\\n| extend\\r\\n    MessageStatus = iff(AS2MessageStatus == \\\"Successful\\\" and IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid, \\r\\n\\t\\t\\tMdnStatus, \\r\\n\\t\\t\\t\\\"Pending\\\"), \\r\\n\\t\\tAS2MessageStatus), \\r\\n    AckStatus = iff(IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid,  \\r\\n\\t\\t\\tiff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\"), \\\"Pending\\\"),                      \\r\\n\\t\\t\\\"NotRequired\\\")\\r\\n)\\r\\n| union \\r\\n\\t(AS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2Message\\\"\\r\\n\\t| where isempty(CorrelationMessageId)\\r\\n\\t| project \\r\\n\\t\\tAgreementName,\\r\\n\\t\\tSenderPartnerName,\\r\\n\\t\\tReceiverPartnerName,\\r\\n\\t\\tMessageTime = EventTime,\\r\\n\\t\\tMessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n\\t\\tMessageId,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tMessageClientTrackingId = ClientRequestId,\\r\\n\\t\\tMessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tMessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tMessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tMessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tMessageDirection = Direction,\\r\\n\\t\\tIsMdnExpected,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\"))\\r\\n    | where MessageDirection == \\\"Receive\\\"\\r\\n    | summarize count() by MessageStatus;\\r\\nlet NameColumn = datatable(MessageStatus:string)[\\\"Successful\\\", \\\"Pending\\\", \\\"Failed\\\"];\\r\\nNameColumn\\r\\n| lookup queryResult on MessageStatus \\r\\n| extend RECEIVED = MessageStatus, TOTAL = coalesce(['count_'], 0)\\r\\n| project RECEIVED, TOTAL\\r\\n| order by RECEIVED\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 1,
                    "queryType": 9
                  },
                  "name": "AS2Receive",
                  "styleSettings": {
                    "margin": "2px",
                    "showBorder": true
                  }
                }
              ]
            },
            "customWidth": "33",
            "name": "AS2Group",
            "styleSettings": {
              "margin": "2px",
              "showBorder": true
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "X12",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let queryResult = (EdiTrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"X12TransactionSet\\\"\\r\\n| where isnotempty(TransactionSetControlNumber)\\r\\n| where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n| project \\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    InterchangeControlNumber,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    MessageDirection = Direction,\\r\\n    IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected,\\r\\n    TransactionSetStatus = iff (IsMessageFailed == \\\"false\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSetAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber = RespondingTransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    TransactionSetAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    TransactionSetAckTime = EventTime,\\r\\n    TransactionSetAckClientTrackingId = ClientRequestId,\\r\\n    TransactionSetAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    TransactionSetAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    TransactionSetAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    TransactionSetAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    TransactionSetAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend TransactionSetAckStatus = iff(isnotempty( TransactionSetAckStatusCode), iff(TransactionSetAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, TransactionSetControlNumber, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode,\\r\\n    TransactionSetAckStatus,\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckClientTrackingId,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckLogicAppName\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12FunctionalGroupAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    FunctionalAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime = EventTime,\\r\\n    FunctionalAckClientTrackingId = ClientRequestId,\\r\\n    FunctionalAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    FunctionalAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    FunctionalAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    FunctionalAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    FunctionalAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend FunctionalAckStatus = iff(isnotempty( FunctionalAckStatusCode), iff(FunctionalAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    TransactionSetAckStatus, // Successful, Failed or empty\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckLogicAppName,\\r\\n    FunctionalAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    FunctionalAckStatus, // Successful, Failed or empty\\r\\n    FunctionalAckDirection ,   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime,\\r\\n    FunctionalAckClientTrackingId,\\r\\n    FunctionalAckSubscriptionId,\\r\\n    FunctionalAckResourceGroup,\\r\\n    FunctionalAckActionName,\\r\\n    FunctionalAckLogicAppName,\\r\\n    AckActionName = iff(isnotempty( TransactionSetAckActionName), TransactionSetAckActionName, FunctionalAckActionName),\\r\\n    AckLogicAppName = iff(isnotempty( TransactionSetAckLogicAppName), TransactionSetAckLogicAppName, FunctionalAckLogicAppName),\\r\\n    AckDirection = iff(isnotempty(TransactionSetAckDirection), TransactionSetAckDirection, FunctionalAckDirection),\\r\\n    AckTime = iff(isnotempty(TransactionSetAckTime), TransactionSetAckTime, FunctionalAckTime)\\r\\n    | extend  IsAckValid = AckTime > MessageTime\\r\\n    | extend MessageStatus = iff(TransactionSetStatus == \\\"Successful\\\" and IsFunctionalAckExpected and MessageDirection == \\\"Send\\\" ,\\r\\n        iff(isnotempty(TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatus, iff(isnotempty(FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatus, \\\"Pending\\\")),\\r\\n        TransactionSetStatus)\\r\\n    | extend AckStatus = iff(IsFunctionalAckExpected == true and MessageDirection == \\\"Send\\\"  , iff(isnotempty( TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatusCode,\\r\\n        iff (isnotempty( FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatusCode, \\\"Pending\\\")), \\\"NotRequired\\\"))\\r\\n| union \\r\\n    (EdiTrackRecords\\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSet\\\"\\r\\n    | where isempty(TransactionSetControlNumber)\\r\\n    | where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n    |project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageClientTrackingId = ClientRequestId,\\r\\n        InterchangeControlNumber,\\r\\n        FunctionalGroupControlNumber,\\r\\n        TransactionSetControlNumber,\\r\\n        MessageTime = EventTime,\\r\\n        MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n        MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n        MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n        MssageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n        MessageDirection = Direction,\\r\\n        IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected\\r\\n    | extend MessageStatus = \\\"Failed\\\")\\r\\n    | summarize count() by MessageStatus;\\r\\nlet NameColumn = datatable(MessageStatus:string)[\\\"Successful\\\", \\\"Pending\\\", \\\"Failed\\\"];\\r\\nNameColumn\\r\\n| lookup queryResult on MessageStatus \\r\\n| extend count = coalesce(['count_'], 0)\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 0,
                    "title": "X12 Messages By Status",
                    "noDataMessage": "No messages processed during the specified period",
                    "queryType": 9,
                    "visualization": "piechart",
                    "chartSettings": {
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Pending",
                          "color": "yellow"
                        },
                        {
                          "seriesName": "Failed",
                          "color": "redBright"
                        },
                        {
                          "seriesName": "Successful",
                          "color": "green"
                        }
                      ]
                    }
                  },
                  "name": "X12Summary",
                  "styleSettings": {
                    "margin": "2px",
                    "padding": "0px",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let queryResult = (EdiTrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"X12TransactionSet\\\"\\r\\n| where isnotempty(TransactionSetControlNumber)\\r\\n| where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n| project \\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    InterchangeControlNumber,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    MessageDirection = Direction,\\r\\n    IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected,\\r\\n    TransactionSetStatus = iff (IsMessageFailed == \\\"false\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSetAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber = RespondingTransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    TransactionSetAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    TransactionSetAckTime = EventTime,\\r\\n    TransactionSetAckClientTrackingId = ClientRequestId,\\r\\n    TransactionSetAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    TransactionSetAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    TransactionSetAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    TransactionSetAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    TransactionSetAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend TransactionSetAckStatus = iff(isnotempty( TransactionSetAckStatusCode), iff(TransactionSetAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, TransactionSetControlNumber, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode,\\r\\n    TransactionSetAckStatus,\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckClientTrackingId,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckLogicAppName\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12FunctionalGroupAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    FunctionalAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime = EventTime,\\r\\n    FunctionalAckClientTrackingId = ClientRequestId,\\r\\n    FunctionalAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    FunctionalAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    FunctionalAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    FunctionalAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    FunctionalAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend FunctionalAckStatus = iff(isnotempty( FunctionalAckStatusCode), iff(FunctionalAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    TransactionSetAckStatus, // Successful, Failed or empty\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckLogicAppName,\\r\\n    FunctionalAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    FunctionalAckStatus, // Successful, Failed or empty\\r\\n    FunctionalAckDirection ,   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime,\\r\\n    FunctionalAckClientTrackingId,\\r\\n    FunctionalAckSubscriptionId,\\r\\n    FunctionalAckResourceGroup,\\r\\n    FunctionalAckActionName,\\r\\n    FunctionalAckLogicAppName,\\r\\n    AckActionName = iff(isnotempty( TransactionSetAckActionName), TransactionSetAckActionName, FunctionalAckActionName),\\r\\n    AckLogicAppName = iff(isnotempty( TransactionSetAckLogicAppName), TransactionSetAckLogicAppName, FunctionalAckLogicAppName),\\r\\n    AckDirection = iff(isnotempty(TransactionSetAckDirection), TransactionSetAckDirection, FunctionalAckDirection),\\r\\n    AckTime = iff(isnotempty(TransactionSetAckTime), TransactionSetAckTime, FunctionalAckTime)\\r\\n    | extend  IsAckValid = AckTime > MessageTime\\r\\n    | extend MessageStatus = iff(TransactionSetStatus == \\\"Successful\\\" and IsFunctionalAckExpected and MessageDirection == \\\"Send\\\" ,\\r\\n        iff(isnotempty(TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatus, iff(isnotempty(FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatus, \\\"Pending\\\")),\\r\\n        TransactionSetStatus)\\r\\n    | extend AckStatus = iff(IsFunctionalAckExpected == true and MessageDirection == \\\"Send\\\"  , iff(isnotempty( TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatusCode,\\r\\n        iff (isnotempty( FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatusCode, \\\"Pending\\\")), \\\"NotRequired\\\"))\\r\\n| union \\r\\n    (EdiTrackRecords\\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSet\\\"\\r\\n    | where isempty(TransactionSetControlNumber)\\r\\n    | where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n    |project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageClientTrackingId = ClientRequestId,\\r\\n        InterchangeControlNumber,\\r\\n        FunctionalGroupControlNumber,\\r\\n        TransactionSetControlNumber,\\r\\n        MessageTime = EventTime,\\r\\n        MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n        MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n        MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n        MssageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n        MessageDirection = Direction,\\r\\n        IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected\\r\\n        | extend MessageStatus = \\\"Failed\\\")\\r\\n    | where MessageDirection == \\\"Send\\\"\\r\\n     | summarize count() by MessageStatus;\\r\\nlet NameColumn = datatable(MessageStatus:string)[\\\"Successful\\\", \\\"Pending\\\", \\\"Failed\\\"];\\r\\nNameColumn\\r\\n| lookup queryResult on MessageStatus \\r\\n| extend SENT = MessageStatus, TOTAL = coalesce(['count_'], 0)\\r\\n| project SENT, TOTAL\\r\\n| order by SENT\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 1,
                    "queryType": 9,
                    "sortBy": []
                  },
                  "name": "X12SentMessages",
                  "styleSettings": {
                    "margin": "2pm",
                    "padding": "0pm",
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"let queryResult = (EdiTrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"X12TransactionSet\\\"\\r\\n| where isnotempty(TransactionSetControlNumber)\\r\\n| where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n| project \\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    InterchangeControlNumber,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    MessageDirection = Direction,\\r\\n    IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected,\\r\\n    TransactionSetStatus = iff (IsMessageFailed == \\\"false\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSetAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber = RespondingTransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    TransactionSetAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    TransactionSetAckTime = EventTime,\\r\\n    TransactionSetAckClientTrackingId = ClientRequestId,\\r\\n    TransactionSetAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    TransactionSetAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    TransactionSetAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    TransactionSetAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    TransactionSetAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend TransactionSetAckStatus = iff(isnotempty( TransactionSetAckStatusCode), iff(TransactionSetAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, TransactionSetControlNumber, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode,\\r\\n    TransactionSetAckStatus,\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckClientTrackingId,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckLogicAppName\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12FunctionalGroupAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    FunctionalAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime = EventTime,\\r\\n    FunctionalAckClientTrackingId = ClientRequestId,\\r\\n    FunctionalAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    FunctionalAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    FunctionalAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    FunctionalAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    FunctionalAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend FunctionalAckStatus = iff(isnotempty( FunctionalAckStatusCode), iff(FunctionalAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    TransactionSetAckStatus, // Successful, Failed or empty\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckLogicAppName,\\r\\n    FunctionalAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    FunctionalAckStatus, // Successful, Failed or empty\\r\\n    FunctionalAckDirection ,   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime,\\r\\n    FunctionalAckClientTrackingId,\\r\\n    FunctionalAckSubscriptionId,\\r\\n    FunctionalAckResourceGroup,\\r\\n    FunctionalAckActionName,\\r\\n    FunctionalAckLogicAppName,\\r\\n    AckActionName = iff(isnotempty( TransactionSetAckActionName), TransactionSetAckActionName, FunctionalAckActionName),\\r\\n    AckLogicAppName = iff(isnotempty( TransactionSetAckLogicAppName), TransactionSetAckLogicAppName, FunctionalAckLogicAppName),\\r\\n    AckDirection = iff(isnotempty(TransactionSetAckDirection), TransactionSetAckDirection, FunctionalAckDirection),\\r\\n    AckTime = iff(isnotempty(TransactionSetAckTime), TransactionSetAckTime, FunctionalAckTime)\\r\\n    | extend  IsAckValid = AckTime > MessageTime\\r\\n    | extend MessageStatus = iff(TransactionSetStatus == \\\"Successful\\\" and IsFunctionalAckExpected and MessageDirection == \\\"Send\\\" ,\\r\\n        iff(isnotempty(TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatus, iff(isnotempty(FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatus, \\\"Pending\\\")),\\r\\n        TransactionSetStatus)\\r\\n    | extend AckStatus = iff(IsFunctionalAckExpected == true and MessageDirection == \\\"Send\\\"  , iff(isnotempty( TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatusCode,\\r\\n        iff (isnotempty( FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatusCode, \\\"Pending\\\")), \\\"NotRequired\\\"))\\r\\n| union \\r\\n    (EdiTrackRecords\\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSet\\\"\\r\\n    | where isempty(TransactionSetControlNumber)\\r\\n    | where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n    |project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageClientTrackingId = ClientRequestId,\\r\\n        InterchangeControlNumber,\\r\\n        FunctionalGroupControlNumber,\\r\\n        TransactionSetControlNumber,\\r\\n        MessageTime = EventTime,\\r\\n        MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n        MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n        MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n        MssageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n        MessageDirection = Direction,\\r\\n        IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected\\r\\n        | extend MessageStatus = \\\"Failed\\\")\\r\\n    | where MessageDirection == \\\"Receive\\\"\\r\\n    | summarize count() by MessageStatus;\\r\\nlet NameColumn = datatable(MessageStatus:string)[\\\"Successful\\\", \\\"Pending\\\", \\\"Failed\\\"];\\r\\nNameColumn\\r\\n| lookup queryResult on MessageStatus \\r\\n| extend RECEIVED = MessageStatus, TOTAL = coalesce(['count_'], 0)\\r\\n| project RECEIVED, TOTAL\\r\\n| order by RECEIVED\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
                    "size": 1,
                    "queryType": 9
                  },
                  "name": "X12ReceiveMessages",
                  "styleSettings": {
                    "margin": "2px",
                    "padding": "0px",
                    "showBorder": true
                  }
                }
              ]
            },
            "customWidth": "33",
            "name": "X12Group",
            "styleSettings": {
              "margin": "2px",
              "showBorder": true
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "setTab",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "name": "OverViewGroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "fea25f71-5417-491c-ad5b-9c291b1e09de",
                  "version": "KqlParameterItem/1.0",
                  "name": "AS2MessageStatus",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"All\", \"label\":\"All\", \"selected\":true },\r\n    { \"value\":\"Successful\", \"label\":\"Successful\" },\r\n    { \"value\":\"Failed\", \"label\":\"Failed\" },\r\n    { \"value\":\"Pending\", \"label\":\"Pending\" }\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "label": "Message Status"
                },
                {
                  "id": "10f09616-dddf-41b0-8bdf-5d2676911c69",
                  "version": "KqlParameterItem/1.0",
                  "name": "AS2AcknowledgementStatus",
                  "label": "Acknowledgement Status",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"All\", \"label\":\"All\", \"selected\":true },\r\n    { \"value\":\"Successful\", \"label\":\"Successful\" },\r\n    { \"value\":\"Failed\", \"label\":\"Failed\" },\r\n    { \"value\":\"Pending\", \"label\":\"Pending\" },\r\n    { \"value\":\"NotRequired\", \"label\":\"NotRequired\" }\r\n]"
                },
                {
                  "id": "a651c8f1-747f-4118-b865-217adcd36c3e",
                  "version": "KqlParameterItem/1.0",
                  "name": "AS2MessageDirection",
                  "label": "Message Direction",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"All\", \"label\":\"All\", \"selected\":true },\r\n    { \"value\":\"Send\", \"label\":\"Send\" },\r\n    { \"value\":\"Receive\", \"label\":\"Receive\" }\r\n]"
                },
                {
                  "id": "08089123-112d-49f9-8af6-debce0012fb2",
                  "version": "KqlParameterItem/1.0",
                  "name": "AS2SenderPartnerName",
                  "label": "Sender Partner Name",
                  "type": 1,
                  "typeSettings": {
                    "isSearchBox": true
                  }
                },
                {
                  "id": "0c8559bf-eb83-4b4e-952b-5e03beaf510e",
                  "version": "KqlParameterItem/1.0",
                  "name": "AS2ReceiverPartnerName",
                  "label": "Receiver Partner Name",
                  "type": 1,
                  "typeSettings": {
                    "isSearchBox": true
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "setTab",
              "comparison": "isEqualTo",
              "value": "AS2"
            },
            "name": "AS2MessageFilteringParameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"(AS2TrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"AS2Message\\\"\\r\\n| where isnotempty(CorrelationMessageId)\\r\\n| project \\r\\n    AgreementName,\\r\\n    MessageId,\\r\\n    CorrelationMessageId,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName, \\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    AS2MessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n    MessageDirection = Direction,\\r\\n    IsMdnExpected,\\r\\n    DirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n| join  kind=leftouter (\\r\\n\\tAS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2MDN\\\"\\r\\n\\t| project \\r\\n\\t\\tMdnStatusCode = MessageProperties.StatusCode,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tAckDirection = Direction, \\r\\n\\t\\tAckTime = EventTime,\\r\\n\\t\\tAckClientTrackingId = ClientRequestId,\\r\\n\\t\\tAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Send\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")\\r\\n\\t| extend MdnStatus = iff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n) on CorrelationMessageId, DirectionBasedCorrelationId\\r\\n| extend  IsAckValid = AckTime > MessageTime\\r\\n| extend\\r\\n    MessageStatus = iff(AS2MessageStatus == \\\"Successful\\\" and IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid, \\r\\n\\t\\t\\tMdnStatus, \\r\\n\\t\\t\\t\\\"Pending\\\"), \\r\\n\\t\\tAS2MessageStatus), \\r\\n    AckStatus = iff(IsMdnExpected,\\r\\n\\t\\tiff(isnotempty(MdnStatusCode) and IsAckValid,  \\r\\n\\t\\t\\tiff (MdnStatusCode ==\\\"1\\\", \\\"Successful\\\", \\\"Failed\\\"), \\\"Pending\\\"),                      \\r\\n\\t\\t\\\"NotRequired\\\")\\r\\n)\\r\\n| union \\r\\n\\t(AS2TrackRecords\\r\\n\\t| where EventTime {TimeRange}\\r\\n\\t| where RecordType == \\\"AS2Message\\\"\\r\\n\\t| where isempty(CorrelationMessageId)\\r\\n\\t| project \\r\\n\\t\\tAgreementName,\\r\\n\\t\\tSenderPartnerName,\\r\\n\\t\\tReceiverPartnerName,\\r\\n\\t\\tMessageTime = EventTime,\\r\\n\\t\\tMessageStatus = iff (IsMessageFailed, \\\"Failed\\\", \\\"Successful\\\"),  \\r\\n\\t\\tMessageId,\\r\\n\\t\\tCorrelationMessageId, \\r\\n\\t\\tMessageClientTrackingId = ClientRequestId,\\r\\n\\t\\tMessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n\\t\\tMessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n\\t\\tMessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n\\t\\tMessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n\\t\\tMessageDirection = Direction,\\r\\n\\t\\tIsMdnExpected,\\r\\n\\t\\tDirectionBasedCorrelationId = iff (Direction == \\\"Receive\\\", strcat_delim(\\\"/\\\", WorkflowRunOperationInfo.RunInstance.OperationName, WorkflowRunOperationInfo.Workflow.Name, IntegrationAccountResourceGroup, IntegrationAccountSubscriptionId), \\\"\\\")   )\\r\\n    |  where '{AS2MessageStatus}' == \\\"All\\\" or MessageStatus == '{AS2MessageStatus}'\\r\\n\\t|  where '{AS2AcknowledgementStatus}' == \\\"All\\\" or AckStatus == '{AS2AcknowledgementStatus}'\\r\\n\\t|  where '{AS2MessageDirection}' == \\\"All\\\" or MessageDirection == '{AS2MessageDirection}'\\r\\n\\t|  where  isempty('{AS2SenderPartnerName}') or SenderPartnerName contains '{AS2SenderPartnerName}'\\r\\n\\t|  where  isempty('{AS2ReceiverPartnerName}') or ReceiverPartnerName contains '{AS2ReceiverPartnerName}'\\r\\n    | project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageStatus,\\r\\n        MessageDirection,\\r\\n        MessageTime,\\r\\n        MessageClientTrackingId,\\r\\n        MessageId,\\r\\n        IsMdnExpected,\\r\\n        AckStatus,\\r\\n        CorrelationMessageId\\r\\n    | order by MessageTime desc\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "AS2 Messages",
              "queryType": 9,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "MessageStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Successful",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Failed",
                          "representation": "failed",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "IsMdnExpected",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "AckStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Successful",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Failed",
                          "representation": "failed",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Pending",
                          "representation": "pending",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "is Empty",
                          "thresholdValue": "",
                          "representation": "Blank",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ],
                "rowLimit": 1000,
                "filter": true
              }
            },
            "conditionalVisibility": {
              "parameterName": "setTab",
              "comparison": "isEqualTo",
              "value": "AS2"
            },
            "name": "AS2Messages "
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "setTab",
        "comparison": "isEqualTo",
        "value": "AS2"
      },
      "name": "AS2Details"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "fea25f71-5417-491c-ad5b-9c291b1e09de",
                  "version": "KqlParameterItem/1.0",
                  "name": "X12MessageStatus",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"All\", \"label\":\"All\", \"selected\":true },\r\n    { \"value\":\"Successful\", \"label\":\"Successful\" },\r\n    { \"value\":\"Failed\", \"label\":\"Failed\" },\r\n    { \"value\":\"Pending\", \"label\":\"Pending\" }\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "label": "Message Status"
                },
                {
                  "id": "10f09616-dddf-41b0-8bdf-5d2676911c69",
                  "version": "KqlParameterItem/1.0",
                  "name": "X12AcknowledgementStatus",
                  "label": "Acknowledgement Status",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"All\", \"label\":\"All\", \"selected\":true },\r\n    { \"value\":\"Accepted\", \"label\":\"Accepted\" },\r\n    { \"value\":\"Rejected\", \"label\":\"Rejected\" },\r\n    { \"value\":\"AcceptedWithError\", \"label\":\"AcceptedWithError\" },\r\n    { \"value\":\"Pending\", \"label\":\"Pending\" },\r\n    { \"value\":\"NotRequired\", \"label\":\"NotRequired\" }\r\n]"
                },
                {
                  "id": "a651c8f1-747f-4118-b865-217adcd36c3e",
                  "version": "KqlParameterItem/1.0",
                  "name": "X12MessageDirection",
                  "label": "Message Direction",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"All\", \"label\":\"All\", \"selected\":true },\r\n    { \"value\":\"Send\", \"label\":\"Send\" },\r\n    { \"value\":\"Receive\", \"label\":\"Receive\" }\r\n]"
                },
                {
                  "id": "08089123-112d-49f9-8af6-debce0012fb2",
                  "version": "KqlParameterItem/1.0",
                  "name": "X12SenderPartnerName",
                  "label": "Sender Partner Name",
                  "type": 1,
                  "typeSettings": {
                    "isSearchBox": true
                  }
                },
                {
                  "id": "0c8559bf-eb83-4b4e-952b-5e03beaf510e",
                  "version": "KqlParameterItem/1.0",
                  "name": "X12ReceiverPartnerName",
                  "label": "Receiver Partner Name",
                  "type": 1,
                  "typeSettings": {
                    "isSearchBox": true
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "setTab",
              "comparison": "isEqualTo",
              "value": "X12"
            },
            "name": "X12MessageDetailsParameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"AzureDataExplorerQuery/1.0\",\"queryText\":\"(EdiTrackRecords\\r\\n| where EventTime {TimeRange}\\r\\n| where RecordType == \\\"X12TransactionSet\\\"\\r\\n| where isnotempty(TransactionSetControlNumber)\\r\\n| where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n| project \\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    InterchangeControlNumber,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageTime = EventTime,\\r\\n    MessageClientTrackingId = ClientRequestId,\\r\\n    MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    MessageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    MessageDirection = Direction,\\r\\n    IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected,\\r\\n    TransactionSetStatus = iff (IsMessageFailed == \\\"false\\\", \\\"Successful\\\", \\\"Failed\\\")\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSetAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    TransactionSetControlNumber = RespondingTransactionSetControlNumber,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    TransactionSetAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    TransactionSetAckTime = EventTime,\\r\\n    TransactionSetAckClientTrackingId = ClientRequestId,\\r\\n    TransactionSetAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    TransactionSetAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    TransactionSetAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    TransactionSetAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    TransactionSetAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend TransactionSetAckStatus = iff(isnotempty( TransactionSetAckStatusCode), iff(TransactionSetAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, TransactionSetControlNumber, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode,\\r\\n    TransactionSetAckStatus,\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckClientTrackingId,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckLogicAppName\\r\\n| join kind = leftouter  (\\r\\n    EdiTrackRecords \\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12FunctionalGroupAcknowledgment\\\"\\r\\n    | where MessageProperties.ProcessingStatus != \\\"2\\\" // 1 - received, 2 generated, 3 sent\\r\\n    | project\\r\\n    AgreementName,\\r\\n    FunctionalGroupControlNumber = RespondingFunctionalGroupControlNumber,\\r\\n    FunctionalAckDirection = iff(MessageProperties.Direction == 0, \\\"Send\\\", \\\"Receive\\\"),   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime = EventTime,\\r\\n    FunctionalAckClientTrackingId = ClientRequestId,\\r\\n    FunctionalAckSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n    FunctionalAckResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n    FunctionalAckActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n    FunctionalAckLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n    FunctionalAckStatusCode = iff(MessageProperties.StatusCode == \\\"1\\\", \\\"Accepted\\\", iff(MessageProperties.StatusCode == \\\"2\\\", \\\"AcceptedWithError\\\", \\\"Rejected\\\")) // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    | extend FunctionalAckStatus = iff(isnotempty( FunctionalAckStatusCode), iff(FunctionalAckStatusCode == \\\"Accepted\\\", \\\"Successful\\\",\\\"Failed\\\"), \\\"\\\")\\r\\n) on AgreementName, FunctionalGroupControlNumber\\r\\n| project \\r\\n    AgreementName,\\r\\n    SenderPartnerName,\\r\\n    ReceiverPartnerName,\\r\\n    MessageClientTrackingId,\\r\\n    InterchangeControlNumber,\\r\\n    FunctionalGroupControlNumber,\\r\\n    TransactionSetControlNumber,\\r\\n    TransactionSetStatus,\\r\\n    MessageTime,\\r\\n    MessageDirection,\\r\\n    MessageSubscriptionId,\\r\\n    MessageResourceGroup,\\r\\n    MessageActionName,\\r\\n    MessageLogicAppName,\\r\\n    IsFunctionalAckExpected,\\r\\n    TransactionSetAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    TransactionSetAckStatus, // Successful, Failed or empty\\r\\n    TransactionSetAckDirection,\\r\\n    TransactionSetAckTime,\\r\\n    TransactionSetAckActionName,\\r\\n    TransactionSetAckSubscriptionId,\\r\\n    TransactionSetAckResourceGroup,\\r\\n    TransactionSetAckLogicAppName,\\r\\n    FunctionalAckStatusCode, // 1 Accepted, 2 AcceptedWithError, 3 Rejected\\r\\n    FunctionalAckStatus, // Successful, Failed or empty\\r\\n    FunctionalAckDirection ,   // 0 Send, 1 Receive \\r\\n    FunctionalAckTime,\\r\\n    FunctionalAckClientTrackingId,\\r\\n    FunctionalAckSubscriptionId,\\r\\n    FunctionalAckResourceGroup,\\r\\n    FunctionalAckActionName,\\r\\n    FunctionalAckLogicAppName,\\r\\n    AckActionName = iff(isnotempty( TransactionSetAckActionName), TransactionSetAckActionName, FunctionalAckActionName),\\r\\n    AckLogicAppName = iff(isnotempty( TransactionSetAckLogicAppName), TransactionSetAckLogicAppName, FunctionalAckLogicAppName),\\r\\n    AckDirection = iff(isnotempty(TransactionSetAckDirection), TransactionSetAckDirection, FunctionalAckDirection),\\r\\n    AckTime = iff(isnotempty(TransactionSetAckTime), TransactionSetAckTime, FunctionalAckTime)\\r\\n    | extend  IsAckValid = AckTime > MessageTime\\r\\n    | extend MessageStatus = iff(TransactionSetStatus == \\\"Successful\\\" and IsFunctionalAckExpected and MessageDirection == \\\"Send\\\" ,\\r\\n        iff(isnotempty(TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatus, iff(isnotempty(FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatus, \\\"Pending\\\")),\\r\\n        TransactionSetStatus)\\r\\n    | extend AckStatus = iff(IsFunctionalAckExpected == true and MessageDirection == \\\"Send\\\"  , iff(isnotempty( TransactionSetAckStatusCode) and IsAckValid, TransactionSetAckStatusCode,\\r\\n        iff (isnotempty( FunctionalAckStatusCode) and IsAckValid, FunctionalAckStatusCode, \\\"Pending\\\")), \\\"NotRequired\\\"))\\r\\n| union \\r\\n    (EdiTrackRecords\\r\\n    | where EventTime {TimeRange}\\r\\n    | where RecordType == \\\"X12TransactionSet\\\"\\r\\n    | where isempty(TransactionSetControlNumber)\\r\\n    | where MessageProperties.MessageType !in (\\\"997\\\", \\\"999\\\")\\r\\n    |project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageClientTrackingId = ClientRequestId,\\r\\n        InterchangeControlNumber,\\r\\n        FunctionalGroupControlNumber,\\r\\n        TransactionSetControlNumber,\\r\\n        MessageTime = EventTime,\\r\\n        MessageSubscriptionId = WorkflowRunOperationInfo.Workflow.SubscriptionId,\\r\\n        MessageResourceGroup =  WorkflowRunOperationInfo.Workflow.ResourceGroup,\\r\\n        MessageActionName =  WorkflowRunOperationInfo.Operation.OperationName,\\r\\n        MssageLogicAppName = WorkflowRunOperationInfo.Workflow.Name,\\r\\n        MessageDirection = Direction,\\r\\n        IsFunctionalAckExpected = MessageProperties.IsFunctionalAcknowledgmentExpected\\r\\n        | extend MessageStatus = \\\"Failed\\\")\\r\\n    | where '{X12MessageStatus}' == \\\"All\\\" or MessageStatus == '{X12MessageStatus}'\\r\\n    | where '{X12AcknowledgementStatus}' == \\\"All\\\" or AckStatus == '{X12AcknowledgementStatus}'\\r\\n    | where '{X12MessageDirection}' == \\\"All\\\" or MessageDirection == '{X12MessageDirection}'\\r\\n    | where  isempty('{X12SenderPartnerName}') or SenderPartnerName contains '{X12SenderPartnerName}'\\r\\n    | where  isempty('{X12ReceiverPartnerName}') or ReceiverPartnerName contains '{X12ReceiverPartnerName}'\\r\\n    | project \\r\\n        AgreementName,\\r\\n        SenderPartnerName,\\r\\n        ReceiverPartnerName,\\r\\n        MessageStatus,\\r\\n        MessageDirection,\\r\\n        MessageTime,\\r\\n        MessageClientTrackingId,\\r\\n        InterchangeControlNumber,\\r\\n        FunctionalGroupControlNumber,\\r\\n        TransactionSetStatus,\\r\\n        TransactionSetControlNumber,\\r\\n        IsFunctionalAckExpected,\\r\\n        AckStatus,\\r\\n        TransactionSetAckStatus,\\r\\n        FunctionalAckStatus\\r\\n    | order by MessageTime desc\",\"clusterName\":\"{KustoCluster}\",\"databaseName\":\"{Database}\"}",
              "size": 3,
              "showAnalytics": true,
              "title": "X12 Messages",
              "queryType": 9,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "MessageStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Failed",
                          "representation": "failed",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Pending",
                          "representation": "pending",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Successful",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "TransactionSetStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Successful",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Failed",
                          "representation": "failed",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AckStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "AcceptedWithError",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Accepted",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Rejected",
                          "representation": "3",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Pending",
                          "representation": "pending",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "TransactionSetAckStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Successful",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Failed",
                          "representation": "failed",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "FunctionalAckStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Successful",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Failed",
                          "representation": "failed",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Blank",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ],
                "rowLimit": 1000,
                "filter": true
              }
            },
            "conditionalVisibility": {
              "parameterName": "setTab",
              "comparison": "isEqualTo",
              "value": "X12"
            },
            "name": "X12Messages"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "setTab",
        "comparison": "isEqualTo",
        "value": "X12"
      },
      "name": "X12Details"
    }
  ],
  "styleSettings": {
    "paddingStyle": "none",
    "spacingStyle": "none"
  },
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}