{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "46151196-be97-4c32-a766-06b2499e226e",
            "version": "KqlParameterItem/1.0",
            "name": "invokedFromFleetViewWorkbook",
            "type": 1,
            "isHiddenWhenLocked": true
          },
          {
            "id": "2243e822-b290-4f4a-9e84-762f6c7a1670",
            "version": "KqlParameterItem/1.0",
            "name": "SelectedResource",
            "label": "(Input parameter) The selected IoT resource.",
            "type": 1,
            "query": "{\"version\":\"1.0.0\",\"content\":\"{ \\\"value\\\": \\\"\\\" }\",\"transformers\":null}",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::1",
            "queryType": 8
          },
          {
            "id": "bf9feb4c-2bd3-4491-9c4d-613916efd665",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "label": "Subscriptions",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "showDefault": false
            },
            "defaultValue": "value::all",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "31596d7b-c0a9-448f-b3cc-a3a906cb9d48",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceType",
            "type": 7,
            "isRequired": true,
            "value": "microsoft.devices/iothubs",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\"microsoft.devices/iothubs\"]",
            "defaultValue": "value::1"
          },
          {
            "id": "438c0bdd-ea34-41ee-a5b3-ebe741073dbc",
            "version": "KqlParameterItem/1.0",
            "name": "CurrentWorkbooksResource",
            "type": 5,
            "description": "The current IoT resource from which this workbook was opened.",
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.devices/iothubs": true
              },
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "defaultValue": "value::1",
            "label": "Current IoT resource"
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "conditionalVisibility": {
        "parameterName": "NeverSet",
        "comparison": "isEqualTo",
        "value": "true"
      },
      "name": "hidden-workbook-params",
      "styleSettings": {
        "margin": "0px",
        "padding": "0px"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "ca38c5d3-3cb2-4750-85bb-8ce0204306bb",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 7200000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 7200000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "{ResourceType}"
      },
      "customWidth": "0",
      "name": "time-range-selector",
      "styleSettings": {
        "margin": "0px -28px 0px 0px",
        "maxWidth": "15"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "772b73b4-5f47-4f57-941b-ce38259fa721",
            "version": "KqlParameterItem/1.0",
            "name": "IoTResources",
            "label": "IoT resources",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| where type == '{ResourceType}'\r\n| extend inScope = iif(isempty(\"{SelectedResource}\") or name =~ \"{SelectedResource}\", true, false)\r\n| order by name asc\r\n| extend Rank = row_number()\r\n| where inScope\r\n| project value = id, label = name, selected = id =~ \"{CurrentWorkbooksResource}\" or name =~ \"{SelectedResource}\", group = resourceGroup",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "63aa6750-da91-4e11-af98-50e156843464",
            "version": "KqlParameterItem/1.0",
            "name": "DeviceSelector",
            "label": "Device",
            "type": 2,
            "query": "\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet selectedResource = \"{SelectedResource}\";\nlet devices = () { \nInsightsMetrics\n| where TimeGenerated between (startofday(startTime) .. endTime)\n| where Name == \"edgehub_gettwin_total\" or Name == \"edgeAgent_total_time_running_correctly_seconds\"\n| extend dimensions=parse_json(Tags)\n| extend iotresource = tostring(split(_ResourceId, \"/\")[-1])\n| extend include = iif(isnotempty(selectedResource),\n                        iotresource =~ selectedResource,\n                        iotresource in~ (split(\"{IoTResources:label}\", \", \")))\n| where include\n| extend device = tostring(dimensions.edge_device)\n| distinct include, iotresource, device\n| order by device\n| project value=strcat(iotresource, \"/\", device), label=device, selected=row_number() == 1, group=iotresource\n};\ndevices()\n",
            "crossComponentResources": [
              "{IoTResources}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "{ResourceType}"
          },
          {
            "id": "5798866a-70be-45b5-bb2b-bb1335b01e88",
            "version": "KqlParameterItem/1.0",
            "name": "SelectedDevice",
            "type": 1,
            "query": "let hub_device = split(\"{DeviceSelector}\", \"/\");\r\nlet isValid = array_length(hub_device) == 2;\r\nlet device = iif(isValid, tostring(hub_device[1]), \"\");\r\nprint device;",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "{ResourceType}"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "{ResourceType}"
      },
      "conditionalVisibility": {
        "parameterName": "invokedFromFleetViewWorkbook",
        "comparison": "isNotEqualTo",
        "value": "yes"
      },
      "customWidth": "0",
      "name": "hub-and-device-selection-params",
      "styleSettings": {
        "margin": "0",
        "maxWidth": "60"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"display:flex; align-items: flex-end; flex-wrap: wrap;\">\r\n  <div class=\"msportalfx-text-ellipsis ext-usage-param\"  style=\"align-self:end; cursor: auto;\">\r\n    <span style=\"margin:0px 4px;\">IoT resource: &nbsp; <span style=\"font-weight:600\">{SelectedResource}</span></span>\r\n  </div>\r\n  <div class=\"msportalfx-text-ellipsis ext-usage-param\" style=\"align-self:end; cursor: auto;\">\r\n    <span style=\"margin:0px 4px\">Device: &nbsp; <span style=\"font-weight:600\">{SelectedDevice}</span></span>\r\n  </div>\r\n </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedResource",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "invokedFromFleetViewWorkbook",
          "comparison": "isEqualTo",
          "value": "yes"
        }
      ],
      "customWidth": "0",
      "name": "text - selected device",
      "styleSettings": {
        "margin": "0"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "0075d347-4f2f-4ba9-9fd8-681e581d2c78",
            "version": "KqlParameterItem/1.0",
            "name": "InsightsMetricsExist",
            "label": "Insights Metrics Exist",
            "type": 1,
            "description": "Checks if the InsightsMetrics table exists yet to conditionally inform visibility of other items in the workbook.",
            "query": "let hasMetrics = () \n{ \n   toscalar( union isfuzzy=true ( table('InsightsMetrics') | where TimeGenerated between (({timeRange:start} - 5m) .. ({timeRange:end} + 5m)) | count as Count ), (print Count=0) | summarize sum(Count) ) > 0\n};\nprint IsPresent=iif('{invokedFromFleetViewWorkbook}' == 'yes' or hasMetrics(), \"yes\", \"no\")",
            "crossComponentResources": [
              "{IoTResources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "{ResourceType}"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "{ResourceType}"
      },
      "name": "onboarding instructions"
    },
    {
      "type": 1,
      "content": {
        "json": "# No metrics data from IoT Edge devices detected in the {timeRange:label}\n\n## Please on-board with instructions at **[aka.ms/edgemon-docs](https://aka.ms/edgemon-docs)**\n\n<br>\n💡*If you've just on-boarded,  it can take up to 15 minutes for data to be displayed.*"
      },
      "conditionalVisibility": {
        "parameterName": "InsightsMetricsExist",
        "comparison": "isEqualTo",
        "value": "no"
      },
      "name": "no-metrics-data-message"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "loadType": "always",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "9b874032-306e-446a-bddf-122fe374e0dd",
                  "version": "KqlParameterItem/1.0",
                  "name": "LastUpdated",
                  "type": 1,
                  "query": "InsightsMetrics\n| where TimeGenerated > startofday({timeRange:start})\n| where Name == \"edgehub_gettwin_total\" or Name == \"edgeAgent_total_time_running_correctly_seconds\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| top-nested 1 of lastUpdateTime=TimeGenerated by max(TimeGenerated)\n//| summarize lastUpdateTime = max(TimeGenerated)\n| extend  lastUpdatedSeconds = tolong(datetime_diff('second', now(), lastUpdateTime))\n| extend  lastUpdatedMins = tolong(datetime_diff('minute', now(), lastUpdateTime))\n| extend  lastUpdatedHours = tolong(datetime_diff('hour', now(), lastUpdateTime))\n| extend  lastUpdatedDays = tolong(datetime_diff('day', now(), lastUpdateTime))\n| extend agoText = case(lastUpdatedSeconds <= 60, strcat(lastUpdatedSeconds, iff(lastUpdatedSeconds == 1, \" sec ago\", \" secs ago\")),\n                        lastUpdatedSeconds <= 3600, strcat(lastUpdatedMins, iff(lastUpdatedMins == 1, \" min ago\", \" mins ago\")), \n                        lastUpdatedSeconds <= 86400, strcat(lastUpdatedHours, iff(lastUpdatedHours == 1, \" hr ago\", \" hrs ago\")),\n                        strcat(lastUpdatedDays, iff(lastUpdatedHours == 1, \" day ago\", \" days ago\")))\n| project agoText\n",
                  "crossComponentResources": [
                    "{IoTResources}"
                  ],
                  "isHiddenWhenLocked": true,
                  "queryType": 0,
                  "resourceType": "{ResourceType}"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "{ResourceType}"
            },
            "conditionalVisibility": {
              "parameterName": "NeverSet",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "last-updated-param"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e383454e-d248-40f4-b867-59824dd58eee",
                  "version": "KqlParameterItem/1.0",
                  "name": "resourceId",
                  "type": 5,
                  "query": "let labels = split(\"{IoTResources:label}\", \", \");\r\nlet values = split(\"{IoTResources}\", \",\");\r\nlet deviceSelector = \"{DeviceSelector}\";\r\nlet selectedResource = \"{SelectedResource}\";\r\nlet index1 = array_index_of(labels, selectedResource);\r\nlet index2 = iif(index1 < 0, array_index_of(labels, tostring(split(deviceSelector, \"/\")[0])), index1);\r\nlet value = iif(index2 >= 0, \r\n        trim(\"'\", tostring(values[index2])), // then look up resourceId for {SelectedResource}\r\n        trim(\"'\", tostring(values[0]))); // or take the first resource available\r\nlet label = iif(index2 >= 0, labels[index2], labels[0]);\r\nprint Value = value, Label = label, Selected = index2 >= 0;",
                  "isHiddenWhenLocked": true,
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 0
                  },
                  "timeContextFromParameter": "timeRange",
                  "defaultValue": "value::1"
                },
                {
                  "id": "dbd25427-29f1-449e-811b-28ead08755f5",
                  "version": "KqlParameterItem/1.0",
                  "name": "devicePath",
                  "type": 1,
                  "query": "print strcat('/devices/moduleLogs?deviceId=', '{SelectedDevice}','&moduleId=$edgeAgent' ,'&since=' , '{timeRange:startISO}' ,'&until=' , '{timeRange:endISO}')",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 0
                  },
                  "timeContextFromParameter": "timeRange",
                  "queryType": 0,
                  "resourceType": "{ResourceType}"
                },
                {
                  "id": "239028db-6157-4def-a62c-7e142b602d02",
                  "version": "KqlParameterItem/1.0",
                  "name": "title",
                  "type": 1,
                  "query": "print strcat(\"Troubleshoot \", '{SelectedDevice}')",
                  "isHiddenWhenLocked": true,
                  "timeContext": {
                    "durationMs": 0
                  },
                  "timeContextFromParameter": "timeRange",
                  "queryType": 0,
                  "resourceType": "{ResourceType}"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "{ResourceType}"
            },
            "conditionalVisibility": {
              "parameterName": "neverset",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "troubleshoot-device-params"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 11,
                  "content": {
                    "version": "LinkItem/1.0",
                    "style": "tabs",
                    "links": [
                      {
                        "id": "0e8df9f0-363e-43ac-84b1-37d402a95936",
                        "cellValue": "ShowPane",
                        "linkTarget": "parameter",
                        "linkLabel": "✉️ Messaging",
                        "subTarget": "messages",
                        "style": "link"
                      },
                      {
                        "id": "715cf5f8-11f0-49de-82cf-0a2b7c5b9841",
                        "cellValue": "ShowPane",
                        "linkTarget": "parameter",
                        "linkLabel": "📦 Modules",
                        "subTarget": "modules",
                        "style": "link"
                      },
                      {
                        "id": "76f391fa-7d82-4193-bdf1-1616ea803e44",
                        "cellValue": "ShowPane",
                        "linkTarget": "parameter",
                        "linkLabel": "💻 Host",
                        "subTarget": "host",
                        "style": "link"
                      },
                      {
                        "id": "62b7e523-32bc-4549-86cd-bbfcf066bfaf",
                        "cellValue": "ShowPane",
                        "linkTarget": "parameter",
                        "linkLabel": "🔧 Settings",
                        "subTarget": "settings",
                        "style": "link"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "SelectedDevice",
                    "comparison": "isNotEqualTo",
                    "value": "default"
                  },
                  "name": "top-level-tabs",
                  "styleSettings": {
                    "margin": "0px"
                  }
                }
              ],
              "exportParameters": true
            },
            "customWidth": "50",
            "name": "name-plus-top-level-navbar"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "Metrics updated <span style=\"font-weight:600\"> _{LastUpdated}_ </span>"
                  },
                  "customWidth": "0",
                  "name": "last-updated-text",
                  "styleSettings": {
                    "margin": "10px 8px 0px 8px"
                  }
                },
                {
                  "type": 11,
                  "content": {
                    "version": "LinkItem/1.0",
                    "style": "paragraph",
                    "links": [
                      {
                        "id": "b8fe4fba-3961-4b4f-9745-bd99f6088211",
                        "linkTarget": "OpenBlade",
                        "linkLabel": "🔧 Troubleshoot live!",
                        "postText": "",
                        "style": "secondary",
                        "icon": "Tools",
                        "bladeOpenContext": {
                          "bladeName": "DialogFrameBlade",
                          "extensionName": "Microsoft_Azure_IotHub",
                          "bladeParameters": [
                            {
                              "name": "path",
                              "source": "parameter",
                              "value": "devicePath"
                            },
                            {
                              "name": "title",
                              "source": "parameter",
                              "value": "title"
                            },
                            {
                              "name": "resourceId",
                              "source": "parameter",
                              "value": "resourceId"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "customWidth": "0",
                  "conditionalVisibility": {
                    "parameterName": "ResourceType",
                    "comparison": "isNotEqualTo",
                    "value": "microsoft.iotcentral/iotapps"
                  },
                  "name": "troubleshoot-live-link",
                  "styleSettings": {
                    "margin": "8px 8px"
                  }
                }
              ]
            },
            "customWidth": "50",
            "name": "troubleshoot group"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "loadType": "always",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "060313e0-e2a6-4cc1-98fb-70d6cdd8c198",
                        "version": "KqlParameterItem/1.0",
                        "name": "ShowTips",
                        "label": "Show Tips",
                        "type": 10,
                        "isRequired": true,
                        "typeSettings": {
                          "additionalResourceOptions": [],
                          "showDefault": false
                        },
                        "jsonData": "[\r\n    { \"value\" : \"false\", \"label\" : \"No\", \"selected\" : true },\r\n    { \"value\" : \"true\", \"label\" : \"Yes\" }\r\n]"
                      },
                      {
                        "id": "73e69eef-028d-4738-9d9f-f98b25f15352",
                        "version": "KqlParameterItem/1.0",
                        "name": "samplingFrequency",
                        "label": "Metric Sampling Frequency",
                        "type": 1,
                        "isRequired": true,
                        "query": "{\"version\":\"1.0.0\",\"content\":\"[\\\"5m\\\"]\",\"transformers\":null}",
                        "typeSettings": {
                          "paramValidationRules": [
                            {
                              "regExp": "^(\\d+|\\d+\\.\\d+)(d|h|m|s|ms|microsecond|tick|)$",
                              "match": true,
                              "message": "Invalid timespan value.  See KQL's supported timespan formats."
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 0
                        },
                        "queryType": 8
                      }
                    ],
                    "style": "formVertical",
                    "queryType": 8
                  },
                  "customWidth": "25",
                  "name": "settings parameters"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "Queries in this workbook assume metrics were sampled at a 5 minute interval. If you use a different frequency to collect and transport metrics then set it here to adjust the bin size used in queries."
                  },
                  "customWidth": "25",
                  "styleSettings": {
                    "margin": "72px 12px 0px 12px"
                  },
                  "conditionalVisibility": {
                    "parameterName": "ShowTips",
                    "comparison": "isEqualTo",
                    "value": "true"
                  },
                  "name": "text - settings"
                }
              ],
              "exportParameters": true
            },
            "conditionalVisibility": {
              "parameterName": "ShowPane",
              "comparison": "isEqualTo",
              "value": "settings"
            },
            "styleSettings": {
              "margin": "-34px 0px 0px 0px",
              "padding": "0px 12px"
            },
            "name": "settings-view"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 11,
                  "content": {
                    "version": "LinkItem/1.0",
                    "style": "tabs",
                    "links": [
                      {
                        "id": "3de7168f-e5ed-4243-a819-01889d532441",
                        "cellValue": "messaging-view",
                        "linkTarget": "parameter",
                        "linkLabel": "Routing",
                        "subTarget": "routing",
                        "style": "link"
                      },
                      {
                        "id": "9020f302-2c21-4c48-9f22-0b95d75ba6f0",
                        "cellValue": "messaging-view",
                        "linkTarget": "parameter",
                        "linkLabel": "Graph",
                        "subTarget": "graph",
                        "style": "link"
                      },
                      {
                        "id": "6bd3150c-4216-4ac4-a1e7-39e6be0bcea1",
                        "cellValue": "messaging-view",
                        "linkTarget": "parameter",
                        "linkLabel": "Health",
                        "subTarget": "health",
                        "style": "link"
                      }
                    ]
                  },
                  "name": "tabs-messaging"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "1b675403-c608-4ab7-9d6d-df89f9b61163",
                              "version": "KqlParameterItem/1.0",
                              "name": "qlen",
                              "type": 1,
                              "isHiddenWhenLocked": true
                            },
                            {
                              "id": "1919d23e-3f7a-42ba-9bf8-920fe3178c98",
                              "version": "KqlParameterItem/1.0",
                              "name": "msgCount",
                              "type": 1,
                              "isHiddenWhenLocked": true
                            },
                            {
                              "id": "5924ed74-e8e3-4c12-b925-3abe65bc667c",
                              "version": "KqlParameterItem/1.0",
                              "name": "latency",
                              "type": 1,
                              "isHiddenWhenLocked": true
                            },
                            {
                              "id": "b4675984-4a2e-41fc-98fc-fc2e8b64c0bc",
                              "version": "KqlParameterItem/1.0",
                              "name": "id",
                              "type": 1,
                              "isHiddenWhenLocked": true
                            },
                            {
                              "id": "c922e9a0-a516-4bd2-a9e6-e6f84b61263b",
                              "version": "KqlParameterItem/1.0",
                              "name": "pid",
                              "type": 1,
                              "isHiddenWhenLocked": true
                            },
                            {
                              "id": "67ae97ff-8782-47ac-bcff-888a049ba062",
                              "version": "KqlParameterItem/1.0",
                              "name": "ep",
                              "type": 1,
                              "isHiddenWhenLocked": true
                            }
                          ],
                          "style": "pills",
                          "queryType": 0,
                          "resourceType": "{ResourceType}"
                        },
                        "name": "gridParameters"
                      },
                      {
                        "type": 1,
                        "content": {
                          "json": "Use this summary table of EdgeHub metrics to understand overall messaging performance. The results are grouped by receivers (parent).\nSelect a row to drill-in further.\n * _Rx_ == messages EdgeHub received from the sender (and before the route is determined)\n * _Tx_ == messages EdgeHub delivered to the parent receiver\n * _Count_ == total count of messages delivered from all senders."
                        },
                        "styleSettings": {
                          "margin": "0px 12px"
                        },
                        "conditionalVisibility": {
                          "parameterName": "ShowTips",
                          "comparison": "isEqualTo",
                          "value": "true"
                        },
                        "name": "message-details description"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let deviceid = '{SelectedDevice}';\nlet minPeriod = time('{samplingFrequency}');\nlet numPeriods = 24;\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet timeBin_ = (endTime - startTime) / numPeriods;\nlet timeBin = iff(timeBin_ < minPeriod, minPeriod, timeBin_);\nlet delivered = InsightsMetrics\n    | where TimeGenerated between (startTime .. endTime)\n    | where Name == \"edgehub_messages_sent_total\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | extend instance = tostring(dimensions.instance_number)\n    | extend inputroute = tostring(dimensions.to_route_input)\n    | extend outputroute = tostring(dimensions.from_route_output)\n    | where device == deviceid\n    | extend target = strcat(trim_start(@\"[^/]+/\", extractjson(\"$.to\", tostring(dimensions), typeof(string))), iff(inputroute != \"\", strcat(\"::\", inputroute), \"\"))\n    | extend source = iff(tostring(dimensions.from) contains '{SelectedDevice}', strcat(trim_start(@\"[^/]+/\", tostring(dimensions.from)), iff(outputroute != \"\", strcat(\"::\", outputroute), \"\")), tostring(dimensions.from))\n    | extend messages = tolong(Val)\n    | extend timeUtc = TimeGenerated\n    | extend sourceTarget = strcat(source, \"+\", target) \n    | project timeUtc, device, source, target, sourceTarget, messages, instance\n    | order by sourceTarget, timeUtc\n    | serialize\n    | extend nextCount = next(messages, 1)\n    | extend nextSourceTarget= next(sourceTarget, 1)\n    | extend nextInstance= next(instance, 1)\n    | extend diff = iff((messages - nextCount) >= 0 and sourceTarget == nextSourceTarget and instance == nextInstance, messages - nextCount, iff(timeUtc - startTime > 2 * minPeriod, messages, 0))\n    | project timeUtc, device, source, target, sourceTarget, messages, diff;\nlet deliveredByTarget = delivered\n    | summarize msgsDelivered = sum(diff) by target, source, sourceTarget\n    | extend ParentId=target\n    | extend Id=sourceTarget\n    | extend Name= iff(source contains '/', strcat('💻 ', source), strcat('📦 ', source))\n    | project Name, Id, ParentId, target, source, msgsDelivered;\nlet deliveredByParent = deliveredByTarget\n    | union (deliveredByTarget\n        | summarize msgsDelivered=sum(msgsDelivered) by target\n        | extend Id=target\n        | extend Name= iff((Id == \"upstream\"), strcat(' ☁️ ', Id), strcat(' 📩 ', Id))\n        )\n    | project-away target, source\n    | order by msgsDelivered;\nlet latencyByReceiver = InsightsMetrics\n    | where TimeGenerated > startTime and TimeGenerated < endTime\n    | where Name == 'edgehub_message_send_duration_seconds'\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | extend instance = tostring(dimensions.instance_number)\n    | extend inputroute = tostring(dimensions.to_route_input)\n    | extend outputroute = tostring(dimensions.from_route_output)\n    | where device == deviceid\n    | extend target = strcat(trim_start(@\"[^/]+/\", extractjson(\"$.to\", tostring(dimensions), typeof(string))), iff(inputroute != \"\", strcat(\"::\", inputroute), \"\"))\n    | extend source = iff(tostring(dimensions.from) contains '{SelectedDevice}', strcat(trim_start(@\"[^/]+/\", tostring(dimensions.from)), iff(outputroute != \"\", strcat(\"::\", outputroute), \"\")), tostring(dimensions.from))\n    | extend quantile = tostring(dimensions.quantile)\n    | where quantile == '0.9'\n    | where Val != 'NaN'\n    | extend val = todouble(Val)\n    | project TimeGenerated, target, source, val\n    | extend Id=strcat(source, \"+\", target)\n    | summarize P90Latency= round(percentile(val, 90), 6)  by Id;\nlet msgRateByParent = deliveredByParent\n    | join kind=leftouter latencyByReceiver on Id\n    | project-away Id1\n    | extend MsgRate = round(msgsDelivered / ((endTime - startTime) / 1s), 2)\n    | project Endpoint=Name, Id, ParentId, msgsDelivered, MsgRate, P90Latency;\nlet queue_size = InsightsMetrics\n    | where TimeGenerated > startTime and TimeGenerated < endTime\n    | where Name == \"edgehub_queue_length\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | where device == deviceid\n    | extend endpoint = trim_start(@\"[^/]+/\", tostring(dimensions.endpoint))\n    | extend endpoint = replace_string(endpoint, \"/\", \"::\")\n    | extend endpoint = iff((endpoint == \"iothub\"), \"upstream\", endpoint)\n    | extend val = max_of(toreal(Val), toreal(0))\n    | extend val = iif(val > 0x7FFFFFFFFFFFFFFF, toreal(0), val)\n    | project Id=endpoint, val, TimeGenerated\n    | order by Id, TimeGenerated\n    | summarize medianQSize=percentile(val, 95) by Id;\nlet summaryResults = msgRateByParent\n| join kind=leftouter queue_size on Id\n| project-away Id1\n| sort by Endpoint asc, Id asc;\nlet msgsReceivedBySender = InsightsMetrics\n    | where TimeGenerated between (startTime .. endTime)\n    | where Name == \"edgehub_messages_received_total\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | extend instance = tostring(dimensions.instance_number)\n    | extend outputroute = tostring(dimensions.route_output)\n    | extend source = iff(tostring(dimensions.id) contains '{SelectedDevice}', strcat(trim_start(@\"[^/]+/\", tostring(dimensions.id)), iff(outputroute != \"\", strcat(\"::\", outputroute), \"\")), tostring(dimensions.id))\n    | extend messages = tolong(Val)\n    | extend timeUtc = TimeGenerated\n    | project timeUtc, device, source, messages, instance\n    | order by source, timeUtc\n    | serialize\n    | extend nextCount = next(messages, 1)\n    | extend nextSource= next(source, 1)\n    | extend nextInstance= next(instance, 1)\n    | extend diff = iff((messages - nextCount) >= 0 and source == nextSource and instance == nextInstance, messages - nextCount, iff(timeUtc - startTime > 2 * minPeriod, messages, 0))\n    | project timeUtc, device, source, messages, diff\n    | summarize msgsReceived = sum(diff) by source\n    | extend Name = iff(source contains '/', strcat('💻 ', source), strcat('📦 ', source))\n    | project Name, source, msgsReceived;\nsummaryResults\n| join kind=leftouter msgsReceivedBySender on $left.Endpoint == $right.Name\n| project-away Name, source\n// don't show a message rate for receivers (no ParentId)\n| extend MsgRate = iif(isempty(ParentId), toreal(\"\"), MsgRate)\n// also for receivers the msgsDelivered is the sum of what was sent from children so use it as the messageCount and show blanks for the senders\n| extend messageCount = iif(isempty(ParentId), msgsDelivered, tolong(\"\"))\n// and then show blank for the msgsDelivered so its only given on senders\n| extend msgsDelivered = iif(isempty(ParentId), tolong(\"\"), msgsDelivered)\n| project Endpoint, Id, ParentId, messageCount, medianQSize, msgsReceived, msgsDelivered, MsgRate, P90Latency\n| sort by Endpoint asc, Id;\n",
                          "size": 0,
                          "noDataMessage": "No messages were routed",
                          "exportedParameters": [
                            {
                              "fieldName": "medianQSize",
                              "parameterName": "qlen",
                              "parameterType": 1,
                              "defaultValue": "<n/a>"
                            },
                            {
                              "fieldName": "messageCount",
                              "parameterName": "msgCount",
                              "parameterType": 1
                            },
                            {
                              "fieldName": "P90Latency",
                              "parameterName": "latency",
                              "parameterType": 1,
                              "defaultValue": ""
                            },
                            {
                              "fieldName": "Id",
                              "parameterName": "id",
                              "parameterType": 1,
                              "defaultValue": "<default>"
                            },
                            {
                              "fieldName": "ParentId",
                              "parameterName": "pid",
                              "parameterType": 1,
                              "defaultValue": "<NotSet>"
                            },
                            {
                              "fieldName": "Endpoint",
                              "parameterName": "ep",
                              "parameterType": 1
                            }
                          ],
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Id",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "ParentId",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "medianQSize",
                                "formatter": 8,
                                "formatOptions": {
                                  "min": 0,
                                  "palette": "greenRed",
                                  "customColumnWidthSetting": "11ch"
                                },
                                "tooltipFormat": {
                                  "tooltip": "Queue length (90th percentile): {0}"
                                }
                              },
                              {
                                "columnMatch": "messageCount",
                                "formatter": 4,
                                "formatOptions": {
                                  "palette": "blue",
                                  "customColumnWidthSetting": "14ch"
                                },
                                "numberFormat": {
                                  "unit": 17,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": true
                                  }
                                },
                                "tooltipFormat": {
                                  "tooltip": "Sum of messages delivered: {0}"
                                }
                              },
                              {
                                "columnMatch": "msgsReceived",
                                "formatter": 0,
                                "numberFormat": {
                                  "unit": 17,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": true,
                                    "minimumFractionDigits": 1
                                  }
                                },
                                "tooltipFormat": {
                                  "tooltip": "{0} messages received by EdgeHub"
                                }
                              },
                              {
                                "columnMatch": "msgsDelivered",
                                "formatter": 0,
                                "numberFormat": {
                                  "unit": 17,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": true,
                                    "minimumFractionDigits": 1
                                  }
                                },
                                "tooltipFormat": {
                                  "tooltip": "{0} messages delivered via EdgeHub"
                                }
                              },
                              {
                                "columnMatch": "MsgRate",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "10ch"
                                },
                                "numberFormat": {
                                  "unit": 31,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "minimumFractionDigits": 1,
                                    "maximumFractionDigits": 1
                                  }
                                },
                                "tooltipFormat": {
                                  "tooltip": "Message rate of {0}"
                                }
                              },
                              {
                                "columnMatch": "P90Latency",
                                "formatter": 8,
                                "formatOptions": {
                                  "min": 0,
                                  "palette": "yellow",
                                  "customColumnWidthSetting": "13ch"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "useGrouping": false,
                                    "minimumFractionDigits": 1,
                                    "maximumFractionDigits": 1
                                  }
                                },
                                "tooltipFormat": {
                                  "tooltip": "Latency (90th percentile): {0}"
                                }
                              }
                            ],
                            "rowLimit": 150,
                            "hierarchySettings": {
                              "idColumn": "Id",
                              "parentColumn": "ParentId",
                              "treeType": 0,
                              "expanderColumn": "Endpoint",
                              "expandTopLevel": true
                            },
                            "labelSettings": [
                              {
                                "columnId": "msgsReceived",
                                "label": "Rx"
                              },
                              {
                                "columnId": "msgsDelivered",
                                "label": "Tx"
                              },
                              {
                                "columnId": "MsgRate",
                                "label": "Rate"
                              },
                              {
                                "columnId": "P90Latency",
                                "label": "Latency (p90)"
                              },
                              {
                                "columnId": "medianQSize",
                                "label": "QLen (p90)",
                                "comment": "Median queue length"
                              },
                              {
                                "columnId": "messageCount",
                                "label": "Count"
                              }
                            ]
                          },
                          "sortBy": []
                        },
                        "name": "message-details",
                        "styleSettings": {
                          "margin": "-40px 0px 0px 0px"
                        }
                      }
                    ],
                    "exportParameters": true
                  },
                  "customWidth": "50",
                  "conditionalVisibilities": [
                    {
                      "parameterName": "SelectedDevice",
                      "comparison": "isNotEqualTo",
                      "value": "default"
                    },
                    {
                      "parameterName": "ShowPane",
                      "comparison": "isEqualTo",
                      "value": "messages"
                    },
                    {
                      "parameterName": "messaging-view",
                      "comparison": "isEqualTo",
                      "value": "routing"
                    }
                  ],
                  "name": "message-details-left-pane",
                  "styleSettings": {
                    "margin": "-20px 0px 0px 0px"
                  }
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "a41bee60-0b7c-4160-aae9-197fd24fce7d",
                              "version": "KqlParameterItem/1.0",
                              "name": "qlen",
                              "type": 1,
                              "isHiddenWhenLocked": true,
                              "criteriaData": [
                                {
                                  "criteriaContext": {
                                    "operator": "Default",
                                    "rightValType": "param",
                                    "resultValType": "param",
                                    "resultVal": "qlen"
                                  }
                                }
                              ]
                            },
                            {
                              "id": "cce1ff6b-c91a-45d1-acb6-961faf781197",
                              "version": "KqlParameterItem/1.0",
                              "name": "msgCount",
                              "type": 1,
                              "isHiddenWhenLocked": true,
                              "criteriaData": [
                                {
                                  "criteriaContext": {
                                    "operator": "Default",
                                    "rightValType": "param",
                                    "resultValType": "param",
                                    "resultVal": "msgCount"
                                  }
                                }
                              ]
                            },
                            {
                              "id": "d3ddfc9e-e6a3-42a5-8b0a-9b6d729cbced",
                              "version": "KqlParameterItem/1.0",
                              "name": "latency",
                              "type": 1,
                              "isHiddenWhenLocked": true,
                              "criteriaData": [
                                {
                                  "criteriaContext": {
                                    "operator": "Default",
                                    "rightValType": "param",
                                    "resultValType": "param",
                                    "resultVal": "latency"
                                  }
                                }
                              ]
                            },
                            {
                              "id": "bd4f7b00-3a3b-433e-88fe-bdd8fcc0ad82",
                              "version": "KqlParameterItem/1.0",
                              "name": "id",
                              "type": 1,
                              "isHiddenWhenLocked": true,
                              "criteriaData": [
                                {
                                  "criteriaContext": {
                                    "operator": "Default",
                                    "rightValType": "param",
                                    "resultValType": "param",
                                    "resultVal": "id"
                                  }
                                }
                              ]
                            },
                            {
                              "id": "79b3b02a-9908-4c16-af3b-7b695864e7e4",
                              "version": "KqlParameterItem/1.0",
                              "name": "pid",
                              "type": 1,
                              "isHiddenWhenLocked": true,
                              "criteriaData": [
                                {
                                  "criteriaContext": {
                                    "operator": "Default",
                                    "rightValType": "param",
                                    "resultValType": "param",
                                    "resultVal": "pid"
                                  }
                                }
                              ]
                            },
                            {
                              "id": "c11ca709-4c83-456a-844d-5aeaa5d375b9",
                              "version": "KqlParameterItem/1.0",
                              "name": "ep",
                              "type": 1,
                              "isHiddenWhenLocked": true,
                              "criteriaData": [
                                {
                                  "criteriaContext": {
                                    "operator": "Default",
                                    "rightValType": "param",
                                    "resultValType": "param",
                                    "resultVal": "ep"
                                  }
                                }
                              ]
                            }
                          ],
                          "style": "pills",
                          "queryType": 0,
                          "resourceType": "{ResourceType}"
                        },
                        "name": "capturedGridParameters"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 1,
                              "content": {
                                "json": "Use the _Queue length trend_ to identify when message flow be impeded. Use the _Messages delivered_ to visualize the trend of messages successfully delivered to the receiver.\n\nDrill into individual senders to spot if the messages received is exceeding what is successfully sent."
                              },
                              "styleSettings": {
                                "margin": "0px 0px 10px 0px"
                              },
                              "conditionalVisibilities": [
                                {
                                  "parameterName": "ShowTips",
                                  "comparison": "isEqualTo",
                                  "value": "true"
                                },
                                {
                                  "parameterName": "qlen",
                                  "comparison": "isNotEqualTo"
                                }
                              ],
                              "name": "text - receiver messaging trends"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet endp0 = iff('{pid}' != \"\", '{pid}', '{id}');\nlet endp = iff(endp0 contains \"::\", replace_string(endp0, \"::\", \"/\"), endp0);\nInsightsMetrics\n| where TimeGenerated between ((startTime - minPeriod * 2) .. endTime)\n    and Name == \"edgehub_queue_length\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend ep = tostring(dimensions.endpoint)\n| where ep contains iff((endp == 'upstream'), \"iothub\", endp)\n| project TimeGenerated, Val = iif(Val > 0x7FFFFFFFFFFFFFFF, toreal(0), Val)\n| make-series Qlen=max(Val) default=0 on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod",
                                "size": 1,
                                "aggregation": 2,
                                "title": "Queue length trend for {ep}",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "areachart",
                                "chartSettings": {
                                  "xAxis": "TimeGenerated",
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "Val",
                                      "label": "Queue size"
                                    }
                                  ]
                                }
                              },
                              "conditionalVisibility": {
                                "parameterName": "qlen",
                                "comparison": "isNotEqualTo"
                              },
                              "name": "query - queue length trend"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet endp = iff('{pid}' != \"\", '{pid}', '{id}');\nlet endpSplit = split(endp, '::');\nInsightsMetrics\n| where TimeGenerated between ((startTime - minPeriod * 2) .. endTime)\n| where Name == \"edgehub_messages_sent_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend target = tostring(extractjson(\"$.to\",Tags,typeof(string)))\n| extend routeInput = (dimensions.to_route_input)\n| where device == '{SelectedDevice}'\n| where target contains endpSplit[0]\n| where routeInput contains endpSplit[1]\n| extend source = iff(isempty(tostring(dimensions.from_route_output)),\n                        tostring(dimensions.from),\n                        strcat(trim_start(@\"[^/]+/\", tostring(dimensions.from)), \"::\", tostring(dimensions.from_route_output)))\n| extend messages = toint(Val)\n| order by source, TimeGenerated\n| serialize | extend nextCount = next(messages, 1) | extend nextSource = next(source, 1)\n| extend diff = iff((messages - nextCount) >= 0 and source == nextSource, messages - nextCount, iff(TimeGenerated - startTime > 2*minPeriod, messages, 0))\n| project source, TimeGenerated, messages=diff\n| make-series Count=sum(messages) default=0 on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod by source\n\n",
                                "size": 1,
                                "title": "Messages delivered to {ep}",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "areachart",
                                "chartSettings": {
                                  "xAxis": "TimeGenerated",
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "messages",
                                      "label": "Messages sent"
                                    }
                                  ]
                                }
                              },
                              "conditionalVisibilities": [
                                {
                                  "parameterName": "latency",
                                  "comparison": "isEqualTo"
                                },
                                {
                                  "parameterName": "id",
                                  "comparison": "isNotEqualTo"
                                }
                              ],
                              "name": "query - messages delivered to endpoint"
                            },
                            {
                              "type": 1,
                              "content": {
                                "json": "Use the graphs below to understand when bottlenecks occurred. Note that in _Messages from_ \"received\" messages are counted before the destination endpoint is determined. A module that sends to multiple receivers can exhibit a \"received\" count that is greater than \"delivered\". Delivered messages are only counted for the known receiver."
                              },
                              "conditionalVisibilities": [
                                {
                                  "parameterName": "ShowTips",
                                  "comparison": "isEqualTo",
                                  "value": "true"
                                },
                                {
                                  "parameterName": "qlen",
                                  "comparison": "isEqualTo"
                                },
                                {
                                  "parameterName": "id",
                                  "comparison": "isNotEqualTo"
                                }
                              ],
                              "styleSettings": {
                                "margin": "0px 0px 10px 0px"
                              },
                              "name": "text - sender messaging trends"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet endp = iff('{pid}' != \"\", '{pid}', '{id}');\nlet x = trim_end(@\"[^+]+\", '{id}');\nlet moduleid = substring(x,0, strlen(x)-1);\nlet targetSplit = split(endp, '::');\nlet sourceSplit = split(moduleid, '::');\nInsightsMetrics\n| where Name == 'edgehub_message_send_duration_seconds'\n| where TimeGenerated between (({timeRange:start} - minPeriod * 2) .. {timeRange:end})\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend quantile = tostring(dimensions.quantile)\n| where quantile == '0.9'\n| extend target = trim_start(@\"[^/]+/\", extractjson(\"$.to\", tostring(dimensions), typeof(string)))\n| extend targetInput = tostring(dimensions.to_route_input)\n| where target == tostring(targetSplit[0])\n| where targetInput == tostring(targetSplit[1])\n| extend source = iff(tostring(dimensions.from) contains '{SelectedDevice}', trim_start(@\"[^/]+/\", tostring(dimensions.from)), tostring(dimensions.from))\n| extend sourceOutput = tostring(dimensions.from_route_output)\n| where source == tostring(sourceSplit[0])\n| where sourceOutput == tostring(sourceSplit[1])\n| where Val != 'NaN'\n| extend val = todouble(Val)\n| project TimeGenerated, val\n| make-series Count=max(val) default=0 on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod\n",
                                "size": 1,
                                "aggregation": 3,
                                "title": "Message send latency from {ep} to {pid}",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "areachart",
                                "chartSettings": {
                                  "xAxis": "TimeGenerated",
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "Val",
                                      "label": "Queue size"
                                    },
                                    {
                                      "seriesName": "val",
                                      "label": "Send latency"
                                    }
                                  ],
                                  "ySettings": {
                                    "numberFormatSettings": {
                                      "unit": 24,
                                      "options": {
                                        "style": "decimal",
                                        "useGrouping": true,
                                        "maximumFractionDigits": 2
                                      }
                                    }
                                  }
                                }
                              },
                              "conditionalVisibilities": [
                                {
                                  "parameterName": "qlen",
                                  "comparison": "isEqualTo"
                                },
                                {
                                  "parameterName": "id",
                                  "comparison": "isNotEqualTo"
                                }
                              ],
                              "name": "query - messages send latency"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet endp = iff('{pid}' != \"\", '{pid}', '{id}');\nlet x = trim_end(@\"[^+]+\", '{id}');\nlet moduleid = substring(x,0, strlen(x)-1);\nlet targetSplit = split(endp, '::');\nlet sourceSplit = split(moduleid, '::');\nlet tx = InsightsMetrics\n    | where TimeGenerated between ((startTime - minPeriod * 2) .. endTime)\n    | where Name == \"edgehub_messages_sent_total\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | where device  == '{SelectedDevice}'\n    | extend targetInput = (dimensions.to_route_input)\n    | extend target = trim_start(@\"[^/]+/\", extractjson(\"$.to\", tostring(dimensions), typeof(string)))\n    | extend source = iff(tostring(dimensions.from) contains '{SelectedDevice}', trim_start(@\"[^/]+/\", tostring(dimensions.from)), tostring(dimensions.from))\n    | extend sourceOutput = (dimensions.from_route_output)\n    | where target == tostring(targetSplit[0])\n    | where targetInput == tostring(targetSplit[1])\n    | where source == tostring(sourceSplit[0])\n    | where sourceOutput == tostring(sourceSplit[1])\n    | extend messages = toint(Val)\n    | order by TimeGenerated\n    | serialize | extend nextCount = next(messages, 1) \n    | extend diff = iff((messages - nextCount) >= 0, messages - nextCount, iff(TimeGenerated - startTime > 2*minPeriod, messages, 0))\n    | project Event=\"Delivered\", TimeGenerated, messages=diff\n    | make-series Count=sum(messages) default=0 on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod by Event;\nlet rx = InsightsMetrics\n    | where TimeGenerated between ((startTime - minPeriod *2) .. endTime)\n    | where Name == \"edgehub_messages_received_total\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | where device == '{SelectedDevice}'\n    | extend source = iif(isnotempty(tostring(dimensions.id)), strcat(trim_start(@\"[^/]+/\", trim_end(@\"[^\\+]+/\", tostring(dimensions.id))), \"::\", tostring(dimensions.route_output)), tostring(dimensions.id))\n    | where source == moduleid\n    | extend messages = toint(Val)\n    | sort by source, TimeGenerated\n    | serialize\n    | extend nextCount = next(messages, 1)\n    | extend nextSource = next(source, 1)\n    | extend diff = iff((messages - nextCount) >= 0 and source == nextSource, messages - nextCount, iff(TimeGenerated - startTime > 2 * minPeriod, messages, 0))\n    | project Event=\"Received\", TimeGenerated, messages=diff\n    | make-series Count=sum(messages) default=0 on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod by Event;\ntx | union rx;",
                                "size": 1,
                                "title": "Messages from {ep}",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "linechart",
                                "tileSettings": {
                                  "showBorder": false
                                },
                                "chartSettings": {
                                  "xAxis": "TimeGenerated",
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "diff",
                                      "label": "Messages delivered"
                                    }
                                  ]
                                }
                              },
                              "conditionalVisibility": {
                                "parameterName": "latency",
                                "comparison": "isNotEqualTo"
                              },
                              "name": "query - messages delivered"
                            }
                          ],
                          "exportParameters": true
                        },
                        "conditionalVisibilities": [
                          {
                            "parameterName": "id",
                            "comparison": "isNotEqualTo",
                            "value": "<default>"
                          },
                          {
                            "parameterName": "ShowPane",
                            "comparison": "isEqualTo",
                            "value": "messages"
                          },
                          {
                            "parameterName": "messaging-view",
                            "comparison": "isNotEqualTo",
                            "value": "graph"
                          }
                        ],
                        "styleSettings": {
                          "padding": "0px 12px"
                        },
                        "name": "messaging-routing"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 1,
                              "content": {
                                "json": "The graph below displays the trend of clients connected to EdgeHub."
                              },
                              "styleSettings": {
                                "margin": "0px 0px 10px 0px"
                              },
                              "conditionalVisibility": {
                                "parameterName": "ShowTips",
                                "comparison": "isEqualTo",
                                "value": "true"
                              },
                              "name": "text - connected client trends"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet connectedClients = () { \nInsightsMetrics\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_connected_clients\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == deviceid\n| extend instance = tostring(dimensions.instance_number)\n| extend value = toint(Val)\n| order by TimeGenerated\n| serialize\n| make-series Count=min(value) default=0 on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod\n};\nconnectedClients()",
                                "size": 1,
                                "aggregation": 5,
                                "title": "Connected clients count",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "unstackedbar"
                              },
                              "name": "query - connected clients count"
                            },
                            {
                              "type": 12,
                              "content": {
                                "version": "NotebookGroup/1.0",
                                "groupType": "editable",
                                "items": [
                                  {
                                    "type": 1,
                                    "content": {
                                      "json": ""
                                    },
                                    "customWidth": "25",
                                    "name": "connected-clients-group-spacer"
                                  }
                                ]
                              },
                              "name": "info-tip-group",
                              "styleSettings": {
                                "margin": "-20px 0px"
                              }
                            }
                          ],
                          "exportParameters": true
                        },
                        "conditionalVisibilities": [
                          {
                            "parameterName": "ShowPane",
                            "comparison": "isEqualTo",
                            "value": "messages"
                          },
                          {
                            "parameterName": "messaging-view",
                            "comparison": "isNotEqualTo",
                            "value": "graph"
                          },
                          {
                            "parameterName": "id",
                            "comparison": "isEqualTo",
                            "value": "<default>"
                          }
                        ],
                        "name": "connected-clients-group"
                      }
                    ]
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "messaging-view",
                    "comparison": "isEqualTo",
                    "value": "routing"
                  },
                  "name": "message-details-right-pane",
                  "styleSettings": {
                    "margin": "-20px 0px 0px 0px"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let deviceid = '{SelectedDevice}';\nlet data = InsightsMetrics\n| where Name == \"edgehub_messages_sent_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device  == deviceid\n| extend target = trim_start(@\"[^/]+/\", extractjson(\"$.to\", tostring(dimensions), typeof(string)))\n| extend source = trim_start(@\"[^/]+/\", tostring(dimensions.from))\n| extend messages = toint(Val)\n| extend timeUtc = TimeGenerated\n| extend sourceTarget = strcat(source,\"+\",target) \n| project  timeUtc, device, source, target, sourceTarget,  messages\n| order by sourceTarget, timeUtc\n| serialize | extend nextCount = next(messages, 1) | extend nextSourceTarget= next(sourceTarget, 1)\n| extend diff = iff((messages - nextCount) >= 0, messages - nextCount, messages)\n| where sourceTarget  == nextSourceTarget and diff >= 0\n| project  timeUtc, device, source, target, sourceTarget, messages, diff;\ndata\n| summarize messageCount = sum(diff) by source, target\n| extend id = ''\n| project id, source, target, messageCount\n| union (data\n    | sample-distinct 100 of source\n    | extend id = source\n    | union (data\n        | sample-distinct 100 of target\n        | extend  id = target)\n    | sample-distinct 100 of id\n    | project id);",
                    "size": 0,
                    "noDataMessage": "No messages were routed",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "timeRange",
                    "queryType": 0,
                    "resourceType": "{ResourceType}",
                    "crossComponentResources": [
                      "{IoTResources}"
                    ],
                    "visualization": "graph",
                    "graphSettings": {
                      "type": 0,
                      "topContent": {
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "id",
                        "formatter": 12,
                        "numberFormat": {
                          "unit": 0,
                          "options": {
                            "style": "decimal",
                            "useGrouping": false,
                            "maximumFractionDigits": 2,
                            "maximumSignificantDigits": 3
                          }
                        }
                      },
                      "nodeIdField": "id",
                      "sourceIdField": "source",
                      "targetIdField": "target",
                      "graphOrientation": 2,
                      "showOrientationToggles": true,
                      "edgeLabel": "messageCount",
                      "nodeSize": null,
                      "staticNodeSize": 100,
                      "colorSettings": {
                        "nodeColorField": "id",
                        "type": 1,
                        "colorPalette": "default"
                      },
                      "hivesMargin": 5
                    }
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "SelectedDevice",
                      "comparison": "isNotEqualTo",
                      "value": "default"
                    },
                    {
                      "parameterName": "ShowPane",
                      "comparison": "isEqualTo",
                      "value": "messages"
                    },
                    {
                      "parameterName": "messaging-view",
                      "comparison": "isEqualTo",
                      "value": "graph"
                    }
                  ],
                  "name": "message-graph"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "a374be75-c107-4a2a-a7c3-952d418b6be9",
                              "version": "KqlParameterItem/1.0",
                              "name": "OfflineCount",
                              "type": 1,
                              "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalOfflineCount = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_offline_count_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend value = toint(Val)\n| order by TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance), value - nextValue, 0)\n| summarize sum(diff)\n};\nlet offlineCount = toscalar(totalOfflineCount());\nprint count=offlineCount",
                              "isHiddenWhenLocked": true,
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            },
                            {
                              "id": "86724d79-df74-42a9-a43f-bc63c3e5aa47",
                              "version": "KqlParameterItem/1.0",
                              "name": "DroppedMessages",
                              "type": 1,
                              "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalDroppedMessagesCount = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_messages_dropped_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend moduleOutput = strcat(tostring(dimensions.from), '::',  tostring(dimensions.from_route_output)) \n| extend value = toint(Val)\n| order by instance, moduleOutput, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextModuleOutput = next(moduleOutput, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and moduleOutput == nextModuleOutput), value - nextValue, 0)\n| project TimeGenerated, device, instance, moduleOutput, value, diff\n| summarize sum(diff)\n};\nlet droppedMessages = toscalar(totalDroppedMessagesCount());\nprint count=droppedMessages",
                              "isHiddenWhenLocked": true,
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            },
                            {
                              "id": "804f24c3-ec91-4d3b-bf12-9faf601952c0",
                              "version": "KqlParameterItem/1.0",
                              "name": "RetryOps",
                              "type": 1,
                              "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalRetryOperationsCount = () { \nInsightsMetrics\n//| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_operation_retry_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == deviceid\n| extend instance = tostring(dimensions.instance_number)\n| extend targetOp = strcat(tostring(dimensions.id), '::',  tostring(dimensions.operation)) \n| extend value = toint(Val)\n| order by instance, targetOp, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nexttargetOp = next(targetOp, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and targetOp == nexttargetOp), value - nextValue, 0)\n| project TimeGenerated, device, instance, targetOp, value, diff\n| summarize sum(diff)\n};\nlet retryCount = toscalar(totalRetryOperationsCount());\nprint count=retryCount",
                              "isHiddenWhenLocked": true,
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            },
                            {
                              "id": "2f53fe25-35ca-4990-9987-f8b9ba63450c",
                              "version": "KqlParameterItem/1.0",
                              "name": "FailedConnects",
                              "type": 1,
                              "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalFailedConnectsCount = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_client_connect_failed_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend clientReason = strcat(tostring(dimensions.id), '::',  tostring(dimensions.reason)) \n| extend value = toint(Val)\n| order by instance, clientReason, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextclientReason = next(clientReason, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and clientReason == nextclientReason), value - nextValue, 0)\n| project TimeGenerated, device, instance, clientReason, value, diff\n| summarize sum(diff)\n};\nlet failedCount = toscalar(totalFailedConnectsCount());\nprint count=failedCount",
                              "isHiddenWhenLocked": true,
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            },
                            {
                              "id": "e75fcd48-822e-4698-8c03-de02c4192b30",
                              "version": "KqlParameterItem/1.0",
                              "name": "ClientDisconnects",
                              "type": 1,
                              "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalDisconnectedClients = () { \n    InsightsMetrics\n    | where TimeGenerated > startTime and TimeGenerated < endTime\n    | where Name == \"edgehub_client_disconnect_total\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | where device == deviceid\n    | extend instance = tostring(dimensions.instance_number)\n    | extend id = strcat(extract(\"DeviceId: (\\\\S*)\", 1, tostring(dimensions.id), typeof(string)), '::', extract(\"ModuleId: (\\\\S*)\", 1, tostring(dimensions.id), typeof(string)))\n    | extend value = toint(Val)\n    | order by instance, id, TimeGenerated\n    | serialize\n    | extend nextValue = next(value, 1)\n    | extend nextInstance = next(instance, 1)\n    | extend nextId = next(id, 1)\n    | extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and id == nextId), value - nextValue, 0)\n    | project TimeGenerated, device, instance, id, value, diff\n    | summarize sum(diff)\n};\nlet disconnectedCount = toscalar(totalDisconnectedClients());\nprint count=disconnectedCount",
                              "isHiddenWhenLocked": true,
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            }
                          ],
                          "style": "pills",
                          "queryType": 0,
                          "resourceType": "{ResourceType}"
                        },
                        "name": "health-group-params"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "print name=\"droppedCount\", title=\"Dropped messages\", offlineCount=iff(isempty('{DroppedMessages}'), 0, toint('{DroppedMessages}'))",
                          "size": 4,
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "title",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "offlineCount",
                              "formatter": 12,
                              "formatOptions": {
                                "min": 0,
                                "palette": "greenRed"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": false,
                                  "maximumFractionDigits": 1,
                                  "maximumSignificantDigits": 3
                                }
                              }
                            },
                            "showBorder": true
                          }
                        },
                        "customWidth": "20",
                        "name": "messages-dropped-tile",
                        "styleSettings": {
                          "margin": "-10px 0px"
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "print name=\"disconnects\", title=\"Client disconnects\", offlineCount=iff(isempty('{ClientDisconnects}'), 0, toint('{ClientDisconnects}'))",
                          "size": 4,
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "title",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "offlineCount",
                              "formatter": 12,
                              "formatOptions": {
                                "min": 0,
                                "palette": "greenRed"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": false,
                                  "maximumFractionDigits": 1,
                                  "maximumSignificantDigits": 3
                                }
                              }
                            },
                            "showBorder": true
                          }
                        },
                        "customWidth": "20",
                        "name": "client-disconnects-tile",
                        "styleSettings": {
                          "margin": "-10px 0px"
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "\r\nprint name=\"retryCount\", title=\"Retry operations\", retryCount=iff(isempty('{RetryOps}'), 0, toint('{RetryOps}'))\r\n",
                          "size": 4,
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "title",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "retryCount",
                              "formatter": 12,
                              "formatOptions": {
                                "min": 0,
                                "palette": "greenRed"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal",
                                  "maximumFractionDigits": 2,
                                  "maximumSignificantDigits": 3
                                }
                              }
                            },
                            "showBorder": true
                          }
                        },
                        "customWidth": "20",
                        "name": "retry-operations-tile",
                        "styleSettings": {
                          "margin": "-10px 0px"
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "print name=\"failConnectsCount\", title=\"Failed client connects\", failedCount=iff(isempty('{FailedConnects}'), 0, toint('{FailedConnects}'))",
                          "size": 4,
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "title",
                              "formatter": 1
                            },
                            "leftContent": {
                              "columnMatch": "failedCount",
                              "formatter": 12,
                              "formatOptions": {
                                "min": 0,
                                "palette": "greenRed"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": false,
                                  "maximumFractionDigits": 2,
                                  "maximumSignificantDigits": 3
                                }
                              }
                            },
                            "showBorder": true
                          }
                        },
                        "customWidth": "20",
                        "name": "failed-client-connects-tile",
                        "styleSettings": {
                          "margin": "-10px 0px"
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "print name=\"offlineCount\", title=\"Offline count\", offlineCount=iff(isempty('{OfflineCount}'), 0, toint('{OfflineCount}'))\n",
                          "size": 4,
                          "exportToExcelOptions": "all",
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "tiles",
                          "tileSettings": {
                            "titleContent": {
                              "columnMatch": "title",
                              "formatter": 1,
                              "tooltipFormat": {
                                "tooltip": "Number of times edgeHub went offline"
                              }
                            },
                            "leftContent": {
                              "columnMatch": "offlineCount",
                              "formatter": 12,
                              "formatOptions": {
                                "min": 0,
                                "palette": "greenRed"
                              },
                              "numberFormat": {
                                "unit": 17,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": false
                                }
                              }
                            },
                            "showBorder": true
                          }
                        },
                        "customWidth": "20",
                        "name": "offline-count-tile",
                        "styleSettings": {
                          "margin": "-10px 0px"
                        }
                      },
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "055c2dc1-3f53-445c-91a2-d8b584480cdd",
                              "version": "KqlParameterItem/1.0",
                              "name": "showDropdown",
                              "type": 1,
                              "query": "datatable (Label:string, Count:string)\n    [\"Offline durations\", '{OfflineCount}',\n     \"Retry operations\", '{RetryOps}',\n     \"Dropped messages\", '{DroppedMessages}',\n     \"Client disconnects\", '{ClientDisconnects}',\n     \"Failed connections\", '{FailedConnects}']\n| where isnotempty(Count)\n| count",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeRange",
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            }
                          ],
                          "style": "pills",
                          "queryType": 0,
                          "resourceType": "{ResourceType}"
                        },
                        "name": "health-group-showdropdown-param"
                      },
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "c55a2c11-f329-453d-8a27-9fc8814c6ecf",
                              "version": "KqlParameterItem/1.0",
                              "name": "detailsDropdown",
                              "label": "📜 View details for...",
                              "type": 2,
                              "multiSelect": true,
                              "quote": "'",
                              "delimiter": ",",
                              "query": "datatable (Label:string, Count:string)\n    [\"Dropped messages\", '{DroppedMessages}',\n     \"Client disconnects\", '{ClientDisconnects}',\n     \"Retry operations\", '{RetryOps}',\n     \"Failed connections\", '{FailedConnects}',\n     \"Offline durations\", '{OfflineCount}']\n| where isnotempty(Count)\n| project Label=strcat(Label, \" (\", Count, \")\")",
                              "typeSettings": {
                                "additionalResourceOptions": [
                                  "value::all"
                                ],
                                "showDefault": false
                              },
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeRange",
                              "queryType": 0,
                              "resourceType": "{ResourceType}",
                              "value": []
                            }
                          ],
                          "style": "formHorizontal",
                          "queryType": 0,
                          "resourceType": "{ResourceType}"
                        },
                        "customWidth": "25",
                        "conditionalVisibility": {
                          "parameterName": "showDropdown",
                          "comparison": "isNotEqualTo"
                        },
                        "name": "health-group-view-details-dropdown",
                        "styleSettings": {
                          "margin": "-10px 0px"
                        }
                      },
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "7490ec27-88dc-4bfa-98e0-2cecea421fa0",
                              "version": "KqlParameterItem/1.0",
                              "name": "ShowOfflineDetails",
                              "type": 1,
                              "query": "print iff((strcat({detailsDropdown}) contains 'Offline durations'), 'yes', 'no')\n",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeRange",
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            },
                            {
                              "id": "5bd99611-d8d2-455a-b17a-8c05f838d97e",
                              "version": "KqlParameterItem/1.0",
                              "name": "ShowRetryOpsDetails",
                              "type": 1,
                              "query": "print iff((strcat({detailsDropdown}) contains 'Retry Operations'), 'yes', 'no')\n",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeRange",
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            },
                            {
                              "id": "46718901-9fb7-4112-800b-2f7b5b983046",
                              "version": "KqlParameterItem/1.0",
                              "name": "ShowDroppedMessagesDetails",
                              "type": 1,
                              "query": "print iff((strcat({detailsDropdown}) contains 'Dropped messages'), 'yes', 'no')\n",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeRange",
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            },
                            {
                              "id": "d8478925-eae7-4a12-b477-1926d4bef831",
                              "version": "KqlParameterItem/1.0",
                              "name": "ShowFailedConnectionDetails",
                              "type": 1,
                              "query": "print iff((strcat({detailsDropdown}) contains 'Failed connections'), 'yes', 'no')\n",
                              "isHiddenWhenLocked": true,
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeRange",
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            },
                            {
                              "id": "ab24a3e9-7ae1-415d-8783-b89d86d1f535",
                              "version": "KqlParameterItem/1.0",
                              "name": "ShowClientDisconnectDetails",
                              "type": 1,
                              "query": "print iff((strcat({detailsDropdown}) contains 'Client disconnects'), 'yes', 'no')\n",
                              "isHiddenWhenLocked": true,
                              "queryType": 0,
                              "resourceType": "{ResourceType}"
                            }
                          ],
                          "style": "pills",
                          "doNotRunWhenHidden": true,
                          "queryType": 0,
                          "resourceType": "{ResourceType}"
                        },
                        "conditionalVisibility": {
                          "parameterName": "detailsDropdown",
                          "comparison": "isNotEqualTo"
                        },
                        "name": "health-group-show-selected-details-params"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 9,
                              "content": {
                                "version": "KqlParameterItem/1.0",
                                "parameters": [
                                  {
                                    "id": "f781f225-97cd-4a41-8a22-ad09d739b0fe",
                                    "version": "KqlParameterItem/1.0",
                                    "name": "PercentOffline",
                                    "type": 1,
                                    "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet numEntries = () {\nInsightsMetrics\n| where Tags contains deviceid\n| where Name == \"edgehub_offline_duration_seconds_sum\"\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| count\n};\nlet totalOfflineDuration = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_offline_duration_seconds_sum\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend value = toint(Val)\n| order by TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance), value - nextValue, 0)\n| project TimeGenerated, diff\n| summarize sum(diff)\n| project percentOffline = (todouble(sum_diff)/todouble(datetime_diff('second',startTime,endTime))) * -1\n};\nlet percentOffline = toscalar(totalOfflineDuration());\nprint count=iff(toscalar(numEntries()) == 0, todouble(0), iff(percentOffline == todouble(0), todouble(-1), percentOffline))\n",
                                    "isHiddenWhenLocked": true,
                                    "queryType": 0,
                                    "resourceType": "{ResourceType}"
                                  },
                                  {
                                    "id": "74df9778-3ffd-4865-a03e-bf0e3fb1bfa4",
                                    "version": "KqlParameterItem/1.0",
                                    "name": "OfflineDurationCount",
                                    "type": 1,
                                    "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet numEntries = () {\nInsightsMetrics\n| where Tags contains deviceid\n| where Name == \"edgehub_offline_duration_seconds_count\"\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| count\n};\nlet totalOfflineDuration = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_offline_duration_seconds_count\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend value = toint(Val)\n| order by TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance), value - nextValue, 0)\n| project TimeGenerated, diff\n| summarize sum(diff)\n};\nlet offlineDurationCount = toscalar(totalOfflineDuration());\nprint count=iff(toscalar(numEntries()) == 0, 0, iff(offlineDurationCount == 0, -1, offlineDurationCount))",
                                    "isHiddenWhenLocked": true,
                                    "queryType": 0,
                                    "resourceType": "{ResourceType}"
                                  }
                                ],
                                "style": "pills",
                                "queryType": 0,
                                "resourceType": "{ResourceType}"
                              },
                              "name": "health-group-offline-metrics-params"
                            },
                            {
                              "type": 1,
                              "content": {
                                "json": ""
                              },
                              "customWidth": "10",
                              "name": "health-group-offline-emptyspace"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "print 'edgeHub offline percent', percentOffline=iff(isempty('{PercentOffline}'), todouble(0), todouble('{PercentOffline}'))\n, offlineDurationCount=iff(isempty('{OfflineDurationCount}'), 0, toint('{OfflineDurationCount}'))",
                                "size": 4,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "tiles",
                                "tileSettings": {
                                  "titleContent": {
                                    "columnMatch": "print_0",
                                    "formatter": 1
                                  },
                                  "leftContent": {
                                    "columnMatch": "percentOffline",
                                    "formatter": 12,
                                    "formatOptions": {
                                      "palette": "auto"
                                    },
                                    "numberFormat": {
                                      "unit": 0,
                                      "options": {
                                        "style": "percent",
                                        "maximumFractionDigits": 2,
                                        "maximumSignificantDigits": 3
                                      }
                                    }
                                  },
                                  "secondaryContent": {
                                    "columnMatch": "offlineDurationCount"
                                  },
                                  "showBorder": true
                                }
                              },
                              "customWidth": "30",
                              "name": "health-group-offline-duration-query"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet totalOfflineCount = () {\nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_offline_count_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend value = toint(Val)\n| order by TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance), value - nextValue, 0)\n| project TimeGenerated, diff\n| make-series Count=sum(diff) on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod\n};\ntotalOfflineCount()",
                                "size": 1,
                                "showAnnotations": true,
                                "title": "Offline transitions",
                                "timeBrushParameterName": "cvv",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "unstackedbar"
                              },
                              "customWidth": "60",
                              "name": "offline-transition-chart",
                              "styleSettings": {
                                "margin": "0px 0px -20px 0px"
                              }
                            }
                          ]
                        },
                        "conditionalVisibilities": [
                          {
                            "parameterName": "detailsDropdown",
                            "comparison": "isNotEqualTo"
                          },
                          {
                            "parameterName": "ShowOfflineDetails",
                            "comparison": "isEqualTo",
                            "value": "yes"
                          }
                        ],
                        "name": "offline-details"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "\nlet deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalRetryOperationsCount = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_operation_retry_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend target = tostring(dimensions.id)\n| extend op = tostring(dimensions.operation)\n| extend value = toint(Val)\n| order by instance, target, op, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextTarget = next(target, 1)\n| extend nextOp = next(op, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and op == nextOp and target == nextTarget), value - nextValue, 0)\n| project TimeGenerated, device, instance, target, op, value, diff\n| where diff > 0\n| summarize sum(diff) by target, op\n};\ntotalRetryOperationsCount()",
                                "size": 4,
                                "title": "Retry operation details",
                                "exportedParameters": [
                                  {
                                    "fieldName": "op",
                                    "parameterName": "RetryOp",
                                    "parameterType": 1,
                                    "defaultValue": "notselected"
                                  },
                                  {
                                    "fieldName": "target",
                                    "parameterName": "RetryTarget",
                                    "parameterType": 1,
                                    "defaultValue": "notselected"
                                  }
                                ],
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "target",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "24ch"
                                      }
                                    },
                                    {
                                      "columnMatch": "op",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "29.7143ch"
                                      }
                                    },
                                    {
                                      "columnMatch": "sum_diff",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "10.5714ch"
                                      },
                                      "numberFormat": {
                                        "unit": 17,
                                        "options": {
                                          "style": "decimal",
                                          "useGrouping": false
                                        }
                                      }
                                    }
                                  ],
                                  "filter": true,
                                  "sortBy": [
                                    {
                                      "itemKey": "$gen_number_sum_diff_2",
                                      "sortOrder": 2
                                    }
                                  ],
                                  "labelSettings": [
                                    {
                                      "columnId": "target",
                                      "label": "Target"
                                    },
                                    {
                                      "columnId": "op",
                                      "label": "Operation"
                                    },
                                    {
                                      "columnId": "sum_diff",
                                      "label": "Count"
                                    }
                                  ]
                                },
                                "sortBy": [
                                  {
                                    "itemKey": "$gen_number_sum_diff_2",
                                    "sortOrder": 2
                                  }
                                ]
                              },
                              "customWidth": "40",
                              "name": "retry-by-target-op"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalRetryOperationsCount = () { \nInsightsMetrics\n| where TimeGenerated between ((startTime - 10m) .. endTime)\n| where Name == \"edgehub_operation_retry_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == deviceid\n| extend instance = tostring(dimensions.instance_number)\n| extend target = tostring(dimensions.id)\n| extend op = tostring(dimensions.operation)\n| extend value = toint(Val)\n| order by instance, target, op, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextTarget = next(target, 1)\n| extend nextOp = next(op, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and op == nextOp and target == nextTarget), value - nextValue, 0)\n//| where diff > 0\n| make-series Count=sum(diff) on TimeGenerated in range(startTime, endTime, 10m) by op\n//| project TimeGenerated, op, Count=diff\n};\ntotalRetryOperationsCount()",
                                "size": 1,
                                "title": "Retry operations (all targets and operations)",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "barchart"
                              },
                              "customWidth": "60",
                              "conditionalVisibility": {
                                "parameterName": "RetryTarget",
                                "comparison": "isEqualTo",
                                "value": "notselected"
                              },
                              "name": "all-target-ops-retry-chart"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet totalRetryOperationsCount = () { \nInsightsMetrics\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_operation_retry_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == deviceid\n| extend instance = tostring(dimensions.instance_number)\n| extend target = tostring(dimensions.id)\n| extend op = tostring(dimensions.operation)\n| where target == '{RetryTarget}' and op == '{RetryOp}'\n| extend value = toint(Val)\n| order by instance, target, op, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextTarget = next(target, 1)\n| extend nextOp = next(op, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and op == nextOp and target == nextTarget), value - nextValue, 0)\n//| where diff > 0\n| make-series Count=sum(diff) on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod\n//| project TimeGenerated, Count=diff\n};\ntotalRetryOperationsCount()",
                                "size": 1,
                                "title": "{RetryOp} targeting {RetryTarget}",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "barchart"
                              },
                              "customWidth": "60",
                              "conditionalVisibility": {
                                "parameterName": "RetryTarget",
                                "comparison": "isNotEqualTo",
                                "value": "notselected"
                              },
                              "name": "selected-target-op-retry-chart"
                            }
                          ]
                        },
                        "conditionalVisibilities": [
                          {
                            "parameterName": "ShowRetryOpsDetails",
                            "comparison": "isEqualTo",
                            "value": "yes"
                          },
                          {
                            "parameterName": "detailsDropdown",
                            "comparison": "isNotEqualTo"
                          }
                        ],
                        "name": "retry-op-details"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalDroppedMessagesCount = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_messages_dropped_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend moduleOutput = strcat(tostring(dimensions.from), '::',  tostring(dimensions.from_route_output)) \n| extend value = toint(Val)\n| order by instance, moduleOutput, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextModuleOutput = next(moduleOutput, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and moduleOutput == nextModuleOutput), value - nextValue, 0)\n| project TimeGenerated, device, instance, origin=moduleOutput, value, diff\n| summarize sum(diff) by origin\n| project origin, count=sum_diff\n};\ntotalDroppedMessagesCount()",
                                "size": 4,
                                "title": "Dropped Messages details",
                                "exportFieldName": "origin",
                                "exportParameterName": "MessageOrigin",
                                "exportDefaultValue": "notselected",
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "count",
                                      "formatter": 0,
                                      "numberFormat": {
                                        "unit": 17,
                                        "options": {
                                          "style": "decimal",
                                          "maximumFractionDigits": 2
                                        }
                                      }
                                    }
                                  ],
                                  "filter": true,
                                  "sortBy": [
                                    {
                                      "itemKey": "$gen_number_count_1",
                                      "sortOrder": 2
                                    }
                                  ],
                                  "labelSettings": [
                                    {
                                      "columnId": "origin",
                                      "label": "Message origin"
                                    },
                                    {
                                      "columnId": "count",
                                      "label": "Count"
                                    }
                                  ]
                                },
                                "sortBy": [
                                  {
                                    "itemKey": "$gen_number_count_1",
                                    "sortOrder": 2
                                  }
                                ]
                              },
                              "customWidth": "40",
                              "name": "failed-connects-by-client-reason"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet totalDroppedMessagesCount = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_messages_dropped_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend moduleOutput = strcat(tostring(dimensions.from), '::',  tostring(dimensions.from_route_output)) \n| extend value = toint(Val)\n| order by instance, moduleOutput, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextModuleOutput = next(moduleOutput, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and moduleOutput == nextModuleOutput), value - nextValue, 0)\n| project TimeGenerated, device, instance, origin=moduleOutput, value, diff\n| make-series sum(diff) on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod by origin\n//| summarize sum(diff) by TimeGenerated, origin\n};\ntotalDroppedMessagesCount()",
                                "size": 1,
                                "title": "Dropped messages (all origins)",
                                "timeBrushParameterName": "timeRange",
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "barchart"
                              },
                              "customWidth": "60",
                              "conditionalVisibility": {
                                "parameterName": "MessageOrigin",
                                "comparison": "isEqualTo",
                                "value": "notselected"
                              },
                              "name": "all-origin-msg-dropped-chart"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet totalDroppedMessagesCount = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_messages_dropped_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend moduleOutput = strcat(tostring(dimensions.from), '::',  tostring(dimensions.from_route_output))\n| where moduleOutput == '{MessageOrigin}'\n| extend value = toint(Val)\n| order by instance, moduleOutput, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextModuleOutput = next(moduleOutput, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and moduleOutput == nextModuleOutput), value - nextValue, 0)\n| project TimeGenerated, device, instance, origin=moduleOutput, value, diff\n| make-series Count=sum(diff) on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod\n//| summarize Count=sum(diff) by TimeGenerated\n};\ntotalDroppedMessagesCount()",
                                "size": 1,
                                "title": "Dropped messages from {MessageOrigin}",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "barchart"
                              },
                              "customWidth": "60",
                              "conditionalVisibility": {
                                "parameterName": "MessageOrigin",
                                "comparison": "isNotEqualTo",
                                "value": "notselected"
                              },
                              "name": "selected-origin-message-dropped"
                            }
                          ]
                        },
                        "conditionalVisibilities": [
                          {
                            "parameterName": "ShowDroppedMessagesDetails",
                            "comparison": "isEqualTo",
                            "value": "yes"
                          },
                          {
                            "parameterName": "detailsDropdown",
                            "comparison": "isNotEqualTo"
                          }
                        ],
                        "name": "dropped-message-details"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet totalDisconnectedClients = () { \n    InsightsMetrics\n    | where TimeGenerated > startTime and TimeGenerated < endTime\n    | where Name == \"edgehub_client_disconnect_total\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | where device == deviceid\n    | extend instance = tostring(dimensions.instance_number)\n    | extend id = strcat(extract(\"DeviceId: (\\\\S*)\", 1, tostring(dimensions.id), typeof(string)), '/', extract(\"ModuleId: (\\\\S*)\", 1, tostring(dimensions.id), typeof(string)))\n    | extend value = toint(Val)\n    | order by instance, id, TimeGenerated\n    | serialize\n    | extend nextValue = next(value, 1)\n    | extend nextInstance = next(instance, 1)\n    | extend nextId = next(id, 1)\n    | extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and id == nextId), value - nextValue, 0)\n    | project TimeGenerated, device, instance, id, value, diff\n    | summarize sum(diff) by id\n};\ntotalDisconnectedClients()",
                                "size": 4,
                                "title": "Client disconnect details",
                                "exportFieldName": "id",
                                "exportParameterName": "SelId",
                                "exportDefaultValue": "notselected",
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "count",
                                      "formatter": 0,
                                      "numberFormat": {
                                        "unit": 17,
                                        "options": {
                                          "style": "decimal",
                                          "maximumFractionDigits": 2
                                        }
                                      }
                                    }
                                  ],
                                  "filter": true,
                                  "sortBy": [
                                    {
                                      "itemKey": "sum_diff",
                                      "sortOrder": 2
                                    }
                                  ],
                                  "labelSettings": [
                                    {
                                      "columnId": "id",
                                      "label": "Id"
                                    },
                                    {
                                      "columnId": "sum_diff",
                                      "label": "Count"
                                    }
                                  ]
                                },
                                "sortBy": [
                                  {
                                    "itemKey": "sum_diff",
                                    "sortOrder": 2
                                  }
                                ]
                              },
                              "customWidth": "40",
                              "name": "client-disconnects-by-id"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet totalDisconnectedClients = () { \n    InsightsMetrics\n    | where TimeGenerated > startTime and TimeGenerated < endTime\n    | where Name == \"edgehub_client_disconnect_total\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | where device == deviceid\n    | extend instance = tostring(dimensions.instance_number)\n    | extend id = strcat(extract(\"DeviceId: (\\\\S*)\", 1, tostring(dimensions.id), typeof(string)), '::', extract(\"ModuleId: (\\\\S*)\", 1, tostring(dimensions.id), typeof(string)))\n    | extend value = toint(Val)\n    | order by instance, id, TimeGenerated\n    | serialize\n    | extend nextValue = next(value, 1)\n    | extend nextInstance = next(instance, 1)\n    | extend nextId = next(id, 1)\n    | extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and id == nextId), value - nextValue, 0)\n    | project TimeGenerated, device, instance, id, value, diff\n    | make-series sum(diff) on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod by id\n};\ntotalDisconnectedClients()",
                                "size": 1,
                                "title": "Client disconnects (all clients)",
                                "timeBrushParameterName": "timeRange",
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "barchart"
                              },
                              "customWidth": "60",
                              "conditionalVisibility": {
                                "parameterName": "SelId",
                                "comparison": "isEqualTo",
                                "value": "notselected"
                              },
                              "name": "all-id-client-disconnects-chart"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let deviceid = '{SelectedDevice}';\nlet selectedId = '{SelId}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time('{samplingFrequency}');\nlet totalDisconnectedClients = () { \n    InsightsMetrics\n    | where TimeGenerated > startTime and TimeGenerated < endTime\n    | where Name == \"edgehub_client_disconnect_total\"\n    | extend dimensions=parse_json(Tags)\n    | extend device = tostring(dimensions.edge_device)\n    | where device == deviceid\n    | extend instance = tostring(dimensions.instance_number)\n    | extend id = strcat(extract(\"DeviceId: (\\\\S*)\", 1, tostring(dimensions.id), typeof(string)), '/', extract(\"ModuleId: (\\\\S*)\", 1, tostring(dimensions.id), typeof(string)))\n    | where id == selectedId\n    | extend value = toint(Val)\n    | order by instance, id, TimeGenerated\n    | serialize\n    | extend nextValue = next(value, 1)\n    | extend nextInstance = next(instance, 1)\n    | extend nextId = next(id, 1)\n    | extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and id == nextId), value - nextValue, 0)\n    | project TimeGenerated, device, instance, id, value, diff\n    | make-series sum(diff) on TimeGenerated from (startTime - minPeriod) to endTime step minPeriod by id\n};\ntotalDisconnectedClients()",
                                "size": 1,
                                "showAnnotations": true,
                                "title": "Disconnects by {SelId}",
                                "timeBrushParameterName": "timeRange",
                                "timeBrushExportOnlyWhenBrushed": true,
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "barchart"
                              },
                              "customWidth": "60",
                              "conditionalVisibility": {
                                "parameterName": "SelId",
                                "comparison": "isNotEqualTo",
                                "value": "notselected"
                              },
                              "name": "selected-id-client-disconnects"
                            }
                          ]
                        },
                        "conditionalVisibilities": [
                          {
                            "parameterName": "ShowClientDisconnectDetails",
                            "comparison": "isEqualTo",
                            "value": "yes"
                          },
                          {
                            "parameterName": "detailsDropdown",
                            "comparison": "isNotEqualTo"
                          }
                        ],
                        "name": "client-disconnects-details"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "\nlet deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet failedConnectsbyClientReason = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_client_connect_failed_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend reason = tostring(dimensions.reason)\n| extend client = tostring(dimensions.id)\n| extend clientReason = strcat(trim_start(@\"[^/]+/\", tostring(dimensions.id)), '::',  tostring(dimensions.reason)) \n| extend value = toint(Val)\n| order by instance, clientReason, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextclientReason = next(clientReason, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and clientReason == nextclientReason), value - nextValue, 0)\n| summarize sum(diff) by client, reason\n| where sum_diff > 0 \n| order by sum_diff\n};\nfailedConnectsbyClientReason()\n",
                                "size": 1,
                                "title": "Failed Connection details",
                                "exportFieldName": "client",
                                "exportParameterName": "FailedConnectClient",
                                "exportDefaultValue": "notselected",
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "client",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "37ch"
                                      }
                                    },
                                    {
                                      "columnMatch": "reason",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "19.5714ch"
                                      }
                                    },
                                    {
                                      "columnMatch": "sum_diff",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "11ch"
                                      },
                                      "numberFormat": {
                                        "unit": 17,
                                        "options": {
                                          "style": "decimal"
                                        }
                                      }
                                    }
                                  ],
                                  "filter": true,
                                  "labelSettings": [
                                    {
                                      "columnId": "client",
                                      "label": "Client"
                                    },
                                    {
                                      "columnId": "reason",
                                      "label": "Failure reason"
                                    },
                                    {
                                      "columnId": "sum_diff",
                                      "label": "Count"
                                    }
                                  ]
                                }
                              },
                              "customWidth": "40",
                              "conditionalVisibility": {
                                "parameterName": "FailedCount",
                                "comparison": "isNotEqualTo",
                                "value": "0"
                              },
                              "name": "failed-connects-by-client-reason"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "\nlet deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet failedConnectsAllClients = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_client_connect_failed_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend reason = tostring(dimensions.reason)\n| extend client = tostring(dimensions.id)\n| extend clientReason = strcat(trim_start(@\"[^/]+/\", tostring(dimensions.id)), '::',  tostring(dimensions.reason)) \n| extend value = toint(Val)\n| order by instance, clientReason, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextclientReason = next(clientReason, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and clientReason == nextclientReason), value - nextValue, 0)\n//| where diff > 0\n| project TimeGenerated, Count=diff\n};\nfailedConnectsAllClients()\n",
                                "size": 1,
                                "title": "Failed connection attempts (all clients)",
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "barchart"
                              },
                              "customWidth": "60",
                              "conditionalVisibility": {
                                "parameterName": "FailedConnectClient",
                                "comparison": "isEqualTo",
                                "value": "notselected"
                              },
                              "name": "all-clients-failed-connect-chart"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "\nlet deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet failedConnectsSelectedClients = () { \nInsightsMetrics\n| where Tags contains deviceid\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgehub_client_connect_failed_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| extend instance = tostring(dimensions.instance_number)\n| extend reason = tostring(dimensions.reason)\n| extend client = tostring(dimensions.id)\n| where client == '{FailedConnectClient}'\n| extend clientReason = strcat(trim_start(@\"[^/]+/\", tostring(dimensions.id)), '::',  tostring(dimensions.reason)) \n| extend value = toint(Val)\n| order by instance, clientReason, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextclientReason = next(clientReason, 1)\n| extend diff = iff(((value - nextValue) >= 0 and instance == nextInstance and clientReason == nextclientReason), value - nextValue, 0)\n//| where diff > 0\n| project TimeGenerated, Count=diff\n};\nfailedConnectsSelectedClients()\n",
                                "size": 1,
                                "title": "Failed connection attempts by {FailedConnectClient}",
                                "queryType": 0,
                                "resourceType": "{ResourceType}",
                                "crossComponentResources": [
                                  "{IoTResources}"
                                ],
                                "visualization": "barchart"
                              },
                              "customWidth": "60",
                              "conditionalVisibility": {
                                "parameterName": "FailedConnectClient",
                                "comparison": "isNotEqualTo",
                                "value": "notselected"
                              },
                              "name": "selected-client-failed-connect-chart"
                            }
                          ]
                        },
                        "conditionalVisibility": {
                          "parameterName": "ShowFailedConnectionDetails",
                          "comparison": "isEqualTo",
                          "value": "yes"
                        },
                        "name": "failed-connect-details"
                      }
                    ]
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "SelectedDevice",
                      "comparison": "isNotEqualTo",
                      "value": "default"
                    },
                    {
                      "parameterName": "messaging-view",
                      "comparison": "isEqualTo",
                      "value": "health"
                    }
                  ],
                  "name": "health-group"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SelectedDevice",
                "comparison": "isNotEqualTo",
                "value": "default"
              },
              {
                "parameterName": "ShowPane",
                "comparison": "isEqualTo",
                "value": "messages"
              }
            ],
            "name": "messaging-view-details",
            "styleSettings": {
              "margin": "-34px 0px 0px 0px"
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 11,
                  "content": {
                    "version": "LinkItem/1.0",
                    "style": "tabs",
                    "links": [
                      {
                        "id": "1405992b-9298-4604-9c3c-935bcaa1738f",
                        "cellValue": "module-tab",
                        "linkTarget": "parameter",
                        "linkLabel": "Availability",
                        "subTarget": "availability",
                        "style": "link"
                      },
                      {
                        "id": "aa77cc14-fe19-4b98-81b7-c5cb4071bf44",
                        "cellValue": "module-tab",
                        "linkTarget": "parameter",
                        "linkLabel": "Resource consumption",
                        "subTarget": "resources",
                        "style": "link"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "ShowPane",
                    "comparison": "isEqualTo",
                    "value": "modules"
                  },
                  "name": "tabs-modules"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet deviceid = '{SelectedDevice}';\nlet actual = InsightsMetrics\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgeAgent_total_time_running_correctly_seconds\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == deviceid\n| extend module = tostring(dimensions.module_name)\n// todo - account for agent restarts\n| summarize actualUptime=max(Val) by module;\nlet expected = InsightsMetrics\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgeAgent_total_time_expected_running_seconds\"\n   and Val > 0\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == deviceid\n| extend module = tostring(dimensions.module_name)\n// todo - account for agent restarts\n| summarize expectedUptime=max(Val) by module;\nlet availability = expected\n| join actual on module\n| extend uptime=(actualUptime / expectedUptime) * 100\n| project module, uptime, expectedUptime, actualUptime;\nlet modulerestarts = InsightsMetrics\n| where TimeGenerated > startTime and TimeGenerated < endTime\n| where Name == \"edgeAgent_module_start_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == deviceid\n| extend module = tostring(dimensions.module_name)\n| extend mversion = tostring(dimensions.module_version)\n| where mversion == \"1.0\" or module == \"edgeHub\"\n| extend instance = tostring(dimensions.instance_number)\n| extend value = toint(Val)\n| order by module, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextmodule = next(module, 1)\n| project TimeGenerated, device, instance, nextInstance, module, nextmodule, value, nextValue\n| extend diff = iff((instance != nextInstance and module == nextmodule), 1, iff((instance == nextInstance and module == nextmodule), (value - nextValue), 0))\n| summarize sum(diff) by module\n| join kind=rightouter availability on module\n| project module=module1, uptime, expectedUptime, actualUptime, restarts=sum_diff\n| extend restartText = case(isnull(restarts), \"No restarts\",\n                            restarts == 0, \"No restarts\",\n                            restarts == 1, \"1 restart\",  \n                            strcat(restarts, \" restarts\"));\nmodulerestarts\n\n\n\n",
                    "size": 0,
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "timeRange",
                    "exportFieldName": "module",
                    "exportParameterName": "moduleName",
                    "queryType": 0,
                    "resourceType": "{ResourceType}",
                    "crossComponentResources": [
                      "{IoTResources}"
                    ],
                    "visualization": "graph",
                    "sortBy": [],
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "columnMatch": "restartText",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "regex",
                              "thresholdValue": "(^\\d)",
                              "representation": "2",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "success",
                              "text": ""
                            }
                          ]
                        },
                        "tooltipFormat": {
                          "tooltip": "# of module restarts. Green check = No restarts (in selected timerange)."
                        }
                      },
                      "centerContent": {
                        "columnMatch": "module",
                        "formatter": 1
                      },
                      "bottomContent": {
                        "columnMatch": "uptime",
                        "numberFormat": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": false,
                            "maximumFractionDigits": 2
                          }
                        }
                      },
                      "nodeIdField": "module",
                      "graphOrientation": 3,
                      "showOrientationToggles": false,
                      "nodeSize": null,
                      "staticNodeSize": 100,
                      "colorSettings": {
                        "nodeColorField": "uptime",
                        "type": 4,
                        "heatmapPalette": "redGreen",
                        "heatmapMin": 0,
                        "heatmapMax": 100
                      },
                      "hivesMargin": 2
                    }
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "module-tab",
                    "comparison": "isEqualTo",
                    "value": "availability"
                  },
                  "name": "module-hive-query",
                  "styleSettings": {
                    "margin": "-30px 0px 0px 0px"
                  }
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let minPeriod = time(\"{samplingFrequency}\");\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nInsightsMetrics\n| where TimeGenerated between ((startTime - minPeriod) .. endTime)\n| where Name == \"edgeAgent_used_cpu_percent\" and Tags contains \"0.9\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend module = tostring(dimensions.module_name)\n| where module == '{moduleName}'\n| extend value = todouble(Val)\n| make-series CPU=max(value) on TimeGenerated from startTime to endTime step minPeriod;",
                          "size": 1,
                          "aggregation": 5,
                          "showAnnotations": true,
                          "title": "CPU usage by {moduleName}",
                          "timeBrushParameterName": "timeRange",
                          "timeBrushExportOnlyWhenBrushed": true,
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "areachart",
                          "chartSettings": {
                            "seriesLabelSettings": [
                              {
                                "seriesName": "value",
                                "label": "CPU"
                              }
                            ],
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 1,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": true,
                                  "minimumFractionDigits": 2,
                                  "maximumFractionDigits": 2
                                }
                              },
                              "max": 100
                            }
                          }
                        },
                        "name": "module-cpu-query",
                        "styleSettings": {
                          "margin": "-10px 0px 0px 0px"
                        }
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let minPeriod = time(\"{samplingFrequency}\");\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nInsightsMetrics\n| where TimeGenerated between ((startTime - minPeriod) .. endTime)\n| where Name == \"edgeAgent_used_memory_bytes\" and Tags contains '{moduleName}' and Tags contains '{SelectedDevice}'\n| extend value = tolong(Val)\n| make-series Memory=max(value) on TimeGenerated from startTime to endTime step minPeriod;",
                          "size": 1,
                          "aggregation": 5,
                          "showAnnotations": true,
                          "title": "Memory consumed by {moduleName}",
                          "timeBrushParameterName": "timeRange",
                          "timeBrushExportOnlyWhenBrushed": true,
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "areachart",
                          "chartSettings": {
                            "seriesLabelSettings": [
                              {
                                "seriesName": "value",
                                "label": "Memory"
                              }
                            ],
                            "xSettings": {},
                            "ySettings": {
                              "numberFormatSettings": {
                                "unit": 2,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": true,
                                  "maximumFractionDigits": 1
                                }
                              }
                            }
                          }
                        },
                        "name": "module-memory-query",
                        "styleSettings": {
                          "margin": "-20px 0px 0px -10px"
                        }
                      }
                    ]
                  },
                  "customWidth": "50",
                  "conditionalVisibility": {
                    "parameterName": "moduleName",
                    "comparison": "isNotEqualTo"
                  },
                  "name": "module-docker-metrics-group",
                  "styleSettings": {
                    "margin": "-20px 0px"
                  }
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let deviceid = '{SelectedDevice}';\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nlet minPeriod = time(\"{samplingFrequency}\");\nInsightsMetrics\n| where TimeGenerated between ((startTime - minPeriod) .. endTime)\n| where Name == \"edgeAgent_module_start_total\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == deviceid\n| extend module = tostring(dimensions.module_name)\n| extend mversion = tostring(dimensions.module_version)\n| where mversion == \"1.0\" or module == \"edgeHub\"\n| extend instance = tostring(dimensions.instance_number)\n| extend value = toint(Val)\n| order by module, TimeGenerated\n| serialize\n| extend nextValue = next(value, 1)\n| extend nextInstance = next(instance, 1)\n| extend nextmodule = next(module, 1)\n| project TimeGenerated, device, instance, nextInstance, module, nextmodule, value, nextValue\n| extend diff = iff((instance != nextInstance and module == nextmodule), 1, iff((instance == nextInstance and module == nextmodule), (value - nextValue), 0))\n| make-series Count=sum(diff) on TimeGenerated in range(startTime, endTime, minPeriod) by module\n\n",
                          "size": 1,
                          "title": "Module restart timeline",
                          "timeBrushParameterName": "timeRange",
                          "timeBrushExportOnlyWhenBrushed": true,
                          "exportFieldName": "module",
                          "exportParameterName": "moduleName",
                          "queryType": 0,
                          "resourceType": "{ResourceType}",
                          "crossComponentResources": [
                            "{IoTResources}"
                          ],
                          "visualization": "barchart",
                          "sortBy": [],
                          "graphSettings": {
                            "type": 2,
                            "topContent": {
                              "columnMatch": "restartText",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "regex",
                                    "thresholdValue": "(^\\d)",
                                    "representation": "2",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "success",
                                    "text": ""
                                  }
                                ]
                              },
                              "tooltipFormat": {
                                "tooltip": "# of module restarts. Green check = No restarts (in selected timerange)."
                              }
                            },
                            "centerContent": {
                              "columnMatch": "module",
                              "formatter": 1
                            },
                            "bottomContent": {
                              "columnMatch": "uptime",
                              "numberFormat": {
                                "unit": 1,
                                "options": {
                                  "style": "decimal",
                                  "useGrouping": false,
                                  "maximumFractionDigits": 2
                                }
                              }
                            },
                            "nodeIdField": "module",
                            "graphOrientation": 3,
                            "showOrientationToggles": false,
                            "nodeSize": null,
                            "staticNodeSize": 100,
                            "colorSettings": {
                              "nodeColorField": "uptime",
                              "type": 4,
                              "heatmapPalette": "redGreen",
                              "heatmapMin": 0,
                              "heatmapMax": 100
                            },
                            "hivesMargin": 2
                          }
                        },
                        "conditionalVisibilities": [
                          {
                            "parameterName": "SelectedDevice",
                            "comparison": "isNotEqualTo",
                            "value": "default"
                          },
                          {
                            "parameterName": "module-tab",
                            "comparison": "isEqualTo",
                            "value": "availability"
                          },
                          {
                            "parameterName": "ShowPane",
                            "comparison": "isEqualTo",
                            "value": "modules"
                          },
                          {
                            "parameterName": "moduleName",
                            "comparison": "isEqualTo"
                          }
                        ],
                        "name": "module-restart-timeline",
                        "styleSettings": {
                          "margin": "0px 0px"
                        }
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "items": [
                            {
                              "type": 1,
                              "content": {
                                "json": ""
                              },
                              "customWidth": "20",
                              "name": "module-restart-group-spacer"
                            },
                            {
                              "type": 1,
                              "content": {
                                "json": "<br>\n💡 **Select a cell on the left to view module CPU/Memory use**"
                              },
                              "customWidth": "80",
                              "name": "tip - view module cpu and memory"
                            }
                          ]
                        },
                        "name": "info-tip-group"
                      }
                    ]
                  },
                  "customWidth": "50",
                  "conditionalVisibilities": [
                    {
                      "parameterName": "module-tab",
                      "comparison": "isEqualTo",
                      "value": "availability"
                    },
                    {
                      "parameterName": "moduleName",
                      "comparison": "isEqualTo",
                      "value": ""
                    }
                  ],
                  "name": "module-restart-group"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let minPeriod = time(\"{samplingFrequency}\");\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nInsightsMetrics\n| where TimeGenerated between ((startTime - minPeriod) .. endTime)\n| where Name == \"edgeAgent_used_cpu_percent\"\n| extend dimensions=parse_json(Tags)\n| extend quantile = tostring(dimensions.quantile)\n| where quantile == \"0.9\"\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend module = tostring(dimensions.module_name)\n| where module != \"host\"  \n| extend value = todouble(Val)\n| order by TimeGenerated, module, value\n| make-series CPU=max(value) on TimeGenerated from startTime to endTime step minPeriod by module;",
                    "size": 1,
                    "aggregation": 5,
                    "title": "CPU usage (P90, system level)",
                    "timeBrushParameterName": "timeRange",
                    "timeBrushExportOnlyWhenBrushed": true,
                    "exportFieldName": "module",
                    "exportParameterName": "moduleName",
                    "queryType": 0,
                    "resourceType": "{ResourceType}",
                    "crossComponentResources": [
                      "{IoTResources}"
                    ],
                    "visualization": "areachart",
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "formatter": 1,
                        "formatOptions": {},
                        "numberFormat": {
                          "unit": 1,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "centerContent": {
                        "columnMatch": "module",
                        "formatter": 1,
                        "formatOptions": {}
                      },
                      "bottomContent": {
                        "columnMatch": "uptime",
                        "formatOptions": {},
                        "numberFormat": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": false,
                            "maximumFractionDigits": 2
                          }
                        }
                      },
                      "nodeIdField": "module",
                      "nodeSize": null,
                      "staticNodeSize": 100,
                      "colorSettings": {
                        "nodeColorField": "uptime",
                        "type": 4,
                        "heatmapPalette": "redGreen",
                        "heatmapMin": 0,
                        "heatmapMax": 100
                      },
                      "hivesMargin": 2
                    },
                    "chartSettings": {
                      "xSettings": {},
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true,
                            "minimumFractionDigits": 1,
                            "maximumFractionDigits": 1
                          }
                        }
                      }
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "module-tab",
                    "comparison": "isEqualTo",
                    "value": "resources"
                  },
                  "name": "all-modules-cpu"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let minPeriod = time(\"{samplingFrequency}\");\nlet startTime = {timeRange:start};\nlet endTime = {timeRange:end};\nInsightsMetrics\n| where TimeGenerated between ((startTime - minPeriod) .. endTime)\n| where Name == \"edgeAgent_used_memory_bytes\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend module = tostring(dimensions.module_name)\n| where module != \"host\"  \n| extend value = tolong(Val)\n| order by TimeGenerated, module, value\n| make-series Memory=max(value) on TimeGenerated from startTime to endTime step minPeriod by module;",
                    "size": 1,
                    "aggregation": 5,
                    "title": "Memory usage",
                    "timeBrushParameterName": "timeRange",
                    "timeBrushExportOnlyWhenBrushed": true,
                    "exportFieldName": "module",
                    "exportParameterName": "moduleName",
                    "queryType": 0,
                    "resourceType": "{ResourceType}",
                    "crossComponentResources": [
                      "{IoTResources}"
                    ],
                    "visualization": "areachart",
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "formatter": 1,
                        "formatOptions": {},
                        "numberFormat": {
                          "unit": 1,
                          "options": {
                            "style": "decimal"
                          }
                        }
                      },
                      "centerContent": {
                        "columnMatch": "module",
                        "formatter": 1,
                        "formatOptions": {}
                      },
                      "bottomContent": {
                        "columnMatch": "uptime",
                        "formatOptions": {},
                        "numberFormat": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": false,
                            "maximumFractionDigits": 2
                          }
                        }
                      },
                      "nodeIdField": "module",
                      "nodeSize": null,
                      "staticNodeSize": 100,
                      "colorSettings": {
                        "nodeColorField": "uptime",
                        "type": 4,
                        "heatmapPalette": "redGreen",
                        "heatmapMin": 0,
                        "heatmapMax": 100
                      },
                      "hivesMargin": 2
                    },
                    "chartSettings": {
                      "xSettings": {},
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 2,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true,
                            "minimumFractionDigits": 1,
                            "maximumFractionDigits": 1
                          }
                        }
                      }
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "module-tab",
                    "comparison": "isEqualTo",
                    "value": "resources"
                  },
                  "name": "all-modules-mem"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "SelectedDevice",
                "comparison": "isNotEqualTo",
                "value": "default"
              },
              {
                "parameterName": "ShowPane",
                "comparison": "isEqualTo",
                "value": "modules"
              }
            ],
            "name": "modules-detail-view",
            "styleSettings": {
              "margin": "-34px 0px 0px 0px"
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "6f151e5e-2145-4aca-be0f-0fc5a03173a5",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostInfoOstype",
                        "type": 1,
                        "query": "InsightsMetrics \n| where TimeGenerated > {timeRange:start}\n| where Name contains \"metadata\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend host_info=tostring(dimensions.host_information)\n| summarize max(TimeGenerated) by host_info\n| extend host_info_=replace(@'\\\\', @'', host_info)\n| extend host_info_json=parse_json(host_info_)\n| extend ostype=tostring(host_info_json.OperatingSystemType)\n| top 1 by max_TimeGenerated desc\n| project ostype\n\n",
                        "crossComponentResources": [
                          "{IoTResources}"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "timeRange",
                        "queryType": 0,
                        "resourceType": "{ResourceType}"
                      },
                      {
                        "id": "40816037-a930-45c3-8795-54546064fa00",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostInfoArch",
                        "type": 1,
                        "query": "InsightsMetrics \n| where TimeGenerated > {timeRange:start}\n| where Name contains \"metadata\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend host_info=tostring(dimensions.host_information)\n| summarize max(TimeGenerated) by host_info\n| extend host_info_=replace(@'\\\\', @'', host_info)\n| extend host_info_json=parse_json(host_info_)\n| extend arch=tostring(host_info_json.Architecture)\n| top 1 by max_TimeGenerated desc\n| project arch\n\n\n",
                        "crossComponentResources": [
                          "{IoTResources}"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "timeRange",
                        "queryType": 0,
                        "resourceType": "{ResourceType}"
                      },
                      {
                        "id": "48d76d20-988a-45ed-94f7-afe0bf22cbdd",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostInfoOs",
                        "type": 1,
                        "query": "InsightsMetrics \n| where TimeGenerated > {timeRange:start}\n| where Name contains \"metadata\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend host_info=tostring(dimensions.host_information)\n| summarize max(TimeGenerated) by host_info\n| extend host_info_=replace(@'\\\\', @'', host_info)\n| extend host_info_json=parse_json(host_info_)\n| extend os=tostring(host_info_json.OperatingSystem)\n| top 1 by max_TimeGenerated desc\n| project os\n",
                        "crossComponentResources": [
                          "{IoTResources}"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "timeRange",
                        "queryType": 0,
                        "resourceType": "{ResourceType}"
                      },
                      {
                        "id": "9a90cad7-b0cc-4664-8007-b4bdf300ee7b",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostInfoEdgedVer",
                        "type": 1,
                        "query": "InsightsMetrics \n| where TimeGenerated > {timeRange:start}\n| where Name contains \"metadata\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend host_info=tostring(dimensions.host_information)\n| summarize max(TimeGenerated) by host_info\n| extend host_info_=replace(@'\\\\', @'', host_info)\n| extend host_info_json=parse_json(host_info_)\n| extend edgedver=tostring(host_info_json.Version)\n| extend edgedver = trim_end(@\"[ ](.*)\",edgedver)\n| top 1 by max_TimeGenerated desc\n| project edgedver\n",
                        "crossComponentResources": [
                          "{IoTResources}"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "timeRange",
                        "queryType": 0,
                        "resourceType": "{ResourceType}"
                      },
                      {
                        "id": "d06448f9-43de-475f-be29-f1eefd0e2cad",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostInfoDockerVer",
                        "type": 1,
                        "query": "InsightsMetrics \n| where TimeGenerated > {timeRange:start}\n| where Name contains \"metadata\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend host_info=tostring(dimensions.host_information)\n| summarize max(TimeGenerated) by host_info\n| extend host_info_=replace(@'\\\\', @'', host_info)\n| extend host_info_json=parse_json(host_info_)\n| extend dockerver=tostring(host_info_json.ServerVersion)\n| top 1 by max_TimeGenerated desc\n| project dockerver\n",
                        "crossComponentResources": [
                          "{IoTResources}"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "timeRange",
                        "queryType": 0,
                        "resourceType": "{ResourceType}"
                      },
                      {
                        "id": "0fe3225b-f2e0-4e1b-b87a-646149c5993d",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostInfoNumCpus",
                        "type": 1,
                        "query": "InsightsMetrics \n| where TimeGenerated > {timeRange:start}\n| where Name contains \"metadata\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend host_info=tostring(dimensions.host_information)\n| summarize max(TimeGenerated) by host_info\n| extend host_info_=replace(@'\\\\', @'', host_info)\n| extend host_info_json=parse_json(host_info_)\n| extend numcpu=tostring(host_info_json.NumCpus)\n| top 1 by max_TimeGenerated desc\n| project numcpu\n",
                        "crossComponentResources": [
                          "{IoTResources}"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "timeRange",
                        "queryType": 0,
                        "resourceType": "{ResourceType}"
                      },
                      {
                        "id": "adec60f0-4364-42ee-a1b5-21bfa71da855",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostInfoMemoryBytes",
                        "type": 1,
                        "query": "InsightsMetrics\n| where TimeGenerated > {timeRange:start}\n    and Name == \"edgeAgent_total_memory_bytes\"\n    and Tags matches regex \"edge_device.:.{SelectedDevice}.,\"\n    and Tags contains \"host\"\n| summarize max(Val);",
                        "crossComponentResources": [
                          "{IoTResources}"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "timeRange",
                        "queryType": 0,
                        "resourceType": "{ResourceType}"
                      },
                      {
                        "id": "adec60f0-4364-42ee-a1b5-21bfa71da855",
                        "version": "KqlParameterItem/1.0",
                        "name": "hostInfoMemoryBytesFormatted",
                        "type": 1,
                        "query": "InsightsMetrics\n| where TimeGenerated > {timeRange:start}\n    and Name == \"edgeAgent_total_memory_bytes\"\n    and Tags matches regex \"edge_device.:.{SelectedDevice}.,\"\n    and Tags contains \"host\"\n| summarize format_bytes(max(Val), 1);",
                        "crossComponentResources": [
                          "{IoTResources}"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "timeRange",
                        "queryType": 0,
                        "resourceType": "{ResourceType}"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "{ResourceType}"
                  },
                  "name": "host-info-params"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "**OS info<br>**\n{hostInfoOs}<br>\n{hostInfoOstype} {hostInfoArch}<br>\n\n**IoT Edge daemon version<br>**\n{hostInfoEdgedVer}<br>\n\n**Docker daemon version<br>**\n{hostInfoDockerVer}<br>\n\n<table style=\"border:none\">\n<tr style=\"border:none\">\n<th style=\"border:none;padding:0px\"># CPUs</th>\n<th style=\"border:none\">Memory</th>\n</tr>\n<tr style=\"border:none\">\n<td style=\"border:none;background:none\">{hostInfoNumCpus}</td>\n<td style=\"border:none;background:none\">{hostInfoMemoryBytesFormatted}</td>\n</tr>\n</table>\n"
                  },
                  "customWidth": "20",
                  "conditionalVisibility": {
                    "parameterName": "ShowPane",
                    "comparison": "isEqualTo",
                    "value": "host"
                  },
                  "name": "host-os-information",
                  "styleSettings": {
                    "margin": "-20px 0px 0px 0px",
                    "padding": "0px 0px 0px 12px"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let startTime = startofday({timeRange:start});\nInsightsMetrics\n| where TimeGenerated > startTime\n| where Name == \"edgeAgent_iotedged_uptime_seconds\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| project TimeGenerated, Val, Name=\"IoT Edge daemon\"\n| union (\n     InsightsMetrics \n     | where TimeGenerated > startTime\n     | where Name == \"edgeAgent_host_uptime_seconds\"\n     | extend dimensions=parse_json(Tags)\n     | extend device = tostring(dimensions.edge_device)\n     | where device == '{SelectedDevice}'\n     | project TimeGenerated, Val, Name=\"Host\")\n| summarize arg_max(TimeGenerated, Val) by Name\n",
                    "size": 1,
                    "aggregation": 2,
                    "title": "Uptime",
                    "queryType": 0,
                    "resourceType": "{ResourceType}",
                    "crossComponentResources": [
                      "{IoTResources}"
                    ],
                    "visualization": "tiles",
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Name",
                        "formatter": 1,
                        "formatOptions": {}
                      },
                      "leftContent": {
                        "columnMatch": "Val",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "numberFormat": {
                          "unit": 24,
                          "options": {
                            "style": "decimal",
                            "useGrouping": false,
                            "maximumFractionDigits": 2,
                            "maximumSignificantDigits": 3
                          }
                        }
                      },
                      "showBorder": false
                    },
                    "chartSettings": {
                      "xAxis": "TimeGenerated",
                      "seriesLabelSettings": [
                        {
                          "seriesName": "value",
                          "label": "Memory used"
                        }
                      ],
                      "xSettings": {},
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 2,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true,
                            "maximumFractionDigits": 2
                          }
                        }
                      }
                    }
                  },
                  "customWidth": "20",
                  "conditionalVisibility": {
                    "parameterName": "ShowPane",
                    "comparison": "isEqualTo",
                    "value": "host"
                  },
                  "name": "host-uptime",
                  "styleSettings": {
                    "margin": "-30px 0px -40px"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let minPeriod = time(\"{samplingFrequency}\");\nlet startTime = {timeRange:start} - minPeriod;\nlet endTime = {timeRange:end};\nInsightsMetrics\n| where TimeGenerated between (startTime .. endTime)\n| where Name == \"edgeAgent_used_cpu_percent\" and Tags contains \"host\"\n| extend dimensions=parse_json(Tags)\n| extend quantile = tostring(dimensions.quantile)\n| where quantile == \"0.9\"\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend value = round(toint(Val),2)\n| make-series CPU=max(value) on TimeGenerated from startTime to endTime step minPeriod;",
                    "size": 1,
                    "aggregation": 3,
                    "title": "CPU utilization (P90)",
                    "timeBrushParameterName": "timeRange",
                    "timeBrushExportOnlyWhenBrushed": true,
                    "queryType": 0,
                    "resourceType": "{ResourceType}",
                    "crossComponentResources": [
                      "{IoTResources}"
                    ],
                    "visualization": "areachart",
                    "tileSettings": {
                      "showBorder": false
                    },
                    "graphSettings": {
                      "type": 0
                    },
                    "chartSettings": {
                      "xAxis": "TimeGenerated",
                      "seriesLabelSettings": [
                        {
                          "seriesName": "value",
                          "label": "CPU %"
                        }
                      ],
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true,
                            "maximumFractionDigits": 2
                          }
                        },
                        "min": 0,
                        "max": 100
                      }
                    }
                  },
                  "customWidth": "60",
                  "conditionalVisibility": {
                    "parameterName": "ShowPane",
                    "comparison": "isEqualTo",
                    "value": "host"
                  },
                  "name": "host-cpu-query",
                  "styleSettings": {
                    "margin": "-30px 0px -20px"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let minPeriod = time(\"{samplingFrequency}\");\nlet startTime = {timeRange:start} - minPeriod;\nlet endTime = {timeRange:end};\nInsightsMetrics\n| where TimeGenerated between (startTime .. endTime)\n| where Name == \"edgeAgent_available_disk_space_bytes\" or Name == \"edgeAgent_total_disk_space_bytes\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend value = tolong(Val)\n| extend diskname = tostring(dimensions.disk_name)\n| extend diskfs = tostring(dimensions.disk_filesystem)\n| where diskfs != \"overlay\"\n| order by TimeGenerated, diskname, Name asc\n| summarize values = make_list(value) by TimeGenerated, diskname\n| extend value = (toreal(values[1]) - toreal(values[0])) / toreal(values[1]) * 100.0\n| make-series Disk=max(value) on TimeGenerated from startTime to endTime step minPeriod by diskname;",
                    "size": 1,
                    "aggregation": 5,
                    "title": "Disk space usage (%)",
                    "timeBrushParameterName": "timeRange",
                    "timeBrushExportOnlyWhenBrushed": true,
                    "queryType": 0,
                    "resourceType": "{ResourceType}",
                    "crossComponentResources": [
                      "{IoTResources}"
                    ],
                    "visualization": "linechart",
                    "chartSettings": {
                      "xAxis": "TimeGenerated",
                      "seriesLabelSettings": [
                        {
                          "seriesName": "value",
                          "label": "% disk usage"
                        }
                      ],
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true,
                            "maximumFractionDigits": 2
                          }
                        },
                        "min": 0,
                        "max": 100
                      }
                    }
                  },
                  "customWidth": "40",
                  "conditionalVisibility": {
                    "parameterName": "ShowPane",
                    "comparison": "isEqualTo",
                    "value": "host"
                  },
                  "name": "host-disk-query",
                  "styleSettings": {
                    "margin": "-18px 0px -18px 0px"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let minPeriod = time(\"{samplingFrequency}\");\nlet startTime = {timeRange:start} - minPeriod;\nlet endTime = {timeRange:end};\nInsightsMetrics\n| where TimeGenerated between (startTime .. endTime)\n| where Name == \"edgeAgent_used_memory_bytes\" and Tags contains \"host\"\n| extend dimensions=parse_json(Tags)\n| extend device = tostring(dimensions.edge_device)\n| where device == '{SelectedDevice}'\n| extend value = tolong(Val)\n| make-series Memory=max(value) on TimeGenerated from startTime to endTime step minPeriod;\n",
                    "size": 1,
                    "aggregation": 2,
                    "title": "Memory usage",
                    "timeBrushParameterName": "timeRange",
                    "timeBrushExportOnlyWhenBrushed": true,
                    "queryType": 0,
                    "resourceType": "{ResourceType}",
                    "crossComponentResources": [
                      "{IoTResources}"
                    ],
                    "visualization": "areachart",
                    "chartSettings": {
                      "xAxis": "TimeGenerated",
                      "seriesLabelSettings": [
                        {
                          "seriesName": "value",
                          "label": "Memory used"
                        }
                      ],
                      "customThresholdLine": "{hostInfoMemoryBytes}",
                      "customThresholdLineStyle": 4,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 2,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true,
                            "maximumFractionDigits": 2
                          }
                        },
                        "min": 0
                      }
                    }
                  },
                  "customWidth": "60",
                  "conditionalVisibility": {
                    "parameterName": "ShowPane",
                    "comparison": "isEqualTo",
                    "value": "host"
                  },
                  "name": "host-mem-query",
                  "styleSettings": {
                    "margin": "-18px 0px"
                  }
                }
              ]
            },
            "name": "host-details-view"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "InsightsMetricsExist",
        "comparison": "isEqualTo",
        "value": "yes"
      },
      "name": "devicedetails-group",
      "styleSettings": {
        "margin": "-10px 0px -15px 0px",
        "padding": "8px 0px -15px 0px",
        "showBorder": true
      }
    }
  ],
  "fallbackResourceIds": [],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
